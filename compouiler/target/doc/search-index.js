var searchIndex = JSON.parse('{\
"adler":{"doc":"Adler-32 checksum implementation.","t":"DFLLLLLLLLLLLLLLLL","n":["Adler32","adler32_slice","borrow","borrow_mut","checksum","clone","default","finish","fmt","from","from_checksum","into","new","try_from","try_into","type_id","write","write_slice"],"q":["adler","","","","","","","","","","","","","","","","",""],"d":["Adler-32 checksum calculator.","Calculates the Adler-32 checksum of a byte slice.","","","Returns the calculated checksum at this point in time.","","","","","Returns the argument unchanged.","Creates an <code>Adler32</code> instance from a precomputed Adler-32 …","Calls <code>U::from(self)</code>.","Creates a new Adler-32 instance with default state.","","","","","Adds <code>bytes</code> to the checksum calculation."],"i":[0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],"f":[0,[[],1],[[]],[[]],[2,1],[2,2],[[],2],[2,3],[[2,4],5],[[]],[1,2],[[]],[[],2],[[],6],[[],6],[[],7],[2],[2]],"p":[[15,"u32"],[3,"Adler32"],[15,"u64"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"]]},\
"ahash":{"doc":"AHash is a high performance keyed hash function.","t":"DCLLLLLLLLLALLLLLLLLLLLIDLLLLLLLKLLLLFLLLLLL","n":["AHasher","RandomState","borrow","borrow_mut","clone","clone_into","default","finish","fmt","from","into","random_state","to_owned","try_from","try_into","type_id","write","write_u128","write_u16","write_u32","write_u64","write_u8","write_usize","RandomSource","RandomState","borrow","borrow_mut","build_hasher","clone","clone_into","fmt","from","gen_hasher_seed","generate_with","hash_one","into","new","set_random_source","to_owned","try_from","try_into","type_id","with_seed","with_seeds"],"q":["ahash","","","","","","","","","","","","","","","","","","","","","","","ahash::random_state","","","","","","","","","","","","","","","","","","","",""],"d":["A <code>Hasher</code> for hashing an arbitrary stream of bytes.","","","","","","Constructs a new AHasher with fixed keys. If <code>std</code> is …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","A supplier of Randomness used for different hashers. See …","Provides a Hasher factory. This is typically used (e.g. by …","","","Constructs a new AHasher with keys based on this …","","","","Returns the argument unchanged.","","Create a new <code>RandomState</code> <code>BuildHasher</code> based on the provided …","Calculates the hash of a single value. This provides a …","Calls <code>U::from(self)</code>.","Create a new <code>RandomState</code> <code>BuildHasher</code> using random keys.","Provides an optional way to manually supply a source of …","","","","","Build a <code>RandomState</code> from a single key. The provided key …","Allows for explicitly setting the seeds to used. All …"],"i":[0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,12,12,12,12,12,12,12,14,12,12,12,12,0,12,12,12,12,12,12],"f":[0,0,[[]],[[]],[1,1],[[]],[[],1],[1,2],[[1,3],4],[[]],[[]],0,[[]],[[],5],[[],5],[[],6],[1],[[1,7]],[[1,8]],[[1,9]],[[1,2]],[[1,10]],[[1,11]],0,0,[[]],[[]],[12,1],[12,12],[[]],[[12,3],4],[[]],[[],11],[[2,2,2,2],12],[[12,13],2],[[]],[[],12],[[[0,[14,15,16]]],[[5,[17]]]],[[]],[[],5],[[],5],[[],6],[11,12],[[2,2,2,2],12]],"p":[[3,"AHasher"],[15,"u64"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"],[15,"u128"],[15,"u16"],[15,"u32"],[15,"u8"],[15,"usize"],[3,"RandomState"],[8,"Hash"],[8,"RandomSource"],[8,"Send"],[8,"Sync"],[15,"bool"]]},\
"bitflags":{"doc":"A typesafe bitmask flag generator useful for sets of …","t":"O","n":["bitflags"],"q":["bitflags"],"d":["The macro used to generate the flag structures."],"i":[0],"f":[0],"p":[]},\
"bytemuck":{"doc":"This crate gives small utilities for casting between plain …","t":"NICIQSSINIEINNIIIALLFFFFFFFALLLLLLFFLLLLLLOOLLLLLLLLLLFFFLLFFFFFLFFLFLLLLLLLLLLLLLIFFFFFFFLLLLFFFFFFFFFFFLLLLFFFQIENNLLFFFFFLLLLLLLFFLLKFLLFFFFFLFFLFL","n":["AlignmentMismatch","AnyBitPattern","CheckedBitPattern","Contiguous","Int","MAX_VALUE","MIN_VALUE","NoUninit","OutputSliceWouldHaveSlop","Pod","PodCastError","PodInOption","SizeMismatch","TargetAlignmentGreaterAndInputNotAligned","TransparentWrapper","Zeroable","ZeroableInOption","allocation","borrow","borrow_mut","bytes_of","bytes_of_mut","cast","cast_mut","cast_ref","cast_slice","cast_slice_mut","checked","clone","clone_into","eq","fmt","fmt","from","from_bytes","from_bytes_mut","from_integer","from_integer","hash","into","into_integer","into_integer","offset_of","offset_of","peel","peel","peel_mut","peel_mut","peel_ref","peel_ref","peel_slice","peel_slice","peel_slice_mut","peel_slice_mut","pod_align_to","pod_align_to_mut","pod_read_unaligned","to_owned","to_string","try_cast","try_cast_mut","try_cast_ref","try_cast_slice","try_cast_slice_mut","try_from","try_from_bytes","try_from_bytes_mut","try_into","try_pod_read_unaligned","type_id","wrap","wrap","wrap_mut","wrap_mut","wrap_ref","wrap_ref","wrap_slice","wrap_slice","wrap_slice_mut","wrap_slice_mut","zeroed","zeroed","TransparentWrapperAlloc","cast_arc","cast_box","cast_rc","cast_slice_arc","cast_slice_box","cast_slice_rc","cast_vec","peel_arc","peel_box","peel_rc","peel_vec","pod_collect_to_vec","try_cast_arc","try_cast_box","try_cast_rc","try_cast_slice_arc","try_cast_slice_box","try_cast_slice_rc","try_cast_vec","try_zeroed_box","try_zeroed_slice_box","try_zeroed_vec","wrap_arc","wrap_box","wrap_rc","wrap_vec","zeroed_box","zeroed_slice_box","zeroed_vec","Bits","CheckedBitPattern","CheckedCastError","InvalidBitPattern","PodCastError","borrow","borrow_mut","cast","cast_mut","cast_ref","cast_slice","cast_slice_mut","clone","clone_into","eq","fmt","fmt","from","from","from_bytes","from_bytes_mut","hash","into","is_valid_bit_pattern","pod_read_unaligned","to_owned","to_string","try_cast","try_cast_mut","try_cast_ref","try_cast_slice","try_cast_slice_mut","try_from","try_from_bytes","try_from_bytes_mut","try_into","try_pod_read_unaligned","type_id"],"q":["bytemuck","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bytemuck::allocation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bytemuck::checked","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["For this type of cast the alignments must be exactly the …","Marker trait for “plain old data” types that are valid …","","A trait indicating that:","The primitive integer type with an identical …","The upper <em>inclusive</em> bound for valid instances of this type.","The lower <em>inclusive</em> bound for valid instances of this type.","Marker trait for “plain old data” types with no uninit …","If the element size changes then the output slice changes …","Marker trait for “plain old data”.","The things that can go wrong when casting between <code>Pod</code> data …","Trait for types which are Pod when wrapped in Option.","When casting a slice you can’t convert between ZST …","You tried to cast a slice to an element type with a higher …","A trait which indicates that a type is a …","Trait for types that can be safely created with <code>zeroed</code>.","Trait for types which are Zeroable when wrapped in Option.","Stuff to boost things in the <code>alloc</code> crate.","","","Re-interprets <code>&amp;T</code> as <code>&amp;[u8]</code>.","Re-interprets <code>&amp;mut T</code> as <code>&amp;mut [u8]</code>.","Cast <code>T</code> into <code>U</code>","Cast <code>&amp;mut T</code> into <code>&amp;mut U</code>.","Cast <code>&amp;T</code> into <code>&amp;U</code>.","Cast <code>&amp;[A]</code> into <code>&amp;[B]</code>.","Cast <code>&amp;mut [T]</code> into <code>&amp;mut [U]</code>.","Checked versions of the casting functions exposed in crate …","","","","","","Returns the argument unchanged.","Re-interprets <code>&amp;[u8]</code> as <code>&amp;T</code>.","Re-interprets <code>&amp;mut [u8]</code> as <code>&amp;mut T</code>.","If <code>value</code> is within the range for valid instances of this …","If <code>value</code> is within the range for valid instances of this …","","Calls <code>U::from(self)</code>.","Perform the conversion from <code>C</code> into the underlying integral …","Perform the conversion from <code>C</code> into the underlying integral …","Find the offset in bytes of the given <code>$field</code> of <code>$Type</code>. …","Find the offset in bytes of the given <code>$field</code> of <code>$Type</code>. …","Convert the wrapper type into the inner type.","Convert the wrapper type into the inner type.","Convert a mutable reference to the wrapper type into a …","Convert a mutable reference to the wrapper type into a …","Convert a reference to the wrapper type into a reference …","Convert a reference to the wrapper type into a reference …","Convert a slice to the wrapped type into a slice to the …","Convert a slice to the wrapped type into a slice to the …","Convert a mutable slice to the wrapped type into a mutable …","Convert a mutable slice to the wrapped type into a mutable …","As <code>align_to</code>, but safe because of the <code>Pod</code> bound.","As <code>align_to_mut</code>, but safe because of the <code>Pod</code> bound.","Reads the slice into a <code>T</code> value.","","","Try to cast <code>T</code> into <code>U</code>.","Try to convert a <code>&amp;mut T</code> into <code>&amp;mut U</code>.","Try to convert a <code>&amp;T</code> into <code>&amp;U</code>.","Try to convert <code>&amp;[A]</code> into <code>&amp;[B]</code> (possibly with a change in …","Try to convert <code>&amp;mut [A]</code> into <code>&amp;mut [B]</code> (possibly with a …","","Re-interprets <code>&amp;[u8]</code> as <code>&amp;T</code>.","Re-interprets <code>&amp;mut [u8]</code> as <code>&amp;mut T</code>.","","Reads from the bytes as if they were a <code>T</code>.","","Convert the inner type into the wrapper type.","Convert the inner type into the wrapper type.","Convert a mutable reference to the inner type into a …","Convert a mutable reference to the inner type into a …","Convert a reference to the inner type into a reference to …","Convert a reference to the inner type into a reference to …","Convert a slice to the inner type into a slice to the …","Convert a slice to the inner type into a slice to the …","Convert a mutable slice to the inner type into a mutable …","Convert a mutable slice to the inner type into a mutable …","Calls <code>zeroed</code>.","Calls <code>zeroed</code>.","An extension trait for <code>TransparentWrapper</code> and alloc types.","As <code>try_cast_arc</code>, but unwraps for you.","As <code>try_cast_box</code>, but unwraps for you.","As <code>try_cast_rc</code>, but unwraps for you.","As <code>try_cast_slice_arc</code>, but unwraps for you.","As <code>try_cast_slice_box</code>, but unwraps for you.","As <code>try_cast_slice_rc</code>, but unwraps for you.","As <code>try_cast_vec</code>, but unwraps for you.","Convert an <code>Arc</code> to the wrapper type into an <code>Arc</code> to the …","Convert a box to the wrapper type into a box to the inner …","Convert an <code>Rc</code> to the wrapper type into an <code>Rc</code> to the inner …","Convert a vec of the wrapper type into a vec of the inner …","This “collects” a slice of pod data into a vec of a …","Attempts to cast the content type of a <code>Arc</code>.","Attempts to cast the content type of a <code>Box</code>.","Attempts to cast the content type of a <code>Rc</code>.","Attempts to cast the content type of a <code>Arc&lt;[T]&gt;</code>.","Attempts to cast the content type of a <code>Box&lt;[T]&gt;</code>.","Attempts to cast the content type of a <code>Rc&lt;[T]&gt;</code>.","Attempts to cast the content type of a <code>Vec</code>.","Allocates a <code>Box&lt;T&gt;</code> with all of the contents being zeroed …","Allocates a <code>Box&lt;[T]&gt;</code> with all contents being zeroed out.","Allocates a <code>Vec&lt;T&gt;</code> of length and capacity exactly equal to …","Convert an <code>Arc</code> to the inner type into an <code>Arc</code> to the …","Convert a box to the inner type into a box to the wrapper …","Convert an <code>Rc</code> to the inner type into an <code>Rc</code> to the wrapper …","Convert a vec of the inner type into a vec of the wrapper …","As <code>try_zeroed_box</code>, but unwraps for you.","As <code>try_zeroed_slice_box</code>, but unwraps for you.","As <code>try_zeroed_vec</code> but unwraps for you","<code>Self</code> <em>must</em> have the same layout as the specified <code>Bits</code> …","A marker trait that allows types that have some invalid …","The things that can go wrong when casting between …","When casting to a <code>CheckedBitPattern</code> type, it is possible …","An error occurred during a true-<code>Pod</code> cast","","","Cast <code>T</code> into <code>U</code>","Cast <code>&amp;mut T</code> into <code>&amp;mut U</code>.","Cast <code>&amp;T</code> into <code>&amp;U</code>.","Cast <code>&amp;[A]</code> into <code>&amp;[B]</code>.","Cast <code>&amp;mut [T]</code> into <code>&amp;mut [U]</code>.","","","","","","","Returns the argument unchanged.","Re-interprets <code>&amp;[u8]</code> as <code>&amp;T</code>.","Re-interprets <code>&amp;mut [u8]</code> as <code>&amp;mut T</code>.","","Calls <code>U::from(self)</code>.","If this function returns true, then it must be valid to …","Reads the slice into a <code>T</code> value.","","","Try to cast <code>T</code> into <code>U</code>.","Try to convert a <code>&amp;mut T</code> into <code>&amp;mut U</code>.","Try to convert a <code>&amp;T</code> into <code>&amp;U</code>.","Try to convert <code>&amp;[A]</code> into <code>&amp;[B]</code> (possibly with a change in …","Try to convert <code>&amp;mut [A]</code> into <code>&amp;mut [B]</code> (possibly with a …","","Re-interprets <code>&amp;[u8]</code> as <code>&amp;T</code>.","Re-interprets <code>&amp;mut [u8]</code> as <code>&amp;mut T</code>.","","Reads from the bytes as if they were a <code>T</code>.",""],"i":[3,0,0,0,19,19,19,0,3,0,0,0,3,3,0,0,0,0,3,3,0,0,0,0,0,0,0,0,3,3,3,3,3,3,0,0,19,19,3,3,19,19,0,0,20,20,20,20,20,20,20,20,20,20,0,0,0,3,3,0,0,0,0,0,3,0,0,3,0,3,20,20,20,20,20,20,20,20,20,20,15,15,0,0,0,0,0,0,0,0,21,21,21,21,0,0,0,0,0,0,0,0,0,0,0,21,21,21,21,0,0,0,17,0,0,18,18,18,18,0,0,0,0,0,18,18,18,18,18,18,18,0,0,18,18,17,0,18,18,0,0,0,0,0,18,0,0,18,0,18],"fp":[[8,"NoUninit"],[8,"AnyBitPattern"],[4,"PodCastError"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Option"],[3,"String"],[4,"Result"],[3,"TypeId"],[3,"Arc"],[3,"Box"],[3,"Rc"],[3,"Vec"],[8,"Zeroable"],[15,"usize"],[8,"CheckedBitPattern"],[4,"CheckedCastError"],[8,"Contiguous"],[8,"TransparentWrapper"],[8,"TransparentWrapperAlloc"]]},\
"byteorder":{"doc":"This crate provides convenience methods for encoding and …","t":"GEIGEGGIILLLLLLLLLLLLLLLLLLKLLKLLLLLLKLLKLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLKLLLLKLLLLKLLLLLLLKLLLLKLLLLLLLKLLLLKLLLLLLKLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLKLLKLLLLKLLLLLKLLLLKLLLLLKLLLLKLLLLKLLLLKLLLL","n":["BE","BigEndian","ByteOrder","LE","LittleEndian","NativeEndian","NetworkEndian","ReadBytesExt","WriteBytesExt","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","default","default","eq","eq","fmt","fmt","from","from","from_slice_f32","from_slice_f32","from_slice_f32","from_slice_f64","from_slice_f64","from_slice_f64","from_slice_i128","from_slice_i16","from_slice_i32","from_slice_i64","from_slice_u128","from_slice_u128","from_slice_u128","from_slice_u16","from_slice_u16","from_slice_u16","from_slice_u32","from_slice_u32","from_slice_u32","from_slice_u64","from_slice_u64","from_slice_u64","hash","hash","into","into","partial_cmp","partial_cmp","read_f32","read_f32","read_f32","read_f32_into","read_f32_into","read_f32_into","read_f32_into_unchecked","read_f32_into_unchecked","read_f32_into_unchecked","read_f64","read_f64","read_f64","read_f64_into","read_f64_into","read_f64_into","read_f64_into_unchecked","read_f64_into_unchecked","read_f64_into_unchecked","read_i128","read_i128","read_i128","read_i128_into","read_i128_into","read_i128_into","read_i16","read_i16","read_i16","read_i16_into","read_i16_into","read_i16_into","read_i24","read_i24","read_i24","read_i32","read_i32","read_i32","read_i32_into","read_i32_into","read_i32_into","read_i48","read_i48","read_i48","read_i64","read_i64","read_i64","read_i64_into","read_i64_into","read_i64_into","read_i8","read_i8","read_i8_into","read_i8_into","read_int","read_int","read_int","read_int128","read_int128","read_int128","read_u128","read_u128","read_u128","read_u128","read_u128","read_u128_into","read_u128_into","read_u128_into","read_u128_into","read_u128_into","read_u16","read_u16","read_u16","read_u16","read_u16","read_u16_into","read_u16_into","read_u16_into","read_u16_into","read_u16_into","read_u24","read_u24","read_u24","read_u32","read_u32","read_u32","read_u32","read_u32","read_u32_into","read_u32_into","read_u32_into","read_u32_into","read_u32_into","read_u48","read_u48","read_u48","read_u64","read_u64","read_u64","read_u64","read_u64","read_u64_into","read_u64_into","read_u64_into","read_u64_into","read_u64_into","read_u8","read_u8","read_uint","read_uint","read_uint","read_uint","read_uint","read_uint128","read_uint128","read_uint128","read_uint128","read_uint128","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","write_f32","write_f32","write_f32","write_f32_into","write_f64","write_f64","write_f64","write_f64_into","write_i128","write_i128","write_i128","write_i128_into","write_i16","write_i16","write_i16","write_i16_into","write_i24","write_i24","write_i24","write_i32","write_i32","write_i32","write_i32_into","write_i48","write_i48","write_i48","write_i64","write_i64","write_i64","write_i64_into","write_i8","write_i8","write_i8_into","write_int","write_int","write_int","write_int128","write_int128","write_int128","write_u128","write_u128","write_u128","write_u128","write_u128","write_u128_into","write_u128_into","write_u128_into","write_u16","write_u16","write_u16","write_u16","write_u16","write_u16_into","write_u16_into","write_u16_into","write_u24","write_u24","write_u24","write_u32","write_u32","write_u32","write_u32","write_u32","write_u32_into","write_u32_into","write_u32_into","write_u48","write_u48","write_u48","write_u64","write_u64","write_u64","write_u64","write_u64","write_u64_into","write_u64_into","write_u64_into","write_u8","write_u8","write_uint","write_uint","write_uint","write_uint","write_uint","write_uint128","write_uint128","write_uint128","write_uint128","write_uint128"],"q":["byteorderd":["A type alias for <code>BigEndian</code>.","Defines big-endian serialization.","<code>ByteOrder</code> describes types that can serialize integers as …","A type alias for <code>LittleEndian</code>.","Defines little-endian serialization.","Defines system native-endian serialization.","Defines network byte order serialization.","Extends <code>Read</code> with methods for reading numbers. (For <code>std::io</code>…","Extends <code>Write</code> with methods for writing numbers. (For …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Converts the given slice of IEEE754 single-precision (4 …","","","Converts the given slice of IEEE754 double-precision (8 …","","","Converts the given slice of signed 128 bit integers to a …","Converts the given slice of signed 16 bit integers to a …","Converts the given slice of signed 32 bit integers to a …","Converts the given slice of signed 64 bit integers to a …","Converts the given slice of unsigned 128 bit integers to a …","","","Converts the given slice of unsigned 16 bit integers to a …","","","Converts the given slice of unsigned 32 bit integers to a …","","","Converts the given slice of unsigned 64 bit integers to a …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Reads a IEEE754 single-precision (4 bytes) floating point …","Reads a IEEE754 single-precision (4 bytes) floating point …","Reads a IEEE754 single-precision (4 bytes) floating point …","Reads a sequence of IEEE754 single-precision (4 bytes) …","Reads a sequence of IEEE754 single-precision (4 bytes) …","Reads IEEE754 single-precision (4 bytes) floating point …","<strong>DEPRECATED</strong>.","<strong>DEPRECATED</strong>.","<strong>DEPRECATED</strong>.","Reads a IEEE754 double-precision (8 bytes) floating point …","Reads a IEEE754 double-precision (8 bytes) floating point …","Reads a IEEE754 double-precision (8 bytes) floating point …","Reads a sequence of IEEE754 double-precision (8 bytes) …","Reads a sequence of IEEE754 double-precision (8 bytes) …","Reads IEEE754 single-precision (4 bytes) floating point …","<strong>DEPRECATED</strong>.","<strong>DEPRECATED</strong>.","<strong>DEPRECATED</strong>.","Reads a signed 128 bit integer from the underlying reader.","Reads a signed 128 bit integer from the underlying reader.","Reads a signed 128 bit integer from <code>buf</code>.","Reads a sequence of signed 128 bit integers from the …","Reads a sequence of signed 128 bit integers from the …","Reads signed 128 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed 16 bit integer from the underlying reader.","Reads a signed 16 bit integer from the underlying reader.","Reads a signed 16 bit integer from <code>buf</code>.","Reads a sequence of signed 16 bit integers from the …","Reads a sequence of signed 16 bit integers from the …","Reads signed 16 bit integers from <code>src</code> to <code>dst</code>.","Reads a signed 24 bit integer from the underlying reader.","Reads a signed 24 bit integer from the underlying reader.","Reads a signed 24 bit integer from <code>buf</code>, stored in i32.","Reads a signed 32 bit integer from the underlying reader.","Reads a signed 32 bit integer from the underlying reader.","Reads a signed 32 bit integer from <code>buf</code>.","Reads a sequence of signed 32 bit integers from the …","Reads a sequence of signed 32 bit integers from the …","Reads signed 32 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed 48 bit integer from the underlying reader.","Reads a signed 48 bit integer from the underlying reader.","Reads a signed 48 bit integer from <code>buf</code>, stored in i64.","Reads a signed 64 bit integer from the underlying reader.","Reads a signed 64 bit integer from the underlying reader.","Reads a signed 64 bit integer from <code>buf</code>.","Reads a sequence of signed 64 bit integers from the …","Reads a sequence of signed 64 bit integers from the …","Reads signed 64 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed 8 bit integer from the underlying reader.","Reads a signed 8 bit integer from the underlying reader.","Reads a sequence of signed 8 bit integers from the …","Reads a sequence of signed 8 bit integers from the …","Reads a signed n-bytes integer from the underlying reader.","Reads a signed n-bytes integer from the underlying reader.","Reads a signed n-bytes integer from <code>buf</code>.","Reads a signed n-bytes integer from the underlying reader.","Reads a signed n-bytes integer from the underlying reader.","Reads a signed n-bytes integer from <code>buf</code>.","Reads an unsigned 128 bit integer from <code>buf</code>.","Reads an unsigned 128 bit integer from the underlying …","Reads an unsigned 128 bit integer from the underlying …","","","Reads unsigned 128 bit integers from <code>src</code> into <code>dst</code>.","Reads a sequence of unsigned 128 bit integers from the …","Reads a sequence of unsigned 128 bit integers from the …","","","Reads an unsigned 16 bit integer from <code>buf</code>.","Reads an unsigned 16 bit integer from the underlying …","Reads an unsigned 16 bit integer from the underlying …","","","Reads unsigned 16 bit integers from <code>src</code> into <code>dst</code>.","Reads a sequence of unsigned 16 bit integers from the …","Reads a sequence of unsigned 16 bit integers from the …","","","Reads an unsigned 24 bit integer from the underlying …","Reads an unsigned 24 bit integer from the underlying …","Reads an unsigned 24 bit integer from <code>buf</code>, stored in u32.","Reads an unsigned 32 bit integer from <code>buf</code>.","Reads an unsigned 32 bit integer from the underlying …","Reads an unsigned 32 bit integer from the underlying …","","","Reads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","Reads a sequence of unsigned 32 bit integers from the …","Reads a sequence of unsigned 32 bit integers from the …","","","Reads an unsigned 48 bit integer from the underlying …","Reads an unsigned 48 bit integer from the underlying …","Reads an unsigned 48 bit integer from <code>buf</code>, stored in u64.","Reads an unsigned 64 bit integer from <code>buf</code>.","Reads an unsigned 64 bit integer from the underlying …","Reads an unsigned 64 bit integer from the underlying …","","","Reads unsigned 64 bit integers from <code>src</code> into <code>dst</code>.","Reads a sequence of unsigned 64 bit integers from the …","Reads a sequence of unsigned 64 bit integers from the …","","","Reads an unsigned 8 bit integer from the underlying reader.","Reads an unsigned 8 bit integer from the underlying reader.","Reads an unsigned n-bytes integer from <code>buf</code>.","Reads an unsigned n-bytes integer from the underlying …","Reads an unsigned n-bytes integer from the underlying …","","","Reads an unsigned n-bytes integer from <code>buf</code>.","Reads an unsigned n-bytes integer from the underlying …","Reads an unsigned n-bytes integer from the underlying …","","","","","","","","","","","Writes a IEEE754 single-precision (4 bytes) floating point …","Writes a IEEE754 single-precision (4 bytes) floating point …","Writes a IEEE754 single-precision (4 bytes) floating point …","Writes IEEE754 single-precision (4 bytes) floating point …","Writes a IEEE754 double-precision (8 bytes) floating point …","Writes a IEEE754 double-precision (8 bytes) floating point …","Writes a IEEE754 double-precision (8 bytes) floating point …","Writes IEEE754 double-precision (8 bytes) floating point …","Writes a signed 128 bit integer to the underlying writer.","Writes a signed 128 bit integer to the underlying writer.","Writes a signed 128 bit integer <code>n</code> to <code>buf</code>.","Writes signed 128 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 16 bit integer to the underlying writer.","Writes a signed 16 bit integer to the underlying writer.","Writes a signed 16 bit integer <code>n</code> to <code>buf</code>.","Writes signed 16 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 24 bit integer to the underlying writer.","Writes a signed 24 bit integer to the underlying writer.","Writes a signed 24 bit integer <code>n</code> to <code>buf</code>, stored in i32.","Writes a signed 32 bit integer to the underlying writer.","Writes a signed 32 bit integer to the underlying writer.","Writes a signed 32 bit integer <code>n</code> to <code>buf</code>.","Writes signed 32 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 48 bit integer to the underlying writer.","Writes a signed 48 bit integer to the underlying writer.","Writes a signed 48 bit integer <code>n</code> to <code>buf</code>, stored in i64.","Writes a signed 64 bit integer to the underlying writer.","Writes a signed 64 bit integer to the underlying writer.","Writes a signed 64 bit integer <code>n</code> to <code>buf</code>.","Writes signed 64 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 8 bit integer to the underlying writer.","Writes a signed 8 bit integer to the underlying writer.","Writes signed 8 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed n-bytes integer to the underlying writer.","Writes a signed n-bytes integer to the underlying writer.","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes a signed n-bytes integer to the underlying writer.","Writes a signed n-bytes integer to the underlying writer.","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes an unsigned 128 bit integer <code>n</code> to <code>buf</code>.","Writes an unsigned 128 bit integer to the underlying …","Writes an unsigned 128 bit integer to the underlying …","","","Writes unsigned 128 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 16 bit integer <code>n</code> to <code>buf</code>.","Writes an unsigned 16 bit integer to the underlying writer.","Writes an unsigned 16 bit integer to the underlying writer.","","","Writes unsigned 16 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 24 bit integer to the underlying writer.","Writes an unsigned 24 bit integer to the underlying writer.","Writes an unsigned 24 bit integer <code>n</code> to <code>buf</code>, stored in u32.","Writes an unsigned 32 bit integer <code>n</code> to <code>buf</code>.","Writes an unsigned 32 bit integer to the underlying writer.","Writes an unsigned 32 bit integer to the underlying writer.","","","Writes unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 48 bit integer to the underlying writer.","Writes an unsigned 48 bit integer to the underlying writer.","Writes an unsigned 48 bit integer <code>n</code> to <code>buf</code>, stored in u64.","Writes an unsigned 64 bit integer <code>n</code> to <code>buf</code>.","Writes an unsigned 64 bit integer to the underlying writer.","Writes an unsigned 64 bit integer to the underlying writer.","","","Writes unsigned 64 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 8 bit integer to the underlying writer.","Writes an unsigned 8 bit integer to the underlying writer.","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes an unsigned n-bytes integer to the underlying …","Writes an unsigned n-bytes integer to the underlying …","","","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes an unsigned n-bytes integer to the underlying …","Writes an unsigned n-bytes integer to the underlying …","",""],"i":[0,0,0,0,0,0,0,0,0,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,24,1,2,24,1,2,24,24,24,24,24,1,2,24,1,2,24,1,2,24,1,2,1,2,1,2,1,2,25,25,24,25,25,24,25,25,24,25,25,24,25,25,24,25,25,24,25,25,24,25,25,24,25,25,24,25,25,24,25,25,24,25,25,24,25,25,24,25,25,24,25,25,24,25,25,24,25,25,25,25,25,25,24,25,25,24,24,25,25,1,2,24,25,25,1,2,24,25,25,1,2,24,25,25,1,2,25,25,24,24,25,25,1,2,24,25,25,1,2,25,25,24,24,25,25,1,2,24,25,25,1,2,25,25,24,25,25,1,2,24,25,25,1,2,1,2,1,2,1,2,1,2,26,26,24,24,26,26,24,24,26,26,24,24,26,26,24,24,26,26,24,26,26,24,24,26,26,24,26,26,24,24,26,26,24,26,26,24,26,26,24,24,26,26,1,2,24,1,2,24,26,26,1,2,24,1,2,26,26,24,24,26,26,1,2,24,1,2,26,26,24,24,26,26,1,2,24,1,2,26,26,24,26,26,1,2,24,26,26,1,2],"f":[0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[1,1],[2,2],[[]],[[]],[[1,1],3],[[2,2],3],[[],1],[[],2],[[1,1],4],[[2,2],4],[[1,5],6],[[2,5],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1],[2],[[]],[[]],[[1,1],[[7,[3]]]],[[2,2],[[7,[3]]]],[[],[[9,[8]]]],[[],[[9,[8]]]],[[],8],[[],9],[[],9],[[]],[[],9],[[],9],[[]],[[],[[9,[10]]]],[[],[[9,[10]]]],[[],10],[[],9],[[],9],[[]],[[],9],[[],9],[[]],[[],[[9,[11]]]],[[],[[9,[11]]]],[[],11],[[],9],[[],9],[[]],[[],[[9,[12]]]],[[],[[9,[12]]]],[[],12],[[],9],[[],9],[[]],[[],[[9,[13]]]],[[],[[9,[13]]]],[[],13],[[],[[9,[13]]]],[[],[[9,[13]]]],[[],13],[[],9],[[],9],[[]],[[],[[9,[14]]]],[[],[[9,[14]]]],[[],14],[[],[[9,[14]]]],[[],[[9,[14]]]],[[],14],[[],9],[[],9],[[]],[[],[[9,[15]]]],[[],[[9,[15]]]],[[],9],[[],9],[16,[[9,[14]]]],[16,[[9,[14]]]],[16,14],[16,[[9,[11]]]],[16,[[9,[11]]]],[16,11],[[],17],[[],[[9,[17]]]],[[],[[9,[17]]]],[[],17],[[],17],[[]],[[],9],[[],9],[[]],[[]],[[],18],[[],[[9,[18]]]],[[],[[9,[18]]]],[[],18],[[],18],[[]],[[],9],[[],9],[[]],[[]],[[],[[9,[19]]]],[[],[[9,[19]]]],[[],19],[[],19],[[],[[9,[19]]]],[[],[[9,[19]]]],[[],19],[[],19],[[]],[[],9],[[],9],[[]],[[]],[[],[[9,[20]]]],[[],[[9,[20]]]],[[],20],[[],20],[[],[[9,[20]]]],[[],[[9,[20]]]],[[],20],[[],20],[[]],[[],9],[[],9],[[]],[[]],[[],[[9,[21]]]],[[],[[9,[21]]]],[16,20],[16,[[9,[20]]]],[16,[[9,[20]]]],[16,20],[16,20],[16,17],[16,[[9,[17]]]],[16,[[9,[17]]]],[16,17],[16,17],[[]],[[]],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[8,9],[8,9],[8],[[]],[10,9],[10,9],[10],[[]],[11,9],[11,9],[11],[[]],[12,9],[12,9],[12],[[]],[13,9],[13,9],[13],[13,9],[13,9],[13],[[]],[14,9],[14,9],[14],[14,9],[14,9],[14],[[]],[15,9],[15,9],[[]],[[14,16],9],[[14,16],9],[[14,16]],[[11,16],9],[[11,16],9],[[11,16]],[17],[17,9],[17,9],[17],[17],[[]],[[]],[[]],[18],[18,9],[18,9],[18],[18],[[]],[[]],[[]],[19,9],[19,9],[19],[19],[19,9],[19,9],[19],[19],[[]],[[]],[[]],[20,9],[20,9],[20],[20],[20,9],[20,9],[20],[20],[[]],[[]],[[]],[21,9],[21,9],[[20,16]],[[20,16],9],[[20,16],9],[[20,16]],[[20,16]],[[17,16]],[[17,16],9],[[17,16],9],[[17,16]],[[17,16]]],"p":[[4,"BigEndian"],[4,"LittleEndian"],[4,"Ordering"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Option"],[15,"f32"],[6,"Result"],[15,"f64"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"usize"],[15,"u128"],[15,"u16"],[15,"u32"],[15,"u64"],[15,"u8"],[4,"Result"],[3,"TypeId"],[8,"ByteOrder"],[8,"ReadBytesExt"],[8,"WriteBytesExt"]]},\
"cfg_if":{"doc":"A macro for defining <code>#[cfg]</code> if-else statements.","t":"O","n":["cfg_if"],"q":["cfg_if"],"d":["The main macro provided by this crate. See crate …"],"i":[0],"f":[0],"p":[]},\
"chrono":{"doc":"Chrono: Date and Time for Rust","t":"NNNDDICNDNNIQNCNCNNNCCRRSSRRSSNNNNNEDCCCCNNNCDCDCDENENNINNCINNCNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLLLLLLLLKLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLKLLLLLLKLLKLLKLLLALLLLLKLLLLLLLLLLLLLLLLLLLLLALLKLLKLLLLLLLLLLLLLALLLKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLKLLKLLKLKLKLLKLLKLKLLKLLKLLLKLLKLLLLLLLNNDNENNNNNNDDNNNNNENNNNNNNNNNNNNNENNNNNEDEGDNNNNNNNCNNNNNNNNNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLFFLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLMMMMLMMMLLLMMFLMLLLLLLLLLLLLLLLLLLLLLAMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMDLLLLLLLLLLLLLLDDSSRRSSSRRDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNDDENIQNIDLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLKLLLKLLLKLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCCCCCCCCCCCCCCCC","n":["April","August","AutoSi","Date","DateTime","Datelike","Days","December","Duration","DurationExceedsLimit","DurationExceedsTimestamp","DurationRound","Err","February","FixedOffset","Fri","IsoWeek","January","July","June","Local","LocalResult","MAX_DATE","MAX_DATETIME","MAX_UTC","MAX_UTC","MIN_DATE","MIN_DATETIME","MIN_UTC","MIN_UTC","March","May","Micros","Millis","Mon","Month","Months","NaiveDate","NaiveDateTime","NaiveTime","NaiveWeek","Nanos","November","October","Offset","OutOfRangeError","ParseError","ParseMonthError","ParseResult","ParseWeekdayError","RoundingError","Sat","SecondsFormat","Secs","September","SubsecRound","Sun","Thu","TimeZone","Timelike","TimestampExceedsLimit","Tue","Utc","Wed","Weekday","add","add","add","add","add","add","add_assign","add_assign","and_hms","and_hms_micro","and_hms_micro_opt","and_hms_milli","and_hms_milli_opt","and_hms_nano","and_hms_nano_opt","and_hms_opt","and_time","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checked_add","checked_add_days","checked_add_months","checked_add_signed","checked_add_signed","checked_sub","checked_sub_days","checked_sub_months","checked_sub_signed","checked_sub_signed","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","date","date_naive","day","day","day","day0","day0","day0","days","default","default","default","description","description","div","duration_round","duration_round","duration_trunc","duration_trunc","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","format","format","format_with_items","format_with_items","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_i64","from_i64","from_local","from_std","from_str","from_str","from_str","from_str","from_str","from_u32","from_u64","from_u64","from_utc","from_utc","hash","hash","hash","hash","hash","hash","hash","hour","hour","hour12","hour12","hours","into","into","into","into","into","into","into","into","into","into","into","is_zero","iso_week","iso_week","iso_week","max_value","microseconds","milliseconds","min_value","minute","minute","minutes","month","month","month","month0","month0","month0","mul","naive","naive_local","naive_local","naive_utc","naive_utc","name","nanosecond","nanosecond","nanoseconds","neg","new","num_days","num_days_from_ce","num_days_from_ce","num_days_from_monday","num_days_from_sunday","num_hours","num_microseconds","num_milliseconds","num_minutes","num_nanoseconds","num_seconds","num_seconds_from_midnight","num_seconds_from_midnight","num_weeks","number_from_monday","number_from_month","number_from_sunday","offset","offset","offset","ordinal","ordinal","ordinal","ordinal0","ordinal0","ordinal0","parse_from_rfc2822","parse_from_rfc3339","parse_from_str","partial_cmp","partial_cmp","partial_cmp","partial_cmp","pred","pred","pred","pred_opt","prelude","provide","provide","provide","round_subsecs","second","second","seconds","signed_duration_since","signed_duration_since","span","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","succ","succ","succ","succ_opt","time","timestamp","timestamp_micros","timestamp_millis","timestamp_nanos","timestamp_subsec_micros","timestamp_subsec_millis","timestamp_subsec_nanos","timezone","timezone","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_rfc2822","to_rfc3339","to_rfc3339_opts","to_std","to_string","to_string","to_string","to_string","to_string","to_string","to_string","trunc_subsecs","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","weekday","weekday","weekday","weeks","with_day","with_day","with_day","with_day0","with_day0","with_day0","with_hour","with_hour","with_minute","with_minute","with_month","with_month","with_month","with_month0","with_month0","with_month0","with_nanosecond","with_nanosecond","with_ordinal","with_ordinal","with_ordinal","with_ordinal0","with_ordinal0","with_ordinal0","with_second","with_second","with_timezone","with_timezone","with_year","with_year","with_year","year","year","year","year_ce","year_ce","years_since","years_since","zero","BadFormat","Day","DelayedFormat","Error","Fixed","Fixed","Hour","Hour12","Impossible","Internal","Internal","InternalFixed","InternalNumeric","Invalid","IsoWeek","IsoYear","IsoYearDiv100","IsoYearMod100","Item","Literal","LongMonthName","LongWeekdayName","LowerAmPm","Minute","Month","Nanosecond","Nanosecond","Nanosecond3","Nanosecond6","Nanosecond9","None","NotEnough","NumDaysFromSun","Numeric","Numeric","Ordinal","OutOfRange","OwnedLiteral","OwnedSpace","Pad","ParseError","ParseErrorKind","ParseResult","Parsed","RFC2822","RFC3339","Second","ShortMonthName","ShortWeekdayName","Space","Space","StrftimeItems","Timestamp","TimezoneName","TimezoneOffset","TimezoneOffsetColon","TimezoneOffsetColonZ","TimezoneOffsetDoubleColon","TimezoneOffsetTripleColon","TimezoneOffsetZ","TooLong","TooShort","UpperAmPm","WeekFromMon","WeekFromSun","WeekdayFromMon","Year","YearDiv100","YearMod100","Zero","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","day","default","description","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","format_item","from","from","from","from","from","from","from","from","from","from","hash","hash","hash","hash","hash","hash","hash","hash","hash","hour_div_12","hour_mod_12","into","into","into","into","into","into","into","into","into","into","isoweek","isoyear","isoyear_div_100","isoyear_mod_100","kind","minute","month","nanosecond","new","new","new_with_offset","offset","ordinal","parse","provide","second","set_ampm","set_day","set_hour","set_hour12","set_isoweek","set_isoyear","set_isoyear_div_100","set_isoyear_mod_100","set_minute","set_month","set_nanosecond","set_offset","set_ordinal","set_second","set_timestamp","set_week_from_mon","set_week_from_sun","set_weekday","set_year","set_year_div_100","set_year_mod_100","strftime","timestamp","to_datetime","to_datetime_with_timezone","to_fixed_offset","to_naive_date","to_naive_datetime_with_offset","to_naive_time","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","week_from_mon","week_from_sun","weekday","year","year_div_100","year_mod_100","StrftimeItems","borrow","borrow_mut","clone","clone_into","fmt","from","into","into_iter","new","next","to_owned","try_from","try_into","type_id","Days","IsoWeek","MAX","MAX","MAX_DATE","MAX_DATETIME","MIN","MIN","MIN","MIN_DATE","MIN_DATETIME","NaiveDate","NaiveDateTime","NaiveTime","NaiveWeek","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","and_hms","and_hms_micro","and_hms_micro_opt","and_hms_milli","and_hms_milli_opt","and_hms_nano","and_hms_nano_opt","and_hms_opt","and_local_timezone","and_time","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checked_add_days","checked_add_days","checked_add_months","checked_add_months","checked_add_signed","checked_add_signed","checked_sub_days","checked_sub_days","checked_sub_months","checked_sub_months","checked_sub_signed","checked_sub_signed","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","date","day","day","day0","day0","days","default","default","default","duration_round","duration_trunc","eq","eq","eq","eq","eq","first_day","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","format","format","format_with_items","format_with_items","format_with_items","from","from","from","from","from","from","from_hms","from_hms_micro","from_hms_micro_opt","from_hms_milli","from_hms_milli_opt","from_hms_nano","from_hms_nano_opt","from_hms_opt","from_isoywd","from_isoywd_opt","from_num_days_from_ce","from_num_days_from_ce_opt","from_num_seconds_from_midnight","from_num_seconds_from_midnight_opt","from_str","from_str","from_str","from_timestamp","from_timestamp_micros","from_timestamp_millis","from_timestamp_opt","from_weekday_of_month","from_weekday_of_month_opt","from_ymd","from_ymd_opt","from_yo","from_yo_opt","hash","hash","hash","hash","hash","hour","hour","into","into","into","into","into","into","iso_week","iso_week","iter_days","iter_weeks","last_day","minute","minute","month","month","month0","month0","nanosecond","nanosecond","new","new","num_seconds_from_midnight","ordinal","ordinal","ordinal0","ordinal0","overflowing_add_signed","overflowing_sub_signed","parse_from_str","parse_from_str","parse_from_str","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","pred","pred_opt","second","second","signed_duration_since","signed_duration_since","signed_duration_since","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","succ","succ_opt","time","timestamp","timestamp_micros","timestamp_millis","timestamp_nanos","timestamp_subsec_micros","timestamp_subsec_millis","timestamp_subsec_nanos","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","week","week","week0","weekday","weekday","with_day","with_day","with_day0","with_day0","with_hour","with_hour","with_minute","with_minute","with_month","with_month","with_month0","with_month0","with_nanosecond","with_nanosecond","with_ordinal","with_ordinal","with_ordinal0","with_ordinal0","with_second","with_second","with_year","with_year","year","year","year","years_since","Ambiguous","FixedOffset","Local","LocalResult","None","Offset","Offset","Single","TimeZone","Utc","and_hms_micro_opt","and_hms_milli_opt","and_hms_nano_opt","and_hms_opt","and_time","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","datetime_from_str","earliest","east","east_opt","eq","eq","eq","fix","fix","fix","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_local_date","from_local_date","from_local_datetime","from_local_datetime","from_offset","from_offset","from_offset","from_offset","from_utc_date","from_utc_date","from_utc_datetime","from_utc_datetime","hash","hash","hash","into","into","into","into","isoywd","isoywd_opt","latest","local_minus_utc","map","now","now","offset_from_local_date","offset_from_local_date","offset_from_local_date","offset_from_local_date","offset_from_local_datetime","offset_from_local_datetime","offset_from_local_datetime","offset_from_local_datetime","offset_from_utc_date","offset_from_utc_date","offset_from_utc_date","offset_from_utc_date","offset_from_utc_datetime","offset_from_utc_datetime","offset_from_utc_datetime","offset_from_utc_datetime","single","timestamp","timestamp_millis","timestamp_millis_opt","timestamp_nanos","timestamp_opt","to_owned","to_owned","to_owned","to_owned","to_string","to_string","today","today","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unwrap","utc_minus_local","west","west_opt","with_ymd_and_hms","ymd","ymd_opt","yo","yo_opt","Date","DateTime","Datelike","FixedOffset","Local","Month","NaiveDate","NaiveDateTime","NaiveTime","Offset","SecondsFormat","SubsecRound","TimeZone","Timelike","Utc","Weekday"],"q":["chrono","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","chrono::formatchrono::format::strftime","","","","","","","","","","","","","","","chrono::naive","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","chrono::offset","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","chrono::prelude","","","","","","","","","","","","","","",""],"d":["April","August","Automatically select one of <code>Secs</code>, <code>Millis</code>, <code>Micros</code>, or <code>Nanos</code> …","ISO 8601 calendar date with time zone.","ISO 8601 combined date and time with time zone.","The common set of methods for date component.","","December","ISO 8601 time duration with nanosecond precision. This …","Error when <code>Duration.num_nanoseconds</code> exceeds the limit.","Error when the Duration exceeds the Duration from or until …","Extension trait for rounding or truncating a DateTime by a …","Error that can occur in rounding or truncating","February","","Friday.","","January","July","June","","","The maximum possible <code>Date</code>.","The maximum possible <code>DateTime&lt;Utc&gt;</code>.","The maximum possible <code>Date</code>.","The maximum possible <code>DateTime&lt;Utc&gt;</code>.","The minimum possible <code>Date</code>.","The minimum possible <code>DateTime&lt;Utc&gt;</code>.","The minimum possible <code>Date</code>.","The minimum possible <code>DateTime&lt;Utc&gt;</code>.","March","May","Use fixed 6 subsecond digits. This corresponds to …","Use fixed 3 subsecond digits. This corresponds to …","Monday.","The month of the year.","A duration in calendar months","","","","","Use fixed 9 subsecond digits. This corresponds to …","November","October","","Represents error when converting <code>Duration</code> to/from a …","","An error resulting from reading <code>&lt;Month&gt;</code> value with <code>FromStr</code>.","","An error resulting from reading <code>Weekday</code> value with <code>FromStr</code>.","An error from rounding by <code>Duration</code>","Saturday.","Specific formatting options for seconds. This may be …","Format whole seconds only, with no decimal point nor …","September","Extension trait for subsecond rounding or truncation to a …","Sunday.","Thursday.","","The common set of methods for time component.","Error when <code>DateTime.timestamp_nanos</code> exceeds the limit.","Tuesday.","","Wednesday.","The day of week.","","","","","","","","","Makes a new <code>DateTime</code> from the current date, hour, minute …","Makes a new <code>DateTime</code> from the current date, hour, minute, …","Makes a new <code>DateTime</code> from the current date, hour, minute, …","Makes a new <code>DateTime</code> from the current date, hour, minute, …","Makes a new <code>DateTime</code> from the current date, hour, minute, …","Makes a new <code>DateTime</code> from the current date, hour, minute, …","Makes a new <code>DateTime</code> from the current date, hour, minute, …","Makes a new <code>DateTime</code> from the current date, hour, minute …","Makes a new <code>DateTime</code> from the current date and given …","","","","","","","","","","","","","","","","","","","","","","","Add two durations, returning <code>None</code> if overflow occurred.","Add a duration in <code>Days</code> to the date part of the <code>DateTime</code>","Adds given <code>Months</code> to the current date and time.","Adds given <code>Duration</code> to the current date.","Adds given <code>Duration</code> to the current date and time.","Subtract two durations, returning <code>None</code> if overflow …","Subtract a duration in <code>Days</code> from the date part of the …","Subtracts given <code>Months</code> from the current date and time.","Subtracts given <code>Duration</code> from the current date.","Subtracts given <code>Duration</code> from the current date and time.","","","","","","","","","","","","","","","","","","","","","","","","","","Retrieves a date component","Retrieves the Date without an associated timezone","Returns the day of month starting from 1.","","","Returns the day of month starting from 0.","","","Makes a new <code>Duration</code> with given number of days. Equivalent …","","","","","","","Return a copy rounded by Duration.","","Return a copy truncated by Duration.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Formatting (and parsing) utilities for date and time.","Formats the date with the specified format string. See the …","Formats the combined date and time with the specified …","Formats the date with the specified formatting items.","Formats the combined date and time with the specified …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert this <code>DateTime&lt;Local&gt;</code> instance into a <code>DateTime&lt;Utc&gt;</code> …","Returns the argument unchanged.","Convert this <code>DateTime&lt;FixedOffset&gt;</code> instance into a …","Convert this <code>DateTime&lt;Utc&gt;</code> instance into a …","","","Convert this <code>DateTime&lt;Local&gt;</code> instance into a …","Convert this <code>DateTime&lt;FixedOffset&gt;</code> instance into a …","Convert this <code>DateTime&lt;Utc&gt;</code> instance into a <code>DateTime&lt;Local&gt;</code> …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Makes a new <code>DateTime</code> with given <strong>local</strong> datetime and offset …","Creates a <code>time::Duration</code> object from <code>std::time::Duration</code>","","","","","","","","Returns an <code>Option&lt;Month&gt;</code> from a i64, assuming a 1-index, …","Makes a new <code>Date</code> with given <em>UTC</em> date and offset. The local …","Makes a new <code>DateTime</code> with given <em>UTC</em> datetime and offset. …","","","","","","","","Returns the hour number from 0 to 23.","","Returns the hour number from 1 to 12 with a boolean flag, …","Returns the hour number from 1 to 12 with a boolean flag, …","Makes a new <code>Duration</code> with given number of hours. …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the duration equals <code>Duration::zero()</code>.","Returns the ISO week.","","","The maximum possible <code>Duration</code>: <code>i64::MAX</code> milliseconds.","Makes a new <code>Duration</code> with given number of microseconds.","Makes a new <code>Duration</code> with given number of milliseconds.","The minimum possible <code>Duration</code>: <code>i64::MIN</code> milliseconds.","Returns the minute number from 0 to 59.","","Makes a new <code>Duration</code> with given number of minutes. …","Returns the month number starting from 1.","","","Returns the month number starting from 0.","","","","Date and time types unconcerned with timezones.","Returns a view to the naive local date.","Returns a view to the naive local datetime.","Returns a view to the naive UTC date.","Returns a view to the naive UTC datetime.","Get the name of the month","Returns the number of nanoseconds since the whole non-leap …","","Makes a new <code>Duration</code> with given number of nanoseconds.","","Construct a new <code>Months</code> from a number of months","Returns the total number of whole days in the duration.","Counts the days in the proleptic Gregorian calendar, with …","Counts the days in the proleptic Gregorian calendar, with …","Returns a day-of-week number starting from Monday = 0.","Returns a day-of-week number starting from Sunday = 0.","Returns the total number of whole hours in the duration.","Returns the total number of whole microseconds in the …","Returns the total number of whole milliseconds in the …","Returns the total number of whole minutes in the duration.","Returns the total number of whole nanoseconds in the …","Returns the total number of whole seconds in the duration.","Returns the number of non-leap seconds past the last …","Returns the number of non-leap seconds past the last …","Returns the total number of whole weeks in the duration.","Returns a day-of-week number starting from Monday = 1. …","Returns a month-of-year number starting from January = 1.","Returns a day-of-week number starting from Sunday = 1.","The time zone, which calculates offsets from the local …","Retrieves an associated offset from UTC.","Retrieves an associated offset from UTC.","Returns the day of year starting from 1.","","","Returns the day of year starting from 0.","","","Parses an RFC 2822 date and time string such as …","Parses an RFC 3339 and ISO 8601 date and time string such …","Parses a string with the specified format string and …","","","Compare two DateTimes based on their true time, ignoring …","","Makes a new <code>Date</code> for the prior date.","The previous day in the week.","The previous month.","Makes a new <code>Date</code> for the prior date.","A convenience module appropriate for glob imports (…","","","","Return a copy rounded to the specified number of subsecond …","Returns the second number from 0 to 59.","","Makes a new <code>Duration</code> with given number of seconds. Panics …","Subtracts another <code>Date</code> from the current date. Returns a …","Subtracts another <code>DateTime</code> from the current date and time. …","Runs a closure, returning the duration of time it took to …","","","","","","","","","","","Makes a new <code>Date</code> for the next date.","The next day in the week.","The next month.","Makes a new <code>Date</code> for the next date.","Retrieves a time component. Unlike <code>date</code>, this is not …","Returns the number of non-leap seconds since January 1, …","Returns the number of non-leap-microseconds since January …","Returns the number of non-leap-milliseconds since January …","Returns the number of non-leap-nanoseconds since January …","Returns the number of microseconds since the last second …","Returns the number of milliseconds since the last second …","Returns the number of nanoseconds since the last second …","Retrieves an associated time zone.","Retrieves an associated time zone.","","","","","","","","","","","","Returns an RFC 2822 date and time string such as …","Returns an RFC 3339 and ISO 8601 date and time string such …","Return an RFC 3339 and ISO 8601 date and time string with …","Creates a <code>std::time::Duration</code> object from <code>time::Duration</code>","","","","","","","","Return a copy truncated to the specified number of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the day of week.","","","Makes a new <code>Duration</code> with given number of weeks. …","Makes a new value with the day of month (starting from 1) …","","","Makes a new value with the day of month (starting from 0) …","","","Makes a new value with the hour number changed.","","Makes a new value with the minute number changed.","","Makes a new value with the month number (starting from 1) …","","","Makes a new value with the month number (starting from 0) …","","","Makes a new value with nanoseconds since the whole …","","Makes a new value with the day of year (starting from 1) …","","","Makes a new value with the day of year (starting from 0) …","","","Makes a new value with the second number changed.","","Changes the associated time zone. This does not change the …","Changes the associated time zone. The returned <code>DateTime</code> …","Makes a new value with the year number changed.","","","Returns the year number in the calendar date.","","","Returns the absolute year number starting from 1 with a …","Returns the absolute year number starting from 1 with a …","Returns the number of whole years from the given <code>base</code> …","Retrieve the elapsed years from now to the given <code>DateTime</code>.","A duration where the stored seconds and nanoseconds are …","There was an error on the formatting string, or there were …","Day of the month (FW=PW=2).","A <em>temporary</em> object which can be used as an argument to …","Issues a formatting error. Used to signal an invalid …","Fixed-format item types.","Fixed-format item.","Hour number in the 24-hour clocks (FW=PW=2).","Hour number in the 12-hour clocks (FW=PW=2).","There is no possible date and time value with given set of …","Internal uses only.","Internal uses only.","An opaque type representing fixed-format item types for …","An opaque type representing numeric item types for …","The input string has some invalid character sequence for …","Week number in the ISO week date (FW=PW=2).","Year in the ISO week date (FW=4, PW=∞). May accept years …","Year in the ISO week date, divided by 100 (FW=PW=2). …","Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be …","A single formatting item. This is used for both formatting …","A literally printed and parsed text.","Full month names.","Full day of the week names.","AM/PM.","The number of minutes since the last whole hour (FW=PW=2).","Month (FW=PW=2).","The number of nanoseconds since the last whole second …","An optional dot plus one or more digits for left-aligned …","Same as <code>Nanosecond</code> but the accuracy is fixed to 3.","Same as <code>Nanosecond</code> but the accuracy is fixed to 6.","Same as <code>Nanosecond</code> but the accuracy is fixed to 9.","No padding.","Given set of fields is not enough to make a requested date …","Day of the week, where Sunday = 0 and Saturday = 6 …","Numeric item types. They have associated formatting width …","Numeric item. Can be optionally padded to the maximal …","Day of the year (FW=PW=3).","Given field is out of permitted range.","Same as <code>Literal</code> but with the string owned by the item.","Same as <code>Space</code> but with the string owned by the item.","Padding characters for numeric items.","An error from the <code>parse</code> function.","The category of parse error","Same as <code>Result&lt;T, ParseError&gt;</code>.","Parsed parts of date and time. There are two classes of …","RFC 2822 date and time syntax. Commonly used for email and …","RFC 3339 &amp; ISO 8601 date and time syntax.","The number of seconds since the last whole minute …","Abbreviated month names.","Abbreviated day of the week names.","Space padding.","Whitespace. Prints literally but reads zero or more …","","The number of non-leap seconds since the midnight UTC on …","Timezone name.","Same as <code>TimezoneOffsetColon</code> but prints no colon. Parsing …","Offset from the local time to UTC (<code>+09:00</code> or <code>-04:00</code> or …","Offset from the local time to UTC (<code>+09:00</code> or <code>-04:00</code> or <code>Z</code>).","Offset from the local time to UTC with seconds (<code>+09:00:00</code> …","Offset from the local time to UTC without minutes (<code>+09</code> or …","Same as <code>TimezoneOffsetColonZ</code> but prints no colon. Parsing …","All formatting items have been read but there is a …","The input string has been prematurely ended.","AM/PM.","Week number, where the week 1 starts at the first Monday …","Week number, where the week 1 starts at the first Sunday …","Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).","Full Gregorian year (FW=4, PW=∞). May accept years …","Gregorian year divided by 100 (century number; FW=PW=2). …","Gregorian year modulo 100 (FW=PW=2). Cannot be negative.","Zero (<code>0</code>) padding.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Day of the month (1–28, 1–29, 1–30 or 1–31 …","","","","","","","","","","","","","","","","","","","","","","","","Tries to format given arguments with given formatting …","Formats single formatting item","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Hour number divided by 12 (0–1). 0 indicates AM and 1 …","Hour number modulo 12 (0–11).","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","ISO week number (1–52 or 1–53 depending on the year).","Year in the ISO week date.","Year in the ISO week date, divided by 100. Implies that …","Year in the ISO week date, modulo 100. Implies that the …","The category of parse error","Minute number (0–59).","Month (1–12).","The number of nanoseconds since the whole second (0–…","Returns the initial value of parsed parts.","Makes a new <code>DelayedFormat</code> value out of local date and time.","Makes a new <code>DelayedFormat</code> value out of local date and time …","Offset from the local time to UTC, in seconds.","Day of the year (1–365 or 1–366 depending on the year).","Tries to parse given string into <code>parsed</code> with given …","","Second number (0–60, accounting for leap seconds).","Tries to set the <code>hour_div_12</code> field from given value. (<code>false</code>…","Tries to set the <code>day</code> field from given value.","Tries to set both <code>hour_div_12</code> and <code>hour_mod_12</code> fields from …","Tries to set the <code>hour_mod_12</code> field from given hour number …","Tries to set the <code>isoweek</code> field from given value.","Tries to set the <code>isoyear</code> field from given value.","Tries to set the <code>isoyear_div_100</code> field from given value.","Tries to set the <code>isoyear_mod_100</code> field from given value.","Tries to set the <code>minute</code> field from given value.","Tries to set the <code>month</code> field from given value.","Tries to set the <code>nanosecond</code> field from given value.","Tries to set the <code>offset</code> field from given value.","Tries to set the <code>ordinal</code> field from given value.","Tries to set the <code>second</code> field from given value.","Tries to set the <code>timestamp</code> field from given value.","Tries to set the <code>week_from_mon</code> field from given value.","Tries to set the <code>week_from_sun</code> field from given value.","Tries to set the <code>weekday</code> field from given value.","Tries to set the <code>year</code> field from given value.","Tries to set the <code>year_div_100</code> field from given value.","Tries to set the <code>year_mod_100</code> field from given value.","<code>strftime</code>/<code>strptime</code>-inspired date and time formatting syntax.","The number of non-leap seconds since the midnight UTC on …","Returns a parsed timezone-aware date and time out of given …","Returns a parsed timezone-aware date and time out of given …","Returns a parsed fixed time zone offset out of given …","Returns a parsed naive date out of given fields.","Returns a parsed naive date and time out of given fields, …","Returns a parsed naive time out of given fields.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Week number, where the week 1 starts at the first Monday …","Week number, where the week 1 starts at the first Sunday …","Day of the week.","Year.","Year divided by 100. Implies that the year is &gt;= 1 BCE …","Year modulo 100. Implies that the year is &gt;= 1 BCE when …","Parsing iterator for <code>strftime</code>-like format strings.","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Creates a new parsing iterator from the <code>strftime</code>-like …","","","","","","A duration in calendar days.","ISO 8601 week.","The maximum possible <code>NaiveDate</code> (December 31, 262143 CE).","The maximum possible <code>NaiveDateTime</code>.","The maximum possible <code>NaiveDate</code> (December 31, 262143 CE).","The maximum possible <code>NaiveDateTime</code>.","The minimum possible <code>NaiveDate</code> (January 1, 262145 BCE).","The minimum possible <code>NaiveDateTime</code>.","The earliest possible <code>NaiveTime</code>","The minimum possible <code>NaiveDate</code> (January 1, 262145 BCE).","The minimum possible <code>NaiveDateTime</code>.","ISO 8601 calendar date without timezone. Allows for every …","ISO 8601 combined date and time without timezone.","ISO 8601 time without timezone. Allows for the nanosecond …","A week represented by a <code>NaiveDate</code> and a <code>Weekday</code> which is …","","An addition of months to <code>NaiveDate</code> clamped to valid days …","","","","An addition of months to <code>NaiveDateTime</code> clamped to valid …","","","","","","","Makes a new <code>NaiveDateTime</code> from the current date, hour, …","Makes a new <code>NaiveDateTime</code> from the current date, hour, …","Makes a new <code>NaiveDateTime</code> from the current date, hour, …","Makes a new <code>NaiveDateTime</code> from the current date, hour, …","Makes a new <code>NaiveDateTime</code> from the current date, hour, …","Makes a new <code>NaiveDateTime</code> from the current date, hour, …","Makes a new <code>NaiveDateTime</code> from the current date, hour, …","Makes a new <code>NaiveDateTime</code> from the current date, hour, …","Converts the <code>NaiveDateTime</code> into the timezone-aware …","Makes a new <code>NaiveDateTime</code> from the current date and given …","","","","","","","","","","","","","Add a duration in <code>Days</code> to the date","Add a duration in <code>Days</code> to the date part of the …","Add a duration in <code>Months</code> to the date","Adds given <code>Months</code> to the current date and time.","Adds the <code>days</code> part of given <code>Duration</code> to the current date.","Adds given <code>Duration</code> to the current date and time.","Subtract a duration in <code>Days</code> from the date","Subtract a duration in <code>Days</code> from the date part of the …","Subtract a duration in <code>Months</code> from the date","Subtracts given <code>Months</code> from the current date and time.","Subtracts the <code>days</code> part of given <code>Duration</code> from the current …","Subtracts given <code>Duration</code> from the current date and time.","","","","","","","","","","","","","","","Retrieves a date component.","Returns the day of month starting from 1.","Returns the day of month starting from 1.","Returns the day of month starting from 0.","Returns the day of month starting from 0.","Returns a <code>RangeInclusive&lt;T&gt;</code> representing the whole week …","","","","","","","","","","","Returns a date representing the first day of the week.","","","","","","","","","","Formats the date with the specified format string. See the …","Formats the combined date and time with the specified …","Formats the time with the specified format string. See the …","Formats the date with the specified formatting items. …","Formats the combined date and time with the specified …","Formats the time with the specified formatting items. …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Makes a new <code>NaiveTime</code> from hour, minute and second.","Makes a new <code>NaiveTime</code> from hour, minute, second and …","Makes a new <code>NaiveTime</code> from hour, minute, second and …","Makes a new <code>NaiveTime</code> from hour, minute, second and …","Makes a new <code>NaiveTime</code> from hour, minute, second and …","Makes a new <code>NaiveTime</code> from hour, minute, second and …","Makes a new <code>NaiveTime</code> from hour, minute, second and …","Makes a new <code>NaiveTime</code> from hour, minute and second.","Makes a new <code>NaiveDate</code> from the ISO week date (year, week …","Makes a new <code>NaiveDate</code> from the ISO week date (year, week …","Makes a new <code>NaiveDate</code> from a day’s number in the …","Makes a new <code>NaiveDate</code> from a day’s number in the …","Makes a new <code>NaiveTime</code> from the number of seconds since …","Makes a new <code>NaiveTime</code> from the number of seconds since …","","","","Makes a new <code>NaiveDateTime</code> corresponding to a UTC date and …","Creates a new NaiveDateTime from microseconds since the …","Creates a new NaiveDateTime from milliseconds since the …","Makes a new <code>NaiveDateTime</code> corresponding to a UTC date and …","Makes a new <code>NaiveDate</code> by counting the number of …","Makes a new <code>NaiveDate</code> by counting the number of …","Makes a new <code>NaiveDate</code> from the calendar date (year, month …","Makes a new <code>NaiveDate</code> from the calendar date (year, month …","Makes a new <code>NaiveDate</code> from the ordinal date (year and day …","Makes a new <code>NaiveDate</code> from the ordinal date (year and day …","","","","","","Returns the hour number from 0 to 23.","Returns the hour number from 0 to 23.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns an iterator that steps by days across all …","Returns an iterator that steps by weeks across all …","Returns a date representing the last day of the week.","Returns the minute number from 0 to 59.","Returns the minute number from 0 to 59.","Returns the month number starting from 1.","Returns the month number starting from 1.","Returns the month number starting from 0.","Returns the month number starting from 0.","Returns the number of nanoseconds since the whole non-leap …","Returns the number of nanoseconds since the whole non-leap …","Construct a new <code>Days</code> from a number of days","Makes a new <code>NaiveDateTime</code> from date and time components. …","Returns the number of non-leap seconds past the last …","Returns the day of year starting from 1.","Returns the day of year starting from 1.","Returns the day of year starting from 0.","Returns the day of year starting from 0.","Adds given <code>Duration</code> to the current time, and also returns …","Subtracts given <code>Duration</code> from the current time, and also …","Parses a string with the specified format string and …","Parses a string with the specified format string and …","Parses a string with the specified format string and …","","","","","","Makes a new <code>NaiveDate</code> for the previous calendar date.","Makes a new <code>NaiveDate</code> for the previous calendar date.","Returns the second number from 0 to 59.","Returns the second number from 0 to 59.","Subtracts another <code>NaiveDate</code> from the current date. Returns …","Subtracts another <code>NaiveDateTime</code> from the current date and …","Subtracts another <code>NaiveTime</code> from the current time. Returns …","","A subtraction of Months from <code>NaiveDate</code> clamped to valid …","","","","","","","","","","","","","","Makes a new <code>NaiveDate</code> for the next calendar date.","Makes a new <code>NaiveDate</code> for the next calendar date.","Retrieves a time component.","Returns the number of non-leap seconds since the midnight …","Returns the number of non-leap <em>microseconds</em> since midnight …","Returns the number of non-leap <em>milliseconds</em> since midnight …","Returns the number of non-leap <em>nanoseconds</em> since midnight …","Returns the number of microseconds since the last whole …","Returns the number of milliseconds since the last whole …","Returns the number of nanoseconds since the last whole …","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the <code>NaiveWeek</code> that the date belongs to, starting …","Returns the ISO week number starting from 1.","Returns the ISO week number starting from 0.","Returns the day of week.","Returns the day of week.","Makes a new <code>NaiveDate</code> with the day of month (starting from …","Makes a new <code>NaiveDateTime</code> with the day of month (starting …","Makes a new <code>NaiveDate</code> with the day of month (starting from …","Makes a new <code>NaiveDateTime</code> with the day of month (starting …","Makes a new <code>NaiveDateTime</code> with the hour number changed.","Makes a new <code>NaiveTime</code> with the hour number changed.","Makes a new <code>NaiveDateTime</code> with the minute number changed.","Makes a new <code>NaiveTime</code> with the minute number changed.","Makes a new <code>NaiveDate</code> with the month number (starting from …","Makes a new <code>NaiveDateTime</code> with the month number (starting …","Makes a new <code>NaiveDate</code> with the month number (starting from …","Makes a new <code>NaiveDateTime</code> with the month number (starting …","Makes a new <code>NaiveDateTime</code> with nanoseconds since the whole …","Makes a new <code>NaiveTime</code> with nanoseconds since the whole …","Makes a new <code>NaiveDate</code> with the day of year (starting from …","Makes a new <code>NaiveDateTime</code> with the day of year (starting …","Makes a new <code>NaiveDate</code> with the day of year (starting from …","Makes a new <code>NaiveDateTime</code> with the day of year (starting …","Makes a new <code>NaiveDateTime</code> with the second number changed.","Makes a new <code>NaiveTime</code> with the second number changed.","Makes a new <code>NaiveDate</code> with the year number changed.","Makes a new <code>NaiveDateTime</code> with the year number changed.","Returns the year number in the calendar date.","Returns the year number in the calendar date.","Returns the year number for this ISO week.","Returns the number of whole years from the given <code>base</code> …","Given local time representation has multiple results and …","The time zone with fixed offset, from UTC-23:59:59 to …","The local timescale. This is implemented via the standard …","The conversion result from the local time to the …","Given local time representation is invalid. This can occur …","The offset from the local time to UTC.","An associated offset type. This type is used to store the …","Given local time representation has a single unique result.","The time zone.","The UTC time zone. This is the most efficient time zone …","Makes a new <code>DateTime</code> from the current date, hour, minute, …","Makes a new <code>DateTime</code> from the current date, hour, minute, …","Makes a new <code>DateTime</code> from the current date, hour, minute, …","Makes a new <code>DateTime</code> from the current date, hour, minute …","Makes a new <code>DateTime</code> from the current date and given …","","","","","","","","","","","","","","","","","Parses a string with the specified format string and …","Returns <code>Some</code> for the earliest possible conversion result, …","Makes a new <code>FixedOffset</code> for the Eastern Hemisphere with …","Makes a new <code>FixedOffset</code> for the Eastern Hemisphere with …","","","","Returns the fixed offset from UTC to the local time stored.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts the local <code>NaiveDate</code> to the timezone-aware <code>Date</code> if …","","Converts the local <code>NaiveDateTime</code> to the timezone-aware …","","Reconstructs the time zone from the offset.","","","","Converts the UTC <code>NaiveDate</code> to the local time. The UTC is …","","Converts the UTC <code>NaiveDateTime</code> to the local time. The UTC …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Makes a new <code>Date</code> from ISO week date (year and week …","Makes a new <code>Date</code> from ISO week date (year and week …","Returns <code>Some</code> for the latest possible conversion result, or …","Returns the number of seconds to add to convert from UTC …","Maps a <code>LocalResult&lt;T&gt;</code> into <code>LocalResult&lt;U&gt;</code> with given …","Returns a <code>DateTime</code> which corresponds to the current date …","Returns a <code>DateTime</code> which corresponds to the current date …","Creates the offset(s) for given local <code>NaiveDate</code> if …","","","","Creates the offset(s) for given local <code>NaiveDateTime</code> if …","","","","Creates the offset for given UTC <code>NaiveDate</code>. This cannot …","","","","Creates the offset for given UTC <code>NaiveDateTime</code>. This …","","","","Returns <code>Some</code> only when the conversion result is unique, or …","Makes a new <code>DateTime</code> from the number of non-leap seconds …","Makes a new <code>DateTime</code> from the number of non-leap …","Makes a new <code>DateTime</code> from the number of non-leap …","Makes a new <code>DateTime</code> from the number of non-leap …","Makes a new <code>DateTime</code> from the number of non-leap seconds …","","","","","","","Returns a <code>Date</code> which corresponds to the current date.","Returns a <code>Date</code> which corresponds to the current date.","","","","","","","","","","","","","Returns the single unique conversion result, or panics …","Returns the number of seconds to add to convert from the …","Makes a new <code>FixedOffset</code> for the Western Hemisphere with …","Makes a new <code>FixedOffset</code> for the Western Hemisphere with …","Make a new <code>DateTime</code> from year, month, day, time components …","Makes a new <code>Date</code> from year, month, day and the current …","Makes a new <code>Date</code> from year, month, day and the current …","Makes a new <code>Date</code> from year, day of year (DOY or “ordinal…","Makes a new <code>Date</code> from year, day of year (DOY or “ordinal…","","","","","","","","","","","","","","","",""],"i":[17,17,13,0,0,0,0,17,0,14,14,0,61,17,0,15,0,17,17,17,0,0,0,0,3,4,0,0,3,4,17,17,13,13,15,0,0,0,0,0,0,13,17,17,0,0,0,0,0,0,0,15,0,13,17,0,15,15,0,0,14,15,0,15,0,1,3,4,4,4,4,3,4,3,3,3,3,3,3,3,3,3,1,11,3,13,4,14,15,16,17,6,18,1,11,3,13,4,14,15,16,17,6,18,1,4,4,3,4,1,4,4,3,4,1,11,3,13,4,14,15,16,17,6,18,1,11,3,13,4,14,15,16,17,6,18,1,3,4,4,4,62,3,4,62,3,4,1,4,4,4,11,14,1,61,4,61,4,1,11,3,13,4,14,15,16,17,6,18,1,1,11,11,3,3,13,4,4,14,14,15,15,16,16,17,6,18,0,3,4,3,4,1,11,3,13,4,4,4,4,4,4,4,4,4,14,15,16,17,6,18,15,17,4,1,4,4,4,15,17,17,15,17,3,4,1,3,13,4,15,17,6,63,4,63,63,1,1,11,3,13,4,14,15,16,17,6,18,1,62,3,4,1,1,1,1,63,4,1,62,3,4,62,3,4,1,0,3,4,3,4,17,63,4,1,1,6,1,62,62,15,15,1,1,1,1,1,1,63,63,1,15,17,15,0,3,4,62,3,4,62,3,4,4,4,4,1,3,4,6,3,15,17,3,0,11,14,16,64,63,4,1,3,4,1,1,3,3,4,4,4,4,4,3,4,3,15,17,3,4,4,4,4,4,4,4,4,3,4,1,11,3,13,4,14,15,16,17,6,18,4,4,4,1,1,11,3,4,14,15,16,64,1,11,3,13,4,14,15,16,17,6,18,1,11,3,13,4,14,15,16,17,6,18,1,11,3,13,4,14,15,16,17,6,18,62,3,4,1,62,3,4,62,3,4,63,4,63,4,62,3,4,62,3,4,63,4,62,3,4,62,3,4,63,4,3,4,62,3,4,62,3,4,62,62,3,4,1,50,44,0,48,0,48,44,44,50,44,46,0,0,50,44,44,44,44,0,48,46,46,46,44,44,44,46,46,46,46,43,50,44,0,48,44,50,48,48,0,0,0,0,0,46,46,44,46,46,43,48,0,44,46,46,46,46,46,46,46,50,50,46,44,44,44,44,44,44,43,43,44,45,46,47,48,49,50,51,32,43,44,45,46,47,48,49,50,51,32,43,44,45,46,47,48,49,50,51,43,44,45,46,47,48,49,50,51,51,51,49,43,44,45,46,47,48,49,50,51,43,44,45,46,47,48,49,49,50,51,32,32,0,0,43,44,45,46,47,48,49,50,51,32,43,44,45,46,47,48,49,50,51,51,51,43,44,45,46,47,48,49,50,51,32,51,51,51,51,49,51,51,51,51,32,32,51,51,0,49,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,0,51,51,51,51,51,51,51,43,44,45,46,47,48,49,50,51,49,32,43,44,45,46,47,48,49,50,51,32,43,44,45,46,47,48,49,50,51,32,43,44,45,46,47,48,49,50,51,32,51,51,51,51,51,51,0,31,31,31,31,31,31,31,31,31,31,31,31,31,31,0,0,20,34,0,0,20,34,10,0,0,0,0,0,0,20,20,20,34,34,34,34,10,10,20,34,10,20,20,20,20,20,20,20,20,34,20,55,7,20,34,38,10,55,7,20,34,38,10,20,34,20,34,20,34,20,34,20,34,20,34,7,20,34,38,10,7,20,34,38,10,20,34,38,10,34,20,34,20,34,55,20,34,10,34,34,7,20,34,38,10,55,55,7,20,20,34,34,38,10,10,20,34,10,20,34,10,55,7,20,34,38,10,10,10,10,10,10,10,10,10,20,20,20,20,10,10,20,34,10,34,34,34,34,20,20,20,20,20,20,7,20,34,38,10,34,10,55,7,20,34,38,10,20,34,20,20,55,34,10,20,34,20,34,34,10,7,34,10,20,34,20,34,10,10,20,34,10,7,20,34,38,10,20,20,34,10,20,34,10,20,20,20,20,34,34,34,34,34,10,10,10,20,34,10,20,20,34,34,34,34,34,34,34,34,7,20,34,38,10,20,34,10,55,7,20,34,38,10,55,7,20,34,38,10,55,7,20,34,38,10,20,38,38,20,34,20,34,20,34,34,10,34,10,20,34,20,34,34,10,20,34,20,34,34,10,20,34,20,34,38,20,54,0,0,0,54,0,2,54,0,0,54,54,54,54,54,5,23,22,54,5,23,22,54,5,23,22,54,5,23,22,54,2,54,5,5,5,22,54,65,5,22,5,5,23,22,22,54,5,23,22,54,2,23,2,23,2,5,23,22,2,23,2,23,5,22,54,5,23,22,54,2,2,54,5,54,23,22,2,5,23,22,2,5,23,22,2,5,23,22,2,5,23,22,54,2,2,2,2,2,5,23,22,54,5,22,23,22,5,23,22,54,5,23,22,54,5,23,22,54,54,5,5,5,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,1],1],[[[3,[2]],1],[[3,[2]]]],[[[4,[2]],1],[[4,[2]]]],[[[4,[2]],5],[[4,[2]]]],[[[4,[2]],6]],[[[4,[2]],7]],[[[3,[2]],1]],[[[4,[2]],1]],[[[3,[2]],8,8,8],[[4,[2]]]],[[[3,[2]],8,8,8,8],[[4,[2]]]],[[[3,[2]],8,8,8,8],[[9,[[4,[2]]]]]],[[[3,[2]],8,8,8,8],[[4,[2]]]],[[[3,[2]],8,8,8,8],[[9,[[4,[2]]]]]],[[[3,[2]],8,8,8,8],[[4,[2]]]],[[[3,[2]],8,8,8,8],[[9,[[4,[2]]]]]],[[[3,[2]],8,8,8],[[9,[[4,[2]]]]]],[[[3,[2]],10],[[9,[[4,[2]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,1],[[9,[1]]]],[[[4,[2]],7],[[9,[[4,[2]]]]]],[[[4,[2]],6],[[9,[[4,[2]]]]]],[[[3,[2]],1],[[9,[[3,[2]]]]]],[[[4,[2]],1],[[9,[[4,[2]]]]]],[[1,1],[[9,[1]]]],[[[4,[2]],7],[[9,[[4,[2]]]]]],[[[4,[2]],6],[[9,[[4,[2]]]]]],[[[3,[2]],1],[[9,[[3,[2]]]]]],[[[4,[2]],1],[[9,[[4,[2]]]]]],[1,1],[11,11],[[[3,[[0,[12,2]]]]],[[3,[[0,[12,2]]]]]],[13,13],[[[4,[[0,[12,2]]]]],[[4,[[0,[12,2]]]]]],[14,14],[15,15],[16,16],[17,17],[6,6],[18,18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,1],19],[[[3,[2]],3],19],[[[4,[2]],4],19],[[[4,[2]]],[[3,[2]]]],[[[4,[2]]],20],[[],8],[[[3,[2]]],8],[[[4,[2]]],8],[[],8],[[[3,[2]]],8],[[[4,[2]]],8],[21,1],[[],[[4,[5]]]],[[],[[4,[22]]]],[[],[[4,[23]]]],[11,24],[14,24],[[1,25],1],[1,26],[[[4,[2]],1],[[26,[[4,[2]]]]]],[1,26],[[[4,[2]],1],[[26,[[4,[2]]]]]],[[1,1],27],[[11,11],27],[[[3,[2]],3],27],[[13,13],27],[[[4,[2]],4],27],[[14,14],27],[[15,15],27],[[16,16],27],[[17,17],27],[[6,6],27],[[18,18],27],[[1,28],[[26,[29]]]],[[1,28],[[26,[29]]]],[[11,28],[[26,[29]]]],[[11,28],[[26,[29]]]],[[[3,[2]],28],30],[[[3,[2]],28],30],[[13,28],30],[[[4,[2]],28],30],[[[4,[2]],28],30],[[14,28],30],[[14,28],30],[[15,28],30],[[15,28],30],[[16,28],30],[[16,28],30],[[17,28],30],[[6,28],30],[[18,28],30],0,[[[3,[2]],24],[[32,[31]]]],[[[4,[2]],24],[[32,[31]]]],[[[3,[2]]],32],[[[4,[2]]],32],[[]],[[]],[[]],[[]],[[[4,[23]]],[[4,[22]]]],[[]],[[[4,[5]]],[[4,[23]]]],[[[4,[22]]],[[4,[5]]]],[33,[[4,[22]]]],[33,[[4,[23]]]],[[[4,[23]]],[[4,[5]]]],[[[4,[5]]],[[4,[22]]]],[[[4,[22]]],[[4,[23]]]],[[]],[[]],[[]],[[]],[[]],[[]],[21,[[9,[15]]]],[21,[[9,[17]]]],[34,[[4,[2]]]],[35,[[26,[1,11]]]],[24,[[36,[[4,[5]]]]]],[24,[[36,[[4,[22]]]]]],[24,[[36,[[4,[23]]]]]],[24,[[26,[15]]]],[24,[[26,[17]]]],[8,[[9,[17]]]],[37,[[9,[15]]]],[37,[[9,[17]]]],[20,[[3,[2]]]],[34,[[4,[2]]]],[1],[[[3,[2]]]],[13],[[[4,[2]]]],[15],[17],[6],[[],8],[[[4,[2]]],8],[[]],[[]],[21,1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,27],[[],38],[[[3,[2]]],38],[[[4,[2]]],38],[[],1],[21,1],[21,1],[[],1],[[],8],[[[4,[2]]],8],[21,1],[[],8],[[[3,[2]]],8],[[[4,[2]]],8],[[],8],[[[3,[2]]],8],[[[4,[2]]],8],[[1,25],1],0,[[[3,[2]]],20],[[[4,[2]]],34],[[[3,[2]]],20],[[[4,[2]]],34],[17,24],[[],8],[[[4,[2]]],8],[21,1],[1,1],[8,6],[1,21],[[],25],[[],25],[15,8],[15,8],[1,21],[1,[[9,[21]]]],[1,21],[1,21],[1,[[9,[21]]]],[1,21],[[],8],[[],8],[1,21],[15,8],[17,8],[15,8],0,[[[3,[2]]]],[[[4,[2]]]],[[],8],[[[3,[2]]],8],[[[4,[2]]],8],[[],8],[[[3,[2]]],8],[[[4,[2]]],8],[24,[[36,[[4,[5]]]]]],[24,[[36,[[4,[5]]]]]],[[24,24],[[36,[[4,[5]]]]]],[[1,1],[[9,[19]]]],[[[3,[2]],3],[[9,[19]]]],[[[4,[2]],4],[[9,[19]]]],[[6,6],[[9,[19]]]],[[[3,[2]]],[[3,[2]]]],[15,15],[17,17],[[[3,[2]]],[[9,[[3,[2]]]]]],0,[39],[39],[39],[40],[[],8],[[[4,[2]]],8],[21,1],[[[3,[2]],[3,[2]]],1],[[[4,[2]],[4,[2]]],1],[[],1],[[1,1],1],[[[3,[2]],[3,[2]]],1],[[[3,[2]],1],[[3,[2]]]],[[[4,[2]],[4,[2]]],1],[[[4,[2]],1],[[4,[2]]]],[[[4,[2]],6]],[[[4,[2]],5],[[4,[2]]]],[[[4,[2]],7]],[[[3,[2]],1]],[[[4,[2]],1]],[[[3,[2]]],[[3,[2]]]],[15,15],[17,17],[[[3,[2]]],[[9,[[3,[2]]]]]],[[[4,[2]]],10],[[[4,[2]]],21],[[[4,[2]]],21],[[[4,[2]]],21],[[[4,[2]]],21],[[[4,[2]]],8],[[[4,[2]]],8],[[[4,[2]]],8],[[[3,[2]]],2],[[[4,[2]]],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[4,[2]]],41],[[[4,[2]]],41],[[[4,[2]],13,27],41],[1,[[26,[35,11]]]],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[40],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],15],[[[3,[2]]],15],[[[4,[2]]],15],[21,1],[8,9],[[[3,[2]],8],[[9,[[3,[2]]]]]],[[[4,[2]],8],[[9,[[4,[2]]]]]],[8,9],[[[3,[2]],8],[[9,[[3,[2]]]]]],[[[4,[2]],8],[[9,[[4,[2]]]]]],[8,9],[[[4,[2]],8],[[9,[[4,[2]]]]]],[8,9],[[[4,[2]],8],[[9,[[4,[2]]]]]],[8,9],[[[3,[2]],8],[[9,[[3,[2]]]]]],[[[4,[2]],8],[[9,[[4,[2]]]]]],[8,9],[[[3,[2]],8],[[9,[[3,[2]]]]]],[[[4,[2]],8],[[9,[[4,[2]]]]]],[8,9],[[[4,[2]],8],[[9,[[4,[2]]]]]],[8,9],[[[3,[2]],8],[[9,[[3,[2]]]]]],[[[4,[2]],8],[[9,[[4,[2]]]]]],[8,9],[[[3,[2]],8],[[9,[[3,[2]]]]]],[[[4,[2]],8],[[9,[[4,[2]]]]]],[8,9],[[[4,[2]],8],[[9,[[4,[2]]]]]],[[[3,[2]]],[[3,[2]]]],[[[4,[2]]],[[4,[2]]]],[25,9],[[[3,[2]],25],[[9,[[3,[2]]]]]],[[[4,[2]],25],[[9,[[4,[2]]]]]],[[],25],[[[3,[2]]],25],[[[4,[2]]],25],[[]],[[]],[[[3,[2]],[3,[2]]],[[9,[8]]]],[[[4,[2]],[4,[2]]],[[9,[8]]]],[[],1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[43,43],[44,44],[45,45],[46,46],[47,47],[48,48],[49,49],[50,50],[51,51],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],51],[49,24],[[43,43],27],[[44,44],27],[[45,45],27],[[46,46],27],[[47,47],27],[[48,48],27],[[49,49],27],[[50,50],27],[[51,51],27],[[43,28],30],[[44,28],30],[[45,28],30],[[46,28],30],[[47,28],30],[[48,28],30],[[49,28],30],[[49,28],30],[[50,28],30],[[51,28],30],[[[32,[[0,[52,12]]]],28],30],[[[32,[53]],28],30],[[28,[9,[20]],[9,[10]],9],30],[[28,[9,[20]],[9,[10]],9,48],30],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[43],[44],[45],[46],[47],[48],[49],[50],[51],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[49,50],0,0,0,[[],51],[[[9,[20]],[9,[10]],[0,[52,12]]],[[32,[[0,[52,12]]]]]],[[[9,[20]],[9,[10]],[0,[52,12]]],[[32,[[0,[52,12]]]]]],0,0,[[51,24],36],[39],0,[[51,27],36],[[51,21],36],[[51,21],36],[[51,21],36],[[51,21],36],[[51,21],36],[[51,21],36],[[51,21],36],[[51,21],36],[[51,21],36],[[51,21],36],[[51,21],36],[[51,21],36],[[51,21],36],[[51,21],36],[[51,21],36],[[51,21],36],[[51,15],36],[[51,21],36],[[51,21],36],[[51,21],36],0,0,[51,[[36,[[4,[5]]]]]],[51,[[36,[[4,[2]]]]]],[51,[[36,[5]]]],[51,[[36,[20]]]],[[51,25],[[36,[34]]]],[51,[[36,[10]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],41],[[],41],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],0,0,0,0,0,0,0,[[]],[[]],[31,31],[[]],[[31,28],30],[[]],[[]],[[]],[24,31],[31,[[9,[48]]]],[[]],[[],26],[[],26],[[],42],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[20,7]],[[20,6]],[[20,1],20],[[34,5],34],[[34,1],34],[[34,6]],[[34,7]],[[10,1],10],[[10,5],10],[[20,1]],[[34,1]],[[10,1]],[[20,8,8,8],34],[[20,8,8,8,8],34],[[20,8,8,8,8],[[9,[34]]]],[[20,8,8,8,8],34],[[20,8,8,8,8],[[9,[34]]]],[[20,8,8,8,8],34],[[20,8,8,8,8],[[9,[34]]]],[[20,8,8,8],[[9,[34]]]],[[34,2],[[54,[[4,[2]]]]]],[[20,10],34],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[20,7],[[9,[20]]]],[[34,7],[[9,[34]]]],[[20,6],[[9,[20]]]],[[34,6],[[9,[34]]]],[[20,1],[[9,[20]]]],[[34,1],[[9,[34]]]],[[20,7],[[9,[20]]]],[[34,7],[[9,[34]]]],[[20,6],[[9,[20]]]],[[34,6],[[9,[34]]]],[[20,1],[[9,[20]]]],[[34,1],[[9,[34]]]],[7,7],[20,20],[34,34],[38,38],[10,10],[[]],[[]],[[]],[[]],[[]],[[20,20],19],[[34,34],19],[[38,38],19],[[10,10],19],[34,20],[20,8],[34,8],[20,8],[34,8],[55,[[56,[20]]]],[[],20],[[],34],[[],10],[[34,1],[[26,[34]]]],[[34,1],[[26,[34]]]],[[7,7],27],[[20,20],27],[[34,34],27],[[38,38],27],[[10,10],27],[55,20],[[55,28],30],[[7,28],30],[[20,28],30],[[20,28],30],[[34,28],30],[[34,28],30],[[38,28],30],[[10,28],30],[[10,28],30],[[20,24],[[32,[31]]]],[[34,24],[[32,[31]]]],[[10,24],[[32,[31]]]],[20,32],[34,32],[10,32],[[]],[[]],[[]],[[]],[[]],[[]],[[8,8,8],10],[[8,8,8,8],10],[[8,8,8,8],[[9,[10]]]],[[8,8,8,8],10],[[8,8,8,8],[[9,[10]]]],[[8,8,8,8],10],[[8,8,8,8],[[9,[10]]]],[[8,8,8],[[9,[10]]]],[[25,8,15],20],[[25,8,15],[[9,[20]]]],[25,20],[25,[[9,[20]]]],[[8,8],10],[[8,8],[[9,[10]]]],[24,[[36,[20]]]],[24,[[36,[34]]]],[24,[[36,[10]]]],[[21,8],34],[21,[[9,[34]]]],[21,[[9,[34]]]],[[21,8],[[9,[34]]]],[[25,8,15,57],20],[[25,8,15,57],[[9,[20]]]],[[25,8,8],20],[[25,8,8],[[9,[20]]]],[[25,8],20],[[25,8],[[9,[20]]]],[7],[20],[34],[38],[10],[34,8],[10,8],[[]],[[]],[[]],[[]],[[]],[[]],[20,38],[34,38],0,0,[55,20],[34,8],[10,8],[20,8],[34,8],[20,8],[34,8],[34,8],[10,8],[37,7],[[20,10],34],[10,8],[20,8],[34,8],[20,8],[34,8],[[10,1]],[[10,1]],[[24,24],[[36,[20]]]],[[24,24],[[36,[34]]]],[[24,24],[[36,[10]]]],[[7,7],[[9,[19]]]],[[20,20],[[9,[19]]]],[[34,34],[[9,[19]]]],[[38,38],[[9,[19]]]],[[10,10],[[9,[19]]]],[20,20],[20,[[9,[20]]]],[34,8],[10,8],[[20,20],1],[[34,34],1],[[10,10],1],[[20,20],1],[[20,6]],[[20,1],20],[[20,7]],[[34,5],34],[[34,6]],[[34,1],34],[[34,34],1],[[34,7]],[[10,1],10],[[10,10],1],[[10,5],10],[[20,1]],[[34,1]],[[10,1]],[20,20],[20,[[9,[20]]]],[34,10],[34,21],[34,21],[34,21],[34,21],[34,8],[34,8],[34,8],[[]],[[]],[[]],[[]],[[]],[[],41],[[],41],[[],41],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[20,15],55],[38,8],[38,8],[20,15],[34,15],[[20,8],[[9,[20]]]],[[34,8],[[9,[34]]]],[[20,8],[[9,[20]]]],[[34,8],[[9,[34]]]],[[34,8],[[9,[34]]]],[[10,8],[[9,[10]]]],[[34,8],[[9,[34]]]],[[10,8],[[9,[10]]]],[[20,8],[[9,[20]]]],[[34,8],[[9,[34]]]],[[20,8],[[9,[20]]]],[[34,8],[[9,[34]]]],[[34,8],[[9,[34]]]],[[10,8],[[9,[10]]]],[[20,8],[[9,[20]]]],[[34,8],[[9,[34]]]],[[20,8],[[9,[20]]]],[[34,8],[[9,[34]]]],[[34,8],[[9,[34]]]],[[10,8],[[9,[10]]]],[[20,25],[[9,[20]]]],[[34,25],[[9,[34]]]],[20,25],[34,25],[38,25],[[20,20],[[9,[8]]]],0,0,0,0,0,0,0,0,0,0,[[[54,[[3,[2]]]],8,8,8,8],[[54,[[4,[2]]]]]],[[[54,[[3,[2]]]],8,8,8,8],[[54,[[4,[2]]]]]],[[[54,[[3,[2]]]],8,8,8,8],[[54,[[4,[2]]]]]],[[[54,[[3,[2]]]],8,8,8],[[54,[[4,[2]]]]]],[[[54,[[3,[2]]]],10],[[54,[[4,[2]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[5,5],[23,23],[22,22],[[[54,[12]]],[[54,[12]]]],[[]],[[]],[[]],[[]],[[24,24],[[36,[4]]]],[54,9],[25,5],[25,[[9,[5]]]],[[5,5],27],[[22,22],27],[[[54,[58]],54],27],[[],5],[5,5],[22,5],[[5,28],30],[[5,28],30],[[23,28],30],[[22,28],30],[[22,28],30],[[[54,[53]],28],30],[[]],[[]],[[]],[[]],[20,[[54,[3]]]],[[23,20],[[54,[[3,[23]]]]]],[34,[[54,[4]]]],[[23,34],[[54,[[4,[23]]]]]],[[]],[5,5],[5,23],[22,22],[20,3],[[23,20],[[3,[23]]]],[34,4],[[23,34],[[4,[23]]]],[5],[22],[[[54,[59]]]],[[]],[[]],[[]],[[]],[[25,8,15],3],[[25,8,15],[[54,[3]]]],[54,9],[5,25],[[54,60],54],[[],[[4,[23]]]],[[],[[4,[22]]]],[20,54],[[5,20],[[54,[5]]]],[[23,20],[[54,[5]]]],[[22,20],[[54,[22]]]],[34,54],[[5,34],[[54,[5]]]],[[23,34],[[54,[5]]]],[[22,34],[[54,[22]]]],[20],[[5,20],5],[[23,20],5],[[22,20],22],[34],[[5,34],5],[[23,34],5],[[22,34],22],[54,9],[[21,8],4],[21,4],[21,[[54,[4]]]],[21,4],[[21,8],[[54,[4]]]],[[]],[[]],[[]],[[]],[[],41],[[],41],[[],[[3,[23]]]],[[],[[3,[22]]]],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],42],[[],42],[[],42],[[],42],[[[54,[53]]],53],[5,25],[25,5],[25,[[9,[5]]]],[[25,8,8,8,8,8],[[54,[4]]]],[[25,8,8],3],[[25,8,8],[[54,[3]]]],[[25,8],3],[[25,8],[[54,[3]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"p":[[3,"Duration"],[8,"TimeZone"],[3,"Date"],[3,"DateTime"],[3,"FixedOffset"],[3,"Months"],[3,"Days"],[15,"u32"],[4,"Option"],[3,"NaiveTime"],[3,"OutOfRangeError"],[8,"Clone"],[4,"SecondsFormat"],[4,"RoundingError"],[4,"Weekday"],[3,"ParseWeekdayError"],[4,"Month"],[3,"ParseMonthError"],[4,"Ordering"],[3,"NaiveDate"],[15,"i64"],[3,"Utc"],[3,"Local"],[15,"str"],[15,"i32"],[4,"Result"],[15,"bool"],[3,"Formatter"],[3,"Error"],[6,"Result"],[3,"StrftimeItems"],[3,"DelayedFormat"],[3,"SystemTime"],[3,"NaiveDateTime"],[3,"Duration"],[6,"ParseResult"],[15,"u64"],[3,"IsoWeek"],[3,"Demand"],[15,"u16"],[3,"String"],[3,"TypeId"],[4,"Pad"],[4,"Numeric"],[3,"InternalNumeric"],[4,"Fixed"],[3,"InternalFixed"],[4,"Item"],[3,"ParseError"],[4,"ParseErrorKind"],[3,"Parsed"],[8,"Iterator"],[8,"Debug"],[4,"LocalResult"],[3,"NaiveWeek"],[3,"RangeInclusive"],[15,"u8"],[8,"PartialEq"],[8,"Hash"],[8,"FnMut"],[8,"DurationRound"],[8,"Datelike"],[8,"Timelike"],[8,"SubsecRound"],[8,"Offset"]]},\
"color_quant":{"doc":"Color quantization library","t":"DLLLLLLLLLLLLLL","n":["NeuQuant","borrow","borrow_mut","color_map_rgb","color_map_rgba","from","index_of","init","into","lookup","map_pixel","new","try_from","try_into","type_id"],"q":["color_quant","","","","","","","","","","","","","",""],"d":["","","","Returns the RGBA color map calculated from the sample.","Returns the RGBA color map calculated from the sample.","Returns the argument unchanged.","Finds the best-matching index in the color map.","Initializes the neuronal network and trains it with the …","Calls <code>U::from(self)</code>.","Lookup pixel values for color at <code>idx</code> in the colormap.","Maps the rgba-pixel in-place to the best-matching color in …","Creates a new neuronal network and trains it with the …","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[[]],[[]],[1,[[3,[2]]]],[1,[[3,[2]]]],[[]],[1,4],[1],[[]],[[1,4],5],[1],[[6,4],1],[[],7],[[],7],[[],8]],"p":[[3,"NeuQuant"],[15,"u8"],[3,"Vec"],[15,"usize"],[4,"Option"],[15,"i32"],[4,"Result"],[3,"TypeId"]]},\
"compouiler":{"doc":"","t":"NDNNNNNNNNNNENNNNRLLLLLLLLLLLLLLFLLALLLLLLLAAFFFFFFFFFFFFFFFFFFFFF","n":["Assignment","CSVParser","Connect","EOI","Edge","EdgeDefinition","Edges","GraphDefinition","Graphname","NodeAccess","Nodename","Program","Rule","ShortestPath","Statement","Value","WHITESPACE","_PEST_GRAMMAR_CSVParser","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cmp","eq","fmt","from","from","hash","into","into","main","parse","partial_cmp","rules","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","hidden","visible","skip","ASCII_ALPHA_LOWER","ASCII_ALPHA_UPPER","ASCII_DIGIT","Assignment","Connect","EOI","Edge","EdgeDefinition","Edges","GraphDefinition","Graphname","NEWLINE","NodeAccess","Nodename","Program","SOI","ShortestPath","Statement","Value","WHITESPACE"],"q":["compouiler","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","compouiler::rules","","compouiler::rules::hidden","compouiler::rules::visible","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,15,1,15,1,1,1,1,1,1,15,1,1,15,0,15,1,0,1,1,15,1,15,1,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[1,1],[[]],[[1,1],2],[[1,1],3],[[1,4],5],[[]],[[]],[1],[[]],[[]],[[]],[[1,6],[[9,[[7,[1]],[8,[1]]]]]],[[1,1],[[10,[2]]]],0,[[]],[[],9],[[],9],[[],9],[[],9],[[],11],[[],11],0,0,[[[13,[[12,[1]]]]],[[14,[[13,[[12,[1]]]]]]]],[[[13,[[12,[1]]]]],[[14,[[13,[[12,[1]]]]]]]],[[[13,[[12,[1]]]]],[[14,[[13,[[12,[1]]]]]]]],[[[13,[[12,[1]]]]],[[14,[[13,[[12,[1]]]]]]]],[[[13,[[12,[1]]]]],[[14,[[13,[[12,[1]]]]]]]],[[[13,[[12,[1]]]]],[[14,[[13,[[12,[1]]]]]]]],[[[13,[[12,[1]]]]],[[14,[[13,[[12,[1]]]]]]]],[[[13,[[12,[1]]]]],[[14,[[13,[[12,[1]]]]]]]],[[[13,[[12,[1]]]]],[[14,[[13,[[12,[1]]]]]]]],[[[13,[[12,[1]]]]],[[14,[[13,[[12,[1]]]]]]]],[[[13,[[12,[1]]]]],[[14,[[13,[[12,[1]]]]]]]],[[[13,[[12,[1]]]]],[[14,[[13,[[12,[1]]]]]]]],[[[13,[[12,[1]]]]],[[14,[[13,[[12,[1]]]]]]]],[[[13,[[12,[1]]]]],[[14,[[13,[[12,[1]]]]]]]],[[[13,[[12,[1]]]]],[[14,[[13,[[12,[1]]]]]]]],[[[13,[[12,[1]]]]],[[14,[[13,[[12,[1]]]]]]]],[[[13,[[12,[1]]]]],[[14,[[13,[[12,[1]]]]]]]],[[[13,[[12,[1]]]]],[[14,[[13,[[12,[1]]]]]]]],[[[13,[[12,[1]]]]],[[14,[[13,[[12,[1]]]]]]]],[[[13,[[12,[1]]]]],[[14,[[13,[[12,[1]]]]]]]],[[[13,[[12,[1]]]]],[[14,[[13,[[12,[1]]]]]]]]],"p":[[4,"Rule"],[4,"Ordering"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"str"],[3,"Pairs"],[3,"Error"],[4,"Result"],[4,"Option"],[3,"TypeId"],[3,"ParserState"],[3,"Box"],[6,"ParseResult"],[3,"CSVParser"]]},\
"core_foundation":{"doc":"This crate provides wrappers around the underlying …","t":"IAAAAAAAAOAAAOOOAAAAAAAAADFFGFFDFGFFFFGFFFFFFFFFDGGFFFGFFGGGDLLLLLLLLLLLLLLMLLMLLLLLLLLLLLLLLLLLLLLLHLLLMMLLLLLLLLLLLLLLLLLLLMLLDFFFFFGFFDGDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGDFGDGFFGFFFFGFGGGGFEFFFFFGGIGGDFFFDGGNIINDDNGQGIIIMLKLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKMLLLLLLLLLLLHHHHHHHHMMGLMMMMLLKLLLLLKLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLMKLLKLLDFGLLLLLLLLLLLLLLLHHLLLLLLLLLLDFFFFFFFFFFFGDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDFFFFFFFFFFFFFFGGFFFGDLLLLLLLLLLLLLLLLLHHHHHHHHHHHHHHHLLLLLLLLLLLLLDFFFFFFGDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGFDFFFFFGGDLLLLLLLLLLLLLLLLLLLHHLLLLLLLLLLLLLLLLDFGFFGFFFGFFFFGDGGFFFGFDDGDLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLMMLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLHHLLLMMLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLDFFFFGDLLLLLLLLLLLLLLLLLLLLLLHHHHLLLLLLLLLLLLLLLDGDFFFFFFFFFGGDLLLLLLLLLLLLLLMLLLLLLLLLMLLLLRRLMMLLLLLLLLLLLLLLLLLMLLGGDFFGGDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFGDFFFFFGGDELLLLLLLLLLLLLLLLLLLLLLLLLLHHRRRRRRRRRRRRRRRRRLLLLLLLLLLLLLLLLLLLLLLDFFGGGILLLLLLLFFLLLLLLLLLLRRRRRRLLLLLLLLLLDGFFFFFFFFFFFFFFGDGDFFFFFFFFGGFFFFFEDDDFFFFFFGFFDGDFFFFFFFFFFGFFFNNNNDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLMMMMLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLMLLMMMMMMLLLLLLLLLLLLLRRRRRHHRRRRRRLMMMMMMLLLMMMMLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLDGFDFGFFGFFFFFFGGGGDLLLLLLLLLLLLMLLMLLLLLLLMLLLHLMMLLLLLLLLLLLLLLLMLLDGFFFFGGFFFFFGGDLLLLLLLLLLLLLLLLLLLLLLLLHLLLLLLLLLLLLLLLDFFFFFFGDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDGGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGGFFFFDLLLLLLLLLLLLLLLLLLLLLLHHHHHHHHHHHHRHHHHHHHHHHHHHHHHHHRHHHHHRLLLLLLLLLLLLLLDDFFFFGDLLLLLLLLMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["ConcreteCFType","array","attributed_string","base","boolean","bundle","characterset","data","date","declare_TCFType","dictionary","error","filedescriptor","impl_CFComparison","impl_CFTypeDescription","impl_TCFType","mach_port","number","propertylist","runloop","set","string","timezone","url","uuid","CFArray","CFArrayAppendArray","CFArrayAppendValue","CFArrayApplierFunction","CFArrayApplyFunction","CFArrayBSearchValues","CFArrayCallBacks","CFArrayContainsValue","CFArrayCopyDescriptionCallBack","CFArrayCreate","CFArrayCreateCopy","CFArrayCreateMutable","CFArrayCreateMutableCopy","CFArrayEqualCallBack","CFArrayExchangeValuesAtIndices","CFArrayGetCount","CFArrayGetCountOfValue","CFArrayGetFirstIndexOfValue","CFArrayGetLastIndexOfValue","CFArrayGetTypeID","CFArrayGetValueAtIndex","CFArrayGetValues","CFArrayInsertValueAtIndex","CFArrayIterator","CFArrayRef","CFArrayReleaseCallBack","CFArrayRemoveAllValues","CFArrayRemoveValueAtIndex","CFArrayReplaceValues","CFArrayRetainCallBack","CFArraySetValueAtIndex","CFArraySortValues","CFComparatorFunction","CFIndex","CFMutableArrayRef","__CFArray","as_CFTypeRef","as_concrete_TypeRef","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","copyDescription","drop","eq","equal","fmt","from","from","from","from","from_CFTypes","from_copyable","from_mut_void","from_void","get","get_all_values","get_unchecked","get_values","into","into","into","into","into_iter","into_iter","into_untyped","iter","kCFTypeArrayCallBacks","len","len","next","release","retain","to_owned","to_owned","to_untyped","to_void","to_void","to_void","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","version","wrap_under_create_rule","wrap_under_get_rule","CFAttributedString","CFAttributedStringCreate","CFAttributedStringCreateMutable","CFAttributedStringCreateMutableCopy","CFAttributedStringGetLength","CFAttributedStringGetTypeID","CFAttributedStringRef","CFAttributedStringReplaceString","CFAttributedStringSetAttribute","CFMutableAttributedString","CFMutableAttributedStringRef","__CFAttributedString","as_CFTypeRef","as_CFTypeRef","as_concrete_TypeRef","as_concrete_TypeRef","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","char_len","char_len","clone","clone","clone_into","clone_into","default","drop","drop","eq","eq","from","from","from","from_mut_void","from_mut_void","from_void","from_void","into","into","into","new","new","replace_str","set_attribute","to_owned","to_owned","to_void","to_void","to_void","to_void","to_void","to_void","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","wrap_under_create_rule","wrap_under_create_rule","wrap_under_get_rule","wrap_under_get_rule","Boolean","CFAllocator","CFAllocatorAllocate","CFAllocatorAllocateCallBack","CFAllocatorContext","CFAllocatorCopyDescriptionCallBack","CFAllocatorCreate","CFAllocatorDeallocate","CFAllocatorDeallocateCallBack","CFAllocatorGetContext","CFAllocatorGetDefault","CFAllocatorGetPreferredSizeForSize","CFAllocatorGetTypeID","CFAllocatorPreferredSizeCallBack","CFAllocatorReallocate","CFAllocatorReallocateCallBack","CFAllocatorRef","CFAllocatorReleaseCallBack","CFAllocatorRetainCallBack","CFAllocatorSetDefault","CFComparisonResult","CFCopyDescription","CFEqual","CFGetRetainCount","CFGetTypeID","CFHash","CFHashCode","CFIndex","CFIndexConvertible","CFNullRef","CFOptionFlags","CFRange","CFRelease","CFRetain","CFShow","CFType","CFTypeID","CFTypeRef","EqualTo","FromMutVoid","FromVoid","GreaterThan","ItemMutRef","ItemRef","LessThan","OSStatus","Ref","SInt32","TCFType","TCFTypeRef","ToVoid","allocate","as_CFType","as_CFTypeRef","as_CFTypeRef","as_CFTypeRef","as_concrete_TypeRef","as_concrete_TypeRef","as_concrete_TypeRef","as_void_ptr","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","copyDescription","deallocate","deref","deref","deref_mut","downcast","downcast_into","drop","drop","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_mut_void","from_mut_void","from_mut_void","from_void","from_void","from_void","from_void_ptr","info","init","instance_of","into","into","into","into","into","into","into","into","into_CFType","kCFAllocatorDefault","kCFAllocatorMalloc","kCFAllocatorMallocZone","kCFAllocatorNull","kCFAllocatorSystemDefault","kCFAllocatorUseContext","kCFNotFound","kCFNull","length","location","mach_port_t","new","preferredSize","reallocate","release","retain","retain_count","show","to_CFIndex","to_owned","to_owned","to_owned","to_owned","to_owned","to_void","to_void","to_void","to_void","to_void","to_void","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_of","version","wrap_under_create_rule","wrap_under_create_rule","wrap_under_create_rule","wrap_under_get_rule","wrap_under_get_rule","wrap_under_get_rule","CFBoolean","CFBooleanGetTypeID","CFBooleanRef","as_CFTypeRef","as_concrete_TypeRef","borrow","borrow_mut","clone","clone_into","drop","eq","false_value","fmt","from","from","from_mut_void","from_void","into","kCFBooleanFalse","kCFBooleanTrue","to_owned","to_void","to_void","true_value","try_from","try_into","type_id","type_id","wrap_under_create_rule","wrap_under_get_rule","CFBundle","CFBundleCopyBundleURL","CFBundleCopyExecutableURL","CFBundleCopyPrivateFrameworksURL","CFBundleCopyResourcesDirectoryURL","CFBundleCopySharedSupportURL","CFBundleCreate","CFBundleGetBundleWithIdentifier","CFBundleGetFunctionPointerForName","CFBundleGetInfoDictionary","CFBundleGetMainBundle","CFBundleGetTypeID","CFBundleRef","__CFBundle","as_CFTypeRef","as_concrete_TypeRef","borrow","borrow","borrow_mut","borrow_mut","bundle_resources_url","bundle_url","bundle_with_identifier","clone","clone_into","drop","eq","executable_url","from","from","from_mut_void","from_void","function_pointer_for_name","info_dictionary","into","into","main_bundle","new","path","private_frameworks_url","resources_path","shared_support_url","to_owned","to_void","to_void","to_void","try_from","try_from","try_into","try_into","type_id","type_id","type_id","wrap_under_create_rule","wrap_under_get_rule","CFCharacterSet","CFCharacterSetAddCharactersInRange","CFCharacterSetAddCharactersInString","CFCharacterSetCreateBitmapRepresentation","CFCharacterSetCreateCopy","CFCharacterSetCreateMutable","CFCharacterSetCreateMutableCopy","CFCharacterSetCreateWithBitmapRepresentation","CFCharacterSetCreateWithCharactersInRange","CFCharacterSetCreateWithCharactersInString","CFCharacterSetGetPredefined","CFCharacterSetGetTypeID","CFCharacterSetIntersect","CFCharacterSetInvert","CFCharacterSetIsCharacterMember","CFCharacterSetPredefinedSet","CFCharacterSetRef","CFCharacterSetRemoveCharactersInRange","CFCharacterSetRemoveCharactersInString","CFCharacterSetUnion","CFMutableCharacterSetRef","__CFCharacterSet","as_CFTypeRef","as_concrete_TypeRef","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","drop","eq","fmt","from","from","from_mut_void","from_void","into","into","kCFCharacterSetAlphaNumeric","kCFCharacterSetCapitalizedLetter","kCFCharacterSetControl","kCFCharacterSetDecimalDigit","kCFCharacterSetDecomposable","kCFCharacterSetIllegal","kCFCharacterSetLetter","kCFCharacterSetLowercaseLetter","kCFCharacterSetNewline","kCFCharacterSetNonBase","kCFCharacterSetPunctuation","kCFCharacterSetSymbol","kCFCharacterSetUppercaseLetter","kCFCharacterSetWhitespace","kCFCharacterSetWhitespaceAndNewline","to_owned","to_void","to_void","to_void","try_from","try_from","try_into","try_into","type_id","type_id","type_id","wrap_under_create_rule","wrap_under_get_rule","CFData","CFDataCreate","CFDataCreateWithBytesNoCopy","CFDataGetBytePtr","CFDataGetBytes","CFDataGetLength","CFDataGetTypeID","CFDataRef","__CFData","as_CFTypeRef","as_concrete_TypeRef","borrow","borrow","borrow_mut","borrow_mut","bytes","clone","clone_into","deref","drop","eq","fmt","from","from","from_arc","from_buffer","from_mut_void","from_void","into","into","len","to_owned","to_void","to_void","to_void","try_from","try_from","try_into","try_into","type_id","type_id","type_id","wrap_under_create_rule","wrap_under_get_rule","CFAbsoluteTime","CFAbsoluteTimeGetCurrent","CFDate","CFDateCompare","CFDateCreate","CFDateGetAbsoluteTime","CFDateGetTimeIntervalSinceDate","CFDateGetTypeID","CFDateRef","CFTimeInterval","__CFDate","abs_time","as_CFTypeRef","as_concrete_TypeRef","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cmp","drop","eq","fmt","from","from","from_mut_void","from_void","into","into","kCFAbsoluteTimeIntervalSince1904","kCFAbsoluteTimeIntervalSince1970","new","now","partial_cmp","to_owned","to_void","to_void","to_void","try_from","try_from","try_into","try_into","type_id","type_id","type_id","wrap_under_create_rule","wrap_under_get_rule","CFDictionary","CFDictionaryAddValue","CFDictionaryApplierFunction","CFDictionaryApplyFunction","CFDictionaryContainsKey","CFDictionaryCopyDescriptionCallBack","CFDictionaryCreate","CFDictionaryCreateMutable","CFDictionaryCreateMutableCopy","CFDictionaryEqualCallBack","CFDictionaryGetCount","CFDictionaryGetKeysAndValues","CFDictionaryGetTypeID","CFDictionaryGetValueIfPresent","CFDictionaryHashCallBack","CFDictionaryKeyCallBacks","CFDictionaryRef","CFDictionaryReleaseCallBack","CFDictionaryRemoveAllValues","CFDictionaryRemoveValue","CFDictionaryReplaceValue","CFDictionaryRetainCallBack","CFDictionarySetValue","CFDictionaryValueCallBacks","CFMutableDictionary","CFMutableDictionaryRef","__CFDictionary","add","as_CFTypeRef","as_CFTypeRef","as_concrete_TypeRef","as_concrete_TypeRef","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","contains_key","contains_key","copyDescription","copyDescription","copy_with_capacity","default","drop","drop","eq","eq","equal","equal","find","find","fmt","fmt","from","from","from","from","from","from","from_CFType_pairs","from_CFType_pairs","from_mut_void","from_mut_void","from_void","from_void","get","get","get_keys_and_values","get_keys_and_values","hash","into","into","into","into","into","into_untyped","into_untyped","is_empty","is_empty","kCFTypeDictionaryKeyCallBacks","kCFTypeDictionaryValueCallBacks","len","len","new","release","release","remove","remove_all","replace","retain","retain","set","to_immutable","to_mutable","to_owned","to_owned","to_owned","to_owned","to_untyped","to_untyped","to_void","to_void","to_void","to_void","to_void","to_void","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","version","version","with_capacity","wrap_under_create_rule","wrap_under_create_rule","wrap_under_get_rule","wrap_under_get_rule","CFError","CFErrorCopyDescription","CFErrorGetCode","CFErrorGetDomain","CFErrorGetTypeID","CFErrorRef","__CFError","as_CFTypeRef","as_concrete_TypeRef","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","code","description","description","domain","drop","eq","fmt","fmt","from","from","from_mut_void","from_void","into","into","kCFErrorDomainCocoa","kCFErrorDomainMach","kCFErrorDomainOSStatus","kCFErrorDomainPOSIX","provide","to_owned","to_string","to_void","to_void","to_void","try_from","try_from","try_into","try_into","type_id","type_id","type_id","wrap_under_create_rule","wrap_under_get_rule","CFFileDescriptor","CFFileDescriptorCallBack","CFFileDescriptorContext","CFFileDescriptorCreate","CFFileDescriptorCreateRunLoopSource","CFFileDescriptorDisableCallBacks","CFFileDescriptorEnableCallBacks","CFFileDescriptorGetContext","CFFileDescriptorGetNativeDescriptor","CFFileDescriptorGetTypeID","CFFileDescriptorInvalidate","CFFileDescriptorIsValid","CFFileDescriptorNativeDescriptor","CFFileDescriptorRef","__CFFileDescriptor","as_CFTypeRef","as_concrete_TypeRef","as_raw_fd","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","context","copyDescription","disable_callbacks","drop","enable_callbacks","eq","from","from","from","from_mut_void","from_void","info","into","into","into","invalidate","kCFFileDescriptorReadCallBack","kCFFileDescriptorWriteCallBack","new","release","retain","to_owned","to_owned","to_run_loop_source","to_void","to_void","to_void","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","type_id","valid","version","wrap_under_create_rule","wrap_under_get_rule","CFAllocatorRef","CFIndex","CFMachPort","CFMachPortCreateRunLoopSource","CFMachPortGetTypeID","CFMachPortRef","CFTypeID","__CFMachPort","as_CFTypeRef","as_concrete_TypeRef","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","create_runloop_source","drop","eq","fmt","from","from","from_mut_void","from_void","into","into","to_owned","to_void","to_void","to_void","to_void","try_from","try_from","try_into","try_into","type_id","type_id","type_id","wrap_under_create_rule","wrap_under_get_rule","CFBooleanGetTypeID","CFBooleanGetValue","CFBooleanRef","CFNumber","CFNumberCompare","CFNumberCreate","CFNumberGetType","CFNumberGetTypeID","CFNumberGetValue","CFNumberRef","CFNumberType","__CFBoolean","__CFNumber","as_CFTypeRef","as_concrete_TypeRef","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","cmp","drop","eq","fmt","from","from","from","from","from","from","from","from_mut_void","from_void","into","into","into","kCFBooleanFalse","kCFBooleanTrue","kCFNumberCFIndexType","kCFNumberCGFloatType","kCFNumberCharType","kCFNumberDoubleType","kCFNumberFloat32Type","kCFNumberFloat64Type","kCFNumberFloatType","kCFNumberIntType","kCFNumberLongLongType","kCFNumberLongType","kCFNumberMaxType","kCFNumberNSIntegerType","kCFNumberSInt16Type","kCFNumberSInt32Type","kCFNumberSInt64Type","kCFNumberSInt8Type","kCFNumberShortType","partial_cmp","to_f32","to_f64","to_i32","to_i64","to_owned","to_void","to_void","to_void","to_void","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","type_id","wrap_under_create_rule","wrap_under_get_rule","CFPropertyList","CFPropertyListCreateData","CFPropertyListCreateWithData","CFPropertyListFormat","CFPropertyListMutabilityOptions","CFPropertyListRef","CFPropertyListSubClass","as_CFType","as_CFTypeRef","as_concrete_TypeRef","borrow","borrow_mut","clone","clone_into","create_data","create_with_data","downcast","downcast_into","drop","eq","fmt","from","instance_of","into","into_CFPropertyList","into_CFType","kCFPropertyListBinaryFormat_v1_0","kCFPropertyListImmutable","kCFPropertyListMutableContainers","kCFPropertyListMutableContainersAndLeaves","kCFPropertyListOpenStepFormat","kCFPropertyListXMLFormat_v1_0","retain_count","show","to_CFPropertyList","to_owned","try_from","try_into","type_id","type_of","wrap_under_create_rule","wrap_under_get_rule","CFRunLoop","CFRunLoopActivity","CFRunLoopAddCommonMode","CFRunLoopAddObserver","CFRunLoopAddSource","CFRunLoopAddTimer","CFRunLoopContainsObserver","CFRunLoopContainsSource","CFRunLoopContainsTimer","CFRunLoopCopyAllModes","CFRunLoopCopyCurrentMode","CFRunLoopGetCurrent","CFRunLoopGetMain","CFRunLoopGetNextTimerFireDate","CFRunLoopGetTypeID","CFRunLoopIsWaiting","CFRunLoopMode","CFRunLoopObserver","CFRunLoopObserverCallBack","CFRunLoopObserverContext","CFRunLoopObserverCreate","CFRunLoopObserverDoesRepeat","CFRunLoopObserverGetActivities","CFRunLoopObserverGetContext","CFRunLoopObserverGetOrder","CFRunLoopObserverGetTypeID","CFRunLoopObserverInvalidate","CFRunLoopObserverIsValid","CFRunLoopObserverRef","CFRunLoopRef","CFRunLoopRemoveObserver","CFRunLoopRemoveSource","CFRunLoopRemoveTimer","CFRunLoopRun","CFRunLoopRunInMode","CFRunLoopRunResult","CFRunLoopSource","CFRunLoopSourceContext","CFRunLoopSourceContext1","CFRunLoopSourceCreate","CFRunLoopSourceGetContext","CFRunLoopSourceGetOrder","CFRunLoopSourceGetTypeID","CFRunLoopSourceInvalidate","CFRunLoopSourceIsValid","CFRunLoopSourceRef","CFRunLoopSourceSignal","CFRunLoopStop","CFRunLoopTimer","CFRunLoopTimerCallBack","CFRunLoopTimerContext","CFRunLoopTimerCreate","CFRunLoopTimerDoesRepeat","CFRunLoopTimerGetContext","CFRunLoopTimerGetInterval","CFRunLoopTimerGetNextFireDate","CFRunLoopTimerGetOrder","CFRunLoopTimerGetTolerance","CFRunLoopTimerGetTypeID","CFRunLoopTimerInvalidate","CFRunLoopTimerIsValid","CFRunLoopTimerRef","CFRunLoopTimerSetNextFireDate","CFRunLoopTimerSetTolerance","CFRunLoopWakeUp","Finished","HandledSource","Stopped","TimedOut","__CFRunLoop","__CFRunLoopObserver","__CFRunLoopSource","__CFRunLoopTimer","add_observer","add_source","add_timer","as_CFTypeRef","as_CFTypeRef","as_CFTypeRef","as_CFTypeRef","as_concrete_TypeRef","as_concrete_TypeRef","as_concrete_TypeRef","as_concrete_TypeRef","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cancel","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","contains_observer","contains_source","contains_timer","copyDescription","copyDescription","copyDescription","copyDescription","current_mode","drop","drop","drop","drop","eq","eq","eq","eq","eq","equal","equal","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from_file_descriptor","from_mut_void","from_mut_void","from_mut_void","from_mut_void","from_void","from_void","from_void","from_void","getPort","get_current","get_main","hash","hash","info","info","info","info","into","into","into","into","into","into","into","into","into","into","into","into","into","kCFRunLoopAfterWaiting","kCFRunLoopAllActivities","kCFRunLoopBeforeSources","kCFRunLoopBeforeTimers","kCFRunLoopBeforeWaiting","kCFRunLoopCommonModes","kCFRunLoopDefaultMode","kCFRunLoopEntry","kCFRunLoopExit","kCFRunLoopRunFinished","kCFRunLoopRunHandledSource","kCFRunLoopRunStopped","kCFRunLoopRunTimedOut","new","perform","perform","release","release","release","release","remove_observer","remove_source","remove_timer","retain","retain","retain","retain","run_current","run_in_mode","schedule","stop","to_owned","to_owned","to_owned","to_owned","to_owned","to_void","to_void","to_void","to_void","to_void","to_void","to_void","to_void","to_void","to_void","to_void","to_void","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","version","version","version","version","wrap_under_create_rule","wrap_under_create_rule","wrap_under_create_rule","wrap_under_create_rule","wrap_under_get_rule","wrap_under_get_rule","wrap_under_get_rule","wrap_under_get_rule","CFSet","CFSetApplierFunction","CFSetApplyFunction","CFSetCallBacks","CFSetContainsValue","CFSetCopyDescriptionCallBack","CFSetCreate","CFSetCreateCopy","CFSetEqualCallBack","CFSetGetCount","CFSetGetCountOfValue","CFSetGetTypeID","CFSetGetValue","CFSetGetValueIfPresent","CFSetGetValues","CFSetHashCallBack","CFSetRef","CFSetReleaseCallBack","CFSetRetainCallBack","__CFSet","as_CFTypeRef","as_concrete_TypeRef","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","copyDescription","drop","eq","equal","fmt","from","from","from","from_mut_void","from_slice","from_void","hash","into","into","into","kCFTypeSetCallBacks","len","release","retain","to_owned","to_owned","to_void","to_void","to_void","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","type_id","version","wrap_under_create_rule","wrap_under_get_rule","CFString","CFStringCompareFlags","CFStringCreateWithBytes","CFStringCreateWithBytesNoCopy","CFStringCreateWithCString","CFStringCreateWithCharactersNoCopy","CFStringEncoding","CFStringEncodings","CFStringGetBytes","CFStringGetCString","CFStringGetCStringPtr","CFStringGetLength","CFStringGetTypeID","CFStringRef","UniChar","__CFString","as_CFTypeRef","as_concrete_TypeRef","borrow","borrow","borrow_mut","borrow_mut","char_len","clone","clone_into","drop","eq","eq","eq","fmt","fmt","from","from","from","from_mut_void","from_static_string","from_str","from_void","into","into","kCFStringEncodingUTF8","new","to_owned","to_string","to_void","to_void","to_void","try_from","try_from","try_into","try_into","type_id","type_id","type_id","wrap_under_create_rule","wrap_under_get_rule","CFTimeZone","CFTimeZoneCopyDefault","CFTimeZoneCopySystem","CFTimeZoneCreateWithTimeIntervalFromGMT","CFTimeZoneGetName","CFTimeZoneGetSecondsFromGMT","CFTimeZoneGetTypeID","CFTimeZoneRef","__CFTimeZone","as_CFTypeRef","as_concrete_TypeRef","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","drop","eq","fmt","from","from","from_mut_void","from_void","into","into","name","new","seconds_from_gmt","system","to_owned","to_void","to_void","to_void","try_from","try_from","try_into","try_into","type_id","type_id","type_id","wrap_under_create_rule","wrap_under_get_rule","CFURL","CFURLBookmarkCreationOptions","CFURLBookmarkFileCreationOptions","CFURLBookmarkResolutionOptions","CFURLCanBeDecomposed","CFURLClearResourcePropertyCache","CFURLCopyAbsoluteURL","CFURLCopyFileSystemPath","CFURLCopyFragment","CFURLCopyHostName","CFURLCopyLastPathComponent","CFURLCopyNetLocation","CFURLCopyParameterString","CFURLCopyPassword","CFURLCopyPath","CFURLCopyPathExtension","CFURLCopyQueryString","CFURLCopyResourceSpecifier","CFURLCopyScheme","CFURLCopyStrictPath","CFURLCopyUserName","CFURLCreateAbsoluteURLWithBytes","CFURLCreateBookmarkData","CFURLCreateBookmarkDataFromAliasRecord","CFURLCreateBookmarkDataFromFile","CFURLCreateByResolvingBookmarkData","CFURLCreateFilePathURL","CFURLCreateFromFileSystemRepresentation","CFURLCreateResourcePropertiesForKeysFromBookmarkData","CFURLCreateResourcePropertyForKeyFromBookmarkData","CFURLCreateWithBytes","CFURLCreateWithFileSystemPath","CFURLCreateWithFileSystemPathRelativeToBase","CFURLGetBytes","CFURLGetFileSystemRepresentation","CFURLGetPortNumber","CFURLGetString","CFURLGetTypeID","CFURLHasDirectoryPath","CFURLPathStyle","CFURLRef","CFURLSetResourcePropertyForKey","CFURLStartAccessingSecurityScopedResource","CFURLStopAccessingSecurityScopedResource","CFURLWriteBookmarkDataToFile","__CFURL","absolute","as_CFTypeRef","as_concrete_TypeRef","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","drop","eq","fmt","from","from","from_file_system_path","from_mut_void","from_path","from_void","get_file_system_path","get_string","into","into","kCFURLAttributeModificationDateKey","kCFURLBookmarkCreationMinimalBookmarkMask","kCFURLBookmarkCreationPreferFileIDResolutionMask","kCFURLBookmarkCreationSecurityScopeAllowOnlyReadAccess","kCFURLBookmarkCreationSuitableForBookmarkFile","kCFURLBookmarkCreationWithSecurityScope","kCFURLContentAccessDateKey","kCFURLContentModificationDateKey","kCFURLCreationDateKey","kCFURLFileResourceIdentifierKey","kCFURLFileResourceTypeKey","kCFURLFileSecurityKey","kCFURLHFSPathStyle","kCFURLHasHiddenExtensionKey","kCFURLIsDirectoryKey","kCFURLIsExecutableKey","kCFURLIsHiddenKey","kCFURLIsPackageKey","kCFURLIsReadableKey","kCFURLIsRegularFileKey","kCFURLIsSymbolicLinkKey","kCFURLIsSystemImmutableKey","kCFURLIsUserImmutableKey","kCFURLIsVolumeKey","kCFURLIsWritableKey","kCFURLLabelNumberKey","kCFURLLinkCountKey","kCFURLLocalizedLabelKey","kCFURLLocalizedNameKey","kCFURLLocalizedTypeDescriptionKey","kCFURLNameKey","kCFURLPOSIXPathStyle","kCFURLParentDirectoryURLKey","kCFURLPreferredIOBlockSizeKey","kCFURLTypeIdentifierKey","kCFURLVolumeIdentifierKey","kCFURLVolumeURLKey","kCFURLWindowsPathStyle","to_owned","to_path","to_void","to_void","to_void","try_from","try_from","try_into","try_into","type_id","type_id","type_id","wrap_under_create_rule","wrap_under_get_rule","CFUUID","CFUUIDBytes","CFUUIDCreate","CFUUIDCreateFromUUIDBytes","CFUUIDGetTypeID","CFUUIDGetUUIDBytes","CFUUIDRef","__CFUUID","as_CFTypeRef","as_concrete_TypeRef","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","byte0","byte1","byte10","byte11","byte12","byte13","byte14","byte15","byte2","byte3","byte4","byte5","byte6","byte7","byte8","byte9","clone","clone","clone_into","clone_into","default","default","drop","eq","fmt","from","from","from","from_mut_void","from_void","into","into","into","new","to_owned","to_owned","to_void","to_void","to_void","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","type_id","wrap_under_create_rule","wrap_under_get_rule"],"q":["core_foundation","","","","","","","","","","","","","","","","","","","","","","","","","core_foundation::array","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","core_foundation::attributed_string","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","core_foundation::basecore_foundation::boolean","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","core_foundation::bundle","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","core_foundation::characterset","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","core_foundation::data","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","core_foundation::date","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","core_foundation::dictionary","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","core_foundation::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","core_foundation::filedescriptor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","core_foundation::mach_port","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","core_foundation::number","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","core_foundation::propertylist","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","core_foundation::runloopcore_foundation::set","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","core_foundation::string","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","core_foundation::timezone","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","core_foundation::url","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","core_foundation::uuid","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Heterogeneous immutable arrays.","","","A Boolean type.","Core Foundation Bundle Type","A set of Unicode compliant characters.","Core Foundation byte buffers.","Core Foundation date objects.","Declare a Rust type that wraps an underlying …","Dictionaries of key-value pairs.","Core Foundation errors.","","","Implement <code>std::fmt::Debug</code> for the given type.","Provide an implementation of the <code>TCFType</code> trait for the Rust","","Immutable numbers.","Core Foundation property lists","","An immutable bag of elements.","Immutable strings.","Core Foundation time zone objects.","A URL type for Core Foundation.","Core Foundation UUID objects.","A heterogeneous immutable array.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new <code>CFArray</code> with the given elements, which must …","Creates a new <code>CFArray</code> with the given elements, which must …","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns the same array, but with the type reset to void …","Iterates over the elements of this <code>CFArray</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Superclass of all Core Foundation objects.","","","","A trait describing how to convert from the stored *mut …","A trait describing how to convert from the stored *const …","","A reference to a mutable element inside a container","A reference to an element inside a container","","","The reference type wrapped inside this type.","","All Core Foundation types implement this trait. The …","Trait for all types which are Core Foundation reference …","A trait describing how to convert from the stored *const …","","Returns the object as a wrapped <code>CFType</code>. The reference …","Returns the object as a raw <code>CFTypeRef</code>. The reference count …","","","Returns the object as its concrete TypeRef.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Try to downcast the <code>CFType</code> to a subclass. Checking if the …","Similar to <code>downcast</code>, but consumes self and can thus avoid …","","","","","","","","","","Formats the value using <code>CFCopyDescription</code>.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Returns true if this value is an instance of another type.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the object as a wrapped <code>CFType</code>. Consumes self and …","","","","","","","Constant used by some functions to indicate failed …","","","","","","","","","","Returns the reference count of the object. It is unwise to …","Writes a debugging version of this object on standard …","Always use this method to construct a <code>CFIndex</code> value. It …","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the type ID for this class.","","","","","","","","","","Returns the type ID of this object.","","Returns an instance of the object, wrapping the underlying …","","","Returns an instance of the object, wrapping the underlying …","","","A Boolean type.","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","A Bundle type.","","","","","","","","","","","","","","","","","","","","Bundle’s resources location","Bundle’s own location","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Bundle’s own location","","Bundle’s resources location","","","","","","","","","","","","","","","An immutable set of Unicde characters.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A byte buffer.","","","","","","","","","","","","","","","Returns a pointer to the underlying bytes in this data. …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Creates a CFData referencing <code>buffer</code> without creating a copy","Creates a CFData around a copy <code>buffer</code>","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the length of this byte buffer.","","","","","","","","","","","","","","","","A date.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Adds the key-value pair to the dictionary if no such key …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new mutable dictionary with the key-value pairs …","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Panics","Panics","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the same dictionary, but with the types reset to …","Returns the same dictionary, but with the types reset to …","","","","","","","","","","Removes the value of the key from the dictionary.","","Replaces the value of the key in the dictionary.","","","Sets the value of the key in the dictionary.","Returns a <code>CFDictionary</code> pointing to the same underlying …","Returns a <code>CFMutableDictionary</code> pointing to the same …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An error value.","","","","","","","","","","","","","","","Returns the code identifying this type of error.","Returns a human-presentable description of the error.","","Returns a string identifying the domain with which this …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An immutable numeric value.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","An immutable numeric value.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A CFPropertyList struct. This is superclass to <code>CFData</code>, …","","","","","","Trait for all subclasses of <code>CFPropertyList</code>.","","","","","","","","","","Try to downcast the <code>CFPropertyList</code> to a subclass. Checking …","Similar to <code>downcast</code>, but consumes self and can thus avoid …","","","","Returns the argument unchanged.","Returns true if this value is an instance of another type.","Calls <code>U::from(self)</code>.","Equal to <code>to_CFPropertyList</code>, but consumes self and avoids …","","","","","","","","Returns the reference count of the object. It is unwise to …","Writes a debugging version of this object on standard …","Create an instance of the superclass type <code>CFPropertyList</code> …","","","","","Returns the type ID of this object. Will be one of CFData, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An immutable bag of elements.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Creates a new set from a list of <code>CFType</code> instances.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Get the number of elements in the CFSet","","","","","","","","","","","","","","","","","","","","","An immutable string in one of a variety of encodings.","","","","","","","","","","","","","","","","","","","","","","Returns the number of characters in the string.","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Like <code>CFString::new</code>, but references a string that can be …","See also CFString::new for a variant of this which does …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Creates a new <code>CFString</code> instance from a Rust string.","","","","","","","","","","","","","","","A time zone.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The timezone database ID that identifies the time zone. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A UUID.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,1,8,21,6,1,8,21,6,8,6,8,6,6,8,8,6,8,1,8,21,6,8,8,8,8,8,8,8,8,1,8,21,6,8,21,8,8,0,8,21,21,6,6,8,6,8,10,8,8,1,8,21,6,1,8,21,6,1,8,8,21,6,6,8,8,0,0,0,0,0,0,0,0,0,0,0,0,28,29,28,29,27,28,29,27,28,29,28,29,28,29,28,29,29,28,29,28,29,27,28,29,28,29,28,29,27,28,29,28,29,29,29,28,29,30,31,28,28,29,29,27,28,29,27,28,29,27,28,28,29,29,28,29,28,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,0,0,38,0,0,38,0,139,0,0,0,0,34,139,139,35,36,139,35,36,140,15,14,35,36,38,2,34,15,14,35,36,38,2,34,35,36,38,2,34,35,36,38,2,34,34,34,15,14,14,35,35,35,36,15,14,35,36,38,15,14,35,38,15,14,35,36,38,2,34,141,35,36,20,35,36,140,34,2,139,15,14,35,36,38,38,2,34,139,0,0,0,0,0,0,0,0,2,2,0,36,34,34,34,34,139,139,142,35,36,38,2,34,74,9,35,35,36,36,15,14,35,36,38,2,34,15,14,35,36,38,2,34,139,15,14,35,35,36,36,38,2,34,139,34,139,35,36,139,35,36,0,0,0,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,0,0,44,44,44,44,44,44,44,44,44,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,48,46,48,46,48,48,48,48,48,48,48,48,48,46,48,48,48,48,48,46,48,48,48,48,48,48,48,48,49,48,48,46,48,46,48,46,48,48,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,56,53,56,53,56,56,56,56,56,56,53,56,56,56,53,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,57,56,56,53,56,53,56,53,56,56,56,56,0,0,0,0,0,0,0,0,0,58,58,54,58,54,58,58,58,58,58,58,58,58,54,58,58,58,58,58,54,58,58,58,59,58,58,54,58,54,58,54,58,58,58,58,0,0,0,0,0,0,0,0,0,0,0,66,66,66,65,66,65,66,66,66,66,66,66,66,65,66,66,66,65,66,0,0,66,66,66,66,68,66,66,65,66,65,66,65,66,66,66,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,51,71,51,71,26,51,71,69,70,26,51,71,69,70,51,71,69,70,51,71,69,70,51,71,69,70,71,71,51,71,51,71,69,70,51,71,51,71,26,51,71,71,69,70,51,71,51,71,51,71,51,71,51,71,69,26,51,71,69,70,51,71,51,71,0,0,51,71,71,69,70,71,71,71,69,70,71,71,51,51,71,69,70,51,71,72,73,51,51,71,71,26,51,71,69,70,26,51,71,69,70,26,51,51,71,71,69,70,69,70,71,51,71,51,71,0,0,0,0,0,0,0,76,76,75,76,75,76,76,76,76,76,76,76,76,76,76,76,75,76,76,76,75,76,0,0,0,0,76,76,76,77,76,76,75,76,75,76,75,76,76,76,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,85,85,83,82,85,83,82,85,82,85,82,85,85,82,85,85,85,85,83,82,85,85,85,82,83,82,85,85,0,0,85,82,82,82,85,85,86,85,85,83,82,85,83,82,85,83,82,85,85,85,82,85,85,0,0,0,0,0,0,0,0,92,92,91,92,91,92,92,92,92,92,92,92,91,92,92,92,91,92,92,37,93,92,92,91,92,91,92,91,92,92,92,92,0,0,0,0,0,0,0,0,0,0,0,0,0,97,97,94,95,97,94,95,97,97,97,97,97,97,97,94,95,97,97,97,97,97,97,97,94,95,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,97,97,97,97,97,45,98,97,97,94,95,97,94,95,97,94,95,97,97,97,97,0,0,0,0,0,0,0,101,101,101,101,101,101,101,0,0,101,101,101,101,101,101,101,101,105,101,0,0,0,0,0,0,101,101,105,101,101,101,101,101,101,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,120,120,120,0,0,0,0,112,112,112,112,115,90,113,112,115,90,113,106,84,107,110,143,109,111,108,112,120,115,90,113,106,84,107,110,143,109,111,108,112,120,115,90,113,110,112,120,115,90,113,112,120,115,90,113,112,112,112,110,143,109,111,112,112,115,90,113,112,120,115,90,113,110,143,112,120,106,84,107,110,143,109,111,108,112,120,115,90,113,90,112,115,90,113,112,115,90,113,143,112,112,110,143,110,143,109,111,106,84,107,110,143,109,111,108,112,120,115,90,113,0,0,0,0,0,0,0,0,0,0,0,0,0,115,110,143,110,143,109,111,112,112,112,110,143,109,111,112,112,110,112,112,120,115,90,113,116,118,119,117,112,112,115,115,90,90,113,113,106,84,107,110,143,109,111,108,112,120,115,90,113,106,84,107,110,143,109,111,108,112,120,115,90,113,106,84,107,110,143,109,111,108,112,112,120,115,115,90,90,113,113,110,143,109,111,112,115,90,113,112,115,90,113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,126,126,126,124,125,126,124,125,126,125,126,125,125,126,126,125,126,126,124,125,126,126,126,125,126,124,125,0,126,125,125,126,125,126,126,127,126,124,125,126,124,125,126,126,124,125,125,126,126,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,32,25,32,25,32,32,32,32,32,32,32,32,32,32,25,32,32,32,32,32,32,25,32,0,32,32,32,33,32,32,25,32,25,32,25,32,32,32,32,0,0,0,0,0,0,0,0,0,130,130,129,130,129,130,130,130,130,130,130,130,129,130,130,130,129,130,130,130,130,130,130,131,130,130,129,130,129,130,129,130,130,130,130,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,50,50,47,50,47,50,50,50,50,50,50,47,50,50,50,50,50,50,50,47,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,50,132,50,50,47,50,47,50,47,50,50,50,50,0,0,0,0,0,0,0,0,137,137,135,136,137,135,136,137,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,137,136,137,136,137,137,137,137,135,136,137,137,137,135,136,137,137,136,137,138,137,137,135,136,137,135,136,137,135,136,137,137,137,137],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,1,2]],[[1,3]],0,[[1,2,3]],[[1,2,3,3],4],0,[[1,2,3],5],0,[[3,3,4,6],1],[[3,1],1],[[3,4,6],1],[[3,4,1],1],0,[[1,4,4]],[1,4],[[1,2,3],4],[[1,2,3],4],[[1,2,3],4],[[],7],[[1,4],3],[[1,2,3]],[[1,4,3]],0,0,0,[1],[[1,4]],[[1,2,3,4]],0,[[1,4,3]],[[1,2,3]],0,0,0,0,[8,9],[8,10],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[8,8],[6,6],[[]],[[]],0,[8],[[8,8],11],0,[[8,12],13],[[]],[[]],[[]],[[]],[[],8],[[],8],[3,14],[3,15],[[8,16],[[17,[15]]]],[8,[[19,[18]]]],[[8,16],15],[[8,2],[[19,[18]]]],[[]],[[]],[[]],[[]],[8,[[21,[20]]]],[[]],[8,8],[8,21],0,[8,16],[[[21,[20]]],7],[[[21,[20]]],[[17,[[15,[20]]]]]],0,0,[[]],[[]],[8,8],[10,18],[8,18],[8,18],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[],24],[[],23],[[],23],0,[10,8],[10,8],0,[[3,25,26],27],[[3,4],27],[[3,4,27],27],[27,4],[[],7],0,[[27,2,25]],[[27,2,25,3]],0,0,0,[28,9],[29,9],[28,30],[29,31],[[]],[[]],[[]],[[]],[[]],[[]],[28,16],[29,16],[28,28],[29,29],[[]],[[]],[[],29],[28],[29],[[28,28],11],[[29,29],11],[[]],[[]],[[]],[3,14],[3,14],[3,15],[3,15],[[]],[[]],[[]],[32,28],[[],29],[[29,32,2]],[[29,2,33]],[[]],[[]],[30,18],[31,18],[28,18],[28,18],[29,18],[29,18],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],23],[[],24],[[],23],[[],24],[[],23],[30,28],[31,29],[30,28],[31,29],0,0,[[3,4,7],3],0,0,0,[[3,34],3],[[3,3]],0,[[3,34]],[[],3],[[3,4,7],4],[[],7],0,[[3,3,4,7],3],0,0,0,0,[3],0,[3,25],[[3,3],5],[3,4],[3,7],[3,7],0,0,0,0,0,0,[3],[3,3],[3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],35],[[],9],[35,9],[36,9],[[]],[35,9],[36,37],[[],3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[35,35],[36,36],[38,38],[2,2],[34,34],[[]],[[]],[[]],[[]],[[]],0,0,[15],[14],[14],[35,[[17,[39]]]],[35,[[17,[39]]]],[35],[36],[[[15,[40]],[15,[40]]],11],[[[14,[40]],[14,[40]]],11],[[35,35],11],[[36,36],11],[[38,38],11],[[[15,[41]],12],[[22,[42]]]],[[[14,[41]],12],[[22,[42]]]],[[35,12],13],[[38,12],[[22,[42]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[18,14],[3,14],[3,14],[18,15],[3,15],[3,15],[3],0,[[4,4],2],[[],11],[[]],[[]],[[]],[[]],[[]],[38,43],[[]],[[]],[[],35],0,0,0,0,0,0,0,0,0,0,0,[34,36],0,0,0,0,[[],16],[[]],[[],16],[[]],[[]],[[]],[[]],[[]],[[],18],[9,18],[35,18],[35,18],[36,18],[36,18],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],24],[[],23],[[],23],[[],23],[[],24],[[],24],[[],23],[[],23],[[],23],[[],23],[[],24],0,[[]],[9,35],[37,36],[[]],[9,35],[37,36],0,[[],7],0,[44,9],[44,45],[[]],[[]],[44,44],[[]],[44],[[44,44],11],[[],44],[[44,12],13],[[]],[11,44],[3,14],[3,15],[[]],0,0,[[]],[44,18],[44,18],[[],44],[[],22],[[],22],[[],23],[[],24],[45,44],[45,44],0,[46,47],[46,47],[46,47],[46,47],[46,47],[[3,47],46],[25,46],[[46,25],3],[46,26],[[],46],[[],7],0,0,[48,9],[48,49],[[]],[[]],[[]],[[]],[48,[[17,[50]]]],[48,[[17,[50]]]],[32,[[17,[48]]]],[48,48],[[]],[48],[[48,48],11],[48,[[17,[50]]]],[[]],[[]],[3,14],[3,15],[[48,32],18],[48,[[51,[32,35]]]],[[]],[[]],[[],48],[50,[[17,[48]]]],[48,[[17,[52]]]],[48,[[17,[50]]]],[48,[[17,[52]]]],[48,[[17,[50]]]],[[]],[49,18],[48,18],[48,18],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[],24],[49,48],[49,48],0,[[53,2]],[[53,25]],[[3,53],54],[[3,53],53],[3,53],[[3,53],53],[[3,54],53],[[3,2],53],[[3,25],53],[4,53],[[],7],[[53,53]],[53],[[53,55],5],0,0,[[53,2]],[[53,25]],[[53,53]],0,0,[56,9],[56,57],[[]],[[]],[[]],[[]],[56,56],[[]],[56],[[56,56],11],[[56,12],13],[[]],[[]],[3,14],[3,15],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[57,18],[56,18],[56,18],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[],24],[57,56],[57,56],0,[[3,5,4],54],[[3,5,4,3],54],[54,5],[[54,2,5]],[54,4],[[],7],0,0,[58,9],[58,59],[[]],[[]],[[]],[[]],[58],[58,58],[[]],[58],[58],[[58,58],11],[[58,12],13],[[]],[[]],[[[63,[[0,[60,61,62]]]]],58],[[],58],[3,14],[3,15],[[]],[[]],[58,16],[[]],[59,18],[58,18],[58,18],[[],22],[[],22],[[],22],[[],22],[[],23],[[],24],[[],23],[59,58],[59,58],0,[[],64],0,[[65,65,3],38],[[3,64],65],[65,64],[[65,65],64],[[],7],0,0,0,[66,67],[66,9],[66,68],[[]],[[]],[[]],[[]],[66,66],[[]],[[66,66],43],[66],[[66,66],11],[[66,12],13],[[]],[[]],[3,14],[3,15],[[]],[[]],0,0,[67,66],[[],66],[[66,66],[[17,[43]]]],[[]],[68,18],[66,18],[66,18],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[],24],[68,66],[68,66],0,[[26,3,3]],0,[[26,3]],[[26,3],5],0,[[3,3,3,4,69,70],26],[[3,4,69,70],26],[[3,4,26],26],0,[26,4],[[26,3,3]],[[],7],[[26,3,3],5],0,0,0,0,[26],[[26,3]],[[26,3,3]],0,[[26,3,3]],0,0,0,0,[71],[51,9],[71,9],[51,72],[71,73],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[51,51],[71,71],[69,69],[70,70],[[]],[[]],[[]],[[]],[51,11],[[71,18],11],0,0,[[71,4],71],[[],71],[51],[71],[[51,51],11],[[71,71],11],0,0,[[51,74],[[17,[15]]]],[71,[[17,[15]]]],[[51,12],13],[[71,12],13],[[]],[[]],[[]],[51,71],[[]],[[]],[[],51],[[],71],[3,14],[3,14],[3,15],[3,15],[[51,74],15],[71,15],[51],[71],0,[[]],[[]],[[]],[[]],[[]],[51,51],[71,71],[51,11],[71,11],0,0,[51,7],[71,7],[[],71],0,0,[71],[71],[71],0,0,[71],[71,51],[51,71],[[]],[[]],[[]],[[]],[51,51],[71,71],[72,18],[73,18],[51,18],[51,18],[71,18],[71,18],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[],24],[[],23],[[],24],[[],23],[[],23],0,0,[4,71],[72,51],[73,71],[72,51],[73,71],0,[75,25],[75,4],[75,25],[[],7],0,0,[76,9],[76,77],[[]],[[]],[[]],[[]],[76,76],[[]],[76,16],[76,32],[76,78],[76,32],[76],[[76,76],11],[[76,12],13],[[76,12],13],[[]],[[]],[3,14],[3,15],[[]],[[]],0,0,0,0,[79],[[]],[[],80],[77,18],[76,18],[76,18],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[],24],[77,76],[77,76],0,0,0,[[3,81,5,82],83],[[3,83,4],84],[[83,7]],[[83,7]],[[83,82]],[83,81],[[],7],[83],[83,5],0,0,0,[85,9],[85,86],[85,87],[[]],[[]],[[]],[[]],[[]],[[]],[82,82],[85,85],[[]],[[]],[85,82],0,[[85,88]],[85],[[85,88]],[[85,85],11],[[]],[[]],[[]],[3,14],[3,15],0,[[]],[[]],[[]],[85],0,0,[[87,11,89,[17,[82]]],[[17,[85]]]],0,0,[[]],[[]],[[85,16],[[17,[90]]]],[86,18],[85,18],[85,18],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[],24],[[],23],[85,11],0,[86,85],[86,85],0,0,0,[[3,91,4],84],[[],7],0,0,0,[92,9],[92,93],[[]],[[]],[[]],[[]],[92,92],[[]],[[92,16],[[22,[90]]]],[92],[[92,92],11],[[92,12],13],[[]],[[]],[3,14],[3,15],[[]],[[]],[[]],[37,18],[93,18],[92,18],[92,18],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[],24],[93,92],[93,92],[[],7],[94,11],0,0,[[95,95,3],38],[[3,96,3],95],[95,96],[[],7],[[95,96,3],11],0,0,0,0,[97,9],[97,98],[[]],[[]],[[]],[[]],[[]],[[]],[97,97],[[]],[[97,97],43],[97],[[97,97],11],[[97,12],13],[[]],[[]],[64,97],[81,97],[[]],[99,97],[100,97],[3,14],[3,15],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[97,97],[[17,[43]]]],[97,[[17,[99]]]],[97,[[17,[64]]]],[97,[[17,[81]]]],[97,[[17,[100]]]],[[]],[45,18],[98,18],[97,18],[97,18],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[],24],[[],23],[98,97],[98,97],0,[[3,3,4,7,75],54],[[3,54,7,4,75],3],0,0,0,0,[101,35],[101,9],[101,102],[[]],[[]],[101,101],[[]],[[18,103],[[22,[58,76]]]],[[58,104],[[22,[76]]]],[101,[[17,[105]]]],[101,[[17,[105]]]],[101],[[101,101],11],[[101,12],13],[[]],[101,11],[[]],[[],101],[101,35],0,0,0,0,0,0,[101,16],[101],[[],101],[[]],[[],22],[[],22],[[],23],[101,24],[102,101],[102,101],0,0,[[106,25]],[[106,107,25]],[[106,84,25]],[[106,108,25]],[[106,107,25],5],[[106,84,25],5],[[106,108,25],5],[106,1],[106,25],[[],106],[[],106],[[106,25],64],[[],7],[106,5],0,0,0,0,[[3,7,5,4,109],107],[107,5],[107,7],[[107,109]],[107,4],[[],7],[107],[107,5],0,0,[[106,107,25]],[[106,84,25]],[[106,108,25]],[[]],[[25,64,5],81],0,0,0,0,[[3,4,110],84],[[84,110]],[84,4],[[],7],[84],[84,5],0,[84],[106],0,0,0,[[3,64,64,7,4,111],108],[108,5],[[108,111]],[108,64],[108,64],[108,4],[108,64],[[],7],[108],[108,5],0,[[108,64]],[[108,64]],[106],0,0,0,0,0,0,0,0,[[112,113,114]],[[112,90,114]],[[112,115,114]],[112,9],[115,9],[90,9],[113,9],[112,116],[115,117],[90,118],[113,119],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[112,112],[120,120],[115,115],[90,90],[113,113],[[]],[[]],[[]],[[]],[[]],[[112,113,114],11],[[112,90,114],11],[[112,115,114],11],0,0,0,0,[112,[[17,[80]]]],[112],[115],[90],[113],[[112,112],11],[[120,120],11],[[115,115],11],[[90,90],11],[[113,113],11],0,0,[[112,12],13],[[120,12],13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[85,16],[[17,[90]]]],[3,14],[3,14],[3,14],[3,14],[3,15],[3,15],[3,15],[3,15],0,[[],112],[[],112],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[67,121,88,16,122,111],115],0,0,0,0,0,0,[[112,113,114]],[[112,90,114]],[[112,115,114]],0,0,0,0,[[]],[[33,123,11],120],0,[112],[[]],[[]],[[]],[[]],[[]],[116,18],[118,18],[119,18],[117,18],[112,18],[112,18],[115,18],[115,18],[90,18],[90,18],[113,18],[113,18],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],24],[[],23],[[],24],[[],23],[[],24],[[],23],[[],24],[[],23],0,0,0,0,[116,112],[117,115],[118,90],[119,113],[116,112],[117,115],[118,90],[119,113],0,0,[[124,3]],0,[[124,3],5],0,[[3,3,4,125],124],[[3,124],124],0,[124,4],[[124,3],4],[[],7],[[124,3],3],[[124,3,3],5],[[124,3]],0,0,0,0,0,[126,9],[126,127],[[]],[[]],[[]],[[]],[[]],[[]],[126,126],[125,125],[[]],[[]],0,[126],[[126,126],11],0,[[126,12],13],[[]],[[]],[[]],[3,14],[[],126],[3,15],0,[[]],[[]],[[]],0,[126,7],0,0,[[]],[[]],[126,18],[126,18],[127,18],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],24],[[],23],[[],23],[[],23],0,[127,126],[127,126],0,0,[[3,5,4,96,5],25],[[3,5,4,96,5,3],25],[[3,128,96],25],[[3,55,4,3],25],0,0,[[25,2,96,5,5,5,4,4],4],[[25,128,4,96],5],[[25,96],128],[25,4],[[],7],0,0,0,[32,9],[32,33],[[]],[[]],[[]],[[]],[32,16],[32,32],[[]],[32],[[32,80],11],[[32,78],11],[[32,32],11],[[32,12],13],[[32,12],13],[[]],[78,32],[[]],[3,14],[78,32],[78,[[22,[32]]]],[3,15],[[]],[[]],0,[78,32],[[]],[[],80],[33,18],[32,18],[32,18],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[],24],[33,32],[33,32],0,[[],129],[[],129],[[3,64],129],[129,25],[[129,64],64],[[],7],0,0,[130,9],[130,131],[[]],[[]],[[]],[[]],[130,130],[[]],[[],130],[130],[[130,130],11],[[130,12],13],[[]],[[]],[3,14],[3,15],[[]],[[]],[130,32],[121,130],[[130,66],121],[[],130],[[]],[131,18],[130,18],[130,18],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[],24],[131,130],[131,130],0,0,0,0,[47,5],[47],[47,47],[[47,4],25],[[47,25],25],[47,25],[47,25],[47,25],[[47,25],25],[47,25],[47,25],[47,25],[[47,25],25],[47,25],[47,25],[[47,5],25],[47,25],[[3,5,4,96,47,5],47],[[3,47,7,1,47,75],54],[[3,54],54],[[3,47,75],54],[[3,54,7,47,1,5,75],47],[[3,47,75],47],[[3,5,4,5],47],[[3,1,54],26],[[3,25,54],3],[[3,5,4,96,47],47],[[3,25,4,5],47],[[3,25,4,5,47],47],[[47,5,4],4],[[47,5,5,4],5],[47,81],[47,25],[[],7],[47,5],0,0,[[47,25,3,75],5],[47,5],[47],[[54,47,7,75],5],0,[50,50],[50,9],[50,132],[[]],[[]],[[]],[[]],[50,50],[[]],[50],[[50,50],11],[[50,12],13],[[]],[[]],[[32,133,11],50],[3,14],[[[60,[134]],11],[[17,[50]]]],[3,15],[[50,133],32],[50,32],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[50,[[17,[52]]]],[132,18],[50,18],[50,18],[[],22],[[],22],[[],22],[[],22],[[],23],[[],24],[[],23],[132,50],[132,50],0,0,[3,135],[[3,136],135],[[],7],[135,136],0,0,[137,9],[137,138],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[136,136],[137,137],[[]],[[]],[[],136],[[],137],[137],[[137,137],11],[[137,12],13],[[]],[[]],[[]],[3,14],[3,15],[[]],[[]],[[]],[[],137],[[]],[[]],[138,18],[137,18],[137,18],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[],23],[[],24],[138,137],[138,137]],"p":[[3,"__CFArray"],[3,"CFRange"],[4,"c_void"],[15,"isize"],[15,"u8"],[3,"CFArrayCallBacks"],[15,"usize"],[3,"CFArray"],[6,"CFTypeRef"],[6,"CFArrayRef"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"ItemMutRef"],[3,"ItemRef"],[6,"CFIndex"],[4,"Option"],[6,"c_void"],[3,"Vec"],[8,"FromVoid"],[3,"CFArrayIterator"],[4,"Result"],[3,"TypeId"],[6,"CFTypeID"],[3,"__CFString"],[3,"__CFDictionary"],[3,"__CFAttributedString"],[3,"CFAttributedString"],[3,"CFMutableAttributedString"],[6,"CFAttributedStringRef"],[6,"CFMutableAttributedStringRef"],[3,"CFString"],[6,"CFStringRef"],[3,"CFAllocatorContext"],[3,"CFType"],[3,"CFAllocator"],[6,"CFAllocatorRef"],[4,"CFComparisonResult"],[8,"ConcreteCFType"],[8,"PartialEq"],[8,"Debug"],[3,"Error"],[4,"Ordering"],[3,"CFBoolean"],[6,"CFBooleanRef"],[3,"__CFBundle"],[3,"__CFURL"],[3,"CFBundle"],[6,"CFBundleRef"],[3,"CFURL"],[3,"CFDictionary"],[3,"PathBuf"],[3,"__CFCharacterSet"],[3,"__CFData"],[15,"u16"],[3,"CFCharacterSet"],[6,"CFCharacterSetRef"],[3,"CFData"],[6,"CFDataRef"],[8,"AsRef"],[8,"Sync"],[8,"Send"],[3,"Arc"],[15,"f64"],[3,"__CFDate"],[3,"CFDate"],[6,"CFAbsoluteTime"],[6,"CFDateRef"],[3,"CFDictionaryKeyCallBacks"],[3,"CFDictionaryValueCallBacks"],[3,"CFMutableDictionary"],[6,"CFDictionaryRef"],[6,"CFMutableDictionaryRef"],[8,"ToVoid"],[3,"__CFError"],[3,"CFError"],[6,"CFErrorRef"],[15,"str"],[3,"Demand"],[3,"String"],[15,"i32"],[3,"CFFileDescriptorContext"],[3,"__CFFileDescriptor"],[3,"__CFRunLoopSource"],[3,"CFFileDescriptor"],[6,"CFFileDescriptorRef"],[6,"RawFd"],[6,"CFOptionFlags"],[6,"CFFileDescriptorCallBack"],[3,"CFRunLoopSource"],[3,"__CFMachPort"],[3,"CFMachPort"],[6,"CFMachPortRef"],[3,"__CFBoolean"],[4,"__CFNumber"],[15,"u32"],[3,"CFNumber"],[6,"CFNumberRef"],[15,"f32"],[15,"i64"],[3,"CFPropertyList"],[6,"CFPropertyListRef"],[6,"CFPropertyListFormat"],[6,"CFPropertyListMutabilityOptions"],[8,"CFPropertyListSubClass"],[3,"__CFRunLoop"],[3,"__CFRunLoopObserver"],[3,"__CFRunLoopTimer"],[3,"CFRunLoopObserverContext"],[3,"CFRunLoopSourceContext"],[3,"CFRunLoopTimerContext"],[3,"CFRunLoop"],[3,"CFRunLoopObserver"],[6,"CFRunLoopMode"],[3,"CFRunLoopTimer"],[6,"CFRunLoopRef"],[6,"CFRunLoopTimerRef"],[6,"CFRunLoopSourceRef"],[6,"CFRunLoopObserverRef"],[4,"CFRunLoopRunResult"],[6,"CFTimeInterval"],[6,"CFRunLoopTimerCallBack"],[3,"Duration"],[3,"__CFSet"],[3,"CFSetCallBacks"],[3,"CFSet"],[6,"CFSetRef"],[15,"i8"],[3,"__CFTimeZone"],[3,"CFTimeZone"],[6,"CFTimeZoneRef"],[6,"CFURLRef"],[6,"CFURLPathStyle"],[3,"Path"],[3,"__CFUUID"],[3,"CFUUIDBytes"],[3,"CFUUID"],[6,"CFUUIDRef"],[8,"TCFType"],[8,"TCFTypeRef"],[8,"FromMutVoid"],[8,"CFIndexConvertible"],[3,"CFRunLoopSourceContext1"]]},\
"core_foundation_sys":{"doc":"","t":"AAAAAAAAAAAAAAAAAAAAFFGFFDFGFFFFGFFFFFFFFFGGFFFGFFGGDLLLLLLMMLLLLHMMLLLLLLLMFFFFFGFFGDLLLLLLLGFGDGFFGFFFFGFGGGGFEFFFFFGGGGDFFFGGNNNGGIMKLLLLLLLLLLLLMMLLLLLKMLLLLLHHHHHHHHMMGMMMMLLLLLLLLLLLLMFFFFFFFFFFFGDLLLLLLLFFFFFFFFFFFFFFGGFFFGDLLLLHHHHHHHHHHHHHHHLLLFFFFFFGDLLLLLLLGFFFFFFGGDLLLLHHLLLFGFFGFFFGFFFFGDGGFFFGFDGDLLLLLLLLLLMMMMLLLMLLLHHMMMMLLLLLLLLLLLMMFFFFGDLLLLHHHHLLLGDFFFFFFFFFGGDLLLLLLMLLMLLRRMMLLLLLLLMCCFFGCDLLLLLLLGDFFFFFFFFGFFGFFFDLLLLLLMLLLMLLMMLLLLLLLMFFGFFFFFGGDELLLLLLLLHHRRRRRRRRRRRRRRRRRLLLLLLFFGGGRRRRRRGFFFFFFFFFFFFFFGDFFFFFFFFGGFFFFFDDFFFFFFGFFGDFFFFFFFFFFGFFFDDDDLLLLLLLLLLLLLLLLMMMMMMMLLLLLLLLMMMMMMMLLLLLLLLRRRRRHHRRRRRRMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLMMMMGFDFGFFGFFFFFFGGGGDLLLLLLMMLLMLLHMMLLLLLLLMGFFFFGGFFFFFGGDLLLLHLLLFFFFFFGDLLLLLLLGGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGGFFFFDLLLLHHHHHHHHHHHHRHHHHHHHHHHHHHHHHHHRHHHHHRLLLDFFFFGDLLLLMMMMMMMMMMMMMMMMLLLLLLLLLLLLLL","n":["array","attributed_string","base","bundle","characterset","data","date","dictionary","error","filedescriptor","mach_port","messageport","number","propertylist","runloop","set","string","timezone","url","uuid","CFArrayAppendArray","CFArrayAppendValue","CFArrayApplierFunction","CFArrayApplyFunction","CFArrayBSearchValues","CFArrayCallBacks","CFArrayContainsValue","CFArrayCopyDescriptionCallBack","CFArrayCreate","CFArrayCreateCopy","CFArrayCreateMutable","CFArrayCreateMutableCopy","CFArrayEqualCallBack","CFArrayExchangeValuesAtIndices","CFArrayGetCount","CFArrayGetCountOfValue","CFArrayGetFirstIndexOfValue","CFArrayGetLastIndexOfValue","CFArrayGetTypeID","CFArrayGetValueAtIndex","CFArrayGetValues","CFArrayInsertValueAtIndex","CFArrayRef","CFArrayReleaseCallBack","CFArrayRemoveAllValues","CFArrayRemoveValueAtIndex","CFArrayReplaceValues","CFArrayRetainCallBack","CFArraySetValueAtIndex","CFArraySortValues","CFComparatorFunction","CFMutableArrayRef","__CFArray","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","copyDescription","equal","from","from","into","into","kCFTypeArrayCallBacks","release","retain","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","version","CFAttributedStringCreate","CFAttributedStringCreateMutable","CFAttributedStringCreateMutableCopy","CFAttributedStringGetLength","CFAttributedStringGetTypeID","CFAttributedStringRef","CFAttributedStringReplaceString","CFAttributedStringSetAttribute","CFMutableAttributedStringRef","__CFAttributedString","borrow","borrow_mut","from","into","try_from","try_into","type_id","Boolean","CFAllocatorAllocate","CFAllocatorAllocateCallBack","CFAllocatorContext","CFAllocatorCopyDescriptionCallBack","CFAllocatorCreate","CFAllocatorDeallocate","CFAllocatorDeallocateCallBack","CFAllocatorGetContext","CFAllocatorGetDefault","CFAllocatorGetPreferredSizeForSize","CFAllocatorGetTypeID","CFAllocatorPreferredSizeCallBack","CFAllocatorReallocate","CFAllocatorReallocateCallBack","CFAllocatorRef","CFAllocatorReleaseCallBack","CFAllocatorRetainCallBack","CFAllocatorSetDefault","CFComparisonResult","CFCopyDescription","CFEqual","CFGetRetainCount","CFGetTypeID","CFHash","CFHashCode","CFIndex","CFNullRef","CFOptionFlags","CFRange","CFRelease","CFRetain","CFShow","CFTypeID","CFTypeRef","EqualTo","GreaterThan","LessThan","OSStatus","SInt32","TCFTypeRef","allocate","as_void_ptr","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","copyDescription","deallocate","eq","fmt","from","from","from","from_void_ptr","info","init","into","into","into","into","kCFAllocatorDefault","kCFAllocatorMalloc","kCFAllocatorMallocZone","kCFAllocatorNull","kCFAllocatorSystemDefault","kCFAllocatorUseContext","kCFNotFound","kCFNull","length","location","mach_port_t","preferredSize","reallocate","release","retain","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","version","CFBundleCopyBundleURL","CFBundleCopyExecutableURL","CFBundleCopyPrivateFrameworksURL","CFBundleCopyResourcesDirectoryURL","CFBundleCopySharedSupportURL","CFBundleCreate","CFBundleGetBundleWithIdentifier","CFBundleGetFunctionPointerForName","CFBundleGetInfoDictionary","CFBundleGetMainBundle","CFBundleGetTypeID","CFBundleRef","__CFBundle","borrow","borrow_mut","from","into","try_from","try_into","type_id","CFCharacterSetAddCharactersInRange","CFCharacterSetAddCharactersInString","CFCharacterSetCreateBitmapRepresentation","CFCharacterSetCreateCopy","CFCharacterSetCreateMutable","CFCharacterSetCreateMutableCopy","CFCharacterSetCreateWithBitmapRepresentation","CFCharacterSetCreateWithCharactersInRange","CFCharacterSetCreateWithCharactersInString","CFCharacterSetGetPredefined","CFCharacterSetGetTypeID","CFCharacterSetIntersect","CFCharacterSetInvert","CFCharacterSetIsCharacterMember","CFCharacterSetPredefinedSet","CFCharacterSetRef","CFCharacterSetRemoveCharactersInRange","CFCharacterSetRemoveCharactersInString","CFCharacterSetUnion","CFMutableCharacterSetRef","__CFCharacterSet","borrow","borrow_mut","from","into","kCFCharacterSetAlphaNumeric","kCFCharacterSetCapitalizedLetter","kCFCharacterSetControl","kCFCharacterSetDecimalDigit","kCFCharacterSetDecomposable","kCFCharacterSetIllegal","kCFCharacterSetLetter","kCFCharacterSetLowercaseLetter","kCFCharacterSetNewline","kCFCharacterSetNonBase","kCFCharacterSetPunctuation","kCFCharacterSetSymbol","kCFCharacterSetUppercaseLetter","kCFCharacterSetWhitespace","kCFCharacterSetWhitespaceAndNewline","try_from","try_into","type_id","CFDataCreate","CFDataCreateWithBytesNoCopy","CFDataGetBytePtr","CFDataGetBytes","CFDataGetLength","CFDataGetTypeID","CFDataRef","__CFData","borrow","borrow_mut","from","into","try_from","try_into","type_id","CFAbsoluteTime","CFAbsoluteTimeGetCurrent","CFDateCompare","CFDateCreate","CFDateGetAbsoluteTime","CFDateGetTimeIntervalSinceDate","CFDateGetTypeID","CFDateRef","CFTimeInterval","__CFDate","borrow","borrow_mut","from","into","kCFAbsoluteTimeIntervalSince1904","kCFAbsoluteTimeIntervalSince1970","try_from","try_into","type_id","CFDictionaryAddValue","CFDictionaryApplierFunction","CFDictionaryApplyFunction","CFDictionaryContainsKey","CFDictionaryCopyDescriptionCallBack","CFDictionaryCreate","CFDictionaryCreateMutable","CFDictionaryCreateMutableCopy","CFDictionaryEqualCallBack","CFDictionaryGetCount","CFDictionaryGetKeysAndValues","CFDictionaryGetTypeID","CFDictionaryGetValueIfPresent","CFDictionaryHashCallBack","CFDictionaryKeyCallBacks","CFDictionaryRef","CFDictionaryReleaseCallBack","CFDictionaryRemoveAllValues","CFDictionaryRemoveValue","CFDictionaryReplaceValue","CFDictionaryRetainCallBack","CFDictionarySetValue","CFDictionaryValueCallBacks","CFMutableDictionaryRef","__CFDictionary","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","copyDescription","copyDescription","equal","equal","from","from","from","hash","into","into","into","kCFTypeDictionaryKeyCallBacks","kCFTypeDictionaryValueCallBacks","release","release","retain","retain","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","version","version","CFErrorCopyDescription","CFErrorGetCode","CFErrorGetDomain","CFErrorGetTypeID","CFErrorRef","__CFError","borrow","borrow_mut","from","into","kCFErrorDomainCocoa","kCFErrorDomainMach","kCFErrorDomainOSStatus","kCFErrorDomainPOSIX","try_from","try_into","type_id","CFFileDescriptorCallBack","CFFileDescriptorContext","CFFileDescriptorCreate","CFFileDescriptorCreateRunLoopSource","CFFileDescriptorDisableCallBacks","CFFileDescriptorEnableCallBacks","CFFileDescriptorGetContext","CFFileDescriptorGetNativeDescriptor","CFFileDescriptorGetTypeID","CFFileDescriptorInvalidate","CFFileDescriptorIsValid","CFFileDescriptorNativeDescriptor","CFFileDescriptorRef","__CFFileDescriptor","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","copyDescription","from","from","info","into","into","kCFFileDescriptorReadCallBack","kCFFileDescriptorWriteCallBack","release","retain","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","version","CFAllocatorRef","CFIndex","CFMachPortCreateRunLoopSource","CFMachPortGetTypeID","CFMachPortRef","CFTypeID","__CFMachPort","borrow","borrow_mut","from","into","try_from","try_into","type_id","CFMessagePortCallBack","CFMessagePortContext","CFMessagePortCreateLocal","CFMessagePortCreateRemote","CFMessagePortCreateRunLoopSource","CFMessagePortGetContext","CFMessagePortGetInvalidationCallBack","CFMessagePortGetName","CFMessagePortGetTypeID","CFMessagePortInvalidate","CFMessagePortInvalidationCallBack","CFMessagePortIsRemote","CFMessagePortIsValid","CFMessagePortRef","CFMessagePortSendRequest","CFMessagePortSetInvalidationCallBack","CFMessagePortSetName","__CFMessagePort","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","copyDescription","fmt","from","from","info","into","into","release","retain","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","version","CFBooleanGetTypeID","CFBooleanGetValue","CFBooleanRef","CFNumberCompare","CFNumberCreate","CFNumberGetType","CFNumberGetTypeID","CFNumberGetValue","CFNumberRef","CFNumberType","__CFBoolean","__CFNumber","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","kCFBooleanFalse","kCFBooleanTrue","kCFNumberCFIndexType","kCFNumberCGFloatType","kCFNumberCharType","kCFNumberDoubleType","kCFNumberFloat32Type","kCFNumberFloat64Type","kCFNumberFloatType","kCFNumberIntType","kCFNumberLongLongType","kCFNumberLongType","kCFNumberMaxType","kCFNumberNSIntegerType","kCFNumberSInt16Type","kCFNumberSInt32Type","kCFNumberSInt64Type","kCFNumberSInt8Type","kCFNumberShortType","try_from","try_from","try_into","try_into","type_id","type_id","CFPropertyListCreateData","CFPropertyListCreateWithData","CFPropertyListFormat","CFPropertyListMutabilityOptions","CFPropertyListRef","kCFPropertyListBinaryFormat_v1_0","kCFPropertyListImmutable","kCFPropertyListMutableContainers","kCFPropertyListMutableContainersAndLeaves","kCFPropertyListOpenStepFormat","kCFPropertyListXMLFormat_v1_0","CFRunLoopActivity","CFRunLoopAddCommonMode","CFRunLoopAddObserver","CFRunLoopAddSource","CFRunLoopAddTimer","CFRunLoopContainsObserver","CFRunLoopContainsSource","CFRunLoopContainsTimer","CFRunLoopCopyAllModes","CFRunLoopCopyCurrentMode","CFRunLoopGetCurrent","CFRunLoopGetMain","CFRunLoopGetNextTimerFireDate","CFRunLoopGetTypeID","CFRunLoopIsWaiting","CFRunLoopObserverCallBack","CFRunLoopObserverContext","CFRunLoopObserverCreate","CFRunLoopObserverDoesRepeat","CFRunLoopObserverGetActivities","CFRunLoopObserverGetContext","CFRunLoopObserverGetOrder","CFRunLoopObserverGetTypeID","CFRunLoopObserverInvalidate","CFRunLoopObserverIsValid","CFRunLoopObserverRef","CFRunLoopRef","CFRunLoopRemoveObserver","CFRunLoopRemoveSource","CFRunLoopRemoveTimer","CFRunLoopRun","CFRunLoopRunInMode","CFRunLoopSourceContext","CFRunLoopSourceContext1","CFRunLoopSourceCreate","CFRunLoopSourceGetContext","CFRunLoopSourceGetOrder","CFRunLoopSourceGetTypeID","CFRunLoopSourceInvalidate","CFRunLoopSourceIsValid","CFRunLoopSourceRef","CFRunLoopSourceSignal","CFRunLoopStop","CFRunLoopTimerCallBack","CFRunLoopTimerContext","CFRunLoopTimerCreate","CFRunLoopTimerDoesRepeat","CFRunLoopTimerGetContext","CFRunLoopTimerGetInterval","CFRunLoopTimerGetNextFireDate","CFRunLoopTimerGetOrder","CFRunLoopTimerGetTolerance","CFRunLoopTimerGetTypeID","CFRunLoopTimerInvalidate","CFRunLoopTimerIsValid","CFRunLoopTimerRef","CFRunLoopTimerSetNextFireDate","CFRunLoopTimerSetTolerance","CFRunLoopWakeUp","__CFRunLoop","__CFRunLoopObserver","__CFRunLoopSource","__CFRunLoopTimer","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cancel","copyDescription","copyDescription","copyDescription","copyDescription","equal","equal","from","from","from","from","from","from","from","from","getPort","hash","hash","info","info","info","info","into","into","into","into","into","into","into","into","kCFRunLoopAfterWaiting","kCFRunLoopAllActivities","kCFRunLoopBeforeSources","kCFRunLoopBeforeTimers","kCFRunLoopBeforeWaiting","kCFRunLoopCommonModes","kCFRunLoopDefaultMode","kCFRunLoopEntry","kCFRunLoopExit","kCFRunLoopRunFinished","kCFRunLoopRunHandledSource","kCFRunLoopRunStopped","kCFRunLoopRunTimedOut","perform","perform","release","release","release","release","retain","retain","retain","retain","schedule","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","version","version","version","version","CFSetApplierFunction","CFSetApplyFunction","CFSetCallBacks","CFSetContainsValue","CFSetCopyDescriptionCallBack","CFSetCreate","CFSetCreateCopy","CFSetEqualCallBack","CFSetGetCount","CFSetGetCountOfValue","CFSetGetTypeID","CFSetGetValue","CFSetGetValueIfPresent","CFSetGetValues","CFSetHashCallBack","CFSetRef","CFSetReleaseCallBack","CFSetRetainCallBack","__CFSet","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","copyDescription","equal","from","from","hash","into","into","kCFTypeSetCallBacks","release","retain","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","version","CFStringCompareFlags","CFStringCreateWithBytes","CFStringCreateWithBytesNoCopy","CFStringCreateWithCString","CFStringCreateWithCharactersNoCopy","CFStringEncoding","CFStringEncodings","CFStringGetBytes","CFStringGetCString","CFStringGetCStringPtr","CFStringGetLength","CFStringGetTypeID","CFStringRef","UniChar","__CFString","borrow","borrow_mut","from","into","kCFStringEncodingUTF8","try_from","try_into","type_id","CFTimeZoneCopyDefault","CFTimeZoneCopySystem","CFTimeZoneCreateWithTimeIntervalFromGMT","CFTimeZoneGetName","CFTimeZoneGetSecondsFromGMT","CFTimeZoneGetTypeID","CFTimeZoneRef","__CFTimeZone","borrow","borrow_mut","from","into","try_from","try_into","type_id","CFURLBookmarkCreationOptions","CFURLBookmarkFileCreationOptions","CFURLBookmarkResolutionOptions","CFURLCanBeDecomposed","CFURLClearResourcePropertyCache","CFURLCopyAbsoluteURL","CFURLCopyFileSystemPath","CFURLCopyFragment","CFURLCopyHostName","CFURLCopyLastPathComponent","CFURLCopyNetLocation","CFURLCopyParameterString","CFURLCopyPassword","CFURLCopyPath","CFURLCopyPathExtension","CFURLCopyQueryString","CFURLCopyResourceSpecifier","CFURLCopyScheme","CFURLCopyStrictPath","CFURLCopyUserName","CFURLCreateAbsoluteURLWithBytes","CFURLCreateBookmarkData","CFURLCreateBookmarkDataFromAliasRecord","CFURLCreateBookmarkDataFromFile","CFURLCreateByResolvingBookmarkData","CFURLCreateFilePathURL","CFURLCreateFromFileSystemRepresentation","CFURLCreateResourcePropertiesForKeysFromBookmarkData","CFURLCreateResourcePropertyForKeyFromBookmarkData","CFURLCreateWithBytes","CFURLCreateWithFileSystemPath","CFURLCreateWithFileSystemPathRelativeToBase","CFURLGetBytes","CFURLGetFileSystemRepresentation","CFURLGetPortNumber","CFURLGetString","CFURLGetTypeID","CFURLHasDirectoryPath","CFURLPathStyle","CFURLRef","CFURLSetResourcePropertyForKey","CFURLStartAccessingSecurityScopedResource","CFURLStopAccessingSecurityScopedResource","CFURLWriteBookmarkDataToFile","__CFURL","borrow","borrow_mut","from","into","kCFURLAttributeModificationDateKey","kCFURLBookmarkCreationMinimalBookmarkMask","kCFURLBookmarkCreationPreferFileIDResolutionMask","kCFURLBookmarkCreationSecurityScopeAllowOnlyReadAccess","kCFURLBookmarkCreationSuitableForBookmarkFile","kCFURLBookmarkCreationWithSecurityScope","kCFURLContentAccessDateKey","kCFURLContentModificationDateKey","kCFURLCreationDateKey","kCFURLFileResourceIdentifierKey","kCFURLFileResourceTypeKey","kCFURLFileSecurityKey","kCFURLHFSPathStyle","kCFURLHasHiddenExtensionKey","kCFURLIsDirectoryKey","kCFURLIsExecutableKey","kCFURLIsHiddenKey","kCFURLIsPackageKey","kCFURLIsReadableKey","kCFURLIsRegularFileKey","kCFURLIsSymbolicLinkKey","kCFURLIsSystemImmutableKey","kCFURLIsUserImmutableKey","kCFURLIsVolumeKey","kCFURLIsWritableKey","kCFURLLabelNumberKey","kCFURLLinkCountKey","kCFURLLocalizedLabelKey","kCFURLLocalizedNameKey","kCFURLLocalizedTypeDescriptionKey","kCFURLNameKey","kCFURLPOSIXPathStyle","kCFURLParentDirectoryURLKey","kCFURLPreferredIOBlockSizeKey","kCFURLTypeIdentifierKey","kCFURLVolumeIdentifierKey","kCFURLVolumeURLKey","kCFURLWindowsPathStyle","try_from","try_into","type_id","CFUUIDBytes","CFUUIDCreate","CFUUIDCreateFromUUIDBytes","CFUUIDGetTypeID","CFUUIDGetUUIDBytes","CFUUIDRef","__CFUUID","borrow","borrow","borrow_mut","borrow_mut","byte0","byte1","byte10","byte11","byte12","byte13","byte14","byte15","byte2","byte3","byte4","byte5","byte6","byte7","byte8","byte9","clone","clone_into","default","from","from","into","into","to_owned","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["core_foundation_sys","","","","","","","","","","","","","","","","","","","","core_foundation_sys::array","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","core_foundation_sys::attributed_string","","","","","","","","","","","","","","","","","core_foundation_sys::base","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","core_foundation_sys::bundle","","","","","","","","","","","","","","","","","","","","core_foundation_sys::characterset","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","core_foundation_sys::data","","","","","","","","","","","","","","","core_foundation_sys::date","","","","","","","","","","","","","","","","","","","core_foundation_sys::dictionary","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","core_foundation_sys::error","","","","","","","","","","","","","","","","","core_foundation_sys::filedescriptor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","core_foundation_sys::mach_port","","","","","","","","","","","","","","core_foundation_sys::messageport","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","core_foundation_sys::number","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","core_foundation_sys::propertylist","","","","","","","","","","","core_foundation_sys::runloop","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","core_foundation_sys::set","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","core_foundation_sys::string","","","","","","","","","","","","","","","","","","","","","","","core_foundation_sys::timezone","","","","","","","","","","","","","","","core_foundation_sys::url","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","core_foundation_sys::uuid","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Trait for all types which are Core Foundation reference …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Constant used by some functions to indicate failed …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,1,19,1,1,1,1,1,19,1,19,1,0,1,1,1,19,1,19,1,19,1,1,0,0,0,0,0,0,0,0,0,0,20,20,20,20,20,20,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,0,0,0,7,21,5,6,7,5,6,7,5,6,7,5,6,7,7,7,5,5,5,6,7,21,7,6,5,5,6,7,0,0,0,0,0,0,0,0,6,6,0,7,7,7,7,5,6,7,5,6,7,5,6,7,5,6,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,22,22,22,22,22,22,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,23,23,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,23,23,0,0,0,0,0,0,0,0,24,24,24,24,24,24,24,0,0,0,0,0,0,0,0,0,0,25,25,25,25,0,0,25,25,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,13,14,26,13,14,13,14,13,14,13,14,13,14,26,13,14,13,26,13,14,0,0,13,14,13,14,13,14,26,13,14,26,13,14,26,13,14,13,14,0,0,0,0,0,0,27,27,27,27,0,0,0,0,27,27,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,15,28,15,15,15,15,28,15,15,28,15,0,0,15,15,15,28,15,28,15,28,15,15,0,0,0,0,0,0,0,29,29,29,29,29,29,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,16,30,16,16,16,16,16,30,16,16,30,16,16,16,16,30,16,30,16,30,16,16,0,0,0,0,0,0,0,0,0,0,0,0,31,32,31,32,31,32,31,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,32,31,32,31,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,34,35,36,37,38,39,40,33,34,35,36,37,38,39,40,36,36,37,38,39,36,37,33,34,35,36,37,38,39,40,37,36,37,36,37,38,39,33,34,35,36,37,38,39,40,0,0,0,0,0,0,0,0,0,0,0,0,0,36,37,36,37,38,39,36,37,38,39,36,33,34,35,36,37,38,39,40,33,34,35,36,37,38,39,40,33,34,35,36,37,38,39,40,36,37,38,39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,17,41,17,17,17,17,17,41,17,17,41,17,0,17,17,17,41,17,41,17,41,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,42,42,42,0,42,42,42,0,0,0,0,0,0,0,0,43,43,43,43,43,43,43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,44,44,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,44,44,0,0,0,0,0,0,0,45,18,45,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,45,18,45,18,18,45,18,45,18,45,18],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[1,1],[[]],0,0,[[]],[[]],[[]],[[]],0,0,0,[[]],[[],2],[[],2],[[],2],[[],2],[[],3],[[],3],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[],2],[[],2],[[],3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],4],[[]],[[]],[[]],[[]],[[]],[[]],[5,5],[6,6],[7,7],[[]],[[]],[[]],0,0,[[5,5],8],[[5,9],10],[[]],[[]],[[]],[4],0,[[11,11],6],[[]],[5,12],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],3],[[],3],[[],3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[],2],[[],2],[[],3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],2],[[],2],[[],3],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[],2],[[],2],[[],3],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,0,[[],2],[[],2],[[],3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[13,13],[14,14],[[]],[[]],0,0,0,0,[[]],[[]],[[]],0,[[]],[[]],[[]],0,0,0,0,0,0,[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],3],[[],3],[[],3],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,0,0,0,[[],2],[[],2],[[],3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[15,15],[[]],0,[[]],[[]],0,[[]],[[]],0,0,0,0,[[]],[[],2],[[],2],[[],2],[[],2],[[],3],[[],3],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[],2],[[],2],[[],3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[16,16],[[]],0,[[16,9],10],[[]],[[]],0,[[]],[[]],0,0,[[]],[[],2],[[],2],[[],2],[[],2],[[],3],[[],3],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],2],[[],2],[[],2],[[],2],[[],3],[[],3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[17,17],[[]],0,0,[[]],[[]],0,[[]],[[]],0,0,0,[[]],[[],2],[[],2],[[],2],[[],2],[[],3],[[],3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,[[],2],[[],2],[[],3],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[],2],[[],2],[[],3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],2],[[],2],[[],3],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[18,18],[[]],[[],18],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],3],[[],3]],"p":[[3,"CFArrayCallBacks"],[4,"Result"],[3,"TypeId"],[6,"c_void"],[4,"CFComparisonResult"],[3,"CFRange"],[3,"CFAllocatorContext"],[15,"bool"],[3,"Formatter"],[6,"Result"],[6,"CFIndex"],[4,"Ordering"],[3,"CFDictionaryKeyCallBacks"],[3,"CFDictionaryValueCallBacks"],[3,"CFFileDescriptorContext"],[3,"CFMessagePortContext"],[3,"CFSetCallBacks"],[3,"CFUUIDBytes"],[3,"__CFArray"],[3,"__CFAttributedString"],[8,"TCFTypeRef"],[3,"__CFBundle"],[3,"__CFCharacterSet"],[3,"__CFData"],[3,"__CFDate"],[3,"__CFDictionary"],[3,"__CFError"],[3,"__CFFileDescriptor"],[3,"__CFMachPort"],[3,"__CFMessagePort"],[3,"__CFBoolean"],[4,"__CFNumber"],[3,"__CFRunLoop"],[3,"__CFRunLoopSource"],[3,"__CFRunLoopObserver"],[3,"CFRunLoopSourceContext"],[3,"CFRunLoopSourceContext1"],[3,"CFRunLoopObserverContext"],[3,"CFRunLoopTimerContext"],[3,"__CFRunLoopTimer"],[3,"__CFSet"],[3,"__CFString"],[3,"__CFTimeZone"],[3,"__CFURL"],[3,"__CFUUID"]]},\
"core_graphics":{"doc":"","t":"AAAAAAAAAAAAAAAAGGGGRRRRRRRRRRRRRRRRRRRDCLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLHHHHHHHLLLLLLLLLEDDENNNNNENNNENNNENNNNNNENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDGGGGDGGGGGGILLLLLLLLLLLLLLLLLLLKKLLLLLLLLLDFFGDFGGFGFFFFFFFEGDFGFFFFFFFFFFFFFFDFFFFFFFFDFFFFFFFFFFFFFGFFFDDHHDFGGFFFGNNNRRRRRRRRLLLLLLLLLLLGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMLLLLLLLLLLLLLLLLLLLLLLHRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRLLLLLLLLLMLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLMMNSDGSSSSSSSSSSDGDDGEEEGEGEGSSNSSNSSSSSSSSSDSSSSSSSSSSSSSSSSSSSSSSNSNSNSSSDNNSSNNNNNSSSSSSSSSSSNNSNNNSSSSSSSSSNNNNSSSSSSSSSSDNNSSSSSSSSSSSSSSSSSSSSSSSSSNNNNNSSSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDENNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDRRRRMLLLMLLLLLLLLMLLLLLLLLMLLLLLLLLLLLLLMLLLLLLLLLLLLMMLLLLLLLLLLLLMMLLLLMMMDDSSDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDNENNNNNNNNNNNENDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNDDDEDNNCLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLGEGEGEGEGEGEGEGEGEGEGEGDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGGGFFFFFGGFFFFFRHHRRRHRRRRRRHHRRRRRRHHHHHRRRHHH","n":["base","color","color_space","context","data_provider","display","event","event_source","font","geometry","gradient","image","path","private","sys","window","CGError","CGFloat","CGGlyph","boolean_t","kCGBitmapByteOrder16Big","kCGBitmapByteOrder16Host","kCGBitmapByteOrder16Little","kCGBitmapByteOrder32Big","kCGBitmapByteOrder32Host","kCGBitmapByteOrder32Little","kCGBitmapByteOrderDefault","kCGImageAlphaFirst","kCGImageAlphaLast","kCGImageAlphaNone","kCGImageAlphaNoneSkipFirst","kCGImageAlphaNoneSkipLast","kCGImageAlphaPremultipliedFirst","kCGImageAlphaPremultipliedLast","kCGRenderingIntentAbsoluteColorimetric","kCGRenderingIntentDefault","kCGRenderingIntentPerceptual","kCGRenderingIntentRelativeColorimetric","kCGRenderingIntentSaturation","CGColor","SysCGColorRef","as_CFTypeRef","as_concrete_TypeRef","borrow","borrow_mut","clone","clone_into","drop","eq","from","from_mut_void","from_void","into","rgb","to_owned","to_void","to_void","try_from","try_into","type_id","type_id","wrap_under_create_rule","wrap_under_get_rule","CGColorSpace","CGColorSpaceRef","as_ref","borrow","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","create_device_gray","create_device_rgb","create_with_name","deref","deref_mut","drop","from","from","into","into","kCGColorSpaceAdobeRGB1998","kCGColorSpaceGenericCMYK","kCGColorSpaceGenericGray","kCGColorSpaceGenericGrayGamma2_2","kCGColorSpaceGenericRGB","kCGColorSpaceGenericRGBLinear","kCGColorSpaceSRGB","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","type_id","CGBlendMode","CGContext","CGContextRef","CGInterpolationQuality","CGInterpolationQualityDefault","CGInterpolationQualityHigh","CGInterpolationQualityLow","CGInterpolationQualityMedium","CGInterpolationQualityNone","CGLineCap","CGLineCapButt","CGLineCapRound","CGLineCapSquare","CGLineJoin","CGLineJoinBevel","CGLineJoinMiter","CGLineJoinRound","CGPathDrawingMode","CGPathEOFill","CGPathEOFillStroke","CGPathFill","CGPathFillStroke","CGPathStroke","CGTextClip","CGTextDrawingMode","CGTextFill","CGTextFillClip","CGTextFillStroke","CGTextFillStrokeClip","CGTextInvisible","CGTextStroke","CGTextStrokeClip","Clear","Color","ColorBurn","ColorDodge","Copy","Darken","DestinationAtop","DestinationIn","DestinationOut","DestinationOver","Difference","Exclusion","HardLight","Hue","Lighten","Luminosity","Multiply","Normal","Overlay","PlusDarker","PlusLighter","Saturation","Screen","SoftLight","SourceAtop","SourceIn","SourceOut","Xor","add_curve_to_point","add_line_to_point","add_path","add_quad_curve_to_point","as_ref","begin_path","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes_per_row","clear_rect","clip","clip_bounding_box","clip_to_mask","clip_to_rect","clip_to_rects","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","close_path","concat_ctm","create_bitmap_context","create_image","data","deref","deref_mut","draw_image","draw_linear_gradient","draw_path","draw_radial_gradient","drop","eo_clip","eo_fill_path","fill_ellipse_in_rect","fill_path","fill_rect","fill_rects","flush","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_existing_context_ptr","get_ctm","get_interpolation_quality","height","into","into","into","into","into","into","into","into","move_to_point","replace_path_with_stroked_path","restore","rotate","save","scale","set_allows_antialiasing","set_allows_font_smoothing","set_allows_font_subpixel_positioning","set_allows_font_subpixel_quantization","set_blend_mode","set_fill_color","set_font","set_font_size","set_font_smoothing_style","set_gray_fill_color","set_interpolation_quality","set_line_cap","set_line_dash","set_line_join","set_line_width","set_miter_limit","set_rgb_fill_color","set_rgb_stroke_color","set_shadow","set_shadow_with_color","set_should_antialias","set_should_smooth_fonts","set_should_subpixel_position_fonts","set_should_subpixel_quantize_fonts","set_text_drawing_mode","set_text_matrix","set_text_position","show_glyphs_at_positions","stroke_ellipse_in_rect","stroke_line_segments","stroke_path","stroke_rect","stroke_rect_with_width","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","translate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","width","CGDataProvider","CGDataProviderGetBytePointerCallback","CGDataProviderGetBytesAtOffsetCallback","CGDataProviderGetBytesAtPositionCallback","CGDataProviderGetBytesCallback","CGDataProviderRef","CGDataProviderReleaseBytePointerCallback","CGDataProviderReleaseDataCallback","CGDataProviderReleaseInfoCallback","CGDataProviderRewindCallback","CGDataProviderSkipBytesCallback","CGDataProviderSkipForwardCallback","CustomData","as_ref","borrow","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","copy_data","deref","deref_mut","drop","from","from","from_buffer","from_custom_data","from_slice","into","into","len","ptr","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","type_id","CFArray","CFArrayGetCount","CFArrayGetValueAtIndex","CFArrayRef","CFDictionary","CFDictionaryGetValueIfPresent","CFDictionaryRef","CFIndex","CFRelease","CFTypeRef","CGAssociateMouseAndMouseCursorPosition","CGBeginDisplayConfiguration","CGCancelDisplayConfiguration","CGCompleteDisplayConfiguration","CGConfigureDisplayMirrorOfDisplay","CGConfigureDisplayOrigin","CGConfigureDisplayWithDisplayMode","CGConfigureOption","CGDirectDisplayID","CGDisplay","CGDisplayBounds","CGDisplayConfigRef","CGDisplayCopyAllDisplayModes","CGDisplayCopyDisplayMode","CGDisplayCreateImage","CGDisplayHideCursor","CGDisplayIsActive","CGDisplayIsAlwaysInMirrorSet","CGDisplayIsAsleep","CGDisplayIsBuiltin","CGDisplayIsInHWMirrorSet","CGDisplayIsInMirrorSet","CGDisplayIsMain","CGDisplayIsOnline","CGDisplayIsStereo","CGDisplayMirrorsDisplay","CGDisplayMode","CGDisplayModeCopyPixelEncoding","CGDisplayModeGetHeight","CGDisplayModeGetIODisplayModeID","CGDisplayModeGetIOFlags","CGDisplayModeGetPixelHeight","CGDisplayModeGetPixelWidth","CGDisplayModeGetRefreshRate","CGDisplayModeGetWidth","CGDisplayModeRef","CGDisplayModeRelease","CGDisplayModelNumber","CGDisplayMoveCursorToPoint","CGDisplayPixelsHigh","CGDisplayPixelsWide","CGDisplayPrimaryDisplay","CGDisplayRotation","CGDisplayScreenSize","CGDisplaySerialNumber","CGDisplayShowCursor","CGDisplayUnitNumber","CGDisplayUsesOpenGLAcceleration","CGDisplayVendorNumber","CGError","CGGetActiveDisplayList","CGGetDisplaysWithRect","CGMainDisplayID","CGPoint","CGRect","CGRectInfinite","CGRectNull","CGSize","CGWarpMouseCursorPosition","CGWindowID","CGWindowImageOption","CGWindowListCopyWindowInfo","CGWindowListCreateImage","CGWindowListCreateImageFromArray","CGWindowListOption","ConfigureForAppOnly","ConfigureForSession","ConfigurePermanently","IO16BitDirectPixels","IO1BitIndexedPixels","IO2BitIndexedPixels","IO32BitDirectPixels","IO4BitIndexedPixels","IO8BitIndexedPixels","IO8BitOverlayPixels","IOYUV422Pixels","active_display_count","active_displays","all_display_modes","as_CFTypeRef","as_CFTypeRef","as_concrete_TypeRef","as_concrete_TypeRef","as_ref","associate_mouse_and_mouse_cursor_position","begin_configuration","bit_depth","boolean_t","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounds","cancel_configuration","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","complete_configuration","configure_display_mirror_of_display","configure_display_origin","configure_display_with_display_mode","contains_key","deref","deref_mut","display_mode","drop","drop","drop","eq","eq","find","fmt","fmt","fmt","from","from","from","from","from","from","from_CFType_pairs","from_CFTypes","from_copyable","from_mut_void","from_mut_void","from_void","from_void","get","get","get_all_values","get_keys_and_values","get_unchecked","get_values","height","height","hide_cursor","id","image","into","into","into","into","into","into","into_iter","into_untyped","into_untyped","io_flags","is_active","is_always_in_mirror_set","is_asleep","is_builtin","is_empty","is_in_hw_mirror_set","is_in_mirror_set","is_main","is_online","is_stereo","iter","kCGDisplayShowDuplicateLowResolutionModes","kCGNullDirectDisplayID","kCGNullWindowID","kCGWindowImageBestResolution","kCGWindowImageBoundsIgnoreFraming","kCGWindowImageDefault","kCGWindowImageNominalResolution","kCGWindowImageOnlyShadows","kCGWindowImageShouldBeOpaque","kCGWindowListExcludeDesktopElements","kCGWindowListOptionAll","kCGWindowListOptionIncludingWindow","kCGWindowListOptionOnScreenAboveWindow","kCGWindowListOptionOnScreenBelowWindow","kCGWindowListOptionOnScreenOnly","kDisplayModeAcceleratorBackedFlag","kDisplayModeAlwaysShowFlag","kDisplayModeBuiltInFlag","kDisplayModeDefaultFlag","kDisplayModeInterlacedFlag","kDisplayModeNativeFlag","kDisplayModeNeverShowFlag","kDisplayModeNotGraphicsQualityFlag","kDisplayModeNotPresetFlag","kDisplayModeNotResizeFlag","kDisplayModeRequiresPanFlag","kDisplayModeSafeFlag","kDisplayModeSafetyFlags","kDisplayModeSimulscanFlag","kDisplayModeStretchedFlag","kDisplayModeTelevisionFlag","kDisplayModeValidFlag","kDisplayModeValidForAirPlayFlag","kDisplayModeValidForHiResFlag","kDisplayModeValidForMirroringFlag","kDisplayModeValidateAgainstDisplay","kIO16BitFloatPixels","kIO30BitDirectPixels","kIO32BitFloatPixels","kIO64BitDirectPixels","len","len","main","mirrors_display","mode_id","model_number","move_cursor_to_point","new","null_display","origin","pixel_encoding","pixel_height","pixel_width","pixels_high","pixels_wide","primary_display","refresh_rate","rotation","screen_size","screenshot","screenshot_from_windows","serial_number","show_cursor","size","to_mutable","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_untyped","to_untyped","to_void","to_void","to_void","to_void","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unit_number","uses_open_gl_acceleration","vendor_number","warp_mouse_cursor_position","width","width","window_list_info","wrap_under_create_rule","wrap_under_create_rule","wrap_under_get_rule","wrap_under_get_rule","x","y","AnnotatedSession","CAPS_LOCK","CGEvent","CGEventField","CGEventFlagAlphaShift","CGEventFlagAlternate","CGEventFlagCommand","CGEventFlagControl","CGEventFlagHelp","CGEventFlagNonCoalesced","CGEventFlagNull","CGEventFlagNumericPad","CGEventFlagSecondaryFn","CGEventFlagShift","CGEventFlags","CGEventMask","CGEventRef","CGEventTap","CGEventTapCallBackFn","CGEventTapLocation","CGEventTapOptions","CGEventTapPlacement","CGEventTapProxy","CGEventType","CGKeyCode","CGMouseButton","CGScrollEventUnit","COMMAND","CONTROL","Center","DELETE","DOWN_ARROW","Default","END","ESCAPE","EVENT_SOURCE_GROUP_ID","EVENT_SOURCE_STATE_ID","EVENT_SOURCE_UNIX_PROCESS_ID","EVENT_SOURCE_USER_DATA","EVENT_SOURCE_USER_ID","EVENT_TARGET_PROCESS_SERIAL_NUMBER","EVENT_TARGET_UNIX_PROCESS_ID","EventField","F1","F10","F11","F12","F13","F14","F15","F16","F17","F18","F19","F2","F20","F3","F4","F5","F6","F7","F8","F9","FORWARD_DELETE","FUNCTION","FlagsChanged","HELP","HID","HOME","HeadInsertEventTap","KEYBOARD_EVENT_AUTOREPEAT","KEYBOARD_EVENT_KEYBOARD_TYPE","KEYBOARD_EVENT_KEYCODE","KeyCode","KeyDown","KeyUp","LEFT_ARROW","LINE","Left","LeftMouseDown","LeftMouseDragged","LeftMouseUp","ListenOnly","MOUSE_EVENT_BUTTON_NUMBER","MOUSE_EVENT_CLICK_STATE","MOUSE_EVENT_DELTA_X","MOUSE_EVENT_DELTA_Y","MOUSE_EVENT_INSTANT_MOUSER","MOUSE_EVENT_NUMBER","MOUSE_EVENT_PRESSURE","MOUSE_EVENT_SUB_TYPE","MOUSE_EVENT_WINDOW_UNDER_MOUSE_POINTER","MOUSE_EVENT_WINDOW_UNDER_MOUSE_POINTER_THAT_CAN_HANDLE_THIS_EVENT","MUTE","MouseMoved","Null","OPTION","OtherMouseDown","OtherMouseDragged","OtherMouseUp","PAGE_DOWN","PAGE_UP","PIXEL","RETURN","RIGHT_ARROW","RIGHT_COMMAND","RIGHT_CONTROL","RIGHT_OPTION","RIGHT_SHIFT","Right","RightMouseDown","RightMouseDragged","RightMouseUp","SCROLL_WHEEL_EVENT_DELTA_AXIS_1","SCROLL_WHEEL_EVENT_DELTA_AXIS_2","SCROLL_WHEEL_EVENT_FIXED_POINT_DELTA_AXIS_1","SCROLL_WHEEL_EVENT_FIXED_POINT_DELTA_AXIS_2","SCROLL_WHEEL_EVENT_INSTANT_MOUSER","SCROLL_WHEEL_EVENT_IS_CONTINUOUS","SCROLL_WHEEL_EVENT_POINT_DELTA_AXIS_1","SCROLL_WHEEL_EVENT_POINT_DELTA_AXIS_2","SHIFT","SPACE","ScrollEventUnit","ScrollWheel","Session","TAB","TABLET_EVENT_DEVICE_ID","TABLET_EVENT_POINT_BUTTONS","TABLET_EVENT_POINT_PRESSURE","TABLET_EVENT_POINT_X","TABLET_EVENT_POINT_Y","TABLET_EVENT_POINT_Z","TABLET_EVENT_ROTATION","TABLET_EVENT_TANGENTIAL_PRESSURE","TABLET_EVENT_TILT_X","TABLET_EVENT_TILT_Y","TABLET_EVENT_VENDOR_1","TABLET_EVENT_VENDOR_2","TABLET_EVENT_VENDOR_3","TABLET_PROXIMITY_EVENT_CAPABILITY_MASK","TABLET_PROXIMITY_EVENT_DEVICE_ID","TABLET_PROXIMITY_EVENT_ENTER_PROXIMITY","TABLET_PROXIMITY_EVENT_POINTER_ID","TABLET_PROXIMITY_EVENT_POINTER_TYPE","TABLET_PROXIMITY_EVENT_SYSTEM_TABLET_ID","TABLET_PROXIMITY_EVENT_TABLET_ID","TABLET_PROXIMITY_EVENT_VENDOR_ID","TABLET_PROXIMITY_EVENT_VENDOR_POINTER_SERIAL_NUMBER","TABLET_PROXIMITY_EVENT_VENDOR_POINTER_TYPE","TABLET_PROXIMITY_EVENT_VENDOR_UNIQUE_ID","TabletPointer","TabletProximity","TailAppendEventTap","TapDisabledByTimeout","TapDisabledByUserInput","UP_ARROW","VOLUME_DOWN","VOLUME_UP","all","as_ref","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","callback_ref","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","complement","contains","deref","deref_mut","difference","drop","empty","enable","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","get_double_value_field","get_flags","get_integer_value_field","get_type","hash","insert","intersection","intersects","into","into","into","into","into","into","into","into","into","into","into","into","is_all","is_empty","location","mach_port","new","new","new_keyboard_event","new_mouse_event","not","partial_cmp","post","remove","set","set_double_value_field","set_flags","set_integer_value_field","set_string","set_string_from_utf16_unchecked","set_type","sub","sub_assign","symmetric_difference","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","CGEventSource","CGEventSourceRef","CGEventSourceStateID","CombinedSessionState","HIDSystemState","Private","as_ref","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref_mut","drop","fmt","from","from","from","into","into","into","new","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","type_id","CGFont","CGFontRef","CGGlyph","as_ref","borrow","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","copy_table_for_tag","copy_table_tags","copy_variation_axes","copy_variations","create_copy_from_variations","deref","deref_mut","drop","from","from","from_data_provider","from_name","get_glyph_advances","get_glyph_b_boxes","get_units_per_em","into","into","postscript_name","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","type_id","CGAffineTransform","CGPoint","CGRect","CGSize","CG_AFFINE_TRANSFORM_IDENTITY","CG_ZERO_POINT","CG_ZERO_RECT","CG_ZERO_SIZE","a","apply_transform","apply_transform","apply_transform","b","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","c","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","d","default","default","default","default","fmt","fmt","fmt","fmt","from","from","from","from","from_dict_representation","height","inset","into","into","into","into","invert","is_empty","is_intersects","new","new","new","new","origin","size","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","tx","ty","type_id","type_id","type_id","type_id","width","x","y","CGGradient","CGGradientDrawingOptions","CGGradientDrawsAfterEndLocation","CGGradientDrawsBeforeStartLocation","CGGradientRef","all","as_ref","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","complement","contains","create_with_color_components","create_with_colors","deref","deref_mut","difference","drop","empty","eq","extend","fmt","fmt","fmt","fmt","fmt","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","insert","intersection","intersects","into","into","into","is_all","is_empty","not","partial_cmp","remove","set","sub","sub_assign","symmetric_difference","to_owned","to_owned","to_owned","toggle","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","union","CGImage","CGImageAlphaFirst","CGImageAlphaInfo","CGImageAlphaLast","CGImageAlphaNone","CGImageAlphaNoneSkipFirst","CGImageAlphaNoneSkipLast","CGImageAlphaOnly","CGImageAlphaPremultipliedFirst","CGImageAlphaPremultipliedLast","CGImageByteOrder16Big","CGImageByteOrder16Little","CGImageByteOrder32Big","CGImageByteOrder32Little","CGImageByteOrderInfo","CGImageByteOrderMask","CGImageRef","as_ref","bits_per_component","bits_per_pixel","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes_per_row","clone","clone_into","color_space","cropped","data","deref","deref_mut","drop","from","from","from","from","height","into","into","into","into","new","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","width","AddCurveToPoint","AddLineToPoint","AddQuadCurveToPoint","CGPath","CGPathElement","CGPathElementRef","CGPathElementType","CGPathRef","CloseSubpath","MoveToPoint","SysCGPathRef","apply","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","drop","element_type","eq","fmt","fmt","from","from","from","from","from","from_rect","into","into","into","into","into","points","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","CGSRegion","CGSSurface","borrow","borrow","borrow_mut","borrow_mut","drop","from","from","from_ids","from_rect","from_rects","id","into","into","set_shape","try_from","try_from","try_into","try_into","type_id","type_id","CGColorRef","CGColorSpace","CGColorSpaceRef","CGContext","CGContextRef","CGDataProvider","CGDataProviderRef","CGDisplayMode","CGDisplayModeRef","CGEvent","CGEventRef","CGEventSource","CGEventSourceRef","CGEventTap","CGEventTapRef","CGFont","CGFontRef","CGGradient","CGGradientRef","CGImage","CGImageRef","CGPath","CGPathRef","__CGColor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","to_void","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","CGWindowBackingType","CGWindowID","CGWindowImageOption","CGWindowListCopyWindowInfo","CGWindowListCreate","CGWindowListCreateDescriptionFromArray","CGWindowListCreateImage","CGWindowListCreateImageFromArray","CGWindowListOption","CGWindowSharingType","copy_window_info","create_description_from_array","create_image","create_image_from_array","create_window_list","kCGNullWindowID","kCGWindowAlpha","kCGWindowBackingLocationVideoMemory","kCGWindowBackingStoreBuffered","kCGWindowBackingStoreNonretained","kCGWindowBackingStoreRetained","kCGWindowBounds","kCGWindowImageBestResolution","kCGWindowImageBoundsIgnoreFraming","kCGWindowImageDefault","kCGWindowImageNominalResolution","kCGWindowImageOnlyShadows","kCGWindowImageShouldBeOpaque","kCGWindowIsOnscreen","kCGWindowLayer","kCGWindowListOptionAll","kCGWindowListOptionExcludeDesktopElements","kCGWindowListOptionIncludingWindow","kCGWindowListOptionOnScreenAboveWindow","kCGWindowListOptionOnScreenBelowWindow","kCGWindowListOptionOnScreenOnly","kCGWindowMemoryUsage","kCGWindowName","kCGWindowNumber","kCGWindowOwnerName","kCGWindowOwnerPID","kCGWindowSharingNone","kCGWindowSharingReadOnly","kCGWindowSharingReadWrite","kCGWindowSharingState","kCGWindowStoreType","kCGWindowWorkspace"],"q":["core_graphics","","","","","","","","","","","","","","","","core_graphics::base","","","","","","","","","","","","","","","","","","","","","","","core_graphics::color","","","","","","","","","","","","","","","","","","","","","","","","core_graphics::color_space","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","core_graphics::contextcore_graphics::data_provider","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","core_graphics::display","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","core_graphics::eventcore_graphics::event_source","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","core_graphics::font","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","core_graphics::geometry","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","core_graphics::gradient","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","core_graphics::image","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","core_graphics::path","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","core_graphics::private","","","","","","","","","","","","","","","","","","","","","","core_graphics::sys","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","core_graphics::window","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","Evil private APIs.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a <code>CGContext</code> instance from an existing <code>CGContextRef</code> …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Encapsulates custom data that can be wrapped.","","","","","","","","","Creates a copy of the data from the underlying …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Creates a data provider from the given reference-counted …","Creates a data provider from the given raw pointer, …","Creates a data prvider from a given slice. The data …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the length of this custom data. This value must …","Returns a pointer to the start of the custom data. This …","","","","","","","","","","A heterogeneous immutable array.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Provides count of displays that are active (or drawable).","Provides a list of displays that are active (or drawable).","Returns all display modes for the specified display id.","","","","","","Connects or disconnects the mouse and cursor while an …","Begins a new set of display configuration changes.","Returns the number of bits per pixel of the specified …","","","","","","","","","","","","","","","Returns the bounds of a display in the global display …","Cancels a set of display configuration changes.","","","","","","","","","","","Completes a set of display configuration changes.","Changes the configuration of a mirroring set.","Configures the origin of a display in the global display …","Configures the display mode of a display.","","","","Returns information about a display’s current …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Creates a new <code>CFArray</code> with the given elements, which must …","Creates a new <code>CFArray</code> with the given elements, which must …","","","","","","Panics","","","","","Returns the height of the specified display mode.","","Hides the mouse cursor, and increments the hide cursor …","","Returns an image containing the contents of the specified …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns the same array, but with the type reset to void …","Returns the same dictionary, but with the types reset to …","Returns the I/O Kit flags of the specified display mode.","Returns a Boolean value indicating whether a display is …","Returns a boolean indicating whether a display is always …","Returns a boolean indicating whether a display is sleeping …","Returns a boolean indicating whether a display is …","","Returns a boolean indicating whether a display is in a …","Returns a boolean indicating whether a display is in a …","Returns a boolean indicating whether a display is the main …","Returns a boolean indicating whether a display is …","Returns a boolean indicating whether a display is running …","Iterates over the elements of this <code>CFArray</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the the main display.","For a secondary display in a mirroring set, returns the …","","Returns the model number of a display monitor.","Moves the mouse cursor to a specified point relative to …","","A value that will never correspond to actual hardware.","","Returns the pixel encoding of the specified display mode.","Returns the pixel height of the specified display mode.","Returns the pixel width of the specified display mode.","Returns the display height in pixel units.","Returns the display width in pixel units.","Returns the primary display in a hardware mirroring set.","","Returns the rotation angle of a display in degrees.","Returns the width and height of a display in millimeters.","Returns a composite image based on a dynamically generated …","Returns a composite image of the specified windows.","Returns the serial number of a display monitor.","Decrements the hide cursor count, and shows the mouse …","","Returns a <code>CFMutableDictionary</code> pointing to the same …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the logical unit number of a display.","Returns a boolean indicating whether Quartz is using …","Returns the vendor number of the specified display’s …","Moves the mouse cursor without generating events.","Returns the width of the specified display mode.","","Generates and returns information about the selected …","","","","","","","","","","","","","","","","","","","","","Flags for events","","","","","Possible tapping points for events.","","","","Constants that specify the different types of input events.","","","","","","","","","","","","Key to access a field that contains the event source Unix …","Key to access a field that contains the event source state …","Key to access a field that contains the event source Unix …","Key to access a field that contains the event source …","Key to access a field that contains the event source Unix …","Key to access a field that contains the event target …","Key to access a field that contains the event target Unix …","Constants used as keys to access specialized fields in …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Key to access an integer field, non-zero when this is an …","Key to access an integer field that contains the keyboard …","Key to access an integer field that contains the virtual …","Key codes for keys that are independent of keyboard layout.","","","","","","","","","","Key to access an integer field that contains the mouse …","Key to access an integer field that contains the mouse …","Key to access an integer field that contains the …","Key to access an integer field that contains the vertical …","Key to access an integer field. The value is non-zero if …","Key to access an integer field that contains the mouse …","Key to access a double field that contains the mouse …","Key to access an integer field that encodes the mouse …","Added in 10.5; made public in 10.7.","","","","","","","","","","","","","","","","","","","","","","Key to access an integer field that contains scrolling …","Key to access an integer field that contains scrolling …","Key to access a field that contains scrolling data. The …","Key to access a field that contains scrolling data. The …","Key to access an integer field that indicates whether the …","Key to access an integer field that indicates whether a …","Key to access an integer field that contains pixel-based …","Key to access an integer field that contains pixel-based …","","","","","","","Key to access an integer field that contains the …","Key to access an integer field that contains the tablet …","Key to access a double field that contains the tablet pen …","Key to access an integer field that contains the absolute …","Key to access an integer field that contains the absolute …","Key to access an integer field that contains the absolute …","Key to access a double field that contains the tablet pen …","Key to access a double field that contains the tangential …","Key to access a double field that contains the horizontal …","Key to access a double field that contains the vertical …","Key to access an integer field that contains a …","Key to access an integer field that contains a …","Key to access an integer field that contains a …","Key to access an integer field that contains the device …","Key to access an integer field that contains the …","Key to access an integer field that indicates whether the …","Key to access an integer field that contains the …","Key to access an integer field that contains the pointer …","Key to access an integer field that contains the …","Key to access an integer field that contains the …","Key to access an integer field that contains the …","Key to access an integer field that contains the …","Key to access an integer field that contains the …","Key to access an integer field that contains the …","","","","","","","","","Returns the set containing all flags.","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","Returns an empty set of flags.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","","","","","","Returns the complement of this set of flags.","","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","","","","","","","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","","","","","","","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","Possible source states of an event source.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","Returns an empty set of flags.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns the complement of this set of flags.","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","","Toggles the specified flags in-place.","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a cropped image. If the <code>rect</code> specifies a rectangle …","Returns the raw image bytes wrapped in <code>CFData</code>. Note, the …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","This should always be memory-safe; the window server …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,13,13,13,14,13,14,13,13,13,13,13,13,13,13,13,14,13,14,0,0,0,0,0,0,0,13,14,13,14,13,14,13,13,14,0,0,0,0,27,27,27,27,27,0,24,24,24,0,25,25,25,0,26,26,26,26,26,39,0,39,39,39,39,39,39,39,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,17,17,17,17,19,17,39,23,24,25,26,27,19,19,17,39,23,24,25,26,27,19,17,17,17,17,17,17,17,17,23,24,25,26,27,19,23,24,25,26,27,19,17,17,19,17,19,19,19,17,17,17,17,19,17,17,17,17,17,17,17,23,24,25,26,27,39,23,24,25,26,27,19,17,19,17,17,17,39,23,24,25,26,27,19,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,23,24,25,26,27,19,17,17,39,23,24,25,26,27,19,17,39,23,24,25,26,27,19,17,39,23,24,25,26,27,19,19,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,40,40,40,41,40,41,40,40,41,40,40,40,40,41,40,40,40,40,41,47,47,40,41,40,41,40,41,40,40,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,64,64,0,0,0,0,0,0,0,0,62,62,58,59,60,59,60,58,62,62,58,0,59,60,64,62,58,58,61,59,60,64,62,58,61,62,62,59,60,64,62,58,59,60,64,62,58,62,62,62,62,60,58,58,62,59,60,58,59,60,60,59,60,62,59,60,64,62,58,61,60,59,59,59,60,59,60,59,60,59,60,59,59,58,38,62,62,62,59,60,64,62,58,61,59,59,60,58,62,62,62,62,60,62,62,62,62,62,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,59,60,62,62,58,62,62,62,62,21,58,58,58,62,62,62,58,62,62,62,62,62,62,21,60,59,60,64,62,58,61,59,60,59,59,60,60,59,60,64,62,58,61,59,60,64,62,58,61,59,59,60,60,64,62,58,61,62,62,62,62,58,38,62,59,60,59,60,31,31,81,111,0,0,76,76,76,76,76,76,76,76,76,76,0,0,0,0,0,0,0,0,0,0,0,0,0,111,111,80,111,111,83,111,111,112,112,112,112,112,112,112,0,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,79,111,81,111,82,112,112,112,0,79,79,111,113,80,79,79,79,83,112,112,112,112,112,112,112,112,112,112,111,79,79,111,79,79,79,111,111,113,111,111,111,111,111,111,80,79,79,79,112,112,112,112,112,112,112,112,111,111,0,79,81,111,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,79,79,82,79,79,111,111,111,76,77,76,76,76,76,76,76,76,111,113,112,85,76,79,80,81,82,83,77,77,78,111,113,112,85,76,79,80,81,82,83,77,78,85,76,79,80,81,82,83,77,76,79,80,81,82,83,77,76,76,76,77,77,76,77,76,85,76,76,76,76,76,76,76,79,80,81,82,83,111,113,112,85,76,79,80,81,82,83,77,78,76,76,76,76,77,77,77,77,76,76,76,76,111,113,112,85,76,79,80,81,82,83,77,78,76,76,77,85,85,77,77,77,76,76,77,76,76,77,77,77,77,77,77,76,76,76,76,79,80,81,82,83,77,78,76,111,113,112,85,76,79,80,81,82,83,77,78,111,113,112,85,76,79,80,81,82,83,77,78,111,113,112,85,76,79,80,81,82,83,77,77,78,76,0,0,0,94,94,94,90,94,90,90,93,94,90,93,94,90,94,90,90,90,90,94,94,90,93,94,90,93,90,94,90,93,94,90,93,94,90,93,94,90,90,93,0,0,0,36,36,36,95,36,95,36,36,36,36,36,36,36,36,36,36,36,95,36,36,36,36,36,36,95,36,36,95,36,95,36,95,36,36,95,0,0,0,0,0,0,0,0,28,38,31,21,28,38,31,21,28,38,31,21,28,28,38,31,21,28,38,31,21,28,28,38,31,21,28,38,31,21,28,38,31,21,28,21,38,21,38,31,21,28,28,21,21,38,31,21,28,21,21,38,31,21,28,38,31,21,28,38,31,21,28,28,28,38,31,21,28,38,31,31,0,0,32,32,0,32,30,32,32,32,32,32,32,32,32,30,30,99,32,30,99,32,30,32,30,32,32,32,30,30,30,30,32,30,32,32,32,32,32,32,32,32,32,30,99,32,32,32,32,32,32,32,32,32,30,99,32,32,32,32,32,32,32,32,32,32,30,99,32,32,30,99,32,30,99,32,30,99,32,0,114,0,114,114,114,114,114,114,114,115,115,115,115,0,115,0,22,100,100,114,115,22,22,100,114,115,22,100,100,22,22,100,100,100,22,22,22,114,115,22,100,100,114,115,22,100,22,22,100,114,115,22,100,114,115,22,100,114,115,22,22,100,100,102,102,102,0,0,0,0,0,102,102,0,101,101,103,104,101,101,18,102,103,104,101,18,102,101,102,101,102,103,101,101,101,104,102,104,102,103,104,101,18,102,101,103,104,101,18,102,104,101,18,102,103,104,101,18,102,103,104,101,18,102,103,104,101,101,18,102,0,0,105,107,105,107,105,105,107,107,105,105,107,105,107,107,105,107,105,107,105,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,117,118,119,120,121,35,122,123,124,125,126,116,117,118,119,120,121,35,122,123,124,125,126,116,117,118,119,120,121,35,122,123,124,125,126,116,117,118,119,120,121,35,122,123,124,125,126,3,116,117,118,119,120,121,35,122,123,124,125,126,116,117,118,119,120,121,35,122,123,124,125,126,116,117,118,119,120,121,35,122,123,124,125,126,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[1,3],[[]],[[]],[1,1],[[]],[1],[[1,1],4],[[]],[5,6],[5,7],[[]],[[8,8,8,8],1],[[]],[1,9],[1,9],[[],10],[[],10],[[],11],[[],12],[3,1],[3,1],0,0,[13,14],[13,14],[[]],[[]],[[]],[[]],[13,13],[[]],[[],13],[[],13],[15,[[16,[13]]]],[13,14],[13,14],[13],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,[[]],[14,13],[[],10],[[],10],[[],10],[[],10],[[],12],[[],11],[[],12],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[17,8,8,8,8,8,8]],[[17,8,8]],[[17,18]],[[17,8,8,8,8]],[19,17],[17],[[]],[[]],[[]],[[]],[[]],[[]],[19,17],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[17,20],[[17,21]],[17],[17,21],[[17,21,22]],[[17,21]],[17],[23,23],[24,24],[25,25],[26,26],[27,27],[19,19],[[]],[[]],[[]],[[]],[[]],[[]],[17],[[17,28]],[[[16,[9]],20,20,20,20,13,29],19],[17,[[16,[22]]]],[19],[19,17],[19,17],[[17,21,22]],[[17,30,31,31,32]],[[17,26]],[[17,30,31,8,31,8,32]],[19],[17],[17],[[17,21]],[17],[[17,21]],[17],[17],[[23,33],34],[[24,33],34],[[25,33],34],[[26,33],34],[[27,33],34],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[35,19],[17,28],[17,27],[17,20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[17,8,8]],[17],[17],[[17,8]],[17],[[17,8,8]],[[17,4]],[[17,4]],[[17,4]],[[17,4]],[[17,23]],[[17,1]],[[17,36]],[[17,8]],[[17,37]],[[17,8,8]],[[17,27]],[[17,24]],[[17,8]],[[17,25]],[[17,8]],[[17,8]],[[17,8,8,8,8]],[[17,8,8,8,8]],[[17,38,8]],[[17,38,8,1]],[[17,4]],[[17,4]],[[17,4]],[[17,4]],[[17,39]],[[17,28]],[[17,8,8]],[17],[[17,21]],[17],[17],[[17,21]],[[17,21,8]],[[]],[[]],[[]],[[]],[[]],[[]],[17,19],[[17,8,8]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],11],[[],12],[17,20],0,0,0,0,0,0,0,0,0,0,0,0,0,[40,41],[[]],[40,41],[[]],[[]],[[]],[40,40],[[]],[41,42],[40,41],[40,41],[40],[[]],[[]],[[[46,[[0,[43,44,45]]]]],40],[[[48,[[48,[47]]]]],40],[[],40],[[]],[[]],[[],49],[[],50],[[]],[41,40],[[],10],[[],10],[[],10],[[],10],[[],12],[[],11],[[],12],0,[51,52],[[51,52],5],0,0,[[53,5,5],50],0,0,[5],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[10,[29,54]]]],[[],[[10,[[56,[55]],54]]]],[[55,57],[[16,[[56,[58]]]]]],[59,5],[60,5],[59,51],[60,53],[58,61],[4,[[10,[54]]]],[62,[[10,[63,54]]]],[58,49],0,[[]],[[]],[[]],[[]],[58,61],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[62,21],[[62,63],[[10,[54]]]],[[[59,[5]]],[[59,[5]]]],[[[60,[5,5]]],[[60,[5,5]]]],[64,64],[62,62],[58,58],[[]],[[]],[[]],[[]],[[]],[[62,63,64],[[10,[54]]]],[[62,63,62],[[10,[54]]]],[[62,63,37,37],[[10,[54]]]],[[62,63,58],[[10,[54]]]],[60,4],[58,61],[58,61],[62,[[16,[58]]]],[59],[60],[58],[[[59,[5]],59],4],[[[60,[5,5]],60],4],[60,[[16,[7]]]],[[59,33],[[10,[65]]]],[[60,33],[[10,[65]]]],[[62,33],34],[[]],[[]],[[]],[[]],[[]],[[]],[[],60],[[],59],[[],59],[5,6],[5,6],[5,7],[5,7],[[59,52],[[16,[7]]]],[60,7],[59,[[56,[5,66]]]],[60],[[59,52],7],[[59,67],[[56,[5,66]]]],[58,68],0,[62,[[10,[54]]]],0,[62,[[16,[22]]]],[[]],[[]],[[]],[[]],[[]],[[]],[59,69],[59,[[59,[5]]]],[60,[[60,[5,5]]]],[58,29],[62,4],[62,4],[62,4],[62,4],[60,4],[62,4],[62,4],[62,4],[62,4],[62,4],[59,69],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[59,52],[60,49],[[],62],[62,55],[58,37],[62,29],[[62,31],[[10,[54]]]],[55,62],[[],62],0,[58,70],[58,68],[58,68],[62,68],[62,68],[62,55],[58,71],[62,71],[62,38],[[21,72,73,74],[[16,[22]]]],[[21,59,74],[[16,[22]]]],[62,29],[62,[[10,[54]]]],0,[60,75],[[]],[[]],[[]],[[]],[[]],[61,58],[59,[[59,[5]]]],[60,[[60,[5,5]]]],[[[59,[5]]],5],[59,5],[[[60,[5,5]]],5],[60,5],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],49],[[],12],[[],12],[[],49],[[],12],[[],12],[[],12],[[],12],[62,29],[62,4],[62,29],[31,[[10,[54]]]],[58,68],0,[[72,[16,[73]]],[[16,[59]]]],[51,59],[53,60],[51,59],[53,60],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],76],[77,78],[[76,76],76],[[76,76]],[[76,76],76],[[76,76]],[76,68],[[76,76],76],[[76,76]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[77,78],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[76,76],[79,79],[80,80],[81,81],[82,82],[83,83],[77,77],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[76,76],84],[76,76],[[76,76],4],[77,78],[77,78],[[76,76],76],[77],[[],76],[85],[[76,76],4],[[76,86]],[[76,33],34],[[76,33],34],[[76,33],34],[[76,33],34],[[76,33],34],[[79,33],34],[[80,33],34],[[81,33],34],[[82,33],34],[[83,33],34],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[68,[[16,[76]]]],[68,76],[68,76],[86,76],[[77,87],71],[77,76],[[77,87],88],[77,79],[76],[[76,76]],[[76,76],76],[[76,76],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[76,4],[76,4],[77,31],0,[[81,82,83,[56,[79]],89],[[10,[85]]]],[90,[[10,[77]]]],[[90,91,4],[[10,[77]]]],[[90,79,31,80],[[10,[77]]]],[76,76],[[76,76],[[16,[84]]]],[[77,81]],[[76,76]],[[76,76,4]],[[77,87,71]],[[77,76]],[[77,87,88]],[[77,92]],[77],[[77,79]],[[76,76],76],[[76,76]],[[76,76],76],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[78,77],[[76,76]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],11],[[],12],[[],12],[[76,76],76],0,0,0,0,0,0,[90,93],[[]],[90,93],[[]],[[]],[[]],[[]],[[]],[94,94],[90,90],[[]],[[]],[90,93],[90,93],[90],[[94,33],34],[[]],[[]],[[]],[[]],[[]],[[]],[94,[[10,[90]]]],[[]],[[]],[93,90],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],12],[[],12],[[],11],[[],12],0,0,0,[36,95],[[]],[36,95],[[]],[[]],[[]],[36,36],[[]],[[36,29],[[16,[42]]]],[36,[[59,[29]]]],[36,[[16,[[59,[[60,[70,96]]]]]]]],[36,[[16,[[60,[70,97]]]]]],[[36,60],[[10,[36]]]],[36,95],[36,95],[36],[[]],[[]],[40,[[10,[36]]]],[70,[[10,[36]]]],[36,4],[36,4],[36,98],[[]],[[]],[36,70],[[]],[95,36],[[],10],[[],10],[[],10],[[],10],[[],11],[[],12],[[],12],0,0,0,0,0,0,0,0,0,[[38,28],38],[[31,28],31],[[21,28],21],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[38,38],[31,31],[21,21],[28,28],[[]],[[]],[[]],[[]],0,[[],38],[[],31],[[],21],[[],28],[[38,33],[[10,[65]]]],[[31,33],[[10,[65]]]],[[21,33],[[10,[65]]]],[[28,33],[[10,[65]]]],[[]],[[]],[[]],[[]],[60,[[16,[21]]]],0,[[21,38],21],[[]],[[]],[[]],[[]],[28,28],[21,4],[[21,21],4],[[71,71],38],[[71,71],31],[[31,38],21],[[71,71,71,71,71,71],28],0,0,[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],0,0,[[],12],[[],12],[[],12],[[],12],0,0,0,0,0,0,0,0,[[],32],[30,99],[[32,32],32],[[32,32]],[[32,32],32],[[32,32]],[32,29],[[32,32],32],[[32,32]],[[]],[30,99],[[]],[[]],[[]],[[]],[[]],[32,32],[30,30],[[]],[[]],[[32,32],84],[32,32],[[32,32],4],[[13,49],30],[[13,59],30],[30,99],[30,99],[[32,32],32],[30],[[],32],[[32,32],4],[[32,86]],[[32,33],34],[[32,33],34],[[32,33],34],[[32,33],34],[[32,33],34],[[]],[[]],[[]],[29,[[16,[32]]]],[29,32],[29,32],[86,32],[32],[[32,32]],[[32,32],32],[[32,32],4],[[]],[[]],[[]],[32,4],[32,4],[32,32],[[32,32],[[16,[84]]]],[[32,32]],[[32,32,4]],[[32,32],32],[[32,32]],[[32,32],32],[[]],[[]],[99,30],[[32,32]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],12],[[],12],[[],12],[[32,32],32],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[22,100],[100,20],[100,20],[[]],[[]],[[]],[22,100],[[]],[[]],[[]],[[]],[[]],[100,20],[22,22],[[]],[100,13],[[100,21],[[16,[22]]]],[100,42],[22,100],[22,100],[22],[[]],[[]],[[]],[[]],[100,20],[[]],[[]],[[]],[[]],[[20,20,20,20,20,13,29,40,4,29],22],[[]],[100,22],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],12],[[],12],[[],12],[[],11],[[],12],[100,20],0,0,0,0,0,0,0,0,0,0,0,[101],[101,18],[[]],[[]],[[]],[101,18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[101,101],[102,102],[[]],[[]],[103,104],[101,18],[101,18],[101],0,[[102,102],4],[[104,33],[[10,[65]]]],[[102,33],34],[[]],[[]],[[]],[[]],[[]],[[21,[16,[28]]],101],[[]],[[]],[[]],[[]],[[]],[104],[[]],[18,101],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],12],[[],12],[[],11],[[],12],[[],12],[[],12],0,0,[[]],[[]],[[]],[[]],[105],[[]],[[]],[[106,98,106],107],[21,105],[[],105],[107,106],[[]],[[]],[[107,105]],[[],10],[[],10],[[],10],[[],10],[[],12],[[],12],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,9],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],0,0,0,0,0,0,0,0,0,0,[[108,109],[[16,[59]]]],[[[59,[109]]],[[16,[[59,[[60,[70,96]]]]]]]],[[21,108,109,110],[[16,[22]]]],[[21,59,110],[[16,[22]]]],[[108,109],[[16,[[59,[109]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"p":[[3,"CGColor"],[6,"CFTypeRef"],[6,"CGColorRef"],[15,"bool"],[4,"c_void"],[3,"ItemMutRef"],[3,"ItemRef"],[6,"CGFloat"],[6,"c_void"],[4,"Result"],[6,"CFTypeID"],[3,"TypeId"],[3,"CGColorSpace"],[3,"CGColorSpaceRef"],[6,"CFStringRef"],[4,"Option"],[3,"CGContextRef"],[3,"CGPathRef"],[3,"CGContext"],[6,"size_t"],[3,"CGRect"],[3,"CGImage"],[4,"CGBlendMode"],[4,"CGLineCap"],[4,"CGLineJoin"],[4,"CGPathDrawingMode"],[4,"CGInterpolationQuality"],[3,"CGAffineTransform"],[15,"u32"],[3,"CGGradient"],[3,"CGPoint"],[3,"CGGradientDrawingOptions"],[3,"Formatter"],[6,"Result"],[4,"CGContext"],[3,"CGFont"],[15,"i32"],[3,"CGSize"],[4,"CGTextDrawingMode"],[3,"CGDataProvider"],[3,"CGDataProviderRef"],[3,"CFData"],[8,"AsRef"],[8,"Sync"],[8,"Send"],[3,"Arc"],[8,"CustomData"],[3,"Box"],[15,"usize"],[15,"u8"],[3,"__CFArray"],[15,"isize"],[3,"__CFDictionary"],[6,"CGError"],[6,"CGDirectDisplayID"],[3,"Vec"],[6,"CFDictionaryRef"],[3,"CGDisplayMode"],[3,"CFArray"],[3,"CFDictionary"],[3,"CGDisplayModeRef"],[3,"CGDisplay"],[6,"CGDisplayConfigRef"],[4,"CGConfigureOption"],[3,"Error"],[3,"Global"],[3,"CFRange"],[15,"u64"],[3,"CFArrayIterator"],[3,"CFString"],[15,"f64"],[6,"CGWindowListOption"],[6,"CGWindowID"],[6,"CGWindowImageOption"],[3,"CFMutableDictionary"],[3,"CGEventFlags"],[3,"CGEvent"],[3,"CGEventRef"],[4,"CGEventType"],[4,"CGMouseButton"],[4,"CGEventTapLocation"],[4,"CGEventTapPlacement"],[4,"CGEventTapOptions"],[4,"Ordering"],[3,"CGEventTap"],[8,"IntoIterator"],[6,"CGEventField"],[15,"i64"],[8,"Fn"],[3,"CGEventSource"],[6,"CGKeyCode"],[15,"str"],[3,"CGEventSourceRef"],[4,"CGEventSourceStateID"],[3,"CGFontRef"],[3,"CFType"],[3,"CFNumber"],[6,"c_int"],[3,"CGGradientRef"],[3,"CGImageRef"],[3,"CGPath"],[4,"CGPathElementType"],[3,"CGPathElementRef"],[3,"CGPathElement"],[3,"CGSRegion"],[6,"c_uint"],[3,"CGSSurface"],[6,"CGWindowListOption"],[6,"CGWindowID"],[6,"CGWindowImageOption"],[3,"KeyCode"],[3,"EventField"],[3,"ScrollEventUnit"],[4,"CGImageAlphaInfo"],[4,"CGImageByteOrderInfo"],[4,"CGImage"],[3,"__CGColor"],[4,"CGColorSpace"],[4,"CGPath"],[4,"CGDataProvider"],[4,"CGFont"],[4,"CGGradient"],[4,"CGEventTap"],[4,"CGEvent"],[4,"CGEventSource"],[4,"CGDisplayMode"]]},\
"core_graphics_types":{"doc":"","t":"AAGGGGDDDDRRRRMLLLMLLLLLLLLMLLLLLLLLMLLLLLLLLLLLLLMLLLLLLLLLLLLMMLLLLLLLLLLLLMMLLLLMMM","n":["base","geometry","CGError","CGFloat","CGGlyph","boolean_t","CGAffineTransform","CGPoint","CGRect","CGSize","CG_AFFINE_TRANSFORM_IDENTITY","CG_ZERO_POINT","CG_ZERO_RECT","CG_ZERO_SIZE","a","apply_transform","apply_transform","apply_transform","b","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","c","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","d","default","default","default","default","fmt","fmt","fmt","fmt","from","from","from","from","from_dict_representation","height","inset","into","into","into","into","invert","is_empty","is_intersects","new","new","new","new","origin","size","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","tx","ty","type_id","type_id","type_id","type_id","width","x","y"],"q":["core_graphics_types","","core_graphics_types::base","","","","core_graphics_types::geometry","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,3,4,2,1,3,4,2,1,3,4,2,2,1,3,4,2,1,3,4,2,2,1,3,4,2,1,3,4,2,1,3,4,2,4,1,4,1,3,4,2,2,4,4,1,3,4,2,4,4,1,3,4,2,1,3,4,2,1,3,4,2,2,2,1,3,4,2,1,3,3],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2],1],[[3,2],3],[[4,2],4],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[1,1],[3,3],[4,4],[2,2],[[]],[[]],[[]],[[]],0,[[],1],[[],3],[[],4],[[],2],[[1,5],6],[[3,5],6],[[4,5],6],[[2,5],6],[[]],[[]],[[]],[[]],[7,[[8,[4]]]],0,[[4,1],4],[[]],[[]],[[]],[[]],[2,2],[4,9],[[4,4],9],[[10,10],1],[[10,10],3],[[3,1],4],[[10,10,10,10,10,10],2],0,0,[[]],[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],0,0,[[],12],[[],12],[[],12],[[],12],0,0,0],"p":[[3,"CGSize"],[3,"CGAffineTransform"],[3,"CGPoint"],[3,"CGRect"],[3,"Formatter"],[6,"Result"],[3,"CFDictionary"],[4,"Option"],[15,"bool"],[6,"CGFloat"],[4,"Result"],[3,"TypeId"]]},\
"core_text":{"doc":"Many of these functions will add objects to the …","t":"AAAAAAAAADGGGGGDLLLLLLLLLLFLLLLLLLFFLLLLLLLLLLLLLLLLLLLLLLLRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRLFFFFFLLLLLLLLLLLLLLLLLLLLLLLLDGDLLLLLLLLFFLLLLLLLLFFLLFLLLLLLLLLLLLLGDFFFFFFFFFFFGGGGGGGIIIDLLLLLLLLLLFLLLLLLLLLLLLLLKLKLKLKLKLKLKLKLKLKLKLHRHHRRRRRRHHRHHHHHRRRRRRRRRHHHRRHRHRHRRRRRRHRRHRHHRHHRRHRHRRHHFFFKLKLKLLKLLLLLLLLLLLLLLLFFFFFFFFFDGDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDGDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDGDDLLMLLLLLLLLMLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLMLLDGDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLHHHHHHHHHHHHHHH","n":["font","font_collection","font_descriptor","font_manager","frame","framesetter","line","run","string_attributes","CTFont","CTFontOptions","CTFontRef","CTFontTableOptions","CTFontTableTag","CTFontUIFontType","__CTFont","all_traits","as_CFTypeRef","as_concrete_TypeRef","ascent","borrow","borrow","borrow_mut","borrow_mut","bounding_box","cap_height","cascade_list_for_languages","clone","clone_into","clone_with_font_size","clone_with_symbolic_traits","copy_descriptor","copy_to_CGFont","create_path_for_glyph","debug_font_names","debug_font_traits","descent","display_name","draw_glyphs","drop","eq","face_name","family_name","fmt","from","from","from_mut_void","from_void","get_advances_for_glyphs","get_available_font_tables","get_bounding_rects_for_glyphs","get_font_table","get_glyph_with_name","get_glyphs_for_characters","get_variation_axes","get_vertical_translations_for_glyphs","glyph_count","into","into","kCTFontAlertHeaderFontType","kCTFontApplicationFontType","kCTFontControlContentFontType","kCTFontEmphasizedSystemDetailFontType","kCTFontEmphasizedSystemFontType","kCTFontLabelFontType","kCTFontMenuItemCmdKeyFontType","kCTFontMenuItemFontType","kCTFontMenuItemMarkFontType","kCTFontMenuTitleFontType","kCTFontMessageFontType","kCTFontMiniEmphasizedSystemFontType","kCTFontMiniSystemFontType","kCTFontOptionsDefault","kCTFontOptionsPreferSystemFont","kCTFontOptionsPreventAutoActivation","kCTFontPaletteFontType","kCTFontPushButtonFontType","kCTFontSmallEmphasizedSystemFontType","kCTFontSmallSystemFontType","kCTFontSmallToolbarFontType","kCTFontSystemDetailFontType","kCTFontSystemFontType","kCTFontTableOptionsExcludeSynthetic","kCTFontTableOptionsNoOptions","kCTFontToolTipFontType","kCTFontToolbarFontType","kCTFontUserFixedPitchFontType","kCTFontUserFontType","kCTFontUtilityWindowTitleFontType","kCTFontViewsFontType","kCTFontWindowTitleFontType","leading","new_from_CGFont","new_from_CGFont_with_variations","new_from_buffer","new_from_descriptor","new_from_name","postscript_name","pt_size","slant_angle","style_name","symbolic_traits","to_owned","to_void","to_void","to_void","try_from","try_from","try_into","try_into","type_id","type_id","type_id","underline_position","underline_thickness","unique_name","units_per_em","url","wrap_under_create_rule","wrap_under_get_rule","x_height","CTFontCollection","CTFontCollectionRef","__CTFontCollection","as_CFTypeRef","as_concrete_TypeRef","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","create_for_all_families","create_for_family","drop","eq","fmt","from","from","from_mut_void","from_void","get_descriptors","get_family_names","get_postscript_names","into","into","new_from_descriptors","to_owned","to_void","to_void","to_void","try_from","try_from","try_into","try_into","type_id","type_id","type_id","wrap_under_create_rule","wrap_under_get_rule","CTFontAttributes","CTFontDescriptor","CTFontDescriptorCopyAttribute","CTFontDescriptorCopyAttributes","CTFontDescriptorCopyLocalizedAttribute","CTFontDescriptorCreateCopyWithAttributes","CTFontDescriptorCreateCopyWithFeature","CTFontDescriptorCreateCopyWithVariation","CTFontDescriptorCreateMatchingFontDescriptor","CTFontDescriptorCreateMatchingFontDescriptors","CTFontDescriptorCreateWithAttributes","CTFontDescriptorCreateWithNameAndSize","CTFontDescriptorGetTypeID","CTFontDescriptorRef","CTFontFormat","CTFontOrientation","CTFontPriority","CTFontStylisticClass","CTFontSymbolicTraits","CTFontTraits","StylisticClassAccessors","SymbolicTraitAccessors","TraitAccessors","__CTFontDescriptor","as_CFTypeRef","as_concrete_TypeRef","attributes","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","create_copy_with_attributes","debug_descriptor","display_name","drop","eq","family_name","fmt","font_format","font_name","font_path","from","from","from_mut_void","from_void","into","into","is_bold","is_bold","is_condensed","is_condensed","is_expanded","is_expanded","is_fantasy","is_fantasy","is_italic","is_italic","is_monospace","is_monospace","is_sans_serif","is_sans_serif","is_script","is_script","is_serif","is_serif","is_symbols","is_symbols","is_vertical","is_vertical","kCTFontBaselineAdjustAttribute","kCTFontBoldTrait","kCTFontCascadeListAttribute","kCTFontCharacterSetAttribute","kCTFontClarendonSerifsClass","kCTFontClassMaskShift","kCTFontClassMaskTrait","kCTFontColorGlyphsTrait","kCTFontCondensedTrait","kCTFontDefaultOrientation","kCTFontDisplayNameAttribute","kCTFontEnabledAttribute","kCTFontExpandedTrait","kCTFontFamilyNameAttribute","kCTFontFeatureSettingsAttribute","kCTFontFeaturesAttribute","kCTFontFixedAdvanceAttribute","kCTFontFormatAttribute","kCTFontFormatBitmap","kCTFontFormatOpenTypePostScript","kCTFontFormatOpenTypeTrueType","kCTFontFormatPostScript","kCTFontFormatTrueType","kCTFontFormatUnrecognized","kCTFontFreeformSerifsClass","kCTFontHorizontalOrientation","kCTFontItalicTrait","kCTFontLanguagesAttribute","kCTFontMacintoshEncodingsAttribute","kCTFontMatrixAttribute","kCTFontModernSerifsClass","kCTFontMonoSpaceTrait","kCTFontNameAttribute","kCTFontOldStyleSerifsClass","kCTFontOrientationAttribute","kCTFontOrnamentalsClass","kCTFontPriorityAttribute","kCTFontPriorityComputer","kCTFontPriorityDynamic","kCTFontPriorityNetwork","kCTFontPriorityProcess","kCTFontPrioritySystem","kCTFontPriorityUser","kCTFontRegistrationScopeAttribute","kCTFontSansSerifClass","kCTFontScriptsClass","kCTFontSizeAttribute","kCTFontSlabSerifsClass","kCTFontSlantTrait","kCTFontStyleNameAttribute","kCTFontSymbolicClass","kCTFontSymbolicTrait","kCTFontTraitsAttribute","kCTFontTransitionalSerifsClass","kCTFontUIOptimizedTrait","kCTFontURLAttribute","kCTFontUnknownClass","kCTFontVariationAttribute","kCTFontVerticalOrientation","kCTFontVerticalTrait","kCTFontWeightTrait","kCTFontWidthTrait","new_from_attributes","new_from_postscript_name","new_from_variations","normalized_slant","normalized_slant","normalized_weight","normalized_weight","normalized_width","normalized_width","style_name","symbolic_traits","symbolic_traits","to_owned","to_void","to_void","to_void","traits","try_from","try_from","try_into","try_into","type_id","type_id","type_id","wrap_under_create_rule","wrap_under_get_rule","CTFontManagerCopyAvailableFontFamilyNames","CTFontManagerCopyAvailableFontURLs","CTFontManagerCopyAvailablePostScriptNames","CTFontManagerCreateFontDescriptorFromData","CTFontManagerCreateFontDescriptorsFromURL","CTFontManagerIsSupportedFont","copy_available_font_family_names","create_font_descriptor","create_font_descriptor_with_data","CTFrame","CTFrameRef","__CTFrame","as_CFTypeRef","as_concrete_TypeRef","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","draw","drop","eq","fmt","from","from","from_mut_void","from_void","get_line_origins","get_lines","get_path","into","into","to_owned","to_void","to_void","to_void","try_from","try_from","try_into","try_into","type_id","type_id","type_id","wrap_under_create_rule","wrap_under_get_rule","CTFramesetter","CTFramesetterRef","__CTFramesetter","as_CFTypeRef","as_concrete_TypeRef","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","create_frame","drop","eq","fmt","from","from","from_mut_void","from_void","into","into","new_with_attributed_string","suggest_frame_size_with_constraints","to_owned","to_void","to_void","to_void","try_from","try_from","try_into","try_into","type_id","type_id","type_id","wrap_under_create_rule","wrap_under_get_rule","CTLine","CTLineRef","TypographicBounds","__CTLine","as_CFTypeRef","as_concrete_TypeRef","ascent","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","descent","draw","drop","eq","fmt","from","from","from","from_mut_void","from_void","get_image_bounds","get_string_index_for_position","get_string_offset_for_string_index","get_string_range","get_typographic_bounds","glyph_runs","into","into","into","leading","new_with_attributed_string","to_owned","to_void","to_void","to_void","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","type_id","width","wrap_under_create_rule","wrap_under_get_rule","CTRun","CTRunRef","__CTRun","as_CFTypeRef","as_concrete_TypeRef","attributes","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","drop","eq","fmt","from","from","from_mut_void","from_void","glyph_count","glyphs","into","into","positions","string_indices","to_owned","to_void","to_void","to_void","try_from","try_from","try_into","try_into","type_id","type_id","type_id","wrap_under_create_rule","wrap_under_get_rule","kCTCharacterShapeAttributeName","kCTFontAttributeName","kCTForegroundColorAttributeName","kCTForegroundColorFromContextAttributeName","kCTGlyphInfoAttributeName","kCTKernAttributeName","kCTLigatureAttributeName","kCTParagraphStyleAttributeName","kCTRunDelegateAttributeName","kCTStrokeColorAttributeName","kCTStrokeWidthAttributeName","kCTSuperscriptAttributeName","kCTUnderlineColorAttributeName","kCTUnderlineStyleAttributeName","kCTVerticalFormsAttributeName"],"q":["core_text","","","","","","","","","core_text::font","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","core_text::font_collection","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","core_text::font_descriptor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","core_text::font_manager","","","","","","","","","core_text::frame","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","core_text::framesetter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","core_text::line","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","core_text::run","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","core_text::string_attributes","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Return the origin of each line in a given range.","Returns an owned copy of the underlying lines.","The <code>CGPath</code> used to create this <code>CTFrame</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Suggest an appropriate frame size for displaying a text …","","","","","","","","","","","","","","","","Metrics for a given line.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,65,1,65,1,1,1,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,65,1,1,1,1,1,1,1,1,1,1,1,1,65,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1,1,1,1,4,1,1,65,1,65,1,65,1,1,1,1,1,1,1,1,1,1,0,0,0,41,41,66,41,66,41,41,41,0,0,41,41,41,66,41,41,41,41,0,0,66,41,0,41,42,41,41,66,41,66,41,66,41,41,41,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,67,8,67,8,8,8,8,0,8,8,8,8,8,8,8,8,67,8,8,8,67,8,68,10,68,10,68,10,69,46,68,10,68,10,69,46,69,46,69,46,69,46,68,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,2,70,2,70,2,8,70,2,8,43,8,8,8,67,8,67,8,67,8,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,47,47,71,47,71,47,47,47,47,47,47,47,71,47,47,47,47,47,47,71,47,47,48,47,47,71,47,71,47,71,47,47,47,47,0,0,0,55,55,72,55,72,55,55,55,55,55,55,55,72,55,55,55,72,55,55,55,55,56,55,55,72,55,72,55,72,55,55,55,55,0,0,0,0,54,54,61,73,61,54,73,61,54,54,54,61,54,54,54,54,73,61,54,54,54,54,54,54,54,54,54,73,61,54,61,54,54,60,54,54,73,61,54,73,61,54,73,61,54,54,61,54,54,0,0,0,62,62,62,74,62,74,62,62,62,62,62,62,74,62,62,62,62,62,74,62,62,62,62,63,62,62,74,62,74,62,74,62,62,62,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[1,3],[1,4],[1,5],[[]],[[]],[[]],[[]],[1,6],[1,5],[[1,7],[[7,[8]]]],[1,1],[[]],[[1,9],1],[[1,10,10],[[11,[1]]]],[1,8],[1,12],[[1,13,14],[[16,[15]]]],[1],[1],[1,5],[1,17],[[1,18]],[1],[[1,1],19],[1,17],[1,17],[[1,20],21],[[]],[[]],[22,23],[22,24],[[1,25,13,26,27],9],[1,[[11,[[7,[28]]]]]],[[1,25],6],[[1,29],[[11,[30]]]],[[1,31],13],[[1,32,13,27],19],[1,[[11,[[7,[[35,[33,34]]]]]]]],[[1,25,13,26,27]],[1,27],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,5],[[12,9],1],[[12,9,35],1],[[],[[16,[1]]]],[[8,9],1],[[31,9],[[16,[1]]]],[1,17],[1,5],[1,5],[1,17],[1,10],[[]],[4,36],[1,36],[1,36],[[],16],[[],16],[[],16],[[],16],[[],37],[[],37],[[],38],[1,5],[1,5],[1,17],[1,39],[1,[[11,[40]]]],[4,1],[4,1],[1,5],0,0,0,[41,3],[41,42],[[]],[[]],[[]],[[]],[41,41],[[]],[[],41],[31,[[11,[41]]]],[41],[[41,41],19],[[41,20],21],[[]],[[]],[22,23],[22,24],[41,[[11,[[7,[8]]]]]],[[],[[7,[33]]]],[[],[[7,[33]]]],[[]],[[]],[7,41],[[]],[42,36],[41,36],[41,36],[[],16],[[],16],[[],16],[[],16],[[],37],[[],37],[[],38],[42,41],[42,41],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[8,3],[8,43],[8,[[35,[33,34]]]],[[]],[[]],[[]],[[]],[8,8],[[]],[[8,35],[[16,[8]]]],[8],[8,17],[8],[[8,8],19],[8,17],[[8,20],21],[8,[[11,[44]]]],[8,17],[8,[[11,[45]]]],[[]],[[]],[22,23],[22,24],[[]],[[]],[[],19],[10,19],[[],19],[10,19],[[],19],[10,19],[[],19],[46,19],[[],19],[10,19],[[],19],[10,19],[[],19],[46,19],[[],19],[46,19],[[],19],[46,19],[[],19],[46,19],[[],19],[10,19],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[35,8],[33,8],[35,8],[[],9],[2,9],[[],9],[2,9],[[],9],[2,9],[8,17],[[],10],[2,10],[[]],[43,36],[8,36],[8,36],[8,2],[[],16],[[],16],[[],16],[[],16],[[],37],[[],37],[[],38],[43,8],[43,8],0,0,0,0,0,0,[[],[[7,[33]]]],[[],[[16,[8]]]],[30,[[16,[8]]]],0,0,0,[47,3],[47,48],[[]],[[]],[[]],[[]],[47,47],[[]],[[47,49]],[47],[[47,47],19],[[47,20],21],[[]],[[]],[22,23],[22,24],[[47,[51,[[11,[50]]]]],[[53,[52]]]],[47,[[53,[54]]]],[47,15],[[]],[[]],[[]],[48,36],[47,36],[47,36],[[],16],[[],16],[[],16],[[],16],[[],37],[[],37],[[],38],[48,47],[48,47],0,0,0,[55,3],[55,56],[[]],[[]],[[]],[[]],[55,55],[[]],[[55,50,57],47],[55],[[55,55],19],[[55,20],21],[[]],[[]],[22,23],[22,24],[[]],[[]],[58,55],[[55,50,59,26]],[[]],[56,36],[55,36],[55,36],[[],16],[[],16],[[],16],[[],16],[[],37],[[],37],[[],38],[56,55],[56,55],0,0,0,0,[54,3],[54,60],0,[[]],[[]],[[]],[[]],[[]],[[]],[54,54],[[]],0,[[54,18]],[54],[[54,54],19],[[54,20],21],[[]],[[]],[[]],[22,23],[22,24],[[54,18],6],[[54,52],27],[[54,27],5],[54,50],[54,61],[54,[[7,[62]]]],[[]],[[]],[[]],0,[58,54],[[]],[60,36],[54,36],[54,36],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],37],[[],37],[[],38],[[],37],0,[60,54],[60,54],0,0,0,[62,3],[62,63],[62,[[11,[[35,[33,34]]]]]],[[]],[[]],[[]],[[]],[62,62],[[]],[62],[[62,62],19],[[62,20],21],[[]],[[]],[22,23],[22,24],[62,27],[62,64],[[]],[[]],[62,64],[62,64],[[]],[63,36],[62,36],[62,36],[[],16],[[],16],[[],16],[[],16],[[],37],[[],37],[[],38],[63,62],[63,62],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"p":[[3,"CTFont"],[6,"CTFontTraits"],[6,"CFTypeRef"],[6,"CTFontRef"],[6,"CGFloat"],[3,"CGRect"],[3,"CFArray"],[3,"CTFontDescriptor"],[15,"f64"],[6,"CTFontSymbolicTraits"],[4,"Option"],[3,"CGFont"],[6,"CGGlyph"],[3,"CGAffineTransform"],[3,"CGPath"],[4,"Result"],[3,"String"],[3,"CGContext"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"c_void"],[3,"ItemMutRef"],[3,"ItemRef"],[6,"CTFontOrientation"],[3,"CGSize"],[6,"CFIndex"],[6,"CTFontTableTag"],[15,"u32"],[3,"CFData"],[15,"str"],[6,"UniChar"],[3,"CFString"],[3,"CFType"],[3,"CFDictionary"],[6,"c_void"],[3,"TypeId"],[6,"CFTypeID"],[6,"c_uint"],[3,"CFURL"],[3,"CTFontCollection"],[6,"CTFontCollectionRef"],[6,"CTFontDescriptorRef"],[6,"CTFontFormat"],[3,"PathBuf"],[6,"CTFontStylisticClass"],[3,"CTFrame"],[6,"CTFrameRef"],[3,"CGContextRef"],[3,"CFRange"],[8,"Into"],[3,"CGPoint"],[3,"Vec"],[3,"CTLine"],[3,"CTFramesetter"],[6,"CTFramesetterRef"],[3,"CGPathRef"],[6,"CFAttributedStringRef"],[6,"CFDictionaryRef"],[6,"CTLineRef"],[3,"TypographicBounds"],[3,"CTRun"],[6,"CTRunRef"],[4,"Cow"],[3,"__CTFont"],[3,"__CTFontCollection"],[3,"__CTFontDescriptor"],[8,"SymbolicTraitAccessors"],[8,"StylisticClassAccessors"],[8,"TraitAccessors"],[3,"__CTFrame"],[3,"__CTFramesetter"],[3,"__CTLine"],[3,"__CTRun"]]},\
"crc32fast":{"doc":"Fast, SIMD-accelerated CRC32 (IEEE) checksum computation.","t":"DLLLLLLLLLLFLLLLLLLLLLL","n":["Hasher","borrow","borrow_mut","clone","clone_into","combine","default","finalize","finish","fmt","from","hash","into","new","new_with_initial","new_with_initial_len","reset","to_owned","try_from","try_into","type_id","update","write"],"q":["crc32fast","","","","","","","","","","","","","","","","","","","","","",""],"d":["Represents an in-progress CRC32 computation.","","","","","Combine the hash state with the hash state for the …","","Finalize the hash state and return the computed CRC32 …","","","Returns the argument unchanged.","Computes the CRC32 hash of a byte slice.","Calls <code>U::from(self)</code>.","Create a new <code>Hasher</code>.","Create a new <code>Hasher</code> with an initial CRC32 state.","Create a new <code>Hasher</code> with an initial CRC32 state.","Reset the hash state.","","","","","Process the given byte slice and update the hash state.",""],"i":[0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[[]],[[]],[1,1],[[]],[[1,1]],[[],1],[1,2],[1,3],[[1,4],5],[[]],[[],2],[[]],[[],1],[2,1],[[2,3],1],[1],[[]],[[],6],[[],6],[[],7],[1],[1]],"p":[[3,"Hasher"],[15,"u32"],[15,"u64"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"]]},\
"dirs_next":{"doc":"The <em>dirs-next</em> crate is","t":"FFFFFFFFFFFFFFFF","n":["audio_dir","cache_dir","config_dir","data_dir","data_local_dir","desktop_dir","document_dir","download_dir","executable_dir","font_dir","home_dir","picture_dir","public_dir","runtime_dir","template_dir","video_dir"],"q":["dirs_next","","","","","","","","","","","","","","",""],"d":["Returns the path to the user’s audio directory.","Returns the path to the user’s cache directory.","Returns the path to the user’s config directory.","Returns the path to the user’s data directory.","Returns the path to the user’s local data directory.","Returns the path to the user’s desktop directory.","Returns the path to the user’s document directory.","Returns the path to the user’s download directory.","Returns the path to the user’s executable directory.","Returns the path to the user’s font directory.","Returns the path to the user’s home directory.","Returns the path to the user’s picture directory.","Returns the path to the user’s public directory.","Returns the path to the user’s runtime directory.","Returns the path to the user’s template directory.","Returns the path to the user’s video directory."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[[[],[[2,[1]]]],[[],[[2,[1]]]],[[],[[2,[1]]]],[[],[[2,[1]]]],[[],[[2,[1]]]],[[],[[2,[1]]]],[[],[[2,[1]]]],[[],[[2,[1]]]],[[],[[2,[1]]]],[[],[[2,[1]]]],[[],[[2,[1]]]],[[],[[2,[1]]]],[[],[[2,[1]]]],[[],[[2,[1]]]],[[],[[2,[1]]]],[[],[[2,[1]]]]],"p":[[3,"PathBuf"],[4,"Option"]]},\
"dirs_sys_next":{"doc":"","t":"FF","n":["home_dir","is_absolute_path"],"q":["dirs_sys_next",""],"d":["",""],"i":[0,0],"f":[[[],[[2,[1]]]],[3,[[2,[1]]]]],"p":[[3,"PathBuf"],[4,"Option"],[3,"OsString"]]},\
"fdeflate":{"doc":"A fast deflate implementation.","t":"NNNNDEDNNNNNNNNNNNDNLLLLLLLLFLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["BadCodeLengthHuffmanTree","BadDistanceHuffmanTree","BadLiteralLengthHuffmanTree","BadZlibHeader","Compressor","DecompressionError","Decompressor","DistanceTooFarBack","ExtraInput","InputStartsWithRun","InsufficientInput","InvalidBlockType","InvalidCodeLengthRepeat","InvalidDistanceCode","InvalidHdist","InvalidHlit","InvalidLiteralLengthCode","InvalidUncompressedBlockLength","StoredOnlyCompressor","WrongChecksum","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","compress_to_vec","compressed_size","decompress_to_vec","finish","finish","fmt","from","from","from","from","ignore_adler32","into","into","into","into","is_done","new","new","new","read","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","write_data","write_data"],"q":["fdeflate","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The stream doesn’t specify a valid huffman tree.","The stream doesn’t specify a valid huffman tree.","The stream doesn’t specify a valid huffman tree.","The zlib header is corrupt.","Compressor that produces fdeflate compressed streams.","An error encountered while decompressing a deflate stream.","Decompressor for arbitrary zlib streams.","The stream contains a back-reference that is too far back.","Extra input data.","The stream contains contains back-reference as the first …","All input was consumed, but the end of the stream hasn’t …","A block header specifies an invalid block type.","Attempted to repeat a previous code before reading any …","The stream contains a distance code that was not allowed …","Too many distance codes were specified.","Too many literals were specified.","The stream contains a literal/length code that was not …","An uncompressed block’s NLEN value is invalid.","Compressor that only writes the stored blocks.","The deflate stream checksum is incorrect.","","","","","","","","","Compresses the given data.","Return the number of bytes that will be written to the …","Decompress the given data.","Write the remainder of the stream and return the inner …","Finish writing the final block and return the underlying …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Ignore the checksum at the end of the stream.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if the decompressor has finished …","Create a new Compressor.","Creates a new <code>StoredOnlyCompressor</code> that writes to the …","Create a new decompressor.","Decompresses a chunk of data.","","","","","","","","","","","","","Write data to the compressor.","Writes the given data to the underlying writer."],"i":[4,4,4,4,0,0,0,4,4,4,4,4,4,4,4,4,4,4,0,4,7,10,13,4,7,10,13,4,0,10,0,7,10,4,7,10,13,4,13,7,10,13,4,13,7,10,13,13,7,10,13,4,7,10,13,4,7,10,13,4,7,10],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[2,[1]]]],[3,3],[[],[[5,[[2,[1]],4]]]],[[[7,[6]]],[[8,[6]]]],[[[10,[[0,[6,9]]]]],[[8,[[0,[6,9]]]]]],[[4,11],12],[[]],[[]],[[]],[[]],[13],[[]],[[]],[[]],[[]],[13,14],[6,[[8,[[7,[6]]]]]],[[[0,[6,9]]],[[8,[[10,[[0,[6,9]]]]]]]],[[],13],[[13,3,14],[[5,[4]]]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],15],[[],15],[[],15],[[],15],[[[7,[6]]],8],[[[10,[[0,[6,9]]]]],8]],"p":[[15,"u8"],[3,"Vec"],[15,"usize"],[4,"DecompressionError"],[4,"Result"],[8,"Write"],[3,"Compressor"],[6,"Result"],[8,"Seek"],[3,"StoredOnlyCompressor"],[3,"Formatter"],[6,"Result"],[3,"Decompressor"],[15,"bool"],[3,"TypeId"]]},\
"fdg_img":{"doc":"fdg-img","t":"DMLLLMMMLFLMMMMMAMLLLIRRNSRIDGEGEERDNIINGRNNNNNIDDDDRDDENNNNNDINRDRNRLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMALLLLLLLLLLLLLLLLLMLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLKLLKLLLLLLLLLLLLLLLMLLLLLLMLLAKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLRRRRRRRRROARRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRNNNENDNNELLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLM","n":["Settings","background_color","borrow","borrow_mut","default","dt","edge_color","edge_size","from","gen_image","into","iterations","node_color","node_size","print_progress","sim_parameters","style","text_style","try_from","try_into","type_id","AsRelative","BLACK","BLUE","Bold","COLORS","CYAN","Color","FontDesc","FontError","FontFamily","FontResult","FontStyle","FontTransform","GREEN","HSLColor","Height","IntoFont","IntoTextStyle","Italic","LayoutBox","MAGENTA","Monospace","Name","None","Normal","Oblique","Palette","Palette100","Palette99","Palette9999","PaletteColor","RED","RGBAColor","RGBColor","RelativeSize","Rotate180","Rotate270","Rotate90","SansSerif","Serif","ShapeStyle","SizeDesc","Smaller","TRANSPARENT","TextStyle","WHITE","Width","YELLOW","alpha","anchor","as_str","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","box_size","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","color","color","color","color","color","color","color","color","colors","default","default","default","default","draw","draw","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","family","filled","filled","filled","fmt","fmt","fmt","fmt","font","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_family","get_name","get_size","get_style","get_transform","hash","hash","in_pixels","in_pixels","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_font","into_font","into_font","into_text_style","into_text_style","into_text_style","into_text_style","layout_box","layout_box","max","min","mix","new","percent","percent_height","percent_width","pick","pick","pos","pos","resize","rgb","size","stroke_width","stroke_width","stroke_width","stroke_width","style","style","text_anchor","to_backend_color","to_backend_color","to_backend_color","to_backend_color","to_backend_color","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_rgba","transform","transform","transform","transform","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_anchor","with_color","BLACK","BLUE","CYAN","GREEN","MAGENTA","RED","TRANSPARENT","WHITE","YELLOW","define_color","full_palette","AMBER","AMBER_100","AMBER_200","AMBER_300","AMBER_400","AMBER_50","AMBER_500","AMBER_600","AMBER_700","AMBER_800","AMBER_900","AMBER_A100","AMBER_A200","AMBER_A400","AMBER_A700","BLACK","BLUE","BLUEGREY","BLUEGREY_100","BLUEGREY_200","BLUEGREY_300","BLUEGREY_400","BLUEGREY_50","BLUEGREY_500","BLUEGREY_600","BLUEGREY_700","BLUEGREY_800","BLUEGREY_900","BLUEGREY_A100","BLUEGREY_A200","BLUEGREY_A400","BLUEGREY_A700","BLUE_100","BLUE_200","BLUE_300","BLUE_400","BLUE_50","BLUE_500","BLUE_600","BLUE_700","BLUE_800","BLUE_900","BLUE_A100","BLUE_A200","BLUE_A400","BLUE_A700","BROWN","BROWN_100","BROWN_200","BROWN_300","BROWN_400","BROWN_50","BROWN_500","BROWN_600","BROWN_700","BROWN_800","BROWN_900","BROWN_A100","BROWN_A200","BROWN_A400","BROWN_A700","CYAN","CYAN_100","CYAN_200","CYAN_300","CYAN_400","CYAN_50","CYAN_500","CYAN_600","CYAN_700","CYAN_800","CYAN_900","CYAN_A100","CYAN_A200","CYAN_A400","CYAN_A700","DEEPORANGE","DEEPORANGE_100","DEEPORANGE_200","DEEPORANGE_300","DEEPORANGE_400","DEEPORANGE_50","DEEPORANGE_500","DEEPORANGE_600","DEEPORANGE_700","DEEPORANGE_800","DEEPORANGE_900","DEEPORANGE_A100","DEEPORANGE_A200","DEEPORANGE_A400","DEEPORANGE_A700","DEEPPURPLE","DEEPPURPLE_100","DEEPPURPLE_200","DEEPPURPLE_300","DEEPPURPLE_400","DEEPPURPLE_50","DEEPPURPLE_500","DEEPPURPLE_600","DEEPPURPLE_700","DEEPPURPLE_800","DEEPPURPLE_900","DEEPPURPLE_A100","DEEPPURPLE_A200","DEEPPURPLE_A400","DEEPPURPLE_A700","GREEN","GREEN_100","GREEN_200","GREEN_300","GREEN_400","GREEN_50","GREEN_500","GREEN_600","GREEN_700","GREEN_800","GREEN_900","GREEN_A100","GREEN_A200","GREEN_A400","GREEN_A700","GREY","GREY_100","GREY_200","GREY_300","GREY_400","GREY_50","GREY_500","GREY_600","GREY_700","GREY_800","GREY_900","GREY_A100","GREY_A200","GREY_A400","GREY_A700","INDIGO","INDIGO_100","INDIGO_200","INDIGO_300","INDIGO_400","INDIGO_50","INDIGO_500","INDIGO_600","INDIGO_700","INDIGO_800","INDIGO_900","INDIGO_A100","INDIGO_A200","INDIGO_A400","INDIGO_A700","LIGHTBLUE","LIGHTBLUE_100","LIGHTBLUE_200","LIGHTBLUE_300","LIGHTBLUE_400","LIGHTBLUE_50","LIGHTBLUE_500","LIGHTBLUE_600","LIGHTBLUE_700","LIGHTBLUE_800","LIGHTBLUE_900","LIGHTBLUE_A100","LIGHTBLUE_A200","LIGHTBLUE_A400","LIGHTBLUE_A700","LIGHTGREEN","LIGHTGREEN_100","LIGHTGREEN_200","LIGHTGREEN_300","LIGHTGREEN_400","LIGHTGREEN_50","LIGHTGREEN_500","LIGHTGREEN_600","LIGHTGREEN_700","LIGHTGREEN_800","LIGHTGREEN_900","LIGHTGREEN_A100","LIGHTGREEN_A200","LIGHTGREEN_A400","LIGHTGREEN_A700","LIME","LIME_100","LIME_200","LIME_300","LIME_400","LIME_50","LIME_500","LIME_600","LIME_700","LIME_800","LIME_900","LIME_A100","LIME_A200","LIME_A400","LIME_A700","ORANGE","ORANGE_100","ORANGE_200","ORANGE_300","ORANGE_400","ORANGE_50","ORANGE_500","ORANGE_600","ORANGE_700","ORANGE_800","ORANGE_900","ORANGE_A100","ORANGE_A200","ORANGE_A400","ORANGE_A700","PINK","PINK_100","PINK_200","PINK_300","PINK_400","PINK_50","PINK_500","PINK_600","PINK_700","PINK_800","PINK_900","PINK_A100","PINK_A200","PINK_A400","PINK_A700","PURPLE","PURPLE_100","PURPLE_200","PURPLE_300","PURPLE_400","PURPLE_50","PURPLE_500","PURPLE_600","PURPLE_700","PURPLE_800","PURPLE_900","PURPLE_A100","PURPLE_A200","PURPLE_A400","PURPLE_A700","RED","RED_100","RED_200","RED_300","RED_400","RED_50","RED_500","RED_600","RED_700","RED_800","RED_900","RED_A100","RED_A200","RED_A400","RED_A700","TEAL","TEAL_100","TEAL_200","TEAL_300","TEAL_400","TEAL_50","TEAL_500","TEAL_600","TEAL_700","TEAL_800","TEAL_900","TEAL_A100","TEAL_A200","TEAL_A400","TEAL_A700","WHITE","YELLOW","YELLOW_100","YELLOW_200","YELLOW_300","YELLOW_400","YELLOW_50","YELLOW_500","YELLOW_600","YELLOW_700","YELLOW_800","YELLOW_900","YELLOW_A100","YELLOW_A200","YELLOW_A400","YELLOW_A700","Bottom","Center","Center","HPos","Left","Pos","Right","Top","VPos","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","from","from","from","h_pos","into","into","into","new","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","v_pos"],"q":["fdg_img","","","","","","","","","","","","","","","","","","","","","fdg_img::stylefdg_img::style::colors","","","","","","","","","","","fdg_img::style::colors::full_palettefdg_img::style::text_anchor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Parameters for drawing the SVG image.","RGBA background color","","","","“Granularity of simulation updates”","RGBA color of the edge lines","Width of the edge lines","Returns the argument unchanged.","Generate an image from a graph and a force.","Calls <code>U::from(self)</code>.","Number of times to run the simulation","RGBA color of the nodes","The radius of the nodes","If true, the simulation will be printed on each","Simulation Parameters","The style for shapes and text, font, color, etc.","If supplied, the names of nodes will be written","","","","Allows a value turns into a relative size","Black (■ <em>rgb = (0, 0, 0)</em>)","Blue (■ <em>rgb = (0, 0, 255)</em>)","The bold style","Array of colors","Cyan (■ <em>rgb = (0, 255, 255)</em>)","Any color representation","Describes a font","The error type for the font implementation","Describes font family. This can be either a specific font …","The type we used to represent a result of any font …","Describes the font style. Such as Italic, Oblique, etc.","Specifying text transformations","Green (■ <em>rgb = (0, 255, 0)</em>)","The color described by HSL color space","Percentage height","The trait that allows some type turns into a font …","Trait for values that can be converted into <code>TextStyle</code> …","The italic style","Represents a box where a text label can be fit","Magenta (■ <em>rgb = (255, 0, 255)</em>)","The system default monospace font","A specific font family name","Nothing to transform","The normal style","The oblique style","Represents a color palette","The palette of 100% accessibility","The palette of 99% accessibility","The palette of 99.99% accessibility","A color in the given palette","Red (■ <em>rgb = (255, 0, 0)</em>)","The RGBA representation of the color, Plotters use RGBA as …","The color described by its RGB value","Describes a relative size, might be 1. portion of height …","Rotating the text 180 degree clockwise","Rotating the text 270 degree clockwise","Rotating the text 90 degree clockwise","The system default sans-serif font family","The system default serif font family","Style for any shape","The trait that describes a size, it may be a relative size …","Percentage of either height or width, which is smaller","Transparent (■ <em>rgba = (0, 0, 0, 0.0)</em>)","Style of a text","White (■ <em>rgb = (255, 255, 255)</em>)","Percentage width","Yellow (■ <em>rgb = (255, 255, 0)</em>)","Get the alpha channel of the color","","Make a CSS compatible string for the font family name. …","Convert the font style into a CSS compatible string which …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the size of the text if rendered in this font. This is …","","","","","","","","","","","","","","","","","","","","","","","Returns a new text style object with the specified <code>color</code>.","Returns the color as interpreted by the backend.","Sets the color of the style.","","Specification of the color.","The text color","Basic predefined colors.","","","","","Actually draws a font with a drawing function","","","","","","","","","","","Make a filled style form the color","Returns a filled style with the same color and stroke …","Whether the style is filled with color.","","","","","The font description","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the font family","Get the name of the font","Get the size of font","Get the name of the style","Get the font transformation description","","","Convert the size into the number of pixels","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Make the font description from the source type","","","Converts the value into a TextStyle value.","","","","Get the size of the text if rendered in this font","","Set the upper bound of the relative size","Set the lower bound of the relative size.","Mix the color with given opacity","Create a new font","Make the value a relative size of percentage of minimal of …","Make the value a relative size of percentage of height","Make the value a relative size of percentage of width","Returns a color from the palette","Pick a color from the palette","Sets the anchor position.","The anchor point position","Create a new font desc with the same font but different …","Convert the RGB representation to the standard RGB tuple","","Make a shape style with stroke width from a color","Returns the stroke width.","Returns a new style with the same color and the specified …","Stroke width.","Set the style of the font","","Text anchor attributes are used to properly position the …","Normalize this color representation to the backend color","","","","","","","","","","","","","","","Convert the color into the RGBA color which is internally …","Transform the coordinate to perform the rotation","Set the font transformation","","Sets the font transformation of the style.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Specifies the position of the text anchor relative to the …","Specifies the color of the text element","Black (■ <em>rgb = (0, 0, 0)</em>)","Blue (■ <em>rgb = (0, 0, 255)</em>)","Cyan (■ <em>rgb = (0, 255, 255)</em>)","Green (■ <em>rgb = (0, 255, 0)</em>)","Magenta (■ <em>rgb = (255, 0, 255)</em>)","Red (■ <em>rgb = (255, 0, 0)</em>)","Transparent (■ <em>rgba = (0, 0, 0, 0.0)</em>)","White (■ <em>rgb = (255, 255, 255)</em>)","Yellow (■ <em>rgb = (255, 255, 0)</em>)","Defines and names a color based on its R, G, B, A values.","A full color palette derived from the Material Design 2014 …","<em>Amber</em>; same as <code>AMBER_500</code> (■ <em>rgb = (255, 193, 7)</em>)","Light <em>amber</em> with a tint of 100 (■ <em>rgb = (255, 236, 179)</em>)","Lighter <em>amber</em> with a tint of 200 (■ <em>rgb = (255, 224, 130)</em>…","Lighter <em>amber</em> with a tint of 300 (■ <em>rgb = (255, 213, 79)</em>)","Lighter <em>amber</em> with a tint of 400 (■ <em>rgb = (255, 202, 40)</em>)","Light <em>amber</em> with a tint of 50 (■ <em>rgb = (255, 248, 225)</em>)","<em>Amber</em> with a tint of 500 (■ <em>rgb = (255, 193, 7)</em>)","Darker <em>amber</em> with a tint of 600 (■ <em>rgb = (255, 179, 0)</em>)","Darker <em>amber</em> with a tint of 700 (■ <em>rgb = (255, 160, 0)</em>)","Dark <em>amber</em> with a tint of 800 (■ <em>rgb = (255, 143, 0)</em>)","Dark <em>amber</em> with a tint of 900 (■ <em>rgb = (255, 111, 0)</em>)","Accent <em>amber</em> with a tint of A100 (■ <em>rgb = (255, 229, 127)</em>…","Accent <em>amber</em> with a tint of A200 (■ <em>rgb = (255, 215, 64)</em>)","Accent <em>amber</em> with a tint of A400 (■ <em>rgb = (255, 196, 0)</em>)","Accent <em>amber</em> with a tint of A700 (■ <em>rgb = (255, 171, 0)</em>)","<em>Black</em> (■ <em>rgb = (0, 0, 0)</em>)","<em>Blue</em>; same as <code>BLUE_500</code> (■ <em>rgb = (33, 150, 243)</em>)","<em>Blue grey</em>; same as <code>BLUEGREY_500</code> (■ <em>rgb = (96, 125, 139)</em>)","Light <em>blue grey</em> with a tint of 100 (■ <em>rgb = (207, 216, </em>…","Lighter <em>blue grey</em> with a tint of 200 (■ <em>rgb = (176, 190, </em>…","Lighter <em>blue grey</em> with a tint of 300 (■ <em>rgb = (144, 164, </em>…","Lighter <em>blue grey</em> with a tint of 400 (■ <em>rgb = (120, 144, </em>…","Light <em>blue grey</em> with a tint of 50 (■ <em>rgb = (236, 239, </em>…","<em>Blue grey</em> with a tint of 500 (■ <em>rgb = (96, 125, 139)</em>)","Darker <em>blue grey</em> with a tint of 600 (■ <em>rgb = (84, 110, </em>…","Darker <em>blue grey</em> with a tint of 700 (■ <em>rgb = (69, 90, </em>…","Dark <em>blue grey</em> with a tint of 800 (■ <em>rgb = (55, 71, 79)</em>)","Dark <em>blue grey</em> with a tint of 900 (■ <em>rgb = (38, 50, 56)</em>)","Accent <em>blue grey</em> with a tint of A100 (■ <em>rgb = (207, 216, </em>…","Accent <em>blue grey</em> with a tint of A200 (■ <em>rgb = (176, 190, </em>…","Accent <em>blue grey</em> with a tint of A400 (■ <em>rgb = (120, 144, </em>…","Accent <em>blue grey</em> with a tint of A700 (■ <em>rgb = (69, 90, </em>…","Light <em>blue</em> with a tint of 100 (■ <em>rgb = (187, 222, 251)</em>)","Lighter <em>blue</em> with a tint of 200 (■ <em>rgb = (144, 202, 249)</em>)","Lighter <em>blue</em> with a tint of 300 (■ <em>rgb = (100, 181, 246)</em>)","Lighter <em>blue</em> with a tint of 400 (■ <em>rgb = (66, 165, 245)</em>)","Light <em>blue</em> with a tint of 50 (■ <em>rgb = (227, 242, 253)</em>)","<em>Blue</em> with a tint of 500 (■ <em>rgb = (33, 150, 243)</em>)","Darker <em>blue</em> with a tint of 600 (■ <em>rgb = (30, 136, 229)</em>)","Darker <em>blue</em> with a tint of 700 (■ <em>rgb = (25, 118, 210)</em>)","Dark <em>blue</em> with a tint of 800 (■ <em>rgb = (21, 101, 192)</em>)","Dark <em>blue</em> with a tint of 900 (■ <em>rgb = (13, 71, 161)</em>)","Accent <em>blue</em> with a tint of A100 (■ <em>rgb = (130, 177, 255)</em>)","Accent <em>blue</em> with a tint of A200 (■ <em>rgb = (68, 138, 255)</em>)","Accent <em>blue</em> with a tint of A400 (■ <em>rgb = (41, 121, 255)</em>)","Accent <em>blue</em> with a tint of A700 (■ <em>rgb = (41, 98, 255)</em>)","<em>Brown</em>; same as <code>BROWN_500</code> (■ <em>rgb = (121, 85, 72)</em>)","Light <em>brown</em> with a tint of 100 (■ <em>rgb = (215, 204, 200)</em>)","Lighter <em>brown</em> with a tint of 200 (■ <em>rgb = (188, 170, 164)</em>…","Lighter <em>brown</em> with a tint of 300 (■ <em>rgb = (161, 136, 127)</em>…","Lighter <em>brown</em> with a tint of 400 (■ <em>rgb = (141, 110, 99)</em>)","Light <em>brown</em> with a tint of 50 (■ <em>rgb = (239, 235, 233)</em>)","<em>Brown</em> with a tint of 500 (■ <em>rgb = (121, 85, 72)</em>)","Darker <em>brown</em> with a tint of 600 (■ <em>rgb = (109, 76, 65)</em>)","Darker <em>brown</em> with a tint of 700 (■ <em>rgb = (93, 64, 55)</em>)","Dark <em>brown</em> with a tint of 800 (■ <em>rgb = (78, 52, 46)</em>)","Dark <em>brown</em> with a tint of 900 (■ <em>rgb = (62, 39, 35)</em>)","Accent <em>brown</em> with a tint of A100 (■ <em>rgb = (215, 204, 200)</em>…","Accent <em>brown</em> with a tint of A200 (■ <em>rgb = (188, 170, 164)</em>…","Accent <em>brown</em> with a tint of A400 (■ <em>rgb = (141, 110, 99)</em>)","Accent <em>brown</em> with a tint of A700 (■ <em>rgb = (93, 64, 55)</em>)","<em>Cyan</em>; same as <code>CYAN_500</code> (■ <em>rgb = (0, 188, 212)</em>)","Light <em>cyan</em> with a tint of 100 (■ <em>rgb = (178, 235, 242)</em>)","Lighter <em>cyan</em> with a tint of 200 (■ <em>rgb = (128, 222, 234)</em>)","Lighter <em>cyan</em> with a tint of 300 (■ <em>rgb = (77, 208, 225)</em>)","Lighter <em>cyan</em> with a tint of 400 (■ <em>rgb = (38, 198, 218)</em>)","Light <em>cyan</em> with a tint of 50 (■ <em>rgb = (224, 247, 250)</em>)","<em>Cyan</em> with a tint of 500 (■ <em>rgb = (0, 188, 212)</em>)","Darker <em>cyan</em> with a tint of 600 (■ <em>rgb = (0, 172, 193)</em>)","Darker <em>cyan</em> with a tint of 700 (■ <em>rgb = (0, 151, 167)</em>)","Dark <em>cyan</em> with a tint of 800 (■ <em>rgb = (0, 131, 143)</em>)","Dark <em>cyan</em> with a tint of 900 (■ <em>rgb = (0, 96, 100)</em>)","Accent <em>cyan</em> with a tint of A100 (■ <em>rgb = (132, 255, 255)</em>)","Accent <em>cyan</em> with a tint of A200 (■ <em>rgb = (24, 255, 255)</em>)","Accent <em>cyan</em> with a tint of A400 (■ <em>rgb = (0, 229, 255)</em>)","Accent <em>cyan</em> with a tint of A700 (■ <em>rgb = (0, 184, 212)</em>)","<em>Deep orange</em>; same as <code>DEEPORANGE_500</code> (■ <em>rgb = (255, 87, </em>…","Light <em>deep orange</em> with a tint of 100 (■ <em>rgb = (255, 204, </em>…","Lighter <em>deep orange</em> with a tint of 200 (■ <em>rgb = (255, </em>…","Lighter <em>deep orange</em> with a tint of 300 (■ <em>rgb = (255, </em>…","Lighter <em>deep orange</em> with a tint of 400 (■ <em>rgb = (255, </em>…","Light <em>deep orange</em> with a tint of 50 (■ <em>rgb = (251, 233, </em>…","<em>Deep orange</em> with a tint of 500 (■ <em>rgb = (255, 87, 34)</em>)","Darker <em>deep orange</em> with a tint of 600 (■ <em>rgb = (244, 81, </em>…","Darker <em>deep orange</em> with a tint of 700 (■ <em>rgb = (230, 74, </em>…","Dark <em>deep orange</em> with a tint of 800 (■ <em>rgb = (216, 67, </em>…","Dark <em>deep orange</em> with a tint of 900 (■ <em>rgb = (191, 54, </em>…","Accent <em>deep orange</em> with a tint of A100 (■ <em>rgb = (255, </em>…","Accent <em>deep orange</em> with a tint of A200 (■ <em>rgb = (255, </em>…","Accent <em>deep orange</em> with a tint of A400 (■ <em>rgb = (255, </em>…","Accent <em>deep orange</em> with a tint of A700 (■ <em>rgb = (221, </em>…","<em>Deep purple</em>; same as <code>DEEPPURPLE_500</code> (■ <em>rgb = (103, 58, </em>…","Light <em>deep purple</em> with a tint of 100 (■ <em>rgb = (209, 196, </em>…","Lighter <em>deep purple</em> with a tint of 200 (■ <em>rgb = (179, </em>…","Lighter <em>deep purple</em> with a tint of 300 (■ <em>rgb = (149, </em>…","Lighter <em>deep purple</em> with a tint of 400 (■ <em>rgb = (126, </em>…","Light <em>deep purple</em> with a tint of 50 (■ <em>rgb = (237, 231, </em>…","<em>Deep purple</em> with a tint of 500 (■ <em>rgb = (103, 58, 183)</em>)","Darker <em>deep purple</em> with a tint of 600 (■ <em>rgb = (94, 53, </em>…","Darker <em>deep purple</em> with a tint of 700 (■ <em>rgb = (81, 45, </em>…","Dark <em>deep purple</em> with a tint of 800 (■ <em>rgb = (69, 39, </em>…","Dark <em>deep purple</em> with a tint of 900 (■ <em>rgb = (49, 27, </em>…","Accent <em>deep purple</em> with a tint of A100 (■ <em>rgb = (179, </em>…","Accent <em>deep purple</em> with a tint of A200 (■ <em>rgb = (124, </em>…","Accent <em>deep purple</em> with a tint of A400 (■ <em>rgb = (101, </em>…","Accent <em>deep purple</em> with a tint of A700 (■ <em>rgb = (98, 0, </em>…","<em>Green</em>; same as <code>GREEN_500</code> (■ <em>rgb = (76, 175, 80)</em>)","Light <em>green</em> with a tint of 100 (■ <em>rgb = (200, 230, 201)</em>)","Lighter <em>green</em> with a tint of 200 (■ <em>rgb = (165, 214, 167)</em>…","Lighter <em>green</em> with a tint of 300 (■ <em>rgb = (129, 199, 132)</em>…","Lighter <em>green</em> with a tint of 400 (■ <em>rgb = (102, 187, 106)</em>…","Light <em>green</em> with a tint of 50 (■ <em>rgb = (232, 245, 233)</em>)","<em>Green</em> with a tint of 500 (■ <em>rgb = (76, 175, 80)</em>)","Darker <em>green</em> with a tint of 600 (■ <em>rgb = (67, 160, 71)</em>)","Darker <em>green</em> with a tint of 700 (■ <em>rgb = (56, 142, 60)</em>)","Dark <em>green</em> with a tint of 800 (■ <em>rgb = (46, 125, 50)</em>)","Dark <em>green</em> with a tint of 900 (■ <em>rgb = (27, 94, 32)</em>)","Accent <em>green</em> with a tint of A100 (■ <em>rgb = (185, 246, 202)</em>…","Accent <em>green</em> with a tint of A200 (■ <em>rgb = (105, 240, 174)</em>…","Accent <em>green</em> with a tint of A400 (■ <em>rgb = (0, 230, 118)</em>)","Accent <em>green</em> with a tint of A700 (■ <em>rgb = (0, 200, 83)</em>)","<em>Grey</em>; same as <code>GREY_500</code> (■ <em>rgb = (158, 158, 158)</em>)","Light <em>grey</em> with a tint of 100 (■ <em>rgb = (245, 245, 245)</em>)","Lighter <em>grey</em> with a tint of 200 (■ <em>rgb = (238, 238, 238)</em>)","Lighter <em>grey</em> with a tint of 300 (■ <em>rgb = (224, 224, 224)</em>)","Lighter <em>grey</em> with a tint of 400 (■ <em>rgb = (189, 189, 189)</em>)","Light <em>grey</em> with a tint of 50 (■ <em>rgb = (250, 250, 250)</em>)","<em>Grey</em> with a tint of 500 (■ <em>rgb = (158, 158, 158)</em>)","Darker <em>grey</em> with a tint of 600 (■ <em>rgb = (117, 117, 117)</em>)","Darker <em>grey</em> with a tint of 700 (■ <em>rgb = (97, 97, 97)</em>)","Dark <em>grey</em> with a tint of 800 (■ <em>rgb = (66, 66, 66)</em>)","Dark <em>grey</em> with a tint of 900 (■ <em>rgb = (33, 33, 33)</em>)","Accent <em>grey</em> with a tint of A100 (■ <em>rgb = (213, 213, 213)</em>)","Accent <em>grey</em> with a tint of A200 (■ <em>rgb = (170, 170, 170)</em>)","Accent <em>grey</em> with a tint of A400 (■ <em>rgb = (48, 48, 48)</em>)","Accent <em>grey</em> with a tint of A700 (■ <em>rgb = (97, 97, 97)</em>)","<em>Indigo</em>; same as <code>INDIGO_500</code> (■ <em>rgb = (63, 81, 181)</em>)","Light <em>indigo</em> with a tint of 100 (■ <em>rgb = (197, 202, 233)</em>)","Lighter <em>indigo</em> with a tint of 200 (■ <em>rgb = (159, 168, </em>…","Lighter <em>indigo</em> with a tint of 300 (■ <em>rgb = (121, 134, </em>…","Lighter <em>indigo</em> with a tint of 400 (■ <em>rgb = (92, 107, 192)</em>…","Light <em>indigo</em> with a tint of 50 (■ <em>rgb = (232, 234, 246)</em>)","<em>Indigo</em> with a tint of 500 (■ <em>rgb = (63, 81, 181)</em>)","Darker <em>indigo</em> with a tint of 600 (■ <em>rgb = (57, 73, 171)</em>)","Darker <em>indigo</em> with a tint of 700 (■ <em>rgb = (48, 63, 159)</em>)","Dark <em>indigo</em> with a tint of 800 (■ <em>rgb = (40, 53, 147)</em>)","Dark <em>indigo</em> with a tint of 900 (■ <em>rgb = (26, 35, 126)</em>)","Accent <em>indigo</em> with a tint of A100 (■ <em>rgb = (140, 158, </em>…","Accent <em>indigo</em> with a tint of A200 (■ <em>rgb = (83, 109, 254)</em>…","Accent <em>indigo</em> with a tint of A400 (■ <em>rgb = (61, 90, 254)</em>)","Accent <em>indigo</em> with a tint of A700 (■ <em>rgb = (48, 79, 254)</em>)","<em>Light blue</em>; same as <code>LIGHTBLUE_500</code> (■ <em>rgb = (3, 169, 244)</em>)","Light <em>light blue</em> with a tint of 100 (■ <em>rgb = (179, 229, </em>…","Lighter <em>light blue</em> with a tint of 200 (■ <em>rgb = (129, </em>…","Lighter <em>light blue</em> with a tint of 300 (■ <em>rgb = (79, 195, </em>…","Lighter <em>light blue</em> with a tint of 400 (■ <em>rgb = (41, 182, </em>…","Light <em>light blue</em> with a tint of 50 (■ <em>rgb = (225, 245, </em>…","<em>Light blue</em> with a tint of 500 (■ <em>rgb = (3, 169, 244)</em>)","Darker <em>light blue</em> with a tint of 600 (■ <em>rgb = (3, 155, </em>…","Darker <em>light blue</em> with a tint of 700 (■ <em>rgb = (2, 136, </em>…","Dark <em>light blue</em> with a tint of 800 (■ <em>rgb = (2, 119, 189)</em>…","Dark <em>light blue</em> with a tint of 900 (■ <em>rgb = (1, 87, 155)</em>)","Accent <em>light blue</em> with a tint of A100 (■ <em>rgb = (128, </em>…","Accent <em>light blue</em> with a tint of A200 (■ <em>rgb = (64, 196, </em>…","Accent <em>light blue</em> with a tint of A400 (■ <em>rgb = (0, 176, </em>…","Accent <em>light blue</em> with a tint of A700 (■ <em>rgb = (0, 145, </em>…","<em>Light green</em>; same as <code>LIGHTGREEN_500</code> (■ <em>rgb = (139, 195, </em>…","Light <em>light green</em> with a tint of 100 (■ <em>rgb = (220, 237, </em>…","Lighter <em>light green</em> with a tint of 200 (■ <em>rgb = (197, </em>…","Lighter <em>light green</em> with a tint of 300 (■ <em>rgb = (174, </em>…","Lighter <em>light green</em> with a tint of 400 (■ <em>rgb = (156, </em>…","Light <em>light green</em> with a tint of 50 (■ <em>rgb = (241, 248, </em>…","<em>Light green</em> with a tint of 500 (■ <em>rgb = (139, 195, 74)</em>)","Darker <em>light green</em> with a tint of 600 (■ <em>rgb = (124, </em>…","Darker <em>light green</em> with a tint of 700 (■ <em>rgb = (104, </em>…","Dark <em>light green</em> with a tint of 800 (■ <em>rgb = (85, 139, </em>…","Dark <em>light green</em> with a tint of 900 (■ <em>rgb = (51, 105, </em>…","Accent <em>light green</em> with a tint of A100 (■ <em>rgb = (204, </em>…","Accent <em>light green</em> with a tint of A200 (■ <em>rgb = (178, </em>…","Accent <em>light green</em> with a tint of A400 (■ <em>rgb = (118, </em>…","Accent <em>light green</em> with a tint of A700 (■ <em>rgb = (100, </em>…","<em>Lime</em>; same as <code>LIME_500</code> (■ <em>rgb = (205, 220, 57)</em>)","Light <em>lime</em> with a tint of 100 (■ <em>rgb = (240, 244, 195)</em>)","Lighter <em>lime</em> with a tint of 200 (■ <em>rgb = (230, 238, 156)</em>)","Lighter <em>lime</em> with a tint of 300 (■ <em>rgb = (220, 231, 117)</em>)","Lighter <em>lime</em> with a tint of 400 (■ <em>rgb = (212, 225, 87)</em>)","Light <em>lime</em> with a tint of 50 (■ <em>rgb = (249, 251, 231)</em>)","<em>Lime</em> with a tint of 500 (■ <em>rgb = (205, 220, 57)</em>)","Darker <em>lime</em> with a tint of 600 (■ <em>rgb = (192, 202, 51)</em>)","Darker <em>lime</em> with a tint of 700 (■ <em>rgb = (175, 180, 43)</em>)","Dark <em>lime</em> with a tint of 800 (■ <em>rgb = (158, 157, 36)</em>)","Dark <em>lime</em> with a tint of 900 (■ <em>rgb = (130, 119, 23)</em>)","Accent <em>lime</em> with a tint of A100 (■ <em>rgb = (244, 255, 129)</em>)","Accent <em>lime</em> with a tint of A200 (■ <em>rgb = (238, 255, 65)</em>)","Accent <em>lime</em> with a tint of A400 (■ <em>rgb = (198, 255, 0)</em>)","Accent <em>lime</em> with a tint of A700 (■ <em>rgb = (174, 234, 0)</em>)","<em>Orange</em>; same as <code>ORANGE_500</code> (■ <em>rgb = (255, 152, 0)</em>)","Light <em>orange</em> with a tint of 100 (■ <em>rgb = (255, 224, 178)</em>)","Lighter <em>orange</em> with a tint of 200 (■ <em>rgb = (255, 204, </em>…","Lighter <em>orange</em> with a tint of 300 (■ <em>rgb = (255, 183, 77)</em>…","Lighter <em>orange</em> with a tint of 400 (■ <em>rgb = (255, 167, 38)</em>…","Light <em>orange</em> with a tint of 50 (■ <em>rgb = (255, 243, 224)</em>)","<em>Orange</em> with a tint of 500 (■ <em>rgb = (255, 152, 0)</em>)","Darker <em>orange</em> with a tint of 600 (■ <em>rgb = (251, 140, 0)</em>)","Darker <em>orange</em> with a tint of 700 (■ <em>rgb = (245, 124, 0)</em>)","Dark <em>orange</em> with a tint of 800 (■ <em>rgb = (239, 108, 0)</em>)","Dark <em>orange</em> with a tint of 900 (■ <em>rgb = (230, 81, 0)</em>)","Accent <em>orange</em> with a tint of A100 (■ <em>rgb = (255, 209, </em>…","Accent <em>orange</em> with a tint of A200 (■ <em>rgb = (255, 171, 64)</em>…","Accent <em>orange</em> with a tint of A400 (■ <em>rgb = (255, 145, 0)</em>)","Accent <em>orange</em> with a tint of A700 (■ <em>rgb = (255, 109, 0)</em>)","<em>Pink</em>; same as <code>PINK_500</code> (■ <em>rgb = (233, 30, 99)</em>)","Light <em>pink</em> with a tint of 100 (■ <em>rgb = (248, 187, 208)</em>)","Lighter <em>pink</em> with a tint of 200 (■ <em>rgb = (244, 143, 177)</em>)","Lighter <em>pink</em> with a tint of 300 (■ <em>rgb = (240, 98, 146)</em>)","Lighter <em>pink</em> with a tint of 400 (■ <em>rgb = (236, 64, 122)</em>)","Light <em>pink</em> with a tint of 50 (■ <em>rgb = (252, 228, 236)</em>)","<em>Pink</em> with a tint of 500 (■ <em>rgb = (233, 30, 99)</em>)","Darker <em>pink</em> with a tint of 600 (■ <em>rgb = (216, 27, 96)</em>)","Darker <em>pink</em> with a tint of 700 (■ <em>rgb = (194, 24, 91)</em>)","Dark <em>pink</em> with a tint of 800 (■ <em>rgb = (173, 20, 87)</em>)","Dark <em>pink</em> with a tint of 900 (■ <em>rgb = (136, 14, 79)</em>)","Accent <em>pink</em> with a tint of A100 (■ <em>rgb = (255, 128, 171)</em>)","Accent <em>pink</em> with a tint of A200 (■ <em>rgb = (255, 64, 129)</em>)","Accent <em>pink</em> with a tint of A400 (■ <em>rgb = (245, 0, 87)</em>)","Accent <em>pink</em> with a tint of A700 (■ <em>rgb = (197, 17, 98)</em>)","<em>Purple</em>; same as <code>PURPLE_500</code> (■ <em>rgb = (156, 39, 176)</em>)","Light <em>purple</em> with a tint of 100 (■ <em>rgb = (225, 190, 231)</em>)","Lighter <em>purple</em> with a tint of 200 (■ <em>rgb = (206, 147, </em>…","Lighter <em>purple</em> with a tint of 300 (■ <em>rgb = (186, 104, </em>…","Lighter <em>purple</em> with a tint of 400 (■ <em>rgb = (171, 71, 188)</em>…","Light <em>purple</em> with a tint of 50 (■ <em>rgb = (243, 229, 245)</em>)","<em>Purple</em> with a tint of 500 (■ <em>rgb = (156, 39, 176)</em>)","Darker <em>purple</em> with a tint of 600 (■ <em>rgb = (142, 36, 170)</em>)","Darker <em>purple</em> with a tint of 700 (■ <em>rgb = (123, 31, 162)</em>)","Dark <em>purple</em> with a tint of 800 (■ <em>rgb = (106, 27, 154)</em>)","Dark <em>purple</em> with a tint of 900 (■ <em>rgb = (74, 20, 140)</em>)","Accent <em>purple</em> with a tint of A100 (■ <em>rgb = (234, 128, </em>…","Accent <em>purple</em> with a tint of A200 (■ <em>rgb = (224, 64, 251)</em>…","Accent <em>purple</em> with a tint of A400 (■ <em>rgb = (213, 0, 249)</em>)","Accent <em>purple</em> with a tint of A700 (■ <em>rgb = (170, 0, 255)</em>)","<em>Red</em>; same as <code>RED_500</code> (■ <em>rgb = (244, 67, 54)</em>)","Light <em>red</em> with a tint of 100 (■ <em>rgb = (255, 205, 210)</em>)","Lighter <em>red</em> with a tint of 200 (■ <em>rgb = (239, 154, 154)</em>)","Lighter <em>red</em> with a tint of 300 (■ <em>rgb = (229, 115, 115)</em>)","Lighter <em>red</em> with a tint of 400 (■ <em>rgb = (239, 83, 80)</em>)","Light <em>red</em> with a tint of 50 (■ <em>rgb = (255, 235, 238)</em>)","<em>Red</em> with a tint of 500 (■ <em>rgb = (244, 67, 54)</em>)","Darker <em>red</em> with a tint of 600 (■ <em>rgb = (229, 57, 53)</em>)","Darker <em>red</em> with a tint of 700 (■ <em>rgb = (211, 47, 47)</em>)","Dark <em>red</em> with a tint of 800 (■ <em>rgb = (198, 40, 40)</em>)","Dark <em>red</em> with a tint of 900 (■ <em>rgb = (183, 28, 28)</em>)","Accent <em>red</em> with a tint of A100 (■ <em>rgb = (255, 138, 128)</em>)","Accent <em>red</em> with a tint of A200 (■ <em>rgb = (255, 82, 82)</em>)","Accent <em>red</em> with a tint of A400 (■ <em>rgb = (255, 23, 68)</em>)","Accent <em>red</em> with a tint of A700 (■ <em>rgb = (213, 0, 0)</em>)","<em>Teal</em>; same as <code>TEAL_500</code> (■ <em>rgb = (0, 150, 136)</em>)","Light <em>teal</em> with a tint of 100 (■ <em>rgb = (178, 223, 219)</em>)","Lighter <em>teal</em> with a tint of 200 (■ <em>rgb = (128, 203, 196)</em>)","Lighter <em>teal</em> with a tint of 300 (■ <em>rgb = (77, 182, 172)</em>)","Lighter <em>teal</em> with a tint of 400 (■ <em>rgb = (38, 166, 154)</em>)","Light <em>teal</em> with a tint of 50 (■ <em>rgb = (224, 242, 241)</em>)","<em>Teal</em> with a tint of 500 (■ <em>rgb = (0, 150, 136)</em>)","Darker <em>teal</em> with a tint of 600 (■ <em>rgb = (0, 137, 123)</em>)","Darker <em>teal</em> with a tint of 700 (■ <em>rgb = (0, 121, 107)</em>)","Dark <em>teal</em> with a tint of 800 (■ <em>rgb = (0, 105, 92)</em>)","Dark <em>teal</em> with a tint of 900 (■ <em>rgb = (0, 77, 64)</em>)","Accent <em>teal</em> with a tint of A100 (■ <em>rgb = (167, 255, 235)</em>)","Accent <em>teal</em> with a tint of A200 (■ <em>rgb = (100, 255, 218)</em>)","Accent <em>teal</em> with a tint of A400 (■ <em>rgb = (29, 233, 182)</em>)","Accent <em>teal</em> with a tint of A700 (■ <em>rgb = (0, 191, 165)</em>)","<em>White</em> (■ <em>rgb = (255, 255, 255)</em>)","<em>Yellow</em>; same as <code>YELLOW_500</code> (■ <em>rgb = (255, 235, 59)</em>)","Light <em>yellow</em> with a tint of 100 (■ <em>rgb = (255, 249, 196)</em>)","Lighter <em>yellow</em> with a tint of 200 (■ <em>rgb = (255, 245, </em>…","Lighter <em>yellow</em> with a tint of 300 (■ <em>rgb = (255, 241, </em>…","Lighter <em>yellow</em> with a tint of 400 (■ <em>rgb = (255, 238, 88)</em>…","Light <em>yellow</em> with a tint of 50 (■ <em>rgb = (255, 253, 231)</em>)","<em>Yellow</em> with a tint of 500 (■ <em>rgb = (255, 235, 59)</em>)","Darker <em>yellow</em> with a tint of 600 (■ <em>rgb = (253, 216, 53)</em>)","Darker <em>yellow</em> with a tint of 700 (■ <em>rgb = (251, 192, 45)</em>)","Dark <em>yellow</em> with a tint of 800 (■ <em>rgb = (249, 168, 37)</em>)","Dark <em>yellow</em> with a tint of 900 (■ <em>rgb = (245, 127, 23)</em>)","Accent <em>yellow</em> with a tint of A100 (■ <em>rgb = (255, 255, </em>…","Accent <em>yellow</em> with a tint of A200 (■ <em>rgb = (255, 255, 0)</em>)","Accent <em>yellow</em> with a tint of A400 (■ <em>rgb = (255, 234, 0)</em>)","Accent <em>yellow</em> with a tint of A700 (■ <em>rgb = (255, 214, 0)</em>)","Anchor point is on the bottom of the text","Anchor point is in the horizontal center of the text","Anchor point is in the vertical center of the text","The horizontal position of the anchor point relative to …","Anchor point is on the left side of the text","The text anchor position.","Anchor point is on the right side of the text","Anchor point is on the top of the text","The vertical position of the anchor point relative to the …","","","","","","","","","","","","","Create a default text anchor position (top left).","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","The horizontal position of the anchor point","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new text anchor position.","","","","","","","","","","","","","The vertical position of the anchor point"],"i":[0,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,0,0,0,15,35,0,0,0,0,0,0,0,0,0,0,28,0,0,15,0,0,13,13,17,15,15,0,0,0,0,0,0,0,0,0,17,17,17,13,13,0,0,28,0,0,0,28,0,36,11,13,15,13,17,15,37,38,39,28,18,19,20,21,16,22,11,13,17,15,37,38,39,28,18,19,20,21,16,22,11,16,13,17,15,18,19,20,21,16,22,11,13,17,15,18,19,20,21,16,22,11,18,20,16,22,11,11,22,11,0,18,19,20,21,16,11,18,19,20,21,19,19,20,20,11,36,22,22,18,19,20,21,11,13,13,17,15,15,37,38,39,28,18,18,19,20,21,16,16,16,16,16,16,16,22,22,11,11,11,16,16,16,16,16,19,20,40,28,13,17,15,37,38,39,28,18,19,20,21,16,22,11,41,13,16,42,13,16,11,16,11,28,28,36,16,43,43,43,35,19,11,11,16,36,11,36,22,22,22,16,11,0,36,18,19,20,21,13,17,15,18,19,20,21,16,22,11,36,17,16,11,11,13,17,15,37,38,39,28,18,19,20,21,16,22,11,13,17,15,37,38,39,28,18,19,20,21,16,22,11,13,17,15,37,38,39,28,18,19,20,21,16,22,11,42,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,33,34,0,33,0,33,34,0,33,34,12,33,34,12,33,34,12,33,34,12,12,33,34,12,12,33,34,12,12,33,34,12,33,34,12,33,34,12,33,34,12,12],"f":[0,0,[[]],[[]],[[],[[2,[1]]]],0,0,0,[[]],[[[3,[1]],[4,[[2,[1]]]]],[[8,[5,[7,[6]]]]]],[[]],0,0,0,0,0,0,0,[[],8],[[],8],[[],9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],10],[11,12],[13,14],[15,14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[16,14],8],[13,13],[17,17],[15,15],[18,18],[19,19],[20,20],[21,21],[16,16],[22,22],[11,11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[18,23],[20,23],[16,11],[22,23],[11,11],[11,23],0,0,0,[[],18],[[],19],[[],20],[[],21],[[16,14],[[8,[8]]]],[[11,14],[[8,[8]]]],[[18,18],24],[[19,19],24],[[20,20],24],[[21,21],24],[[],24],[[],24],[[],24],[[],24],[11,13],[[],22],[22,22],0,[[18,25],[[8,[26]]]],[[19,25],[[8,[26]]]],[[20,25],[[8,[26]]]],[[21,25],[[8,[26]]]],0,[[]],[14,13],[[]],[14,15],[[]],[[]],[[]],[[]],[[]],[[]],[20,18],[[]],[[]],[[]],[[],16],[[]],[13,16],[14,16],[[],16],[[],16],[[],16],[[],22],[[]],[11,11],[[]],[[],11],[16,13],[16,14],[16,10],[16,15],[16,17],[19],[20],[[],27],[28,27],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],16],[[],16],[[],16],[[],11],[13,11],[16,11],[11,11],[[16,14],8],[[11,14],8],[[28,27],29],[[28,27],29],[10,18],[[13,10,15],16],[[],28],[[],28],[[],28],[30,19],[30,19],[[11,12],11],0,[[16,10],16],[[]],[11,10],[31,22],[22,31],[[22,31],22],0,[[16,15],16],[11,15],0,[[],23],[18,23],[19,23],[20,23],[21,23],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],18],[[17,27,27]],[[16,17],16],[11,17],[[11,17],11],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[12,32],[[],32],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[33,33],[34,34],[12,12],[[]],[[]],[[]],[[],12],[[]],[[]],[[]],0,[[]],[[]],[[]],[[33,34],12],[[]],[[]],[[]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],[[],9],0],"p":[[8,"EdgeType"],[3,"Settings"],[6,"ForceGraph"],[4,"Option"],[3,"String"],[8,"Error"],[3,"Box"],[4,"Result"],[3,"TypeId"],[15,"f64"],[3,"TextStyle"],[3,"Pos"],[4,"FontFamily"],[15,"str"],[4,"FontStyle"],[3,"FontDesc"],[4,"FontTransform"],[3,"RGBAColor"],[3,"PaletteColor"],[3,"RGBColor"],[3,"HSLColor"],[3,"ShapeStyle"],[3,"BackendColor"],[15,"bool"],[3,"Formatter"],[3,"Error"],[15,"i32"],[4,"RelativeSize"],[3,"RelativeSizeWithBound"],[15,"usize"],[15,"u32"],[3,"TextStyleBuilder"],[4,"HPos"],[4,"VPos"],[8,"Palette"],[8,"Color"],[3,"Palette99"],[3,"Palette9999"],[3,"Palette100"],[8,"SizeDesc"],[8,"IntoFont"],[8,"IntoTextStyle"],[8,"AsRelative"]]},\
"fdg_sim":{"doc":"fdg-sim","t":"EGIDDDNNKLKLLLLLLLLLLLLLLLLLMLLMMALLLLLLALLLLLLLLLLCLLLLMMMLLLMMLLCLLLLLLLLLLLLLLLLLLLLLLLENLLLLLLLFLLLLLLLNDDNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLFLLLLLLLLLLLLLLLL","n":["Dimensions","ForceGraph","ForceGraphHelper","Node","Simulation","SimulationParameters","Three","Two","add_force_node","add_force_node","add_force_node_with_coords","add_force_node_with_coords","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","data","default","default","delta","dimensions","dot","eq","eq","equivalent","equivalent","find","fmt","force","force","force_mut","from","from","from","from","from_force","from_graph","get_graph","get_graph_mut","glam","into","into","into","into","location","locked","name","new","new","new_with_coords","node_start_size","old_location","parameters","parameters_mut","petgraph","reset_node_placement","set_force","set_graph","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","update","update_custom","visit_edges","visit_nodes","DotParseError","IndexNotFound","borrow","borrow_mut","clone","clone_into","fmt","fmt","from","graph_to_dot","into","provide","to_owned","to_string","try_from","try_into","type_id","Bool","Force","LinkedHashMap","Number","Value","back","bool","bool_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone_into","clone_into","clone_into","cmp","contains_key","continuous","default","dict","dict_mut","drain","drop","entry","eq","eq","eq","equivalent","equivalent","extend","extend","fmt","fmt","from","from","from","from_iter","front","fruchterman_reingold","fruchterman_reingold_weighted","ge","get","get_key_value","get_mut","gt","handy","hash","hasher","index","index_mut","info","insert","into","into","into","into_iter","into_iter","into_iter","is_empty","iter","iter_mut","keys","le","len","lt","name","new","number","number_mut","partial_cmp","pop_back","pop_front","raw_entry","raw_entry_mut","remove","remove_entry","replace","reserve","reset","retain","retain_with_order","scale","shrink_to_fit","to_back","to_front","to_owned","to_owned","to_owned","translate","try_from","try_from","try_from","try_into","try_into","try_into","try_reserve","type_id","type_id","type_id","update","values","values_mut","with_capacity","with_capacity_and_hasher","with_hasher"],"q":["fdg_sim","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fdg_sim::dot","","","","","","","","","","","","","","","","","fdg_sim::force","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Number of dimensions to run the simulation in.","A helper type that creates a <code>StableGraph</code> with our custom …","Syntactic sugar to make adding <code>Node</code>s to a <code>ForceGraph</code> …","A node on a <code>ForceGraph</code>.","A simulation for managing the main event loop and forces.","Parameters for the simulation.","","","Add a <code>Node</code> to the graph with only the name and arbitrary …","","Add a <code>Node</code> to the graph with the name, arbitrary data, and …","","","","","","","","","","","","","","","","","","Any arbitrary information you want to store within it.","","","","The number of dimensions that the simulation will run in.","Exports graphs into the DOT language for use with …","","","","","Retreive a node from the graph based on a query.","","Change forces that define how your graph behaves.","Retrieve a reference to the internal <code>Force</code>.","Retrieve a mutable reference to the internal <code>Force</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create a new <code>SimulationParameters</code> from a <code>Force</code>.","Create a simulation from a <code>ForceGraph</code>.","Retrieve a reference to the internal <code>ForceGraph</code>.","Retrieve a mutable reference to the internal <code>ForceGraph</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","If the node is locked. (if the physics should run on it)","The name of the node.","Create a new <code>SimulationParameters</code>.","Create a new node with it’s name and associated data.","Create a new node with custom coordinates.","The width and height of the box that the nodes randomly …","","Retrieve a reference to the internal <code>SimulationParameters</code>.","Retreive a mutable reference to the internal …","","Randomly place the nodes within the starting square. In …","Set the internal <code>Force</code>.","Set the internal <code>ForceGraph</code>.","","","","","","","","","","","","","","","","","Update the graph’s node’s positions for a given …","Update the graph’s node’s positions for a given …","Run a callback on all of the edges.","Run a callback on all the nodes.","Errors that can be returned by the functions in this …","Logically, this should never happen.","","","","","","","Returns the argument unchanged.","Convert a <code>ForceGraph</code> to the DOT","Calls <code>U::from(self)</code>.","","","","","","","","A struct that defines how your force behaves.","A version of <code>HashMap</code> that has a user controllable order …","","A value that you can change in a <code>Force</code>’s dictionary.","","Retrieves the bool from a value.","Same as bool but returns a mutable version.","","","","","","","","","","","","","","","","","Retrieve if the force is continuous. Continuous forces run …","","Retrieve a reference to the force’s internal dictionary.","Retrieve a mutable reference to the force’s internal …","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","A force directed graph drawing algorithm based on …","A force directed graph drawing algorithm based on …","","","","","","My own force-directed graph drawing algorithm.","","","","","Retrieve the force’s information.","Inserts the given key / value pair at the <em>back</em> of the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Retrieve the name of the force.","","Retrieves the number from a value. If you mess up and call …","Same as number but returns a mutable version.","","","","","","","","If the given key is not in this map, inserts the key / …","","Reset the force’s internal dictionary.","","","A force for scaling the layout around its center.","","If an entry with this key exists, move it to the back of …","If an entry with this key exists, move it to the front of …","","","","A force for translating the graph in any direction.","","","","","","","","","","","Update the graph’s node’s positions for a given …","","","","",""],"i":[0,0,0,0,0,0,7,7,44,5,44,5,7,9,10,11,7,9,10,11,7,9,10,11,7,9,10,11,11,9,10,11,9,0,7,11,7,7,10,11,0,9,9,7,9,10,11,9,10,10,10,0,7,9,10,11,11,11,11,9,11,11,9,11,10,10,0,10,9,10,7,9,10,11,7,9,10,11,7,9,10,11,7,9,10,11,10,10,10,10,0,22,22,22,22,22,22,22,22,0,22,22,22,22,22,22,22,26,0,0,26,0,25,26,26,25,26,19,25,26,19,25,25,25,26,19,25,26,19,25,25,19,25,19,19,25,25,25,25,26,19,25,25,25,25,25,26,25,26,19,25,25,0,0,25,25,25,25,25,0,25,25,25,25,19,25,25,26,19,25,25,25,25,25,25,25,25,25,25,19,25,26,26,25,25,25,25,25,25,25,25,25,19,25,25,0,25,25,25,25,26,19,0,25,26,19,25,26,19,25,25,26,19,19,25,25,25,25,25],"f":[0,0,0,0,0,0,0,0,[[[2,[1]]],3],[[[5,[4]],[2,[1]]],3],[[[2,[1]],6],3],[[[5,[4]],[2,[1]],6],3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[7,7],[[[9,[8,8,8]]],[[9,[8,8,8]]]],[[[10,[8,8,8]]],[[10,[8,8,8]]]],[[[11,[8]]],[[11,[8]]]],[[]],[[]],[[]],[[]],0,[[],[[9,[4]]]],[[],[[10,[4]]]],0,0,0,[[7,7],12],[[[11,[13]],11],12],[[],12],[[],12],[[[10,[4]],6,14],[[15,[3]]]],[[[11,[16]],17],18],0,[[[9,[4]]],19],[[[9,[4]]],19],[[]],[[]],[[]],[[]],[[[19,[4]]],[[9,[4]]]],[[[5,[4]],[9,[4]]],[[10,[4]]]],[[[10,[4]]],5],[[[10,[4]]],5],0,[[]],[[]],[[]],[[]],0,0,0,[[14,7,[19,[4]]],[[9,[4]]]],[[[2,[1]]],11],[[[2,[1]],6],11],0,0,[[[10,[4]]],9],[[[10,[4]]],9],0,[[[10,[4]]]],[[[9,[4]],[19,[4]]]],[[[10,[4]],[5,[4]]]],[[]],[[]],[[]],[[]],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],21],[[],21],[[],21],[[],21],[[[10,[4]],14]],[[[10,[4]],19,14]],[[[10,[4]]]],[[[10,[4]]]],0,0,[[]],[[]],[22,22],[[]],[[22,17],18],[[22,17],18],[[]],[5,[[20,[23,22]]]],[[]],[24],[[]],[[],23],[[],20],[[],20],[[],21],0,0,0,0,0,[25,15],[26,[[15,[12]]]],[26,[[15,[12]]]],[[]],[[]],[[]],[[]],[[]],[[]],[25,27],[25],[25,25],[26,26],[[[19,[8,8,8]]],[[19,[8,8,8]]]],[[]],[[]],[[]],[[25,25],28],[25,12],[19,12],[[],25],[19,25],[19,25],[25,29],[25],[25,30],[[25,25],12],[[26,26],12],[[19,19],12],[[],12],[[],12],[25],[25],[[25,17],[[20,[31]]]],[[26,17],18],[[]],[[]],[[]],[[],25],[25,15],[[14,14],[[19,[4]]]],[[14,14],[[19,[[0,[8,[32,[14]]]],4]]]],[[25,25],12],[25,15],[25,15],[25,15],[[25,25],12],[[14,14,12,12],[[19,[4]]]],[25],[25],[25],[25],[19,[[15,[1]]]],[25,15],[[]],[[]],[[]],[25,33],[25,34],[25,35],[25,12],[25,33],[25,34],[25,36],[[25,25],12],[25,27],[[25,25],12],[19,1],[[],[[25,[[38,[37]]]]]],[26,[[15,[14]]]],[26,[[15,[14]]]],[[25,25],[[15,[28]]]],[25,15],[25,15],[25,39],[25,40],[25,15],[25,15],[25,15],[[25,27]],[19],[25],[25],[[],[[19,[4]]]],[25],[25,15],[25,15],[[]],[[]],[[]],[[],[[19,[4]]]],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[25,27],[[20,[41]]]],[[],21],[[],21],[[],21],[[19,5,14]],[25,42],[25,43],[27,[[25,[[38,[37]]]]]],[27,25],[[],25]],"p":[[15,"str"],[8,"AsRef"],[3,"NodeIndex"],[8,"EdgeType"],[6,"ForceGraph"],[3,"Vec3"],[4,"Dimensions"],[8,"Clone"],[3,"SimulationParameters"],[3,"Simulation"],[3,"Node"],[15,"bool"],[8,"PartialEq"],[15,"f32"],[4,"Option"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[3,"Force"],[4,"Result"],[3,"TypeId"],[4,"DotParseError"],[3,"String"],[3,"Demand"],[3,"LinkedHashMap"],[4,"Value"],[15,"usize"],[4,"Ordering"],[3,"Drain"],[4,"Entry"],[3,"Error"],[8,"Into"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"AHasher"],[3,"BuildHasherDefault"],[3,"RawEntryBuilder"],[3,"RawEntryBuilderMut"],[4,"TryReserveError"],[3,"Values"],[3,"ValuesMut"],[8,"ForceGraphHelper"]]},\
"fixedbitset":{"doc":"<code>FixedBitSet</code> is a simple fixed size set of bits.","t":"DDIDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Difference","FixedBitSet","IndexRange","Intersection","Ones","SymmetricDifference","Union","as_mut_slice","as_slice","bitand","bitand_assign","bitand_assign","bitor","bitor_assign","bitor_assign","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone_into","cmp","contains","copy_bit","count_ones","default","difference","difference_with","end","end","eq","extend","fmt","fmt","fmt","from","from","from","from","from","from","from_iter","grow","hash","index","insert","insert_range","intersect_with","intersection","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","is_clear","is_disjoint","is_empty","is_subset","is_superset","len","new","next","next","next","next","next","ones","partial_cmp","put","set","set_range","start","start","symmetric_difference","symmetric_difference_with","to_owned","to_string","toggle","toggle_range","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","union","union_with","with_capacity","with_capacity_and_blocks"],"q":["fixedbitset","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["An iterator producing elements in the difference of two …","<code>FixedBitSet</code> is a simple fixed size set of bits that each …","<strong>IndexRange</strong> is implemented by Rust’s built-in range …","An iterator producing elements in the intersection of two …","An  iterator producing the indices of the set bit in a set.","An iterator producing elements in the symmetric difference …","An iterator producing elements in the union of two sets.","View the bitset as a mutable slice of <code>u32</code> blocks. Writing …","View the bitset as a slice of <code>u32</code> blocks","","","","","","","","","","","","","","","","","","","","","","Clear all bits.","","","","Return <strong>true</strong> if the bit is enabled in the <strong>FixedBitSet</strong>, <strong>false</strong>…","Copies boolean value from specified bit to the specified …","Count the number of set bits in the given bit range.","","Returns a lazy iterator over the difference of two …","In-place difference of two <code>FixedBitSet</code>s.","End index (exclusive)","End index (exclusive)","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Grow capacity to <strong>bits</strong>, all new bits initialized to zero","","","Enable <code>bit</code>.","Enables every bit in the given range.","In-place intersection of two <code>FixedBitSet</code>s.","Returns a lazy iterator over the intersection of two …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","<code>true</code> if all bits in the <code>FixedBitSet</code> are unset.","Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>. …","<code>true</code> if the <code>FixedBitSet</code> is empty.","Returns <code>true</code> if the set is a subset of another, i.e. <code>other</code> …","Returns <code>true</code> if the set is a superset of another, i.e. <code>self</code>…","The length of the <code>FixedBitSet</code> in bits.","Create a new empty <strong>FixedBitSet</strong>.","","","","","","Iterates over all enabled bits.","","Enable <code>bit</code>, and return its previous value.","<strong>Panics</strong> if <strong>bit</strong> is out of bounds.","Sets every bit in the given range to the given state (…","Start index (inclusive)","Start index (inclusive)","Returns a lazy iterator over the symmetric difference of …","In-place symmetric difference of two <code>FixedBitSet</code>s.","","","Toggle <code>bit</code> (inverting its state).","Toggles (inverts) every bit in the given range.","","","","","","","","","","","","","","","","","","","Returns a lazy iterator over the union of two <code>FixedBitSet</code>s.","In-place union of two <code>FixedBitSet</code>s.","Create a new <strong>FixedBitSet</strong> with a specific number of bits, …","Create a new <strong>FixedBitSet</strong> with a specific number of bits, …"],"i":[0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,6,14,13,15,16,1,6,14,13,15,16,1,1,1,1,1,1,1,1,1,1,1,5,5,1,1,1,1,1,6,14,13,15,16,1,1,1,1,1,1,1,1,1,6,14,13,15,16,1,6,14,13,15,16,1,1,1,1,1,1,1,6,14,13,15,16,1,1,1,1,1,5,5,1,1,1,1,1,1,6,14,13,15,16,1,6,14,13,15,16,1,6,14,13,15,16,1,1,1,1,1],"f":[0,0,0,0,0,0,0,[1],[1],[[1,1],1],[[1,1]],[[1,1]],[[1,1],1],[[1,1]],[[1,1]],[[1,1],1],[[1,1]],[[1,1]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1],[1,1],[[]],[[1,1],2],[[1,3],4],[[1,3,3]],[[1,5],3],[[],1],[[1,1],6],[[1,1]],[[],7],[[],7],[[1,1],4],[[1,8]],[[1,9],10],[[1,9],[[12,[11]]]],[[1,9],[[12,[11]]]],[[]],[[]],[[]],[[]],[[]],[[]],[8,1],[[1,3]],[1],[[1,3],4],[[1,3]],[[1,5]],[[1,1]],[[1,1],13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,4],[[1,1],4],[1,4],[[1,1],4],[[1,1],4],[1,3],[[],1],[6,7],[14,7],[13,7],[15,7],[16,7],[1,16],[[1,1],[[7,[2]]]],[[1,3],4],[[1,3,4]],[[1,5,4]],[[],7],[[],7],[[1,1],14],[[1,1]],[[]],[[],17],[[1,3]],[[1,5]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[1,1],15],[[1,1]],[3,1],[[3,8],1]],"p":[[3,"FixedBitSet"],[4,"Ordering"],[15,"usize"],[15,"bool"],[8,"IndexRange"],[3,"Difference"],[4,"Option"],[8,"IntoIterator"],[3,"Formatter"],[6,"Result"],[3,"Error"],[4,"Result"],[3,"Intersection"],[3,"SymmetricDifference"],[3,"Union"],[3,"Ones"],[3,"String"],[3,"TypeId"]]},\
"flate2":{"doc":"A DEFLATE-based stream compression/decompression library","t":"NDDDDDDDDNNEENDDNNNNENNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["BufError","Compress","CompressError","Compression","Crc","CrcReader","CrcWriter","Decompress","DecompressError","Finish","Finish","FlushCompress","FlushDecompress","Full","GzBuilder","GzHeader","None","None","Ok","Partial","Status","StreamEnd","Sync","Sync","amount","best","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buf_read","bufread","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","combine","comment","comment","compress","compress_vec","consume","crc","crc","decompress","decompress_vec","default","default","default","default","eq","eq","eq","eq","eq","extra","extra","fast","filename","filename","fill_buf","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","get_mut","get_mut","get_ref","get_ref","into","into","into","into","into","into","into","into","into","into","into","into","into","into_inner","into_inner","level","message","message","mtime","mtime","mtime_as_datetime","needs_dictionary","new","new","new","new","new","new","new","none","operating_system","operating_system","provide","provide","read","read","read","reset","reset","reset","reset","reset","sum","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","total_in","total_in","total_out","total_out","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","write","write","write","DeflateDecoder","DeflateEncoder","GzDecoder","GzEncoder","MultiGzDecoder","ZlibDecoder","ZlibEncoder","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","flush","flush","flush","flush","flush","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","header","header","into","into","into","into","into","into","into","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","new","new","new","new","new","new","new","read","read","read","read","read","read","read","reset","reset","reset","reset","reset_data","total_in","total_in","total_in","total_in","total_out","total_out","total_out","total_out","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","write","write","write","write","write","write","DeflateDecoder","DeflateEncoder","GzDecoder","GzEncoder","MultiGzDecoder","ZlibDecoder","ZlibEncoder","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","flush","flush","flush","flush","flush","flush","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","header","header","into","into","into","into","into","into","into","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","new","new","new","new","new","new","new","new_with_buf","new_with_buf","read","read","read","read","read","read","read","reset","reset","reset","reset","total_in","total_in","total_in","total_in","total_out","total_out","total_out","total_out","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","write","write","write","write","write","write","write","DeflateDecoder","DeflateEncoder","GzDecoder","GzEncoder","MultiGzDecoder","ZlibDecoder","ZlibEncoder","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","drop","finish","finish","finish","finish","finish","finish","finish","flush","flush","flush","flush","flush","flush","flush","flush_finish","flush_finish","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","header","header","into","into","into","into","into","into","into","new","new","new","new","new","new","new","read","read","read","read","read","read","reset","reset","reset","reset","total_in","total_in","total_in","total_in","total_out","total_out","total_out","total_out","try_finish","try_finish","try_finish","try_finish","try_finish","try_finish","try_finish","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","write","write","write","write","write","write","write"],"q":["flateflate2::bufread","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","flate2::read","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","flate2::write","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Indicates that forward progress is not possible due to …","Raw in-memory compression stream for blocks of data.","Error returned when a compression object is used …","When compressing data, the compression level can be …","The CRC calculated by a <code>CrcReader</code>.","A wrapper around a <code>Read</code> that calculates the CRC.","A wrapper around a <code>Write</code> that calculates the CRC.","Raw in-memory decompression stream for blocks of data.","Error returned when a decompression object finds that the …","Pending input is processed and pending output is flushed.","Pending input is processed and pending output is flushed.","Values which indicate the form of flushing to be used when …","Values which indicate the form of flushing to be used when …","All output is flushed as with <code>Flush::Sync</code> and the …","A builder structure to create a new gzip Encoder.","A structure representing the header of a gzip stream.","A typical parameter for passing to …","A typical parameter for passing to …","Indicates success.","All pending output is flushed to the output buffer, but …","Possible status results of compressing some data or …","Indicates that all input has been consumed and all output …","All pending output is flushed to the output buffer and the …","All pending output is flushed to the output buffer and the …","The number of bytes that have been used to calculate the …","Optimize for the size of data being encoded.","","","","","","","","","","","","","","","","","","","","","","","","","","","Consume this builder, creating a reader encoder in the …","Types which operate over <code>BufRead</code> streams, both encoders …","","","","","","","","","","","Combine the CRC with the CRC for the subsequent block of …","Returns the <code>comment</code> field of this gzip stream’s header, …","Configure the <code>comment</code> field in the gzip header.","Compresses the input data into the output, consuming only …","Compresses the input data into the extra space of the …","","Get the Crc for this <code>CrcReader</code>.","Get the Crc for this <code>CrcWriter</code>.","Decompresses the input data into the output, consuming …","Decompresses the input data into the extra space in the …","","","","","","","","","","Returns the <code>extra</code> field of this gzip stream’s header, if …","Configure the <code>extra</code> field in the gzip header.","Optimize for the best speed of encoding.","Returns the <code>filename</code> field of this gzip stream’s header, …","Configure the <code>filename</code> field in the gzip header.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get a mutable reference to the reader that is wrapped by …","Get a mutable reference to the writer that is wrapped by …","Get the reader that is wrapped by this <code>CrcReader</code> by …","Get the writer that is wrapped by this <code>CrcWriter</code> by …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Get the reader that is wrapped by this <code>CrcReader</code>.","Get the writer that is wrapped by this <code>CrcWriter</code>.","Returns an integer representing the compression level, …","Retrieve the implementation’s message about why the …","Retrieve the implementation’s message about why the …","This gives the most recent modification time of the …","Configure the <code>mtime</code> field in the gzip header.","Returns the most recent modification time represented by a …","Indicates whether decompression failed due to requiring a …","Create a new CRC.","Create a new <code>CrcReader</code>.","Create a new <code>CrcWriter</code>.","Create a new blank builder with no header by default.","Creates a new object ready for compressing data that it’…","Creates a new object ready for decompressing data that it…","Creates a new description of the compression level with an …","No compression is to be performed, this may actually …","Returns the <code>operating_system</code> field of this gzip stream’s …","Configure the <code>operating_system</code> field in the gzip header.","","","Types which operate over <code>Read</code> streams, both encoders and …","","Consume this builder, creating a reader encoder in the …","Reset the CRC.","Reset the Crc in this <code>CrcReader</code>.","Reset the Crc in this <code>CrcWriter</code>.","Quickly resets this compressor without having to …","Performs the equivalent of replacing this decompression …","Returns the current crc32 checksum.","","","","","","","","Returns the total number of input bytes which have been …","Returns the total number of input bytes which have been …","Returns the total number of output bytes which have been …","Returns the total number of output bytes which have been …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Update the CRC with the bytes in <code>data</code>.","Types which operate over <code>Write</code> streams, both encoders and …","","Consume this builder, creating a writer encoder in the …","A DEFLATE decoder, or decompressor.","A DEFLATE encoder, or compressor.","A gzip streaming decoder","A gzip streaming encoder","A gzip streaming decoder that decodes all members of a …","A ZLIB decoder, or decompressor.","A ZLIB encoder, or compressor.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Acquires a mutable reference to the underlying stream","Acquires a mutable reference to the underlying stream","Acquires a mutable reference to the underlying reader.","Acquires a mutable reference to the underlying stream.","Acquires a mutable reference to the underlying stream.","Acquires a mutable reference to the underlying stream","Acquires a mutable reference to the underlying stream","Acquires a reference to the underlying reader","Acquires a reference to the underlying stream","Acquires a reference to the underlying reader.","Acquires a reference to the underlying reader.","Acquires a reference to the underlying reader.","Acquires a reference to the underlying reader","Acquires a reference to the underlying stream","Returns the header associated with this stream, if it was …","Returns the current header associated with this stream, if …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this encoder, returning the underlying reader.","Consumes this decoder, returning the underlying reader.","Returns the underlying stream, consuming this encoder","Consumes this decoder, returning the underlying reader.","Consumes this decoder, returning the underlying reader.","Consumes this encoder, returning the underlying reader.","Consumes this decoder, returning the underlying reader.","Creates a new encoder which will read uncompressed data …","Creates a new decoder which will decompress data read from …","Creates a new encoder which will use the given compression …","Creates a new decoder from the given reader, immediately …","Creates a new decoder from the given reader, immediately …","Creates a new encoder which will read uncompressed data …","Creates a new decoder which will decompress data read from …","","","","","","","","Resets the state of this encoder entirely, swapping out …","Resets the state of this decoder entirely, swapping out …","Resets the state of this encoder entirely, swapping out …","Resets the state of this decoder entirely, swapping out …","Resets the state of this decoder’s data","Returns the number of bytes that have been read into this …","Returns the number of bytes that the decompressor has …","Returns the number of bytes that have been read into this …","Returns the number of bytes that the decompressor has …","Returns the number of bytes that the compressor has …","Returns the number of bytes that the decompressor has …","Returns the number of bytes that the compressor has …","Returns the number of bytes that the decompressor has …","","","","","","","","","","","","","","","","","","","","","","","","","","","","A DEFLATE decoder, or decompressor.","A DEFLATE encoder, or compressor.","A gzip streaming decoder","A gzip streaming encoder","A gzip streaming decoder that decodes all members of a …","A ZLIB decoder, or decompressor.","A ZLIB encoder, or compressor.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Acquires a mutable reference to the underlying stream","Acquires a mutable reference to the underlying stream","Acquires a mutable reference to the underlying reader.","Acquires a mutable reference to the underlying stream.","Acquires a mutable reference to the underlying stream.","Acquires a mutable reference to the underlying stream","Acquires a mutable reference to the underlying stream","Acquires a reference to the underlying reader","Acquires a reference to the underlying stream","Acquires a reference to the underlying reader.","Acquires a reference to the underlying reader.","Acquires a reference to the underlying reader.","Acquires a reference to the underlying stream","Acquires a reference to the underlying stream","Returns the header associated with this stream, if it was …","Returns the current header associated with this stream, if …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this encoder, returning the underlying reader.","Consumes this decoder, returning the underlying reader.","Returns the underlying stream, consuming this encoder","Consumes this decoder, returning the underlying reader.","Consumes this decoder, returning the underlying reader.","Consumes this encoder, returning the underlying reader.","Consumes this decoder, returning the underlying reader.","Creates a new encoder which will read uncompressed data …","Creates a new decoder which will decompress data read from …","Creates a new encoder which will use the given compression …","Creates a new decoder from the given reader, immediately …","Creates a new decoder from the given reader, immediately …","Creates a new encoder which will read uncompressed data …","Creates a new decoder which will decompress data read from …","Same as <code>new</code>, but the intermediate buffer for data is …","Same as <code>new</code>, but the intermediate buffer for data is …","","","","","","","","Resets the state of this encoder entirely, swapping out …","Resets the state of this decoder entirely, swapping out …","Resets the state of this encoder entirely, swapping out …","Resets the state of this decoder entirely, swapping out …","Returns the number of bytes that have been read into this …","Returns the number of bytes that the decompressor has …","Returns the number of bytes that have been read into this …","Returns the number of bytes that the decompressor has …","Returns the number of bytes that the compressor has …","Returns the number of bytes that the decompressor has …","Returns the number of bytes that the compressor has …","Returns the number of bytes that the decompressor has …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A DEFLATE decoder, or decompressor.","A DEFLATE encoder, or compressor.","A gzip streaming decoder","A gzip streaming encoder","A gzip streaming decoder that decodes all members of a …","A ZLIB decoder, or decompressor.","A ZLIB encoder, or compressor.","","","","","","","","","","","","","","","","Consumes this encoder, flushing the output stream.","Consumes this encoder, flushing the output stream.","Finish encoding this stream, returning the underlying …","Consumes this decoder, flushing the output stream.","Consumes this decoder, flushing the output stream.","Consumes this encoder, flushing the output stream.","Consumes this encoder, flushing the output stream.","","","","","","","","Consumes this encoder, flushing the output stream.","Consumes this encoder, flushing the output stream.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Acquires a mutable reference to the underlying writer.","Acquires a mutable reference to the underlying writer.","Acquires a mutable reference to the underlying writer.","Acquires a mutable reference to the underlying writer.","Acquires a mutable reference to the underlying writer.","Acquires a mutable reference to the underlying writer.","Acquires a mutable reference to the underlying writer.","Acquires a reference to the underlying writer.","Acquires a reference to the underlying writer.","Acquires a reference to the underlying writer.","Acquires a reference to the underlying writer.","Acquires a reference to the underlying writer.","Acquires a reference to the underlying writer.","Acquires a reference to the underlying writer.","Returns the header associated with this stream.","Returns the header associated with the current member.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new encoder which will write compressed data to …","Creates a new decoder which will write uncompressed data …","Creates a new encoder which will use the given compression …","Creates a new decoder which will write uncompressed data …","Creates a new decoder which will write uncompressed data …","Creates a new encoder which will write compressed data to …","Creates a new decoder which will write uncompressed data …","","","","","","","Resets the state of this encoder entirely, swapping out …","Resets the state of this decoder entirely, swapping out …","Resets the state of this encoder entirely, swapping out …","Resets the state of this decoder entirely, swapping out …","Returns the number of bytes that have been written to this …","Returns the number of bytes that the decompressor has …","Returns the number of bytes that have been written to this …","Returns the number of bytes that the decompressor has …","Returns the number of bytes that the compressor has …","Returns the number of bytes that the decompressor has …","Returns the number of bytes that the compressor has …","Returns the number of bytes that the decompressor has …","Attempt to finish this output stream, writing out final …","Attempt to finish this output stream, writing out final …","Attempt to finish this output stream, writing out final …","Attempt to finish this output stream, writing out final …","Attempt to finish this output stream, writing out final …","Attempt to finish this output stream, writing out final …","Attempt to finish this output stream, writing out final …","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[9,0,0,0,0,0,0,0,0,7,8,0,0,7,0,0,7,8,9,7,0,9,7,8,1,3,1,18,20,6,4,14,21,7,8,22,15,9,3,1,18,20,6,4,14,21,7,8,22,15,9,3,4,0,6,7,8,9,3,6,7,8,9,3,1,6,4,14,14,18,18,20,21,21,1,6,4,3,6,7,8,9,3,6,4,3,6,4,18,20,1,18,20,6,4,14,21,7,8,22,22,15,15,9,3,1,18,20,6,4,14,21,7,8,22,15,9,3,18,20,18,20,1,18,20,6,4,14,21,7,8,22,15,9,3,18,20,3,22,15,6,4,6,22,1,18,20,4,14,21,3,3,6,4,22,15,0,18,4,1,18,20,14,21,1,6,7,8,9,3,22,15,14,21,14,21,1,18,20,6,4,14,21,7,8,22,15,9,3,1,18,20,6,4,14,21,7,8,22,15,9,3,1,18,20,6,4,14,21,7,8,22,15,9,3,1,0,20,4,0,0,0,0,0,0,0,38,39,5,40,43,41,42,38,39,5,40,43,41,42,38,39,5,40,41,42,38,39,5,40,43,41,42,38,39,5,40,43,41,42,38,39,5,40,43,41,42,38,39,5,40,43,41,42,40,43,38,39,5,40,43,41,42,38,39,5,40,43,41,42,38,39,5,40,43,41,42,38,39,5,40,43,41,42,38,39,41,42,39,38,39,41,42,38,39,41,42,38,39,5,40,43,41,42,38,39,5,40,43,41,42,38,39,5,40,43,41,42,38,39,5,40,41,42,0,0,0,0,0,0,0,44,45,33,46,47,48,49,44,45,33,46,47,48,49,44,45,33,46,47,48,49,44,45,33,46,47,48,49,44,45,33,46,47,48,49,44,45,33,46,47,48,49,44,45,33,46,47,48,49,46,47,44,45,33,46,47,48,49,44,45,33,46,47,48,49,44,45,33,46,47,48,49,45,49,44,45,33,46,47,48,49,44,45,48,49,44,45,48,49,44,45,48,49,44,45,33,46,47,48,49,44,45,33,46,47,48,49,44,45,33,46,47,48,49,44,45,33,46,47,48,49,0,0,0,0,0,0,0,50,51,37,52,53,54,55,50,51,37,52,53,54,55,37,50,51,37,52,53,54,55,50,51,37,52,53,54,55,50,54,50,51,37,52,53,54,55,50,51,37,52,53,54,55,50,51,37,52,53,54,55,50,51,37,52,53,54,55,52,53,50,51,37,52,53,54,55,50,51,37,52,53,54,55,50,51,37,52,54,55,50,51,54,55,50,51,54,55,50,51,54,55,50,51,37,52,53,54,55,50,51,37,52,53,54,55,50,51,37,52,53,54,55,50,51,37,52,53,54,55,50,51,37,52,53,54,55],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[[],3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[4,3],5],0,[6,6],[7,7],[8,8],[9,9],[3,3],[[]],[[]],[[]],[[]],[[]],[[1,1]],[6,10],[[4,[13,[[12,[11]]]]],4],[[14,7],[[16,[9,15]]]],[[14,12,7],[[16,[9,15]]]],[[[18,[17]],19]],[18,1],[20,1],[[21,8],[[16,[9,22]]]],[[21,12,8],[[16,[9,22]]]],[[],1],[[],6],[[],4],[[],3],[[6,6],23],[[7,7],23],[[8,8],23],[[9,9],23],[[3,3],23],[6,10],[[4,[13,[[12,[11]]]]],4],[[],3],[6,10],[[4,[13,[[12,[11]]]]],4],[[[18,[17]]],24],[[[20,[25]]],24],[[1,26],27],[[[18,[28]],26],27],[[[20,[28]],26],27],[[6,26],27],[[4,26],27],[[14,26],27],[[21,26],27],[[7,26],27],[[8,26],27],[[22,26],27],[[22,26],27],[[15,26],27],[[15,26],27],[[9,26],27],[[3,26],27],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[18],[20],[18],[20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[18],[20],[3,2],[22,[[10,[29]]]],[15,[[10,[29]]]],[6,2],[[4,2],4],[6,[[10,[30]]]],[22,[[10,[2]]]],[[],1],[31,[[18,[31]]]],[25,[[20,[25]]]],[[],4],[[3,23],14],[23,21],[2,3],[[],3],[6,11],[[4,11],4],[32],[32],0,[[[18,[31]]],[[24,[19]]]],[[4,31,3],[[33,[31]]]],[1],[18],[20],[14],[[21,23]],[1,2],[[]],[[]],[[]],[[]],[[]],[[],34],[[],34],[14,35],[21,35],[14,35],[21,35],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[1],0,[[[20,[25]]],[[24,[19]]]],[[4,25,3],[[37,[25]]]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[38,[[0,[17,25]]]]],24],[[[39,[[0,[17,25]]]]],24],[[[5,[[0,[17,25]]]]],24],[[[40,[[0,[17,25]]]]],24],[[[41,[[0,[17,25]]]]],24],[[[42,[[0,[17,25]]]]],24],[[[38,[28]],26],27],[[[39,[28]],26],27],[[[5,[28]],26],27],[[[40,[28]],26],27],[[[43,[28]],26],27],[[[41,[28]],26],27],[[[42,[28]],26],27],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[38],[39],[5],[40],[43],[41],[42],[38],[39],[5],[40],[43],[41],[42],[40,[[10,[6]]]],[43,[[10,[6]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[38],[39],[5],[40],[43],[41],[42],[[17,3],[[38,[17]]]],[17,[[39,[17]]]],[[17,3],[[5,[17]]]],[17,[[40,[17]]]],[17,[[43,[17]]]],[[17,3],[[41,[17]]]],[17,[[42,[17]]]],[[[38,[17]]],[[24,[19]]]],[[[39,[17]]],[[24,[19]]]],[[[5,[17]]],[[24,[19]]]],[[[40,[17]]],[[24,[19]]]],[[[43,[17]]],[[24,[19]]]],[[[41,[17]]],[[24,[19]]]],[[[42,[17]]],[[24,[19]]]],[38],[39],[41],[42],[39],[38,35],[39,35],[41,35],[42,35],[38,35],[39,35],[41,35],[42,35],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[[38,[[0,[17,25]]]]],[[24,[19]]]],[[[39,[[0,[17,25]]]]],[[24,[19]]]],[[[5,[[0,[17,25]]]]],[[24,[19]]]],[[[40,[[0,[17,25]]]]],[[24,[19]]]],[[[41,[[0,[17,25]]]]],[[24,[19]]]],[[[42,[[0,[17,25]]]]],[[24,[19]]]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[44,[[0,[31,25]]]]],24],[[[45,[[0,[31,25]]]]],24],[[[33,[[0,[31,25]]]]],24],[[[46,[[0,[31,25]]]]],24],[[[47,[[0,[31,25]]]]],24],[[[48,[[0,[31,25]]]]],24],[[[49,[[0,[31,25]]]]],24],[[[44,[28]],26],27],[[[45,[28]],26],27],[[[33,[28]],26],27],[[[46,[28]],26],27],[[[47,[28]],26],27],[[[48,[28]],26],27],[[[49,[28]],26],27],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[44],[45],[33],[46],[47],[48],[49],[44],[45],[33],[46],[47],[48],[49],[46,[[10,[6]]]],[47,[[10,[6]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[44],[45],[33],[46],[47],[48],[49],[[31,3],[[44,[31]]]],[31,[[45,[31]]]],[[31,3],[[33,[31]]]],[31,[[46,[31]]]],[31,[[47,[31]]]],[[31,3],[[48,[31]]]],[31,[[49,[31]]]],[[31,[12,[11]]],[[45,[31]]]],[[31,[12,[11]]],[[49,[31]]]],[[[44,[31]]],[[24,[19]]]],[[[45,[31]]],[[24,[19]]]],[[[33,[31]]],[[24,[19]]]],[[[46,[31]]],[[24,[19]]]],[[[47,[31]]],[[24,[19]]]],[[[48,[31]]],[[24,[19]]]],[[[49,[31]]],[[24,[19]]]],[44],[45],[48],[49],[44,35],[45,35],[48,35],[49,35],[44,35],[45,35],[48,35],[49,35],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[[44,[[0,[31,25]]]]],[[24,[19]]]],[[[45,[[0,[31,25]]]]],[[24,[19]]]],[[[33,[[0,[31,25]]]]],[[24,[19]]]],[[[46,[[0,[31,25]]]]],[[24,[19]]]],[[[47,[[0,[31,25]]]]],[[24,[19]]]],[[[48,[[0,[31,25]]]]],[[24,[19]]]],[[[49,[[0,[31,25]]]]],[[24,[19]]]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[37,[25]]]],[[[50,[25]]],[[24,[25]]]],[[[51,[25]]],[[24,[25]]]],[[[37,[25]]],[[24,[25]]]],[[[52,[25]]],[[24,[25]]]],[[[53,[25]]],[[24,[25]]]],[[[54,[25]]],[[24,[25]]]],[[[55,[25]]],[[24,[25]]]],[[[50,[25]]],24],[[[51,[25]]],24],[[[37,[25]]],24],[[[52,[25]]],24],[[[53,[25]]],24],[[[54,[25]]],24],[[[55,[25]]],24],[[[50,[25]]],[[24,[25]]]],[[[54,[25]]],[[24,[25]]]],[[[50,[[0,[28,25]]]],26],27],[[[51,[[0,[28,25]]]],26],27],[[[37,[[0,[28,25]]]],26],27],[[[52,[[0,[28,25]]]],26],27],[[[53,[[0,[28,25]]]],26],27],[[[54,[[0,[28,25]]]],26],27],[[[55,[[0,[28,25]]]],26],27],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[50,[25]]]],[[[51,[25]]]],[[[37,[25]]]],[[[52,[25]]]],[[[53,[25]]]],[[[54,[25]]]],[[[55,[25]]]],[[[50,[25]]]],[[[51,[25]]]],[[[37,[25]]]],[[[52,[25]]]],[[[53,[25]]]],[[[54,[25]]]],[[[55,[25]]]],[[[52,[25]]],[[10,[6]]]],[[[53,[25]]],[[10,[6]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[25,3],[[50,[25]]]],[25,[[51,[25]]]],[[25,3],[[37,[25]]]],[25,[[52,[25]]]],[25,[[53,[25]]]],[[25,3],[[54,[25]]]],[25,[[55,[25]]]],[[[50,[[0,[31,25]]]]],[[24,[19]]]],[[[51,[[0,[31,25]]]]],[[24,[19]]]],[[[37,[[0,[31,25]]]]],[[24,[19]]]],[[[52,[[0,[31,25]]]]],[[24,[19]]]],[[[54,[[0,[31,25]]]]],[[24,[19]]]],[[[55,[[0,[31,25]]]]],[[24,[19]]]],[[[50,[25]],25],[[24,[25]]]],[[[51,[25]],25],[[24,[25]]]],[[[54,[25]],25],[[24,[25]]]],[[[55,[25]],25],[[24,[25]]]],[[[50,[25]]],35],[[[51,[25]]],35],[[[54,[25]]],35],[[[55,[25]]],35],[[[50,[25]]],35],[[[51,[25]]],35],[[[54,[25]]],35],[[[55,[25]]],35],[[[50,[25]]],24],[[[51,[25]]],24],[[[37,[25]]],24],[[[52,[25]]],24],[[[53,[25]]],24],[[[54,[25]]],24],[[[55,[25]]],24],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[[50,[25]]],[[24,[19]]]],[[[51,[25]]],[[24,[19]]]],[[[37,[25]]],[[24,[19]]]],[[[52,[25]]],[[24,[19]]]],[[[53,[25]]],[[24,[19]]]],[[[54,[25]]],[[24,[19]]]],[[[55,[25]]],[[24,[19]]]]],"p":[[3,"Crc"],[15,"u32"],[3,"Compression"],[3,"GzBuilder"],[3,"GzEncoder"],[3,"GzHeader"],[4,"FlushCompress"],[4,"FlushDecompress"],[4,"Status"],[4,"Option"],[15,"u8"],[3,"Vec"],[8,"Into"],[3,"Compress"],[3,"CompressError"],[4,"Result"],[8,"BufRead"],[3,"CrcReader"],[15,"usize"],[3,"CrcWriter"],[3,"Decompress"],[3,"DecompressError"],[15,"bool"],[6,"Result"],[8,"Write"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[15,"str"],[3,"SystemTime"],[8,"Read"],[3,"Demand"],[3,"GzEncoder"],[3,"String"],[15,"u64"],[3,"TypeId"],[3,"GzEncoder"],[3,"DeflateEncoder"],[3,"DeflateDecoder"],[3,"GzDecoder"],[3,"ZlibEncoder"],[3,"ZlibDecoder"],[3,"MultiGzDecoder"],[3,"DeflateEncoder"],[3,"DeflateDecoder"],[3,"GzDecoder"],[3,"MultiGzDecoder"],[3,"ZlibEncoder"],[3,"ZlibDecoder"],[3,"DeflateEncoder"],[3,"DeflateDecoder"],[3,"GzDecoder"],[3,"MultiGzDecoder"],[3,"ZlibEncoder"],[3,"ZlibDecoder"]]},\
"float_ord":{"doc":"Order floating point numbers, into this ordering:","t":"DLLLLLLLLLLLLLFLLL","n":["FloatOrd","borrow","borrow_mut","clone","cmp","cmp","eq","eq","from","hash","hash","into","partial_cmp","partial_cmp","sort","try_from","try_into","type_id"],"q":["float_ord","","","","","","","","","","","","","","","","",""],"d":["A wrapper for floats, that implements total equality and …","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","Sort a slice of floats.","","",""],"i":[0,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2],"f":[0,[[]],[[]],[[[2,[1]]],[[2,[1]]]],[[[2,[3]],[2,[3]]],4],[[[2,[5]],[2,[5]]],4],[[[2,[5]],[2,[5]]],6],[[[2,[3]],[2,[3]]],6],[[]],[[[2,[3]]]],[[[2,[5]]]],[[]],[[[2,[3]],[2,[3]]],[[7,[4]]]],[[[2,[5]],[2,[5]]],[[7,[4]]]],[[]],[[],8],[[],8],[[],9]],"p":[[8,"Clone"],[3,"FloatOrd"],[15,"f32"],[4,"Ordering"],[15,"f64"],[15,"bool"],[4,"Option"],[4,"Result"],[3,"TypeId"]]},\
"font_kit":{"doc":"<code>font-kit</code> provides a common interface to the various system …","t":"AAAAAAAAAAAAAAAANNDENENNNLLLLLLLLLLLLLLLLLLLMLLLLLLLMMMLLLLLLLLLLLLNEENNNNNNNENLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLDLLLLLLLLLLLLLNENNNNNLLLLLLLLLLLLNENLLLLLLLLLLLLCENNLLLLLLLLLLLLLLMMMMNENNNLLLLLLLLLLLLLDDIQKKKLLLLLKKLLMMLLKKLKLKKLKKLLLKKKKKKKKLKMKLLLLLLKMACDGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDMLLMMLLMLLLMLLLLMMMMSSDDDIDLLLLLLLLLLLLLLLLLLLLLLLLKLLLLMLLKLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLKLKLLLLLLMLKLLLLLLLLLLLLLLLLLLLLLLLLLSSSSSSSSNSSSSNNDSSSDESSSDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMLLLLLLLLLLLLLLLLLLMICKKKKLLKAAAADLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["canvas","error","family","family_handle","family_name","file_type","font","handle","hinting","loader","loaders","metrics","outline","properties","source","sources","A8","Bilevel","Canvas","Format","GrayscaleAa","RasterizationOptions","Rgb24","Rgba32","SubpixelAa","bits_per_component","bits_per_pixel","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bytes_per_pixel","clone","clone","clone_into","clone_into","components_per_pixel","eq","eq","fmt","fmt","fmt","format","from","from","from","into","into","into","new","pixels","size","stride","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_stride","CannotAccessSource","FontLoadingError","GlyphLoadingError","Io","NoFilesystem","NoSuchFontInCollection","NoSuchGlyph","NotFound","Parse","PlatformError","SelectionError","UnknownFormat","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","provide","provide","provide","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Family","borrow","borrow_mut","fmt","fonts","from","into","is_empty","try_from","try_into","type_id","FamilyHandle","borrow","borrow_mut","fmt","fonts","from","from_font_handles","into","is_empty","new","push","try_from","try_into","type_id","Cursive","FamilyName","Fantasy","Monospace","SansSerif","Serif","Title","borrow","borrow_mut","clone","clone_into","eq","fmt","from","into","to_owned","try_from","try_into","type_id","Collection","FileType","Single","borrow","borrow_mut","clone","clone_into","eq","fmt","from","into","to_owned","try_from","try_into","type_id","Font","Handle","Memory","Path","borrow","borrow_mut","clone","clone_into","fmt","from","from_memory","from_path","into","load","to_owned","try_from","try_into","type_id","bytes","font_index","font_index","path","Full","HintingOptions","None","Vertical","VerticalSubpixel","borrow","borrow_mut","clone","clone_into","eq","fmt","from","grid_fitting_size","into","to_owned","try_from","try_into","type_id","FallbackFont","FallbackResult","Loader","NativeFont","advance","analyze_bytes","analyze_file","analyze_path","borrow","borrow","borrow_mut","borrow_mut","copy_font_data","family_name","fmt","fmt","font","fonts","from","from","from_bytes","from_file","from_handle","from_native_font","from_path","full_name","get_fallbacks","glyph_by_name","glyph_count","glyph_for_char","handle","into","into","is_monospace","load_font_table","metrics","native_font","origin","outline","postscript_name","properties","raster_bounds","rasterize_glyph","scale","supports_hinting_options","try_from","try_from","try_into","try_into","type_id","type_id","typographic_bounds","valid_len","core_text","default","Font","NativeFont","advance","advance","analyze_bytes","analyze_bytes","analyze_file","analyze_file","analyze_path","borrow","borrow_mut","clone","clone_into","copy_font_data","copy_font_data","family_name","family_name","fmt","from","from_bytes","from_bytes","from_core_graphics_font","from_file","from_file","from_handle","from_native_font","from_native_font","from_path","full_name","full_name","get_fallbacks","glyph_by_name","glyph_by_name","glyph_count","glyph_count","glyph_for_char","glyph_for_char","handle","into","is_monospace","is_monospace","load_font_table","load_font_table","metrics","metrics","native_font","native_font","origin","origin","outline","outline","postscript_name","postscript_name","properties","properties","raster_bounds","rasterize_glyph","rasterize_glyph","style_name","supports_hinting_options","supports_hinting_options","to_owned","try_from","try_into","type_id","typographic_bounds","typographic_bounds","Metrics","ascent","borrow","borrow_mut","bounding_box","cap_height","clone","clone_into","descent","fmt","from","into","line_gap","to_owned","try_from","try_into","type_id","underline_position","underline_thickness","units_per_em","x_height","CONTROL_POINT_0","CONTROL_POINT_1","Contour","Outline","OutlineBuilder","OutlineSink","PointFlags","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","close","close","cmp","complement","contains","contours","copy_to","copy_to","cubic_curve_to","cubic_curve_to","difference","empty","eq","eq","eq","extend","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","insert","intersection","intersects","into","into","into","into","into_outline","is_all","is_empty","line_to","line_to","move_to","move_to","new","new","new","not","partial_cmp","positions","push","quadratic_curve_to","quadratic_curve_to","remove","set","sub","sub_assign","symmetric_difference","take_outline","to_owned","to_owned","to_owned","to_owned","toggle","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","union","BLACK","BOLD","CONDENSED","EXPANDED","EXTRA_BOLD","EXTRA_CONDENSED","EXTRA_EXPANDED","EXTRA_LIGHT","Italic","LIGHT","MEDIUM","NORMAL","NORMAL","Normal","Oblique","Properties","SEMIBOLD","SEMI_CONDENSED","SEMI_EXPANDED","Stretch","Style","THIN","ULTRA_CONDENSED","ULTRA_EXPANDED","Weight","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","default","default","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","new","partial_cmp","partial_cmp","stretch","stretch","style","style","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","weight","weight","Source","SystemSource","all_families","all_fonts","as_any","as_mut_any","select_best_match","select_by_postscript_name","select_family_by_name","core_text","fs","mem","multi","CoreTextSource","all_families","all_families","all_fonts","all_fonts","as_any","as_mut_any","borrow","borrow_mut","from","into","new","select_best_match","select_by_postscript_name","select_by_postscript_name","select_family_by_name","select_family_by_name","try_from","try_into","type_id","FsSource","all_families","all_families","all_fonts","all_fonts","as_any","as_mut_any","borrow","borrow_mut","from","into","new","select_best_match","select_by_postscript_name","select_by_postscript_name","select_family_by_name","select_family_by_name","try_from","try_into","type_id","MemSource","add_font","add_fonts","all_families","all_families","all_fonts","all_fonts","as_any","as_mut_any","borrow","borrow_mut","empty","from","from_fonts","into","select_best_match","select_by_postscript_name","select_by_postscript_name","select_family_by_name","select_family_by_name","try_from","try_into","type_id","MultiIter","MultiIterMut","MultiSource","all_families","all_families","all_fonts","all_fonts","as_any","as_mut_any","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","find_source","find_source_mut","fmt","fmt","from","from","from","from_sources","index","index_mut","into","into","into","into_iter","into_iter","iter","iter_mut","next","next","select_best_match","select_by_postscript_name","select_by_postscript_name","select_family_by_name","select_family_by_name","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["font_kit","","","","","","","","","","","","","","","","font_kit::canvas","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","font_kit::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","font_kit::family","","","","","","","","","","","font_kit::family_handle","","","","","","","","","","","","","","font_kit::family_name","","","","","","","","","","","","","","","","","","","font_kit::file_type","","","","","","","","","","","","","","","font_kit::font","font_kit::handle","","","","","","","","","","","","","","","","","font_kit::handle::Handle","","","","font_kit::hinting","","","","","","","","","","","","","","","","","","font_kit::loader","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","font_kit::loaders","","font_kit::loaders::core_text","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","font_kit::metrics","","","","","","","","","","","","","","","","","","","","","font_kit::outline","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","font_kit::properties","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","font_kit::source","","","","","","","","","font_kit::sources","","","","font_kit::sources::core_text","","","","","","","","","","","","","","","","","","","","font_kit::sources::fs","","","","","","","","","","","","","","","","","","","","font_kit::sources::mem","","","","","","","","","","","","","","","","","","","","","","","font_kit::sources::multi","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["An in-memory bitmap surface for glyph rasterization.","Various types of errors that <code>font-kit</code> can return.","Defines a set of faces that vary in weight, width or slope.","Encapsulates the information needed to locate and open the …","A possible value for the <code>font-family</code> CSS property.","The type of a font file: either a single font or a …","A font face loaded into memory.","Encapsulates the information needed to locate and open a …","Specifies how hinting (grid fitting) is to be performed …","Provides a common interface to the platform-specific API …","The different system services that can load and rasterize …","Various metrics that apply to the entire font.","Bézier paths.","Properties that specify which font in a family to use: …","A database of installed fonts that can be queried.","Various databases of installed fonts that can be queried.","A8.","“Black-and-white” rendering. Each pixel is either …","An in-memory bitmap surface for glyph rasterization.","The image format for the canvas.","Grayscale antialiasing. Only one channel is used.","The antialiasing strategy that should be used when …","R8G8B8, little-endian.","Premultiplied R8G8B8A8, little-endian.","Subpixel RGB antialiasing, for LCD screens.","Returns the number of bits per color channel that this …","Returns the number of bits per pixel that this image …","","","","","","","Returns the number of bytes per pixel that this image …","","","","","Returns the number of color channels per pixel that this …","","","","","","The image format of the canvas.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new blank canvas with the given pixel size and …","The raw pixel data.","The size of the buffer, in pixels.","The number of <em>bytes</em> between successive rows.","","","","","","","","","","","","Creates a new blank canvas with the given pixel size, …","The source was inaccessible because of an I/O or similar …","Reasons why a loader might fail to load a font.","Reasons why a font might fail to load a glyph.","A disk or similar I/O error occurred while attempting to …","Attempted to load a font from the filesystem, but there is …","Attempted to load an invalid index in a TrueType or …","The font didn’t contain a glyph with that ID.","No font matching the given query was found.","Attempted to load a malformed or corrupted font.","A platform function returned an error.","Reasons why a source might fail to look up a font or fonts.","The data was of a format the loader didn’t recognize.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Defines a set of faces that vary in weight, width or slope.","","","","Returns the individual fonts in this family.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns true if and only if this family is empty.","","","","Encapsulates the information needed to locate and open the …","","","","Returns all the handles in this set.","Returns the argument unchanged.","Creates a set of font family handles.","Calls <code>U::from(self)</code>.","Returns true if and only if this set has no fonts in it.","Creates an empty set of family handles.","Adds a new handle to this set.","","","","Glyphs in cursive fonts generally use a more informal …","A possible value for the <code>font-family</code> CSS property.","Fantasy fonts are primarily decorative or expressive fonts …","The sole criterion of a monospace font is that all glyphs …","Glyphs in sans-serif fonts, as the term is used in CSS, …","Serif fonts represent the formal text style for a script.","A specific font family, specified by name: e.g. “Arial”…","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","The font file represents a collection of fonts (<code>.ttc</code>, <code>.otc</code>…","The type of a font file: either a single font or a …","The font file represents a single font (<code>.ttf</code>, <code>.otf</code>, <code>.woff</code>, …","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Encapsulates the information needed to locate and open a …","A font in memory.","A font on disk referenced by a path.","","","","","","Returns the argument unchanged.","Creates a new handle from raw TTF/OTF/etc. data in memory.","Creates a new handle from a path.","Calls <code>U::from(self)</code>.","A convenience method to load this handle with the default …","","","","","The raw TrueType/OpenType/etc. data that makes up this …","The index of the font, if the path refers to a collection.","The index of the font, if the memory consists of a …","The path to the font.","Hinting is performed in both horizontal and vertical …","Specifies how hinting (grid fitting) is to be performed …","No hinting is performed unless absolutely necessary to …","Hinting is performed only in the vertical direction. The …","Hinting is performed only in the vertical direction, and …","","","","","","","Returns the argument unchanged.","Returns the point size that will be used for grid fitting, …","Calls <code>U::from(self)</code>.","","","","","A single font record for a fallback query result.","The result of a fallback query.","Provides a common interface to the platform-specific API …","The handle that the API natively uses to represent a font.","Returns the distance from the origin of the glyph with the …","Determines whether a blob of raw font data represents a …","Determines whether a file represents a supported font, …","Determines whether a path points to a supported font, and, …","","","","","Attempts to return the raw font data (contents of the font …","Returns the name of the font family.","","","The font.","A list of fallback fonts.","Returns the argument unchanged.","Returns the argument unchanged.","Loads a font from raw font data (the contents of a <code>.ttf</code>/…","Loads a font from a <code>.ttf</code>/<code>.otf</code>/etc. file.","Loads the font pointed to by a handle.","Creates a font from a native API handle.","Loads a font from the path to a <code>.ttf</code>/<code>.otf</code>/etc. file.","Returns the full name of the font (also known as “…","Get font fallback results for the given text and locale.","Returns the glyph ID for the specified glyph name.","Returns the number of glyphs in the font.","Returns the usual glyph ID for a Unicode character.","Returns a handle to this font, if possible.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if and only if the font is monospace …","Returns the OpenType font table with the given tag, if the …","Retrieves various metrics that apply to the entire font.","Returns the wrapped native font handle.","Returns the amount that the given glyph should be …","Sends the vector path for a glyph to a sink.","Returns the PostScript name of the font. This should be …","Returns the values of various font properties, …","Returns the pixel boundaries that the glyph will take up …","Rasterizes a glyph to a canvas with the given size and …","A scale factor that should be applied to the fallback font.","Returns true if and only if the font loader can perform …","","","","","","","Returns the boundaries of a glyph in font units. The …","The fallback list is valid for this slice of the given …","A loader that uses Apple’s Core Text API to load and …","","A loader that uses Apple’s Core Text API to load and …","Core Text’s representation of a font.","Returns the distance from the origin of the glyph with the …","","Determines whether a file represents a supported font, and …","","Determines whether a file represents a supported font, and …","","Determines whether a path points to a supported font, and …","","","","","","Attempts to return the raw font data (contents of the font …","Returns the name of the font family.","","","Returns the argument unchanged.","Loads a font from raw font data (the contents of a <code>.ttf</code>/…","","Creates a font from a Core Graphics font handle.","Loads a font from a <code>.ttf</code>/<code>.otf</code>/etc. file.","","Loads the font pointed to by a handle.","Creates a font from a native API handle.","","Loads a font from the path to a <code>.ttf</code>/<code>.otf</code>/etc. file.","","Returns the full name of the font (also known as “…","","","Returns the glyph ID for the specified glyph name.","Returns the number of glyphs in the font.","","Returns the usual glyph ID for a Unicode character.","","Returns a handle to this font, if possible.","Calls <code>U::from(self)</code>.","","Returns true if and only if the font is monospace …","Returns the raw contents of the OpenType table with the …","","Retrieves various metrics that apply to the entire font.","","","Returns the wrapped native font handle.","","Returns the amount that the given glyph should be …","Sends the vector path for a glyph to a path builder.","","Returns the PostScript name of the font. This should be …","","Returns the values of various font properties, …","","Returns the pixel boundaries that the glyph will take up …","","Rasterizes a glyph to a canvas with the given size and …","Returns the name of the font style, according to Core Text.","","Returns true if and only if the font loader can perform …","","","","","Returns the boundaries of a glyph in font units.","","Various metrics that apply to the entire font.","The maximum amount the font rises above the baseline, in …","","","A rectangle that surrounds all bounding boxes of all …","The approximate amount that uppercase letters rise above …","","","The maximum amount the font descends below the baseline, …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Distance between baselines, in font units.","","","","","The suggested distance of the top of the underline from …","A suggested value for the underline thickness, in font …","The number of font units per em.","The approximate amount that non-ascending lowercase …","This point is the control point of a quadratic Bézier …","This point is the second control point of a cubic Bézier …","A single curve or subpath within a glyph outline.","A glyph vector outline or path.","Accumulates Bézier path rendering commands into an <code>Outline</code>…","Receives Bézier path rendering commands.","Flags that specify what type of point the corresponding …","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","","Closes the path, returning to the first point in it.","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","The individual subpaths that make up this outline.","Sends this outline to an <code>OutlineSink</code>.","Sends this contour to an <code>OutlineSink</code>.","Draws a cubic Bézier curve to a point.","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","Flags that specify what type of point the corresponding …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this outline builder and returns the resulting …","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Draws a line to a point.","","Moves the pen to a point.","","Creates a new empty outline.","Creates a new empty contour.","Creates a new empty <code>OutlineBuilder</code>.","Returns the complement of this set of flags.","","Positions of each point.","Adds a new point with the given flags to the contour.","Draws a quadratic Bézier curve to a point.","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Resets the outline builder and returns the old outline.","","","","","Toggles the specified flags in-place.","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Black weight (900), the thickest value.","Bold weight (700).","Condensed width (75%).","Expanded width (125%).","Extra-bold weight (800).","Extra-condensed width (62.5%).","Extra-expanded width (150%).","Extra light weight (200).","A form that is generally cursive in nature.","Light weight (300).","Medium weight (500, higher than normal).","Normal (400).","Normal width (100%).","A face that is neither italic not obliqued.","A typically-sloped version of the regular face.","Properties that specify which font in a family to use: …","Semibold weight (600).","Semi-condensed width (87.5%).","Semi-expanded width (112.5%).","The width of a font as an approximate fraction of the …","Allows italic or oblique faces to be selected.","Thin weight (100), the thinnest value.","Ultra-condensed width (50%), the narrowest possible.","Ultra-expanded width (200%), the widest possible.","The degree of blackness or stroke thickness of a font. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Initializes a property set to its default values: normal …","","","Sets the value of the stretch property and returns this …","The font stretchiness, as defined in CSS.","Sets the value of the style property and returns this …","The font style, as defined in CSS.","","","","","","","","","","","","","","","","","","Sets the value of the weight property and returns this …","The font weight, as defined in CSS.","A database of installed fonts that can be queried.","","Returns the names of all families installed on the system.","Returns paths of all fonts installed on the system.","Accesses this <code>Source</code> as <code>Any</code>, which allows downcasting back …","Accesses this <code>Source</code> as <code>Any</code>, which allows downcasting back …","Performs font matching according to the CSS Fonts Level 3 …","Selects a font by PostScript name, which should be a …","Looks up a font family by name and returns the handles of …","A source that contains the installed fonts on macOS.","A source that loads fonts from a directory or directories …","A source that keeps fonts in memory.","A source that encapsulates multiple sources and allows …","A source that contains the installed fonts on macOS.","","Returns the names of all families installed on the system.","","Returns paths of all fonts installed on the system.","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Opens a new connection to the system font source.","Performs font matching according to the CSS Fonts Level 3 …","","Selects a font by PostScript name, which should be a …","","Looks up a font family by name and returns the handles of …","","","","A source that loads fonts from a directory or directories …","","Returns the names of all families installed on the system.","Returns paths of all fonts installed on the system.","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Opens the default set of directories on this platform and …","Performs font matching according to the CSS Fonts Level 3 …","Selects a font by PostScript name, which should be a …","","","Looks up a font family by name and returns the handles of …","","","","A source that keeps fonts in memory.","Add an existing font handle to a <code>MemSource</code>.","Add a number of existing font handles to a <code>MemSource</code>.","","Returns the names of all families installed on the system.","","Returns paths of all fonts installed on the system.","","","","","Creates a new empty memory source.","Returns the argument unchanged.","Creates a new memory source that contains the given set of …","Calls <code>U::from(self)</code>.","Performs font matching according to the CSS Fonts Level 3 …","","Selects a font by PostScript name, which should be a …","","Looks up a font family by name and returns the handles of …","","","","An iterator over the sources in a <code>MultiSource</code>.","An iterator over the mutable sources in a <code>MultiSource</code>.","A source that encapsulates multiple sources and allows …","Returns the names of all families installed on the system.","","","Returns paths of all fonts installed on the system.","","","","","","","","","A convenience method to get the first source with the …","A convenience method to get the first source with the …","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new source that contains all the fonts in the …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns an iterator over the contained sources.","Returns an iterator over the contained sources with …","","","Performs font matching according to the CSS Fonts Level 3 …","Selects a font by PostScript name, which should be a …","","","Looks up a font family by name and returns the handles of …","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,0,0,3,0,1,1,3,1,1,5,1,3,5,1,3,1,1,3,1,3,1,1,3,5,1,3,5,5,1,3,5,1,3,5,5,5,5,1,3,5,1,3,5,1,3,5,1,3,5,13,0,0,14,14,14,12,13,14,12,0,14,14,12,13,14,12,13,12,13,12,13,12,13,14,14,12,12,13,13,14,14,12,13,14,12,13,14,12,13,12,13,14,12,13,14,12,13,14,12,13,14,12,13,0,18,18,18,18,18,18,18,18,18,18,0,19,19,19,19,19,19,19,19,19,19,19,19,19,21,0,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,0,22,22,22,22,22,22,22,22,22,22,22,22,22,0,0,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,68,69,68,69,28,0,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,0,0,0,70,70,70,70,70,34,35,34,35,70,70,34,35,35,34,34,35,70,70,70,70,70,70,70,70,70,70,70,34,35,70,70,70,70,70,70,70,70,70,70,35,70,34,35,34,35,34,35,70,34,0,0,0,0,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,0,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,49,49,0,0,0,0,0,49,49,49,49,49,49,49,49,50,51,49,52,50,51,49,52,50,51,49,52,50,51,49,52,71,52,49,49,49,50,50,51,71,52,49,49,50,51,49,49,51,50,51,49,49,49,49,49,52,50,51,49,52,49,49,49,49,49,49,49,49,50,51,49,52,52,49,49,71,52,71,52,50,51,52,49,49,51,51,71,52,49,49,49,49,49,52,50,51,49,52,49,50,51,49,52,50,51,49,52,50,51,49,52,49,57,57,58,58,57,58,58,57,56,57,57,57,58,56,56,0,57,58,58,0,0,57,58,58,0,40,56,57,58,40,56,57,58,40,56,57,58,40,56,57,58,40,56,57,58,40,56,57,58,40,56,56,57,58,40,56,57,58,40,56,57,58,40,57,58,40,40,40,40,40,56,57,58,56,40,56,57,58,40,56,57,58,40,56,57,58,40,40,0,0,67,67,67,67,67,67,67,0,0,0,0,0,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,0,0,0,64,64,64,64,64,64,64,65,66,64,65,66,64,64,65,66,64,65,66,64,64,64,64,65,66,65,66,64,64,65,66,64,64,64,64,64,64,65,66,64,65,66,64,65,66],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[1,2],[[]],[[]],[[]],[[]],[[]],[[]],[1,2],[1,1],[3,3],[[]],[[]],[1,2],[[1,1],4],[[3,3],4],[[5,6],7],[[1,6],7],[[3,6],7],0,[[]],[[]],[[]],[[]],[[]],[[]],[[8,1],5],0,0,0,[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],[[8,11,1],5],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[12,12],[13,13],[[]],[[]],[[12,12],4],[[13,13],4],[[14,6],7],[[14,6],7],[[12,6],7],[[12,6],7],[[13,6],7],[[13,6],7],[[]],[15,14],[[]],[[]],[[]],[[]],[[]],[16],[16],[16],[[]],[[]],[[],17],[[],17],[[],17],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],0,[[]],[[]],[[18,6],7],[18],[[]],[[]],[18,4],[[],9],[[],9],[[],10],0,[[]],[[]],[[19,6],7],[19],[[]],[[],19],[[]],[19,4],[[],19],[[19,20]],[[],9],[[],9],[[],10],0,0,0,0,0,0,0,[[]],[[]],[21,21],[[]],[[21,21],4],[[21,6],7],[[]],[[]],[[]],[[],9],[[],9],[[],10],0,0,0,[[]],[[]],[22,22],[[]],[[22,22],4],[[22,6],7],[[]],[[]],[[]],[[],9],[[],9],[[],10],0,0,0,0,[[]],[[]],[20,20],[[]],[[20,6],7],[[]],[[[24,[[23,[2]]]],25],20],[[26,25],20],[[]],[20,[[9,[27,14]]]],[[]],[[],9],[[],9],[[],10],0,0,0,0,0,0,0,0,0,[[]],[[]],[28,28],[[]],[[28,28],4],[[28,6],7],[[]],[28,[[30,[29]]]],[[]],[[]],[[],9],[[],9],[[],10],0,0,0,0,[25,[[9,[31,12]]]],[[[24,[[23,[2]]]]],[[9,[22,14]]]],[32,[[9,[22,14]]]],[[],[[9,[22,14]]]],[[]],[[]],[[]],[[]],[[],[[30,[[24,[[23,[2]]]]]]]],[[],17],[[[34,[33]],6],7],[[[35,[33]],6],7],0,0,[[]],[[]],[[[24,[[23,[2]]]],25],[[9,[14]]]],[[32,25],[[9,[14]]]],[20,[[9,[14]]]],[[]],[25,[[9,[14]]]],[[],17],[[36,36],34],[36,[[30,[25]]]],[[],25],[37,[[30,[25]]]],[[],[[30,[20]]]],[[]],[[]],[[],4],[25,[[30,[38]]]],[[],39],[[]],[25,[[9,[31,12]]]],[[25,28],[[9,[12]]]],[[],[[30,[17]]]],[[],40],[[25,29,41,28,3],[[9,[42,12]]]],[[5,25,29,41,28,3],[[9,[12]]]],0,[[28,4],4],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[25,[[9,[43,12]]]],0,0,0,0,0,[[27,25],[[9,[31,12]]]],[[27,25],[[9,[31,12]]]],[[[24,[[23,[2]]]]],[[9,[22,14]]]],[[[24,[[23,[2]]]]],[[9,[22,14]]]],[32,[[9,[22,14]]]],[32,[[9,[22,14]]]],[[[45,[44]]],[[9,[22,14]]]],[[]],[[]],[27,27],[[]],[27,[[30,[[24,[[23,[2]]]]]]]],[27,[[30,[[24,[[23,[2]]]]]]]],[27,17],[27,17],[[27,6],[[9,[46]]]],[[]],[[[24,[[23,[2]]]],25],[[9,[27,14]]]],[[[24,[[23,[2]]]],25],[[9,[27,14]]]],[47,27],[[32,25],[[9,[27,14]]]],[[32,25],[[9,[27,14]]]],[20,[[9,[27,14]]]],[48,27],[[],27],[[[45,[44]],25],[[9,[27,14]]]],[27,17],[27,17],[[27,36,36],[[34,[27]]]],[[27,36],[[30,[25]]]],[[27,36],[[30,[25]]]],[27,25],[27,25],[[27,37],[[30,[25]]]],[[27,37],[[30,[25]]]],[27,[[30,[20]]]],[[]],[27,4],[27,4],[[27,25],[[30,[38]]]],[[27,25],[[30,[38]]]],[27,39],[27,39],[27],[27,48],[[27,25],[[9,[31,12]]]],[[27,25],[[9,[31,12]]]],[[27,25,28],[[9,[12]]]],[[27,25,28],[[9,[12]]]],[27,[[30,[17]]]],[27,[[30,[17]]]],[27,40],[27,40],[[27,25,29,41,28,3],[[9,[42,12]]]],[[27,5,25,29,41,28,3],[[9,[12]]]],[[27,5,25,29,41,28,3],[[9,[12]]]],[27,17],[[27,28,4],4],[[27,28,4],4],[[]],[[],9],[[],9],[[],10],[[27,25],[[9,[43,12]]]],[[27,25],[[9,[43,12]]]],0,0,[[]],[[]],0,0,[39,39],[[]],0,[[39,6],7],[[]],[[]],0,[[]],[[],9],[[],9],[[],10],0,0,0,0,0,0,0,0,0,0,0,[[],49],[[49,49],49],[[49,49]],[[49,49],49],[[49,49]],[49,2],[[49,49],49],[[49,49]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[50,50],[51,51],[49,49],[52,52],[[]],[[]],[[]],[[]],[[]],[52],[[49,49],53],[49,49],[[49,49],4],0,[50],[51],[[54,31]],[[52,54,31]],[[49,49],49],[[],49],[[50,50],4],[[51,51],4],[[49,49],4],[[49,55]],0,[[50,6],7],[[51,6],7],[[49,6],7],[[49,6],7],[[49,6],7],[[49,6],7],[[49,6],7],[[52,6],7],[[]],[[]],[[]],[[]],[2,[[30,[49]]]],[2,49],[2,49],[55,49],[49],[[49,49]],[[49,49],49],[[49,49],4],[[]],[[]],[[]],[[]],[52,50],[49,4],[49,4],[31],[[52,31]],[31],[[52,31]],[[],50],[[],51],[[],52],[49,49],[[49,49],[[30,[53]]]],0,[[51,31,49]],[[31,31]],[[52,31,31]],[[49,49]],[[49,49,4]],[[49,49],49],[[49,49]],[[49,49],49],[52,50],[[]],[[]],[[]],[[]],[[49,49]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],[[],10],[[49,49],49],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[40,40],[56,56],[57,57],[58,58],[[]],[[]],[[]],[[]],[[],40],[[],56],[[],57],[[],58],[[40,40],4],[[56,56],4],[[57,57],4],[[58,58],4],[[40,6],7],[[56,6],7],[[56,6],7],[[57,6],7],[[58,6],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],40],[[57,57],[[30,[53]]]],[[58,58],[[30,[53]]]],[[40,58],40],0,[[40,56],40],0,[[]],[[]],[[]],[[]],[[],17],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],[[],10],[[40,57],40],0,0,0,[[],[[9,[[23,[17]],13]]]],[[],[[9,[[23,[20]],13]]]],[[],59],[[],59],[40,[[9,[20,13]]]],[36,[[9,[20,13]]]],[36,[[9,[19,13]]]],0,0,0,0,0,[60,[[9,[[23,[17]],13]]]],[60,[[9,[[23,[17]],13]]]],[60,[[9,[[23,[20]],13]]]],[60,[[9,[[23,[20]],13]]]],[60,59],[60,59],[[]],[[]],[[]],[[]],[[],60],[[60,40],[[9,[20,13]]]],[[60,36],[[9,[20,13]]]],[[60,36],[[9,[20,13]]]],[[60,36],[[9,[19,13]]]],[[60,36],[[9,[19,13]]]],[[],9],[[],9],[[],10],0,[61,[[9,[[23,[17]],13]]]],[61,[[9,[[23,[17]],13]]]],[61,[[9,[[23,[20]],13]]]],[61,[[9,[[23,[20]],13]]]],[61,59],[61,59],[[]],[[]],[[]],[[]],[[],61],[[61,40],[[9,[20,13]]]],[[61,36],[[9,[20,13]]]],[[61,36],[[9,[20,13]]]],[[61,36],[[9,[19,13]]]],[[61,36],[[9,[19,13]]]],[[],9],[[],9],[[],10],0,[[62,20],[[9,[27,14]]]],[[62,63],[[9,[14]]]],[62,[[9,[[23,[17]],13]]]],[62,[[9,[[23,[17]],13]]]],[62,[[9,[[23,[20]],13]]]],[62,[[9,[[23,[20]],13]]]],[62,59],[62,59],[[]],[[]],[[],62],[[]],[[],[[9,[62,14]]]],[[]],[[62,40],[[9,[20,13]]]],[[62,36],[[9,[20,13]]]],[[62,36],[[9,[20,13]]]],[[62,36],[[9,[19,13]]]],[[62,36],[[9,[19,13]]]],[[],9],[[],9],[[],10],0,0,0,[64,[[9,[[23,[17]],13]]]],[64,[[9,[[23,[17]],13]]]],[64,[[9,[[23,[20]],13]]]],[64,[[9,[[23,[20]],13]]]],[64,59],[64,59],[[]],[[]],[[]],[[]],[[]],[[]],[64,30],[64,30],[[65,6],7],[[66,6],7],[[]],[[]],[[]],[[[23,[[38,[67]]]]],64],[[64,11]],[[64,11]],[[]],[[]],[[]],[[]],[[]],[64,65],[64,66],[65,30],[66,30],[[64,40],[[9,[20,13]]]],[[64,36],[[9,[20,13]]]],[[64,36],[[9,[20,13]]]],[[64,36],[[9,[19,13]]]],[[64,36],[[9,[19,13]]]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10]],"p":[[4,"Format"],[15,"u8"],[4,"RasterizationOptions"],[15,"bool"],[3,"Canvas"],[3,"Formatter"],[6,"Result"],[3,"Vector2I"],[4,"Result"],[3,"TypeId"],[15,"usize"],[4,"GlyphLoadingError"],[4,"SelectionError"],[4,"FontLoadingError"],[3,"Error"],[3,"Demand"],[3,"String"],[3,"Family"],[3,"FamilyHandle"],[4,"Handle"],[4,"FamilyName"],[4,"FileType"],[3,"Vec"],[3,"Arc"],[15,"u32"],[3,"PathBuf"],[3,"Font"],[4,"HintingOptions"],[15,"f32"],[4,"Option"],[3,"Vector2F"],[3,"File"],[8,"Debug"],[3,"FallbackResult"],[3,"FallbackFont"],[15,"str"],[15,"char"],[3,"Box"],[3,"Metrics"],[3,"Properties"],[3,"Transform2F"],[3,"RectI"],[3,"RectF"],[3,"Path"],[8,"AsRef"],[3,"Error"],[3,"CGFont"],[6,"NativeFont"],[3,"PointFlags"],[3,"Outline"],[3,"Contour"],[3,"OutlineBuilder"],[4,"Ordering"],[3,"LineSegment2F"],[8,"IntoIterator"],[4,"Style"],[3,"Weight"],[3,"Stretch"],[8,"Any"],[3,"CoreTextSource"],[3,"FsSource"],[3,"MemSource"],[8,"Iterator"],[3,"MultiSource"],[3,"MultiIter"],[3,"MultiIterMut"],[8,"Source"],[13,"Memory"],[13,"Path"],[8,"Loader"],[8,"OutlineSink"]]},\
"foreign_types":{"doc":"A framework for Rust wrappers over C APIs.","t":"QQIIDQKLLLOLKLLLLLL","n":["CType","CType","ForeignType","ForeignTypeRef","Opaque","Ref","as_ptr","as_ptr","borrow","borrow_mut","foreign_type","from","from_ptr","from_ptr","from_ptr_mut","into","try_from","try_into","type_id"],"q":["foreign_types","","","","","","","","","","","","","","","","","",""],"d":["The raw C type.","The raw C type.","A type implemented by wrappers over foreign types.","A trait implemented by types which reference borrowed …","An opaque type used to define <code>ForeignTypeRef</code> types.","The type representing a reference to this type.","Returns a raw pointer to the wrapped value.","Returns a raw pointer to the wrapped value.","","","A macro to easily define wrappers for foreign types.","Returns the argument unchanged.","Constructs an instance of this type from its raw type.","Constructs a shared instance of this type from its raw …","Constructs a mutable reference of this type from its raw …","Calls <code>U::from(self)</code>.","","",""],"i":[3,4,0,0,0,3,3,4,5,5,0,5,3,4,4,5,5,5,5],"f":[0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[],1],[[],1],[[],2]],"p":[[4,"Result"],[3,"TypeId"],[8,"ForeignType"],[8,"ForeignTypeRef"],[3,"Opaque"]]},\
"foreign_types_shared":{"doc":"Internal crate used by foreign-types","t":"QQIIDQKLLLLKLLLLLL","n":["CType","CType","ForeignType","ForeignTypeRef","Opaque","Ref","as_ptr","as_ptr","borrow","borrow_mut","from","from_ptr","from_ptr","from_ptr_mut","into","try_from","try_into","type_id"],"q":["foreign_types_shared","","","","","","","","","","","","","","","","",""],"d":["The raw C type.","The raw C type.","A type implemented by wrappers over foreign types.","A trait implemented by types which reference borrowed …","An opaque type used to define <code>ForeignTypeRef</code> types.","The type representing a reference to this type.","Returns a raw pointer to the wrapped value.","Returns a raw pointer to the wrapped value.","","","Returns the argument unchanged.","Constructs an instance of this type from its raw type.","Constructs a shared instance of this type from its raw …","Constructs a mutable reference of this type from its raw …","Calls <code>U::from(self)</code>.","","",""],"i":[3,4,0,0,0,3,3,4,5,5,5,3,4,4,5,5,5,5],"f":[0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[[],1],[[],2]],"p":[[4,"Result"],[3,"TypeId"],[8,"ForeignType"],[8,"ForeignTypeRef"],[3,"Opaque"]]},\
"gif":{"doc":"GIF en- and decoding library Build Status","t":"NDNNNENNENNNNNDEDEDEDEENEENNNDNNNNNNNNDSNNNENNNDNNNNNNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLMLMLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLMMM","n":["Any","AnyExtension","Application","Background","BackgroundColor","Block","BlockFinished","BlockStart","ColorOutput","Comment","Control","Control","Data","DataEnd","DecodeOptions","Decoded","Decoder","DecodingError","DecodingFormatError","DisposalMethod","Encoder","EncodingError","Extension","Extension","ExtensionData","Extensions","Finite","Format","Format","Frame","Frame","GlobalPalette","Image","Indexed","Infinite","Io","Io","Keep","MemoryLimit","NONE","Nothing","Previous","RGBA","Repeat","Repetitions","Save","Skip","StreamingDecoder","SubBlockFinished","Text","Trailer","Trailer","V87a","V89a","Version","allow_unknown_blocks","bg_color","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer","buffer_size","build","check_frame_consistency","check_lzw_end_code","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","current_frame","current_frame_mut","default","delay","dispose","drop","eq","eq","eq","eq","eq","eq","eq","fill_buffer","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_indexed_pixels","from_palette_pixels","from_rgb","from_rgb_speed","from_rgba","from_rgba_speed","from_u8","from_u8","from_u8","get_mut","get_ref","global_palette","hash","hash","height","height","height","interlaced","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_inner","into_known","last_ext","left","line_length","needs_user_input","new","new","new","new","new_control_ext","next_frame_info","palette","palette","provide","provide","provide","read_info","read_into_buffer","read_next_frame","set_color_output","set_extensions","set_memory_limit","set_repeat","source","source","source","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","top","transparent","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","version","width","width","width","write_extension","write_frame","write_global_palette","write_raw_extension","delay","flags","trns"],"q":["gifgif::ExtensionData","",""],"d":["StreamingDecoder is not required to take any action.","A newtype wrapper around an arbitrary extension ID.","Application extension.","Restore to background color.","Index of the background color in the global palette.","Known GIF block labels.","Decoded the last (or only) sub-block of a block.","The start of a block.","StreamingDecoder configuration parameters Output mode for …","Comment extension.","Control extension. Use <code>ExtensionData::new_control_ext</code> to …","Control extension.","Decoded some data of the current frame.","No more data available the current frame.","Options for opening a GIF decoder.","Indicates whether a certain object has been decoded","GIF decoder","Decoding error.","An error returned in the case of the image not being …","Disposal method","GIF encoder.","Encoding error.","Known GIF extension labels.","Extension block.","Extension data.","StreamingDecoder configuration parameters Configures how …","Finite number of repetitions","Returned if the image is found to be malformed.","Returned if the to image is not encodable as a gif.","A GIF frame","Decoded all information of the next frame.","Global palette.","Image block.","The decoder returns the raw indexed data.","Infinite number of repetitions","Wraps <code>std::io::Error</code>.","Wraps <code>std::io::Error</code>.","Do not dispose.","StreamingDecoder configuration parameters Memory limit in …","Enforce no memory limit.","Decoded nothing.","Restore to previous.","The decoder expands the image data to 32bit RGBA. This …","Number of repetitions","Sets the number of repetitions","Saves all extention data","Skips the data of unknown extensions and extracts the data …","GIF decoder which supports streaming","Decoded a sub-block. More sub-block are available.","Plain Text extension.","Image trailer.","Decoded the image trailer.","Version 87a, from May 1987.","Version 89a, from July 1989.","One version number of the GIF standard.","Configure if unknown blocks are allowed to be decoded.","Index of the background color in the global palette","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Buffer containing the image data. Only indices unless …","Output buffer size","Return a builder that allows configuring limits etc.","Configure if frames must be within the screen descriptor.","Configure if LZW encoded blocks must end with a marker end …","","","","","","","","","","","","","","","","","","","","","Current frame info as a ref.","Current frame info as a mutable ref.","","Frame delay in units of 10 ms.","Disposal method.","","","","","","","","","Reads data of the current frame into a pre-allocated …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Creates a frame from indexed pixels in the global palette.","Creates a frame from a palette and indexed pixels.","Creates a frame from pixels in RGB format.","Creates a frame from pixels in RGB format.","Creates a frame from pixels in RGBA format.","Creates a frame from pixels in RGBA format.","Converts <code>u8</code> to <code>Option&lt;Self&gt;</code>","Converts <code>u8</code> to <code>Option&lt;Self&gt;</code>","Converts <code>u8</code> to a <code>Extension</code> if it is known.","Gets a mutable reference to the writer instance used by …","Gets a reference to the writer instance used by this …","The global color palette","","","Height of the image","Height of the image","Height of the frame.","True if the image is interlaced.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns writer instance used by this encoder","Decode the label as a known extension.","Returns the data of the last extension that has been …","Offset from the left border of the canvas.","Line length of the current frame","True if the frame needs user input to be displayed.","Creates a new streaming decoder","Create a new decoder with default options.","Creates a new encoder.","Creates a new decoder builder","Constructor for control extension data.","Returns the next frame info","Returns the color palette relevant for the current (next) …","Frame local color palette if available.","","","","Reads the logical screen descriptor including the global …","Reads the data of the current frame into a pre-allocated …","Reads the next frame from the image.","Configure how color data is decoded.","Configure whether extensions are saved or skipped.","Configure a memory limit for decoding.","Write an extension block that signals a repeat behaviour.","","","","","","","","","","","","","","","","","Offset from the top border of the canvas.","Transparent index (if available).","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Updates the internal state of the decoder. ","The version number of the GIF standard used in this image.","Width of the image","Width of the image","Width of the frame.","Writes an extension to the image.","Writes a frame to the image.","Writes the global color palette.","Writes a raw extension to the image.","Frame delay.","Flags.","Transparent index."],"i":[6,0,9,6,24,0,24,24,0,9,31,9,24,24,0,0,0,0,0,0,0,0,0,7,0,0,14,19,25,0,24,24,7,12,14,19,25,6,0,13,24,6,12,0,31,18,18,0,24,9,7,24,11,11,0,1,3,15,3,31,17,6,7,8,9,10,23,19,18,24,11,12,13,1,25,14,15,3,31,17,6,7,8,9,10,23,19,18,24,11,12,13,1,25,14,10,3,3,1,1,6,7,8,9,10,11,12,13,1,14,6,7,8,9,10,11,12,13,1,14,15,15,10,10,10,17,6,7,8,9,18,11,12,3,6,7,8,9,10,23,23,19,19,18,24,11,12,13,1,25,25,14,15,3,31,17,6,7,8,8,9,10,23,19,19,19,18,24,11,12,13,1,25,25,14,10,10,10,10,10,10,6,7,9,17,17,3,8,11,15,3,10,10,15,3,31,17,6,7,8,9,10,23,19,18,24,11,12,13,1,25,14,17,8,15,10,3,10,15,3,17,1,31,3,3,10,23,19,25,1,3,3,1,15,1,17,23,19,25,6,7,8,9,10,11,12,13,1,14,23,19,25,10,10,15,3,31,17,6,7,8,9,10,23,19,18,24,11,12,13,1,25,14,15,3,31,17,6,7,8,9,10,23,19,18,24,11,12,13,1,25,14,15,3,31,17,6,7,8,9,10,23,19,18,24,11,12,13,1,25,14,15,15,15,3,10,17,17,17,17,37,37,37],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],[3,[[5,[4]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[3,4],[[],1],[[1,2]],[[1,2]],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[1,1],[14,14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[15,10],[15,10],[[],10],0,0,[[[17,[16]]]],[[6,6],2],[[7,7],2],[[8,8],2],[[9,9],2],[[18,18],2],[[11,11],2],[[12,12],2],[3,[[20,[2,19]]]],[[6,21],22],[[7,21],22],[[8,21],22],[[9,21],22],[[10,21],22],[[23,21],22],[[23,21],22],[[19,21],22],[[19,21],22],[[18,21],22],[[24,21],22],[[11,21],22],[[12,21],22],[[13,21],22],[[1,21],22],[[25,21],22],[[25,21],22],[[14,21],22],[[]],[[]],[[]],[[]],[[]],[[]],[9,8],[[]],[[]],[[]],[[]],[23,19],[26,19],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[26,25],[[]],[[]],[[27,27,[5,[28]]],10],[[27,27,[5,[28]]],10],[[27,27],10],[[27,27,29],10],[[27,27],10],[[27,27,29],10],[28,[[5,[6]]]],[28,[[5,[7]]]],[28,[[5,[9]]]],[[[17,[16]]]],[[[17,[16]]]],[3,5],[8],[11],[15,27],[3,27],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[17,[16]]],[[30,[16]]]],[8,[[5,[9]]]],[15],0,[3,4],0,[[],15],[[],[[20,[3,19]]]],[[16,27,27],[[20,[[17,[16]],25]]]],[[],1],[[27,6,2,[5,[28]]],31],[3,[[20,[[5,[10]],19]]]],[3,[[20,[19]]]],0,[32],[32],[32],[[1,33],[[20,[[3,[33]],19]]]],[3,[[20,[19]]]],[3,[[20,[[5,[10]],19]]]],[[1,12]],[[15,18]],[[1,13]],[[[17,[16]],14],[[20,[25]]]],[23,[[5,[34]]]],[19,[[5,[34]]]],[25,[[5,[34]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],35],[[],35],[[],35],0,0,[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[15,[[20,[19]]]],[15,11],[15,27],[3,27],0,[[[17,[16]],31],[[20,[25]]]],[[[17,[16]],10],[[20,[25]]]],[[[17,[16]]],[[20,[[17,[16]],25]]]],[[[17,[16]],8],30],0,0,0],"p":[[3,"DecodeOptions"],[15,"bool"],[3,"Decoder"],[15,"usize"],[4,"Option"],[4,"DisposalMethod"],[4,"Block"],[3,"AnyExtension"],[4,"Extension"],[3,"Frame"],[4,"Version"],[4,"ColorOutput"],[3,"MemoryLimit"],[4,"Repeat"],[3,"StreamingDecoder"],[8,"Write"],[3,"Encoder"],[4,"Extensions"],[4,"DecodingError"],[4,"Result"],[3,"Formatter"],[6,"Result"],[3,"DecodingFormatError"],[4,"Decoded"],[4,"EncodingError"],[3,"Error"],[15,"u16"],[15,"u8"],[15,"i32"],[6,"Result"],[4,"ExtensionData"],[3,"Demand"],[8,"Read"],[8,"Error"],[3,"String"],[3,"TypeId"],[13,"Control"]]},\
"glam":{"doc":"glam","t":"EQQIQQIQQINNNNNNNNNNNNALLLLOOOOOOOOOOOOOOOOOOOOOOLLAALLALALLLLAKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKDDGDGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMSSSSDDSSSSSSSDDDDSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSDDDDDSSSSSSSSSSSSSSSSSSSSSSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLSSSDDDDDDDDDSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFLLLLFFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLSSSDDDSSSSSSSSSSSSSSSSSSSSSSSSSSSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLQQIQQIQQIKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKLLLKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKLLLLLLKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKSSSSSSDDDSSSSSSSSSSSSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["EulerRot","Vec2","Vec2","Vec2Swizzles","Vec3","Vec3","Vec3Swizzles","Vec4","Vec4","Vec4Swizzles","XYX","XYZ","XZX","XZY","YXY","YXZ","YZX","YZY","ZXY","ZXZ","ZYX","ZYZ","bool","borrow","borrow_mut","clone","clone_into","const_dmat2","const_dmat3","const_dmat4","const_dquat","const_dvec2","const_dvec3","const_dvec4","const_ivec2","const_ivec3","const_ivec4","const_mat2","const_mat3","const_mat3a","const_mat4","const_quat","const_uvec2","const_uvec3","const_uvec4","const_vec2","const_vec3","const_vec3a","const_vec4","default","eq","f32","f64","fmt","from","i32","into","swizzles","to_owned","try_from","try_into","type_id","u32","ww","www","wwww","wwwx","wwwy","wwwz","wwx","wwxw","wwxx","wwxy","wwxz","wwy","wwyw","wwyx","wwyy","wwyz","wwz","wwzw","wwzx","wwzy","wwzz","wx","wxw","wxww","wxwx","wxwy","wxwz","wxx","wxxw","wxxx","wxxy","wxxz","wxy","wxyw","wxyx","wxyy","wxyz","wxz","wxzw","wxzx","wxzy","wxzz","wy","wyw","wyww","wywx","wywy","wywz","wyx","wyxw","wyxx","wyxy","wyxz","wyy","wyyw","wyyx","wyyy","wyyz","wyz","wyzw","wyzx","wyzy","wyzz","wz","wzw","wzww","wzwx","wzwy","wzwz","wzx","wzxw","wzxx","wzxy","wzxz","wzy","wzyw","wzyx","wzyy","wzyz","wzz","wzzw","wzzx","wzzy","wzzz","xw","xww","xwww","xwwx","xwwy","xwwz","xwx","xwxw","xwxx","xwxy","xwxz","xwy","xwyw","xwyx","xwyy","xwyz","xwz","xwzw","xwzx","xwzy","xwzz","xx","xx","xx","xxw","xxww","xxwx","xxwy","xxwz","xxx","xxx","xxx","xxxw","xxxx","xxxx","xxxx","xxxy","xxxy","xxxy","xxxz","xxxz","xxy","xxy","xxy","xxyw","xxyx","xxyx","xxyx","xxyy","xxyy","xxyy","xxyz","xxyz","xxz","xxz","xxzw","xxzx","xxzx","xxzy","xxzy","xxzz","xxzz","xy","xy","xyw","xyww","xywx","xywy","xywz","xyx","xyx","xyx","xyxw","xyxx","xyxx","xyxx","xyxy","xyxy","xyxy","xyxz","xyxz","xyy","xyy","xyy","xyyw","xyyx","xyyx","xyyx","xyyy","xyyy","xyyy","xyyz","xyyz","xyz","xyzx","xyzx","xyzy","xyzy","xyzz","xyzz","xz","xz","xzw","xzww","xzwx","xzwy","xzwz","xzx","xzx","xzxw","xzxx","xzxx","xzxy","xzxy","xzxz","xzxz","xzy","xzy","xzyw","xzyx","xzyx","xzyy","xzyy","xzyz","xzyz","xzz","xzz","xzzw","xzzx","xzzx","xzzy","xzzy","xzzz","xzzz","yw","yww","ywww","ywwx","ywwy","ywwz","ywx","ywxw","ywxx","ywxy","ywxz","ywy","ywyw","ywyx","ywyy","ywyz","ywz","ywzw","ywzx","ywzy","ywzz","yx","yx","yx","yxw","yxww","yxwx","yxwy","yxwz","yxx","yxx","yxx","yxxw","yxxx","yxxx","yxxx","yxxy","yxxy","yxxy","yxxz","yxxz","yxy","yxy","yxy","yxyw","yxyx","yxyx","yxyx","yxyy","yxyy","yxyy","yxyz","yxyz","yxz","yxz","yxzw","yxzx","yxzx","yxzy","yxzy","yxzz","yxzz","yy","yy","yy","yyw","yyww","yywx","yywy","yywz","yyx","yyx","yyx","yyxw","yyxx","yyxx","yyxx","yyxy","yyxy","yyxy","yyxz","yyxz","yyy","yyy","yyy","yyyw","yyyx","yyyx","yyyx","yyyy","yyyy","yyyy","yyyz","yyyz","yyz","yyz","yyzw","yyzx","yyzx","yyzy","yyzy","yyzz","yyzz","yz","yz","yzw","yzww","yzwx","yzwy","yzwz","yzx","yzx","yzxw","yzxx","yzxx","yzxy","yzxy","yzxz","yzxz","yzy","yzy","yzyw","yzyx","yzyx","yzyy","yzyy","yzyz","yzyz","yzz","yzz","yzzw","yzzx","yzzx","yzzy","yzzy","yzzz","yzzz","zw","zww","zwww","zwwx","zwwy","zwwz","zwx","zwxw","zwxx","zwxy","zwxz","zwy","zwyw","zwyx","zwyy","zwyz","zwz","zwzw","zwzx","zwzy","zwzz","zx","zx","zxw","zxww","zxwx","zxwy","zxwz","zxx","zxx","zxxw","zxxx","zxxx","zxxy","zxxy","zxxz","zxxz","zxy","zxy","zxyw","zxyx","zxyx","zxyy","zxyy","zxyz","zxyz","zxz","zxz","zxzw","zxzx","zxzx","zxzy","zxzy","zxzz","zxzz","zy","zy","zyw","zyww","zywx","zywy","zywz","zyx","zyx","zyxw","zyxx","zyxx","zyxy","zyxy","zyxz","zyxz","zyy","zyy","zyyw","zyyx","zyyx","zyyy","zyyy","zyyz","zyyz","zyz","zyz","zyzw","zyzx","zyzx","zyzy","zyzy","zyzz","zyzz","zz","zz","zzw","zzww","zzwx","zzwy","zzwz","zzx","zzx","zzxw","zzxx","zzxx","zzxy","zzxy","zzxz","zzxz","zzy","zzy","zzyw","zzyx","zzyx","zzyy","zzyy","zzyz","zzyz","zzz","zzz","zzzw","zzzx","zzzx","zzzy","zzzy","zzzz","zzzz","BVec2","BVec3","BVec3A","BVec4","BVec4A","all","all","all","any","any","any","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitmask","bitmask","bitmask","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","default","default","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","hash","hash","hash","into","into","into","new","new","new","not","not","not","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","w","x","x","x","y","y","y","z","z","AXES","AXES","AXES","AXES","Affine2","Affine3A","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IDENTITY","Mat2","Mat3","Mat3A","Mat4","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NEG_ONE","NEG_ONE","NEG_ONE","NEG_ONE","NEG_W","NEG_X","NEG_X","NEG_X","NEG_X","NEG_Y","NEG_Y","NEG_Y","NEG_Y","NEG_Z","NEG_Z","NEG_Z","ONE","ONE","ONE","ONE","Quat","Vec2","Vec3","Vec3A","Vec4","W","X","X","X","X","Y","Y","Y","Y","Z","Z","Z","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","abs","abs","abs","abs","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_mat2","add_mat3","add_mat3","add_mat4","angle_between","angle_between","angle_between","angle_between","any_orthogonal_vector","any_orthogonal_vector","any_orthonormal_pair","any_orthonormal_pair","any_orthonormal_vector","any_orthonormal_vector","as_dmat2","as_dmat3","as_dmat3","as_dmat4","as_dvec2","as_dvec3","as_dvec3","as_dvec4","as_f64","as_ivec2","as_ivec3","as_ivec3","as_ivec4","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_uvec2","as_uvec3","as_uvec3","as_uvec4","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ceil","ceil","ceil","ceil","clamp","clamp","clamp","clamp","clamp_length","clamp_length","clamp_length","clamp_length","clamp_length_max","clamp_length_max","clamp_length_max","clamp_length_max","clamp_length_min","clamp_length_min","clamp_length_min","clamp_length_min","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmpeq","cmpeq","cmpeq","cmpeq","cmpge","cmpge","cmpge","cmpge","cmpgt","cmpgt","cmpgt","cmpgt","cmple","cmple","cmple","cmple","cmplt","cmplt","cmplt","cmplt","cmpne","cmpne","cmpne","cmpne","col","col","col","col","col_mut","col_mut","col_mut","col_mut","conjugate","cross","cross","default","default","default","default","default","default","default","default","default","default","default","deref","deref","deref_mut","deref_mut","determinant","determinant","determinant","determinant","distance","distance","distance","distance","distance_squared","distance_squared","distance_squared","distance_squared","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","dot","dot","dot","dot","dot","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","exp","exp","exp","exp","extend","extend","extend","floor","floor","floor","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fract","fract","fract","fract","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_affine3","from_angle","from_angle","from_angle","from_angle","from_angle","from_angle_translation","from_array","from_array","from_array","from_array","from_array","from_axis_angle","from_axis_angle","from_axis_angle","from_axis_angle","from_axis_angle","from_cols","from_cols","from_cols","from_cols","from_cols","from_cols","from_cols_array","from_cols_array","from_cols_array","from_cols_array","from_cols_array","from_cols_array","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_slice","from_cols_slice","from_cols_slice","from_cols_slice","from_cols_slice","from_cols_slice","from_diagonal","from_diagonal","from_diagonal","from_diagonal","from_euler","from_euler","from_euler","from_euler","from_mat2","from_mat2","from_mat2","from_mat2_translation","from_mat3","from_mat3","from_mat3","from_mat3","from_mat3","from_mat3_translation","from_mat4","from_mat4","from_mat4","from_mat4","from_quat","from_quat","from_quat","from_quat","from_rotation_arc","from_rotation_arc_2d","from_rotation_arc_colinear","from_rotation_translation","from_rotation_translation","from_rotation_x","from_rotation_x","from_rotation_x","from_rotation_x","from_rotation_x","from_rotation_y","from_rotation_y","from_rotation_y","from_rotation_y","from_rotation_y","from_rotation_z","from_rotation_z","from_rotation_z","from_rotation_z","from_rotation_z","from_scale","from_scale","from_scale","from_scale","from_scale","from_scale_angle","from_scale_angle_translation","from_scale_angle_translation","from_scale_angle_translation","from_scale_rotation_translation","from_scale_rotation_translation","from_scaled_axis","from_slice","from_slice","from_slice","from_slice","from_slice","from_translation","from_translation","from_translation","from_translation","from_translation","from_vec4","from_xyzw","index","index","index","index","index_mut","index_mut","index_mut","index_mut","into","into","into","into","into","into","into","into","into","into","into","inverse","inverse","inverse","inverse","inverse","inverse","inverse","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan_mask","is_nan_mask","is_nan_mask","is_nan_mask","is_near_identity","is_normalized","is_normalized","is_normalized","is_normalized","is_normalized","length","length","length","length","length","length_recip","length_recip","length_recip","length_recip","length_recip","length_squared","length_squared","length_squared","length_squared","length_squared","lerp","lerp","lerp","lerp","lerp","look_at_lh","look_at_lh","look_at_rh","look_at_rh","mat2","mat3","mat3a","mat4","matrix2","matrix3","max","max","max","max","max_element","max_element","max_element","max_element","min","min","min","min","min_element","min_element","min_element","min_element","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_add","mul_add","mul_add","mul_add","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_mat2","mul_mat3","mul_mat3","mul_mat4","mul_quat","mul_scalar","mul_scalar","mul_scalar","mul_scalar","mul_vec2","mul_vec3","mul_vec3","mul_vec3","mul_vec3a","mul_vec3a","mul_vec3a","mul_vec4","neg","neg","neg","neg","neg","neg","neg","neg","neg","new","new","new","new","normalize","normalize","normalize","normalize","normalize","normalize_or_zero","normalize_or_zero","normalize_or_zero","normalize_or_zero","orthographic_lh","orthographic_rh","orthographic_rh_gl","perp","perp_dot","perspective_infinite_lh","perspective_infinite_reverse_lh","perspective_infinite_reverse_rh","perspective_infinite_rh","perspective_lh","perspective_rh","perspective_rh_gl","powf","powf","powf","powf","product","product","product","product","product","product","product","product","product","product","product","project_onto","project_onto","project_onto","project_onto","project_onto_normalized","project_onto_normalized","project_onto_normalized","project_onto_normalized","project_point3","quat","recip","recip","recip","recip","reject_from","reject_from","reject_from","reject_from","reject_from_normalized","reject_from_normalized","reject_from_normalized","reject_from_normalized","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rotate","round","round","round","round","row","row","row","row","select","select","select","select","signum","signum","signum","signum","slerp","splat","splat","splat","splat","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_mat2","sub_mat3","sub_mat3","sub_mat4","sum","sum","sum","sum","sum","sum","sum","sum","sum","to_array","to_array","to_array","to_array","to_array","to_axis_angle","to_cols_array","to_cols_array","to_cols_array","to_cols_array","to_cols_array","to_cols_array","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_euler","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_scale_rotation_translation","to_scale_rotation_translation","to_scaled_axis","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","transform_point2","transform_point2","transform_point2","transform_point3","transform_point3","transform_point3a","transform_point3a","transform_vector2","transform_vector2","transform_vector2","transform_vector3","transform_vector3","transform_vector3a","transform_vector3a","translation","translation","transpose","transpose","transpose","transpose","truncate","truncate","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_normalize","try_normalize","try_normalize","try_normalize","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vec2","vec3","vec3a","vec4","w","w","w_axis","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","ww","www","wwww","wwwx","wwwy","wwwz","wwx","wwxw","wwxx","wwxy","wwxz","wwy","wwyw","wwyx","wwyy","wwyz","wwz","wwzw","wwzx","wwzy","wwzz","wx","wxw","wxww","wxwx","wxwy","wxwz","wxx","wxxw","wxxx","wxxy","wxxz","wxy","wxyw","wxyx","wxyy","wxyz","wxz","wxzw","wxzx","wxzy","wxzz","wy","wyw","wyww","wywx","wywy","wywz","wyx","wyxw","wyxx","wyxy","wyxz","wyy","wyyw","wyyx","wyyy","wyyz","wyz","wyzw","wyzx","wyzy","wyzz","wz","wzw","wzww","wzwx","wzwy","wzwz","wzx","wzxw","wzxx","wzxy","wzxz","wzy","wzyw","wzyx","wzyy","wzyz","wzz","wzzw","wzzx","wzzy","wzzz","x","x","x","x","x","x_axis","x_axis","x_axis","x_axis","xw","xww","xwww","xwwx","xwwy","xwwz","xwx","xwxw","xwxx","xwxy","xwxz","xwy","xwyw","xwyx","xwyy","xwyz","xwz","xwzw","xwzx","xwzy","xwzz","xx","xx","xx","xx","xxw","xxww","xxwx","xxwy","xxwz","xxx","xxx","xxx","xxx","xxxw","xxxx","xxxx","xxxx","xxxx","xxxy","xxxy","xxxy","xxxy","xxxz","xxxz","xxxz","xxy","xxy","xxy","xxy","xxyw","xxyx","xxyx","xxyx","xxyx","xxyy","xxyy","xxyy","xxyy","xxyz","xxyz","xxyz","xxz","xxz","xxz","xxzw","xxzx","xxzx","xxzx","xxzy","xxzy","xxzy","xxzz","xxzz","xxzz","xy","xy","xy","xy","xyw","xyww","xywx","xywy","xywz","xyx","xyx","xyx","xyx","xyxw","xyxx","xyxx","xyxx","xyxx","xyxy","xyxy","xyxy","xyxy","xyxz","xyxz","xyxz","xyy","xyy","xyy","xyy","xyyw","xyyx","xyyx","xyyx","xyyx","xyyy","xyyy","xyyy","xyyy","xyyz","xyyz","xyyz","xyz","xyz","xyz","xyz","xyzw","xyzx","xyzx","xyzx","xyzy","xyzy","xyzy","xyzz","xyzz","xyzz","xz","xz","xz","xzw","xzww","xzwx","xzwy","xzwz","xzx","xzx","xzx","xzxw","xzxx","xzxx","xzxx","xzxy","xzxy","xzxy","xzxz","xzxz","xzxz","xzy","xzy","xzy","xzyw","xzyx","xzyx","xzyx","xzyy","xzyy","xzyy","xzyz","xzyz","xzyz","xzz","xzz","xzz","xzzw","xzzx","xzzx","xzzx","xzzy","xzzy","xzzy","xzzz","xzzz","xzzz","y","y","y","y","y","y_axis","y_axis","y_axis","y_axis","yw","yww","ywww","ywwx","ywwy","ywwz","ywx","ywxw","ywxx","ywxy","ywxz","ywy","ywyw","ywyx","ywyy","ywyz","ywz","ywzw","ywzx","ywzy","ywzz","yx","yx","yx","yx","yxw","yxww","yxwx","yxwy","yxwz","yxx","yxx","yxx","yxx","yxxw","yxxx","yxxx","yxxx","yxxx","yxxy","yxxy","yxxy","yxxy","yxxz","yxxz","yxxz","yxy","yxy","yxy","yxy","yxyw","yxyx","yxyx","yxyx","yxyx","yxyy","yxyy","yxyy","yxyy","yxyz","yxyz","yxyz","yxz","yxz","yxz","yxzw","yxzx","yxzx","yxzx","yxzy","yxzy","yxzy","yxzz","yxzz","yxzz","yy","yy","yy","yy","yyw","yyww","yywx","yywy","yywz","yyx","yyx","yyx","yyx","yyxw","yyxx","yyxx","yyxx","yyxx","yyxy","yyxy","yyxy","yyxy","yyxz","yyxz","yyxz","yyy","yyy","yyy","yyy","yyyw","yyyx","yyyx","yyyx","yyyx","yyyy","yyyy","yyyy","yyyy","yyyz","yyyz","yyyz","yyz","yyz","yyz","yyzw","yyzx","yyzx","yyzx","yyzy","yyzy","yyzy","yyzz","yyzz","yyzz","yz","yz","yz","yzw","yzww","yzwx","yzwy","yzwz","yzx","yzx","yzx","yzxw","yzxx","yzxx","yzxx","yzxy","yzxy","yzxy","yzxz","yzxz","yzxz","yzy","yzy","yzy","yzyw","yzyx","yzyx","yzyx","yzyy","yzyy","yzyy","yzyz","yzyz","yzyz","yzz","yzz","yzz","yzzw","yzzx","yzzx","yzzx","yzzy","yzzy","yzzy","yzzz","yzzz","yzzz","z","z","z","z","z_axis","z_axis","z_axis","zw","zww","zwww","zwwx","zwwy","zwwz","zwx","zwxw","zwxx","zwxy","zwxz","zwy","zwyw","zwyx","zwyy","zwyz","zwz","zwzw","zwzx","zwzy","zwzz","zx","zx","zx","zxw","zxww","zxwx","zxwy","zxwz","zxx","zxx","zxx","zxxw","zxxx","zxxx","zxxx","zxxy","zxxy","zxxy","zxxz","zxxz","zxxz","zxy","zxy","zxy","zxyw","zxyx","zxyx","zxyx","zxyy","zxyy","zxyy","zxyz","zxyz","zxyz","zxz","zxz","zxz","zxzw","zxzx","zxzx","zxzx","zxzy","zxzy","zxzy","zxzz","zxzz","zxzz","zy","zy","zy","zyw","zyww","zywx","zywy","zywz","zyx","zyx","zyx","zyxw","zyxx","zyxx","zyxx","zyxy","zyxy","zyxy","zyxz","zyxz","zyxz","zyy","zyy","zyy","zyyw","zyyx","zyyx","zyyx","zyyy","zyyy","zyyy","zyyz","zyyz","zyyz","zyz","zyz","zyz","zyzw","zyzx","zyzx","zyzx","zyzy","zyzy","zyzy","zyzz","zyzz","zyzz","zz","zz","zz","zzw","zzww","zzwx","zzwy","zzwz","zzx","zzx","zzx","zzxw","zzxx","zzxx","zzxx","zzxy","zzxy","zzxy","zzxz","zzxz","zzxz","zzy","zzy","zzy","zzyw","zzyx","zzyx","zzyx","zzyy","zzyy","zzyy","zzyz","zzyz","zzyz","zzz","zzz","zzz","zzzw","zzzx","zzzx","zzzx","zzzy","zzzy","zzzy","zzzz","zzzz","zzzz","AXES","AXES","AXES","DAffine2","DAffine3","DMat2","DMat3","DMat4","DQuat","DVec2","DVec3","DVec4","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IDENTITY","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NEG_ONE","NEG_ONE","NEG_ONE","NEG_W","NEG_X","NEG_X","NEG_X","NEG_Y","NEG_Y","NEG_Y","NEG_Z","NEG_Z","ONE","ONE","ONE","W","X","X","X","Y","Y","Y","Z","Z","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","abs","abs","abs","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_mat2","add_mat3","add_mat4","angle_between","angle_between","angle_between","any_orthogonal_vector","any_orthonormal_pair","any_orthonormal_vector","as_f32","as_ivec2","as_ivec3","as_ivec4","as_mat2","as_mat3","as_mat4","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_uvec2","as_uvec3","as_uvec4","as_vec2","as_vec3","as_vec3a","as_vec4","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ceil","ceil","ceil","clamp","clamp","clamp","clamp_length","clamp_length","clamp_length","clamp_length_max","clamp_length_max","clamp_length_max","clamp_length_min","clamp_length_min","clamp_length_min","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmpeq","cmpeq","cmpeq","cmpge","cmpge","cmpge","cmpgt","cmpgt","cmpgt","cmple","cmple","cmple","cmplt","cmplt","cmplt","cmpne","cmpne","cmpne","col","col","col","col_mut","col_mut","col_mut","conjugate","cross","default","default","default","default","default","default","default","default","default","deref","deref","deref_mut","deref_mut","determinant","determinant","determinant","distance","distance","distance","distance_squared","distance_squared","distance_squared","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","dmat2","dmat3","dmat4","dot","dot","dot","dot","dquat","dvec2","dvec3","dvec4","eq","eq","eq","eq","eq","eq","eq","eq","eq","exp","exp","exp","extend","extend","floor","floor","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fract","fract","fract","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_affine3","from_angle","from_angle","from_angle","from_angle","from_angle_translation","from_array","from_array","from_array","from_array","from_axis_angle","from_axis_angle","from_axis_angle","from_axis_angle","from_cols","from_cols","from_cols","from_cols","from_cols","from_cols_array","from_cols_array","from_cols_array","from_cols_array","from_cols_array","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_slice","from_cols_slice","from_cols_slice","from_cols_slice","from_cols_slice","from_diagonal","from_diagonal","from_diagonal","from_euler","from_euler","from_euler","from_mat2","from_mat2","from_mat2_translation","from_mat3","from_mat3","from_mat3","from_mat3","from_mat3","from_mat3_translation","from_mat4","from_mat4","from_mat4","from_quat","from_quat","from_quat","from_rotation_arc","from_rotation_arc_2d","from_rotation_arc_colinear","from_rotation_translation","from_rotation_translation","from_rotation_x","from_rotation_x","from_rotation_x","from_rotation_x","from_rotation_y","from_rotation_y","from_rotation_y","from_rotation_y","from_rotation_z","from_rotation_z","from_rotation_z","from_rotation_z","from_scale","from_scale","from_scale","from_scale","from_scale_angle","from_scale_angle_translation","from_scale_angle_translation","from_scale_rotation_translation","from_scale_rotation_translation","from_scaled_axis","from_slice","from_slice","from_slice","from_slice","from_translation","from_translation","from_translation","from_translation","from_vec4","from_xyzw","index","index","index","index_mut","index_mut","index_mut","into","into","into","into","into","into","into","into","into","inverse","inverse","inverse","inverse","inverse","inverse","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan_mask","is_nan_mask","is_nan_mask","is_near_identity","is_normalized","is_normalized","is_normalized","is_normalized","length","length","length","length","length_recip","length_recip","length_recip","length_recip","length_squared","length_squared","length_squared","length_squared","lerp","lerp","lerp","lerp","look_at_lh","look_at_lh","look_at_rh","look_at_rh","matrix2","matrix3","max","max","max","max_element","max_element","max_element","min","min","min","min_element","min_element","min_element","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_add","mul_add","mul_add","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_mat2","mul_mat3","mul_mat4","mul_quat","mul_scalar","mul_scalar","mul_scalar","mul_vec2","mul_vec3","mul_vec3","mul_vec4","neg","neg","neg","neg","neg","neg","neg","new","new","new","normalize","normalize","normalize","normalize","normalize_or_zero","normalize_or_zero","normalize_or_zero","orthographic_lh","orthographic_rh","orthographic_rh_gl","perp","perp_dot","perspective_infinite_lh","perspective_infinite_reverse_lh","perspective_infinite_reverse_rh","perspective_infinite_rh","perspective_lh","perspective_rh","perspective_rh_gl","powf","powf","powf","product","product","product","product","product","product","product","product","product","project_onto","project_onto","project_onto","project_onto_normalized","project_onto_normalized","project_onto_normalized","project_point3","recip","recip","recip","reject_from","reject_from","reject_from","reject_from_normalized","reject_from_normalized","reject_from_normalized","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rotate","round","round","round","row","row","row","select","select","select","signum","signum","signum","slerp","splat","splat","splat","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_mat2","sub_mat3","sub_mat4","sum","sum","sum","sum","sum","sum","sum","to_array","to_array","to_array","to_array","to_axis_angle","to_cols_array","to_cols_array","to_cols_array","to_cols_array","to_cols_array","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_euler","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_scale_rotation_translation","to_scale_rotation_translation","to_scaled_axis","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","transform_point2","transform_point2","transform_point3","transform_point3","transform_vector2","transform_vector2","transform_vector3","transform_vector3","translation","translation","transpose","transpose","transpose","truncate","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_normalize","try_normalize","try_normalize","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","w","w","w_axis","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","ww","www","wwww","wwwx","wwwy","wwwz","wwx","wwxw","wwxx","wwxy","wwxz","wwy","wwyw","wwyx","wwyy","wwyz","wwz","wwzw","wwzx","wwzy","wwzz","wx","wxw","wxww","wxwx","wxwy","wxwz","wxx","wxxw","wxxx","wxxy","wxxz","wxy","wxyw","wxyx","wxyy","wxyz","wxz","wxzw","wxzx","wxzy","wxzz","wy","wyw","wyww","wywx","wywy","wywz","wyx","wyxw","wyxx","wyxy","wyxz","wyy","wyyw","wyyx","wyyy","wyyz","wyz","wyzw","wyzx","wyzy","wyzz","wz","wzw","wzww","wzwx","wzwy","wzwz","wzx","wzxw","wzxx","wzxy","wzxz","wzy","wzyw","wzyx","wzyy","wzyz","wzz","wzzw","wzzx","wzzy","wzzz","x","x","x","x","x_axis","x_axis","x_axis","xw","xww","xwww","xwwx","xwwy","xwwz","xwx","xwxw","xwxx","xwxy","xwxz","xwy","xwyw","xwyx","xwyy","xwyz","xwz","xwzw","xwzx","xwzy","xwzz","xx","xx","xx","xxw","xxww","xxwx","xxwy","xxwz","xxx","xxx","xxx","xxxw","xxxx","xxxx","xxxx","xxxy","xxxy","xxxy","xxxz","xxxz","xxy","xxy","xxy","xxyw","xxyx","xxyx","xxyx","xxyy","xxyy","xxyy","xxyz","xxyz","xxz","xxz","xxzw","xxzx","xxzx","xxzy","xxzy","xxzz","xxzz","xy","xy","xy","xyw","xyww","xywx","xywy","xywz","xyx","xyx","xyx","xyxw","xyxx","xyxx","xyxx","xyxy","xyxy","xyxy","xyxz","xyxz","xyy","xyy","xyy","xyyw","xyyx","xyyx","xyyx","xyyy","xyyy","xyyy","xyyz","xyyz","xyz","xyz","xyz","xyzw","xyzx","xyzx","xyzy","xyzy","xyzz","xyzz","xz","xz","xzw","xzww","xzwx","xzwy","xzwz","xzx","xzx","xzxw","xzxx","xzxx","xzxy","xzxy","xzxz","xzxz","xzy","xzy","xzyw","xzyx","xzyx","xzyy","xzyy","xzyz","xzyz","xzz","xzz","xzzw","xzzx","xzzx","xzzy","xzzy","xzzz","xzzz","y","y","y","y","y_axis","y_axis","y_axis","yw","yww","ywww","ywwx","ywwy","ywwz","ywx","ywxw","ywxx","ywxy","ywxz","ywy","ywyw","ywyx","ywyy","ywyz","ywz","ywzw","ywzx","ywzy","ywzz","yx","yx","yx","yxw","yxww","yxwx","yxwy","yxwz","yxx","yxx","yxx","yxxw","yxxx","yxxx","yxxx","yxxy","yxxy","yxxy","yxxz","yxxz","yxy","yxy","yxy","yxyw","yxyx","yxyx","yxyx","yxyy","yxyy","yxyy","yxyz","yxyz","yxz","yxz","yxzw","yxzx","yxzx","yxzy","yxzy","yxzz","yxzz","yy","yy","yy","yyw","yyww","yywx","yywy","yywz","yyx","yyx","yyx","yyxw","yyxx","yyxx","yyxx","yyxy","yyxy","yyxy","yyxz","yyxz","yyy","yyy","yyy","yyyw","yyyx","yyyx","yyyx","yyyy","yyyy","yyyy","yyyz","yyyz","yyz","yyz","yyzw","yyzx","yyzx","yyzy","yyzy","yyzz","yyzz","yz","yz","yzw","yzww","yzwx","yzwy","yzwz","yzx","yzx","yzxw","yzxx","yzxx","yzxy","yzxy","yzxz","yzxz","yzy","yzy","yzyw","yzyx","yzyx","yzyy","yzyy","yzyz","yzyz","yzz","yzz","yzzw","yzzx","yzzx","yzzy","yzzy","yzzz","yzzz","z","z","z","z_axis","z_axis","zw","zww","zwww","zwwx","zwwy","zwwz","zwx","zwxw","zwxx","zwxy","zwxz","zwy","zwyw","zwyx","zwyy","zwyz","zwz","zwzw","zwzx","zwzy","zwzz","zx","zx","zxw","zxww","zxwx","zxwy","zxwz","zxx","zxx","zxxw","zxxx","zxxx","zxxy","zxxy","zxxz","zxxz","zxy","zxy","zxyw","zxyx","zxyx","zxyy","zxyy","zxyz","zxyz","zxz","zxz","zxzw","zxzx","zxzx","zxzy","zxzy","zxzz","zxzz","zy","zy","zyw","zyww","zywx","zywy","zywz","zyx","zyx","zyxw","zyxx","zyxx","zyxy","zyxy","zyxz","zyxz","zyy","zyy","zyyw","zyyx","zyyx","zyyy","zyyy","zyyz","zyyz","zyz","zyz","zyzw","zyzx","zyzx","zyzy","zyzy","zyzz","zyzz","zz","zz","zzw","zzww","zzwx","zzwy","zzwz","zzx","zzx","zzxw","zzxx","zzxx","zzxy","zzxy","zzxz","zzxz","zzy","zzy","zzyw","zzyx","zzyx","zzyy","zzyy","zzyz","zzyz","zzz","zzz","zzzw","zzzx","zzzx","zzzy","zzzy","zzzz","zzzz","AXES","AXES","AXES","IVec2","IVec3","IVec4","NEG_ONE","NEG_ONE","NEG_ONE","NEG_W","NEG_X","NEG_X","NEG_X","NEG_Y","NEG_Y","NEG_Y","NEG_Z","NEG_Z","ONE","ONE","ONE","W","X","X","X","Y","Y","Y","Z","Z","ZERO","ZERO","ZERO","abs","abs","abs","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","as_dvec2","as_dvec3","as_dvec4","as_mut","as_mut","as_mut","as_ref","as_ref","as_ref","as_uvec2","as_uvec3","as_uvec4","as_vec2","as_vec3","as_vec3a","as_vec4","bitand","bitand","bitand","bitand","bitand","bitand","bitor","bitor","bitor","bitor","bitor","bitor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clamp","clamp","clamp","clone","clone","clone","clone_into","clone_into","clone_into","cmpeq","cmpeq","cmpeq","cmpge","cmpge","cmpge","cmpgt","cmpgt","cmpgt","cmple","cmple","cmple","cmplt","cmplt","cmplt","cmpne","cmpne","cmpne","cross","default","default","default","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","dot","dot","dot","eq","eq","eq","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_array","from_array","from_array","from_slice","from_slice","from_slice","hash","hash","hash","index","index","index","index_mut","index_mut","index_mut","into","into","into","ivec2","ivec3","ivec4","max","max","max","max_element","max_element","max_element","min","min","min","min_element","min_element","min_element","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","neg","new","new","new","not","not","not","perp","perp_dot","product","product","product","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rotate","select","select","select","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","signum","signum","signum","splat","splat","splat","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","sum","to_array","to_array","to_array","to_owned","to_owned","to_owned","to_string","to_string","to_string","truncate","truncate","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","w","write_to_slice","write_to_slice","write_to_slice","ww","www","wwww","wwwx","wwwy","wwwz","wwx","wwxw","wwxx","wwxy","wwxz","wwy","wwyw","wwyx","wwyy","wwyz","wwz","wwzw","wwzx","wwzy","wwzz","wx","wxw","wxww","wxwx","wxwy","wxwz","wxx","wxxw","wxxx","wxxy","wxxz","wxy","wxyw","wxyx","wxyy","wxyz","wxz","wxzw","wxzx","wxzy","wxzz","wy","wyw","wyww","wywx","wywy","wywz","wyx","wyxw","wyxx","wyxy","wyxz","wyy","wyyw","wyyx","wyyy","wyyz","wyz","wyzw","wyzx","wyzy","wyzz","wz","wzw","wzww","wzwx","wzwy","wzwz","wzx","wzxw","wzxx","wzxy","wzxz","wzy","wzyw","wzyx","wzyy","wzyz","wzz","wzzw","wzzx","wzzy","wzzz","x","x","x","xw","xww","xwww","xwwx","xwwy","xwwz","xwx","xwxw","xwxx","xwxy","xwxz","xwy","xwyw","xwyx","xwyy","xwyz","xwz","xwzw","xwzx","xwzy","xwzz","xx","xx","xx","xxw","xxww","xxwx","xxwy","xxwz","xxx","xxx","xxx","xxxw","xxxx","xxxx","xxxx","xxxy","xxxy","xxxy","xxxz","xxxz","xxy","xxy","xxy","xxyw","xxyx","xxyx","xxyx","xxyy","xxyy","xxyy","xxyz","xxyz","xxz","xxz","xxzw","xxzx","xxzx","xxzy","xxzy","xxzz","xxzz","xy","xy","xy","xyw","xyww","xywx","xywy","xywz","xyx","xyx","xyx","xyxw","xyxx","xyxx","xyxx","xyxy","xyxy","xyxy","xyxz","xyxz","xyy","xyy","xyy","xyyw","xyyx","xyyx","xyyx","xyyy","xyyy","xyyy","xyyz","xyyz","xyz","xyz","xyzw","xyzx","xyzx","xyzy","xyzy","xyzz","xyzz","xz","xz","xzw","xzww","xzwx","xzwy","xzwz","xzx","xzx","xzxw","xzxx","xzxx","xzxy","xzxy","xzxz","xzxz","xzy","xzy","xzyw","xzyx","xzyx","xzyy","xzyy","xzyz","xzyz","xzz","xzz","xzzw","xzzx","xzzx","xzzy","xzzy","xzzz","xzzz","y","y","y","yw","yww","ywww","ywwx","ywwy","ywwz","ywx","ywxw","ywxx","ywxy","ywxz","ywy","ywyw","ywyx","ywyy","ywyz","ywz","ywzw","ywzx","ywzy","ywzz","yx","yx","yx","yxw","yxww","yxwx","yxwy","yxwz","yxx","yxx","yxx","yxxw","yxxx","yxxx","yxxx","yxxy","yxxy","yxxy","yxxz","yxxz","yxy","yxy","yxy","yxyw","yxyx","yxyx","yxyx","yxyy","yxyy","yxyy","yxyz","yxyz","yxz","yxz","yxzw","yxzx","yxzx","yxzy","yxzy","yxzz","yxzz","yy","yy","yy","yyw","yyww","yywx","yywy","yywz","yyx","yyx","yyx","yyxw","yyxx","yyxx","yyxx","yyxy","yyxy","yyxy","yyxz","yyxz","yyy","yyy","yyy","yyyw","yyyx","yyyx","yyyx","yyyy","yyyy","yyyy","yyyz","yyyz","yyz","yyz","yyzw","yyzx","yyzx","yyzy","yyzy","yyzz","yyzz","yz","yz","yzw","yzww","yzwx","yzwy","yzwz","yzx","yzx","yzxw","yzxx","yzxx","yzxy","yzxy","yzxz","yzxz","yzy","yzy","yzyw","yzyx","yzyx","yzyy","yzyy","yzyz","yzyz","yzz","yzz","yzzw","yzzx","yzzx","yzzy","yzzy","yzzz","yzzz","z","z","zw","zww","zwww","zwwx","zwwy","zwwz","zwx","zwxw","zwxx","zwxy","zwxz","zwy","zwyw","zwyx","zwyy","zwyz","zwz","zwzw","zwzx","zwzy","zwzz","zx","zx","zxw","zxww","zxwx","zxwy","zxwz","zxx","zxx","zxxw","zxxx","zxxx","zxxy","zxxy","zxxz","zxxz","zxy","zxy","zxyw","zxyx","zxyx","zxyy","zxyy","zxyz","zxyz","zxz","zxz","zxzw","zxzx","zxzx","zxzy","zxzy","zxzz","zxzz","zy","zy","zyw","zyww","zywx","zywy","zywz","zyx","zyx","zyxw","zyxx","zyxx","zyxy","zyxy","zyxz","zyxz","zyy","zyy","zyyw","zyyx","zyyx","zyyy","zyyy","zyyz","zyyz","zyz","zyz","zyzw","zyzx","zyzx","zyzy","zyzy","zyzz","zyzz","zz","zz","zzw","zzww","zzwx","zzwy","zzwz","zzx","zzx","zzxw","zzxx","zzxx","zzxy","zzxy","zzxz","zzxz","zzy","zzy","zzyw","zzyx","zzyx","zzyy","zzyy","zzyz","zzyz","zzz","zzz","zzzw","zzzx","zzzx","zzzy","zzzy","zzzz","zzzz","Vec2","Vec2","Vec2Swizzles","Vec3","Vec3","Vec3Swizzles","Vec4","Vec4","Vec4Swizzles","ww","www","wwww","wwwx","wwwy","wwwz","wwx","wwxw","wwxx","wwxy","wwxz","wwy","wwyw","wwyx","wwyy","wwyz","wwz","wwzw","wwzx","wwzy","wwzz","wx","wxw","wxww","wxwx","wxwy","wxwz","wxx","wxxw","wxxx","wxxy","wxxz","wxy","wxyw","wxyx","wxyy","wxyz","wxz","wxzw","wxzx","wxzy","wxzz","wy","wyw","wyww","wywx","wywy","wywz","wyx","wyxw","wyxx","wyxy","wyxz","wyy","wyyw","wyyx","wyyy","wyyz","wyz","wyzw","wyzx","wyzy","wyzz","wz","wzw","wzww","wzwx","wzwy","wzwz","wzx","wzxw","wzxx","wzxy","wzxz","wzy","wzyw","wzyx","wzyy","wzyz","wzz","wzzw","wzzx","wzzy","wzzz","xw","xww","xwww","xwwx","xwwy","xwwz","xwx","xwxw","xwxx","xwxy","xwxz","xwy","xwyw","xwyx","xwyy","xwyz","xwz","xwzw","xwzx","xwzy","xwzz","xx","xx","xx","xxw","xxww","xxwx","xxwy","xxwz","xxx","xxx","xxx","xxxw","xxxx","xxxx","xxxx","xxxy","xxxy","xxxy","xxxz","xxxz","xxy","xxy","xxy","xxyw","xxyx","xxyx","xxyx","xxyy","xxyy","xxyy","xxyz","xxyz","xxz","xxz","xxzw","xxzx","xxzx","xxzy","xxzy","xxzz","xxzz","xy","xy","xy","xy","xy","xyw","xyww","xywx","xywy","xywz","xyx","xyx","xyx","xyxw","xyxx","xyxx","xyxx","xyxy","xyxy","xyxy","xyxz","xyxz","xyy","xyy","xyy","xyyw","xyyx","xyyx","xyyx","xyyy","xyyy","xyyy","xyyz","xyyz","xyz","xyz","xyz","xyz","xyzw","xyzw","xyzw","xyzx","xyzx","xyzy","xyzy","xyzz","xyzz","xz","xz","xzw","xzww","xzwx","xzwy","xzwz","xzx","xzx","xzxw","xzxx","xzxx","xzxy","xzxy","xzxz","xzxz","xzy","xzy","xzyw","xzyx","xzyx","xzyy","xzyy","xzyz","xzyz","xzz","xzz","xzzw","xzzx","xzzx","xzzy","xzzy","xzzz","xzzz","yw","yww","ywww","ywwx","ywwy","ywwz","ywx","ywxw","ywxx","ywxy","ywxz","ywy","ywyw","ywyx","ywyy","ywyz","ywz","ywzw","ywzx","ywzy","ywzz","yx","yx","yx","yxw","yxww","yxwx","yxwy","yxwz","yxx","yxx","yxx","yxxw","yxxx","yxxx","yxxx","yxxy","yxxy","yxxy","yxxz","yxxz","yxy","yxy","yxy","yxyw","yxyx","yxyx","yxyx","yxyy","yxyy","yxyy","yxyz","yxyz","yxz","yxz","yxzw","yxzx","yxzx","yxzy","yxzy","yxzz","yxzz","yy","yy","yy","yyw","yyww","yywx","yywy","yywz","yyx","yyx","yyx","yyxw","yyxx","yyxx","yyxx","yyxy","yyxy","yyxy","yyxz","yyxz","yyy","yyy","yyy","yyyw","yyyx","yyyx","yyyx","yyyy","yyyy","yyyy","yyyz","yyyz","yyz","yyz","yyzw","yyzx","yyzx","yyzy","yyzy","yyzz","yyzz","yz","yz","yzw","yzww","yzwx","yzwy","yzwz","yzx","yzx","yzxw","yzxx","yzxx","yzxy","yzxy","yzxz","yzxz","yzy","yzy","yzyw","yzyx","yzyx","yzyy","yzyy","yzyz","yzyz","yzz","yzz","yzzw","yzzx","yzzx","yzzy","yzzy","yzzz","yzzz","zw","zww","zwww","zwwx","zwwy","zwwz","zwx","zwxw","zwxx","zwxy","zwxz","zwy","zwyw","zwyx","zwyy","zwyz","zwz","zwzw","zwzx","zwzy","zwzz","zx","zx","zxw","zxww","zxwx","zxwy","zxwz","zxx","zxx","zxxw","zxxx","zxxx","zxxy","zxxy","zxxz","zxxz","zxy","zxy","zxyw","zxyx","zxyx","zxyy","zxyy","zxyz","zxyz","zxz","zxz","zxzw","zxzx","zxzx","zxzy","zxzy","zxzz","zxzz","zy","zy","zyw","zyww","zywx","zywy","zywz","zyx","zyx","zyxw","zyxx","zyxx","zyxy","zyxy","zyxz","zyxz","zyy","zyy","zyyw","zyyx","zyyx","zyyy","zyyy","zyyz","zyyz","zyz","zyz","zyzw","zyzx","zyzx","zyzy","zyzy","zyzz","zyzz","zz","zz","zzw","zzww","zzwx","zzwy","zzwz","zzx","zzx","zzxw","zzxx","zzxx","zzxy","zzxy","zzxz","zzxz","zzy","zzy","zzyw","zzyx","zzyx","zzyy","zzyy","zzyz","zzyz","zzz","zzz","zzzw","zzzx","zzzx","zzzy","zzzy","zzzz","zzzz","AXES","AXES","AXES","ONE","ONE","ONE","UVec2","UVec3","UVec4","W","X","X","X","Y","Y","Y","Z","Z","ZERO","ZERO","ZERO","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","as_dvec2","as_dvec3","as_dvec4","as_ivec2","as_ivec3","as_ivec4","as_mut","as_mut","as_mut","as_ref","as_ref","as_ref","as_vec2","as_vec3","as_vec3a","as_vec4","bitand","bitand","bitand","bitand","bitand","bitand","bitor","bitor","bitor","bitor","bitor","bitor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clamp","clamp","clamp","clone","clone","clone","clone_into","clone_into","clone_into","cmpeq","cmpeq","cmpeq","cmpge","cmpge","cmpge","cmpgt","cmpgt","cmpgt","cmple","cmple","cmple","cmplt","cmplt","cmplt","cmpne","cmpne","cmpne","cross","default","default","default","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","dot","dot","dot","eq","eq","eq","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_array","from_array","from_array","from_slice","from_slice","from_slice","hash","hash","hash","index","index","index","index_mut","index_mut","index_mut","into","into","into","max","max","max","max_element","max_element","max_element","min","min","min","min_element","min_element","min_element","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","new","new","new","not","not","not","product","product","product","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","select","select","select","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","splat","splat","splat","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","sum","to_array","to_array","to_array","to_owned","to_owned","to_owned","to_string","to_string","to_string","truncate","truncate","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","uvec2","uvec3","uvec4","w","write_to_slice","write_to_slice","write_to_slice","ww","www","wwww","wwwx","wwwy","wwwz","wwx","wwxw","wwxx","wwxy","wwxz","wwy","wwyw","wwyx","wwyy","wwyz","wwz","wwzw","wwzx","wwzy","wwzz","wx","wxw","wxww","wxwx","wxwy","wxwz","wxx","wxxw","wxxx","wxxy","wxxz","wxy","wxyw","wxyx","wxyy","wxyz","wxz","wxzw","wxzx","wxzy","wxzz","wy","wyw","wyww","wywx","wywy","wywz","wyx","wyxw","wyxx","wyxy","wyxz","wyy","wyyw","wyyx","wyyy","wyyz","wyz","wyzw","wyzx","wyzy","wyzz","wz","wzw","wzww","wzwx","wzwy","wzwz","wzx","wzxw","wzxx","wzxy","wzxz","wzy","wzyw","wzyx","wzyy","wzyz","wzz","wzzw","wzzx","wzzy","wzzz","x","x","x","xw","xww","xwww","xwwx","xwwy","xwwz","xwx","xwxw","xwxx","xwxy","xwxz","xwy","xwyw","xwyx","xwyy","xwyz","xwz","xwzw","xwzx","xwzy","xwzz","xx","xx","xx","xxw","xxww","xxwx","xxwy","xxwz","xxx","xxx","xxx","xxxw","xxxx","xxxx","xxxx","xxxy","xxxy","xxxy","xxxz","xxxz","xxy","xxy","xxy","xxyw","xxyx","xxyx","xxyx","xxyy","xxyy","xxyy","xxyz","xxyz","xxz","xxz","xxzw","xxzx","xxzx","xxzy","xxzy","xxzz","xxzz","xy","xy","xy","xyw","xyww","xywx","xywy","xywz","xyx","xyx","xyx","xyxw","xyxx","xyxx","xyxx","xyxy","xyxy","xyxy","xyxz","xyxz","xyy","xyy","xyy","xyyw","xyyx","xyyx","xyyx","xyyy","xyyy","xyyy","xyyz","xyyz","xyz","xyz","xyzw","xyzx","xyzx","xyzy","xyzy","xyzz","xyzz","xz","xz","xzw","xzww","xzwx","xzwy","xzwz","xzx","xzx","xzxw","xzxx","xzxx","xzxy","xzxy","xzxz","xzxz","xzy","xzy","xzyw","xzyx","xzyx","xzyy","xzyy","xzyz","xzyz","xzz","xzz","xzzw","xzzx","xzzx","xzzy","xzzy","xzzz","xzzz","y","y","y","yw","yww","ywww","ywwx","ywwy","ywwz","ywx","ywxw","ywxx","ywxy","ywxz","ywy","ywyw","ywyx","ywyy","ywyz","ywz","ywzw","ywzx","ywzy","ywzz","yx","yx","yx","yxw","yxww","yxwx","yxwy","yxwz","yxx","yxx","yxx","yxxw","yxxx","yxxx","yxxx","yxxy","yxxy","yxxy","yxxz","yxxz","yxy","yxy","yxy","yxyw","yxyx","yxyx","yxyx","yxyy","yxyy","yxyy","yxyz","yxyz","yxz","yxz","yxzw","yxzx","yxzx","yxzy","yxzy","yxzz","yxzz","yy","yy","yy","yyw","yyww","yywx","yywy","yywz","yyx","yyx","yyx","yyxw","yyxx","yyxx","yyxx","yyxy","yyxy","yyxy","yyxz","yyxz","yyy","yyy","yyy","yyyw","yyyx","yyyx","yyyx","yyyy","yyyy","yyyy","yyyz","yyyz","yyz","yyz","yyzw","yyzx","yyzx","yyzy","yyzy","yyzz","yyzz","yz","yz","yzw","yzww","yzwx","yzwy","yzwz","yzx","yzx","yzxw","yzxx","yzxx","yzxy","yzxy","yzxz","yzxz","yzy","yzy","yzyw","yzyx","yzyx","yzyy","yzyy","yzyz","yzyz","yzz","yzz","yzzw","yzzx","yzzx","yzzy","yzzy","yzzz","yzzz","z","z","zw","zww","zwww","zwwx","zwwy","zwwz","zwx","zwxw","zwxx","zwxy","zwxz","zwy","zwyw","zwyx","zwyy","zwyz","zwz","zwzw","zwzx","zwzy","zwzz","zx","zx","zxw","zxww","zxwx","zxwy","zxwz","zxx","zxx","zxxw","zxxx","zxxx","zxxy","zxxy","zxxz","zxxz","zxy","zxy","zxyw","zxyx","zxyx","zxyy","zxyy","zxyz","zxyz","zxz","zxz","zxzw","zxzx","zxzx","zxzy","zxzy","zxzz","zxzz","zy","zy","zyw","zyww","zywx","zywy","zywz","zyx","zyx","zyxw","zyxx","zyxx","zyxy","zyxy","zyxz","zyxz","zyy","zyy","zyyw","zyyx","zyyx","zyyy","zyyy","zyyz","zyyz","zyz","zyz","zyzw","zyzx","zyzx","zyzy","zyzy","zyzz","zyzz","zz","zz","zzw","zzww","zzwx","zzwy","zzwz","zzx","zzx","zzxw","zzxx","zzxx","zzxy","zzxy","zzxz","zzxz","zzy","zzy","zzyw","zzyx","zzyx","zzyy","zzyy","zzyz","zzyz","zzz","zzz","zzzw","zzzx","zzzx","zzzy","zzzy","zzzz","zzzz"],"q":["glamglam::bool","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glam::fglam::f64","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glam::iglam::swizzles","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glam::ud":["Rotation Helper  Euler rotation sequences.","","","","","","","","","","Intrinsic two-axis rotation XYX","Intrinsic three-axis rotation XYZ","Intrinsic two-axis rotation XZX","Intrinsic three-axis rotation XZY","Intrinsic two-axis rotation YXY","Intrinsic three-axis rotation YXZ","Intrinsic three-axis rotation YZX","Intrinsic two-axis rotation YZY","Intrinsic three-axis rotation ZXY","Intrinsic two-axis rotation ZXZ","Intrinsic three-axis rotation ZYX","Intrinsic two-axis rotation ZYZ","<code>bool</code> vector mask types. ","","","","","","","","","","","","","","","","","","","","","","","","","","","Default <code>YXZ</code> as yaw (y-axis), pitch (x-axis), roll (z-axis).","","<code>f32</code> vector, quaternion and matrix types. ","<code>f64</code> vector, quaternion and matrix types. ","","Returns the argument unchanged.","<code>i32</code> vector types. ","Calls <code>U::from(self)</code>.","Traits adding swizzle methods to all vector types. ","","","","","<code>u32</code> vector types. ","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A 2-dimensional boolean vector.","A 3-dimensional boolean vector.","","A 4-dimensional boolean vector.","","Returns true if all the elements are true, false otherwise.","Returns true if all the elements are true, false otherwise.","Returns true if all the elements are true, false otherwise.","Returns true if any of the elements are true, false …","Returns true if any of the elements are true, false …","Returns true if any of the elements are true, false …","","","","","","","Returns a bitmask with the lowest two bits set from the …","Returns a bitmask with the lowest two bits set from the …","Returns a bitmask with the lowest two bits set from the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new vector mask.","Creates a new vector mask.","Creates a new vector mask.","","","","","","","","","","","","","","","","","","","","","","","","","","","","The unit axes.","The unit axes.","The unit axes.","The unit axes.","A 2D affine transform, which can represent translation, …","A 3D affine transform, which can represent translation, …","The identity transform.","The identity transform.","A 3x3 identity matrix, where all diagonal elements are <code>1</code>, …","A 2x2 identity matrix, where all diagonal elements are <code>1</code>, …","A 3x3 identity matrix, where all diagonal elements are <code>1</code>, …","A 4x4 identity matrix, where all diagonal elements are <code>1</code>, …","The identity quaternion. Corresponds to no rotation.","A 2x2 column major matrix.","A 3x3 column major matrix.","A 3x3 column major matrix.","A 4x4 column major matrix.","All NAN:s.","All NAN:s.","All NAN:s.","All NAN.","All NAN.","All NAN:s.","All NAN:s.","All NAN:s.","All NANs.","All NAN.","All NAN.","All negative ones.","All negative ones.","All negative ones.","All negative ones.","A unit-length vector pointing along the negative W axis.","A unit-length vector pointing along the negative X axis.","A unit-length vector pointing along the negative X axis.","A unit-length vector pointing along the negative X axis.","A unit-length vector pointing along the negative X axis.","A unit-length vector pointing along the negative Y axis.","A unit-length vector pointing along the negative Y axis.","A unit-length vector pointing along the negative Y axis.","A unit-length vector pointing along the negative Y axis.","A unit-length vector pointing along the negative Z axis.","A unit-length vector pointing along the negative Z axis.","A unit-length vector pointing along the negative Z axis.","All ones.","All ones.","All ones.","All ones.","A quaternion representing an orientation.","A 2-dimensional vector.","A 3-dimensional vector.","A 3-dimensional vector with SIMD support.","A 4-dimensional vector.","A unit-length vector pointing along the positive W axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Z axis.","A unit-length vector pointing along the positive Z axis.","A unit-length vector pointing along the positive Z axis.","The degenerate zero transform.","The degenerate zero transform.","A 3x3 matrix with all elements set to <code>0.0</code>.","All zeroes.","All zeroes.","A 2x2 matrix with all elements set to <code>0.0</code>.","A 3x3 matrix with all elements set to <code>0.0</code>.","A 4x4 matrix with all elements set to <code>0.0</code>.","All zeroes.","All zeroes.","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","","","","","","","","","","","Adds two quaternions.","","","","","","","","","","","","","","","","","Adds two 2x2 matrices.","Adds two 3x3 matrices.","Adds two 3x3 matrices.","Adds two 4x4 matrices.","Returns the angle (in radians) between <code>self</code> and <code>rhs</code>.","Returns the angle (in radians) between two vectors.","Returns the angle (in radians) for the minimal rotation …","Returns the angle (in radians) between two vectors.","Returns some vector that is orthogonal to the given one.","Returns some vector that is orthogonal to the given one.","Given a unit-length vector return two other vectors that …","Given a unit-length vector return two other vectors that …","Returns any unit-length vector that is orthogonal to the …","Returns any unit-length vector that is orthogonal to the …","","","","","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","","","","","","","","","","","","","","","","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","","","","","","","","","","","","","","","","","","","","","","","Returns a vector containing the smallest integer greater …","Returns a vector containing the smallest integer greater …","Returns a vector containing the smallest integer greater …","Returns a vector containing the smallest integer greater …","Component-wise clamping of values, similar to <code>f32::clamp</code>.","Component-wise clamping of values, similar to <code>f32::clamp</code>.","Component-wise clamping of values, similar to <code>f32::clamp</code>.","Component-wise clamping of values, similar to <code>f32::clamp</code>.","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no less than <code>min</code>","Returns a vector with a length no less than <code>min</code>","Returns a vector with a length no less than <code>min</code>","Returns a vector with a length no less than <code>min</code>","","","","","","","","","","","","","","","","","","","","","","","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns the matrix column for the given <code>index</code>.","Returns the matrix column for the given <code>index</code>.","Returns the matrix column for the given <code>index</code>.","Returns the matrix column for the given <code>index</code>.","Returns a mutable reference to the matrix column for the …","Returns a mutable reference to the matrix column for the …","Returns a mutable reference to the matrix column for the …","Returns a mutable reference to the matrix column for the …","Returns the quaternion conjugate of <code>self</code>. For a unit …","Computes the cross product of <code>self</code> and <code>rhs</code>.","Computes the cross product of <code>self</code> and <code>rhs</code>.","","","","","","","","","","","","","","","","Returns the determinant of <code>self</code>.","Returns the determinant of <code>self</code>.","Returns the determinant of <code>self</code>.","Returns the determinant of <code>self</code>.","Computes the Euclidean distance between two points in …","Computes the Euclidean distance between two points in …","Computes the Euclidean distance between two points in …","Computes the Euclidean distance between two points in …","Compute the squared euclidean distance between two points …","Compute the squared euclidean distance between two points …","Compute the squared euclidean distance between two points …","Compute the squared euclidean distance between two points …","","","","","Divides a quaternion by a scalar value. The quotient is …","","","","","","","","","","","","","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>. The dot product …","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","","","","","","","","","","","","Returns a vector containing <code>e^self</code> (the exponential …","Returns a vector containing <code>e^self</code> (the exponential …","Returns a vector containing <code>e^self</code> (the exponential …","Returns a vector containing <code>e^self</code> (the exponential …","Creates a 3D vector from <code>self</code> and the given <code>z</code> value.","Creates a 4D vector from <code>self</code> and the given <code>w</code> value.","Creates a 4D vector from <code>self</code> and the given <code>w</code> value.","Returns a vector containing the largest integer less than …","Returns a vector containing the largest integer less than …","Returns a vector containing the largest integer less than …","Returns a vector containing the largest integer less than …","","","","","","","","","","","","","","","","","","","","","","","Returns a vector containing the fractional part of the …","Returns a vector containing the fractional part of the …","Returns a vector containing the fractional part of the …","Returns a vector containing the fractional part of the …","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Creates a <code>Vec3A</code> from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code> …","","","","","","","","","","Returns the argument unchanged.","","","Creates a quaternion from a 3x3 rotation matrix inside a …","Creates an affine transform from the given rotation <code>angle</code>.","Creates an affine transformation matrix from the given 2D …","Creates a 2D vector containing <code>[angle.cos(), angle.sin()]</code>. …","Creates a 2x2 matrix containing a rotation of <code>angle</code> (in …","Creates an affine transformation matrix from the given 2D …","Creates an affine transform from the given 2D rotation …","Creates a new vector from an array.","Creates a new vector from an array.","Creates a rotation quaternion from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from a normalized rotation …","Creates a 3D rotation matrix from a normalized rotation …","Creates an affine transformation matrix containing a 3D …","Create a quaternion for a normalized rotation <code>axis</code> and …","Creates an affine transform from three column vectors.","Creates an affine transform from three column vectors.","Creates a 3x3 matrix from two column vectors.","Creates a 2x2 matrix from two column vectors.","Creates a 3x3 matrix from two column vectors.","Creates a 4x4 matrix from two column vectors.","Creates an affine transform from a <code>[f32; 6]</code> array stored …","Creates an affine transform from a <code>[f32; 12]</code> array stored …","Creates a 3x3 matrix from a <code>[f32; 9]</code> array stored in …","Creates a 2x2 matrix from a <code>[f32; 4]</code> array stored in …","Creates a 3x3 matrix from a <code>[f32; 9]</code> array stored in …","Creates a 4x4 matrix from a <code>[f32; 16]</code> array stored in …","Creates an affine transform from a <code>[[f32; 2]; 3]</code> 2D array …","Creates an affine transform from a <code>[[f32; 3]; 4]</code> 3D array …","Creates a 3x3 matrix from a <code>[[f32; 3]; 3]</code> 3D array stored …","Creates a 2x2 matrix from a <code>[[f32; 2]; 2]</code> 2D array stored …","Creates a 3x3 matrix from a <code>[[f32; 3]; 3]</code> 3D array stored …","Creates a 4x4 matrix from a <code>[[f32; 4]; 4]</code> 4D array stored …","Creates an affine transform from the first 6 values in …","Creates an affine transform from the first 12 values in …","Creates a 3x3 matrix from the first 9 values in <code>slice</code>.","Creates a 2x2 matrix from the first 4 values in <code>slice</code>.","Creates a 3x3 matrix from the first 9 values in <code>slice</code>.","Creates a 4x4 matrix from the first 16 values in <code>slice</code>.","Creates a 3x3 matrix with its diagonal set to <code>diagonal</code> and …","Creates a 2x2 matrix with its diagonal set to <code>diagonal</code> and …","Creates a 3x3 matrix with its diagonal set to <code>diagonal</code> and …","Creates a 4x4 matrix with its diagonal set to <code>diagonal</code> and …","Creates a 3D rotation matrix from the given euler rotation …","Creates a 3D rotation matrix from the given euler rotation …","Creates a affine transformation matrix containing a …","Creates a quaternion from the given Euler rotation …","Creates an affine transform from a 2x2 matrix (expressing …","Creates an affine transformation matrix from the given 2x2 …","Creates an affine transformation matrix from the given 2x2 …","Creates an affine transform from a 2x2 matrix (expressing …","The given <code>Mat3</code> must be an affine transform,","Creates an affine transform from a 3x3 matrix (expressing …","Creates a 2x2 matrix from a 3x3 matrix, discarding the 2nd …","Creates an affine transformation matrix from the given 3x3 …","Creates a quaternion from a 3x3 rotation matrix.","Creates an affine transform from a 3x3 matrix (expressing …","The given <code>Mat4</code> must be an affine transform, i.e. contain …","Creates a 3x3 matrix from a 4x4 matrix, discarding the 4th …","Creates a 3x3 matrix from a 4x4 matrix, discarding the 4th …","Creates a quaternion from a 3x3 rotation matrix inside a …","Creates an affine transform from the given <code>rotation</code> …","Creates a 3D rotation matrix from the given quaternion.","Creates a 3D rotation matrix from the given quaternion.","Creates an affine transformation matrix from the given …","Gets the minimal rotation for transforming <code>from</code> to <code>to</code>.  …","Gets the minimal rotation for transforming <code>from</code> to <code>to</code>.  …","Gets the minimal rotation for transforming <code>from</code> to either …","Creates an affine transform from the given 3D <code>rotation</code> and …","Creates an affine transformation matrix from the given 3D …","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates an affine transformation matrix containing a 3D …","Creates a quaternion from the <code>angle</code> (in radians) around …","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates an affine transformation matrix containing a 3D …","Creates a quaternion from the <code>angle</code> (in radians) around …","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates an affine transformation matrix containing a 3D …","Creates a quaternion from the <code>angle</code> (in radians) around …","Creates an affine transform that changes scale. Note that …","Creates an affine transform that changes scale. Note that …","Creates an affine transformation matrix from the given …","Creates an affine transformation matrix from the given …","Creates an affine transformation matrix containing the …","Creates a 2x2 matrix containing the combining non-uniform …","Creates an affine transform from the given 2D <code>scale</code>, …","Creates an affine transformation matrix from the given 2D …","Creates an affine transformation matrix from the given 2D …","Creates an affine transform from the given 3D <code>scale</code>, …","Creates an affine transformation matrix from the given 3D …","Create a quaternion that rotates <code>v.length()</code> radians around …","Creates a vector from the first 2 values in <code>slice</code>.","Creates a vector from the first 3 values in <code>slice</code>.","Creates a rotation quaternion from a slice.","Creates a vector from the first 3 values in <code>slice</code>.","Creates a vector from the first 4 values in <code>slice</code>.","Creates an affine transformation from the given 2D …","Creates an affine transformation from the given 3D …","Creates an affine transformation matrix from the given 2D …","Creates an affine transformation matrix from the given 2D …","Creates an affine transformation matrix from the given 3D …","Creates a new rotation quaternion from a 4D vector.","Creates a new rotation quaternion.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return the inverse of this transform.","Return the inverse of this transform.","Returns the inverse of <code>self</code>.","Returns the inverse of <code>self</code>.","Returns the inverse of <code>self</code>.","Returns the inverse of <code>self</code>.","Returns the inverse of a normalized quaternion.","Returns <code>true</code> if, and only if, all elements are finite.","Returns <code>true</code> if, and only if, all elements are finite.","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite.  If …","Returns <code>true</code> if, and only if, all elements are finite.  If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite.  If …","Returns <code>true</code> if, and only if, all elements are finite.  If …","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Performs <code>is_nan</code> on each element of self, returning a …","Performs <code>is_nan</code> on each element of self, returning a …","Performs <code>is_nan</code> on each element of self, returning a …","Performs <code>is_nan</code> on each element of self, returning a …","","Returns whether <code>self</code> is length <code>1.0</code> or not.","Returns whether <code>self</code> is length <code>1.0</code> or not.","Returns whether <code>self</code> of length <code>1.0</code> or not.","Returns whether <code>self</code> is length <code>1.0</code> or not.","Returns whether <code>self</code> is length <code>1.0</code> or not.","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Creates a left-handed view transform using a camera …","Creates a left-handed view matrix using a camera position, …","Creates a right-handed view transform using a camera …","Creates a right-handed view matrix using a camera …","Creates a 2x2 matrix from column vectors.","Creates a 3x3 matrix from column vectors.","Creates a 3x3 matrix from column vectors.","Creates a 4x4 matrix from column vectors.","","","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Multiplies a quaternion by a scalar value.","Multiplies a quaternion and a 3D vector, returning the …","","Multiplies two quaternions. If they each represent a …","","","","","Fused multiply-add. Computes <code>(self * a) + b</code> element-wise …","Fused multiply-add. Computes <code>(self * a) + b</code> element-wise …","Fused multiply-add. Computes <code>(self * a) + b</code> element-wise …","Fused multiply-add. Computes <code>(self * a) + b</code> element-wise …","","","","","","","","","","","","","Multiplies two quaternions. If they each represent a …","","","","","Multiplies two 2x2 matrices.","Multiplies two 3x3 matrices.","Multiplies two 3x3 matrices.","Multiplies two 4x4 matrices.","Multiplies two quaternions. If they each represent a …","Multiplies a 3x3 matrix by a scalar.","Multiplies a 2x2 matrix by a scalar.","Multiplies a 3x3 matrix by a scalar.","Multiplies a 4x4 matrix by a scalar.","Transforms a 2D vector.","Transforms a 3D vector.","Transforms a 3D vector.","Multiplies a quaternion and a 3D vector, returning the …","Transforms a <code>Vec3A</code>.","Transforms a <code>Vec3A</code>.","Multiplies a quaternion and a 3D vector, returning the …","Transforms a 4D vector.","","","","","","","","","","Creates a new vector.","Creates a new vector.","Creates a new vector.","Creates a new vector.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Creates a left-handed orthographic projection matrix with …","Creates a right-handed orthographic projection matrix with …","Creates a right-handed orthographic projection matrix with …","Returns a vector that is equal to <code>self</code> rotated by 90 …","The perpendicular dot product of <code>self</code> and <code>rhs</code>. Also known …","Creates an infinite left-handed perspective projection …","Creates an infinite left-handed perspective projection …","Creates an infinite reverse right-handed perspective …","Creates an infinite right-handed perspective projection …","Creates a left-handed perspective projection matrix with …","Creates a right-handed perspective projection matrix with …","Creates a right-handed perspective projection matrix with […","Returns a vector containing each element of <code>self</code> raised to …","Returns a vector containing each element of <code>self</code> raised to …","Returns a vector containing each element of <code>self</code> raised to …","Returns a vector containing each element of <code>self</code> raised to …","","","","","","","","","","","","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Transforms the given 3D vector as a point, applying …","Creates a quaternion from <code>x</code>, <code>y</code>, <code>z</code> and <code>w</code> values.","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","","","","","","","","","","","","","","","","","Returns <code>rhs</code> rotated by the angle of <code>self</code>. If <code>self</code> is …","Returns a vector containing the nearest integer to a …","Returns a vector containing the nearest integer to a …","Returns a vector containing the nearest integer to a …","Returns a vector containing the nearest integer to a …","Returns the matrix row for the given <code>index</code>.","Returns the matrix row for the given <code>index</code>.","Returns the matrix row for the given <code>index</code>.","Returns the matrix row for the given <code>index</code>.","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Performs a spherical linear interpolation between <code>self</code> and …","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","","","","","","","","","","","Subtracts the <code>rhs</code> quaternion from <code>self</code>.","","","","","","","","","","","","","","","","","Subtracts two 2x2 matrices.","Subtracts two 3x3 matrices.","Subtracts two 3x3 matrices.","Subtracts two 4x4 matrices.","","","","","","","","","","<code>[x, y]</code>","<code>[x, y, z]</code>","<code>[x, y, z, w]</code>","<code>[x, y, z]</code>","<code>[x, y, z, w]</code>","Returns the rotation axis and angle (in radians) of <code>self</code>.","Creates a <code>[f32; 6]</code> array storing data in column major …","Creates a <code>[f32; 12]</code> array storing data in column major …","Creates a <code>[f32; 9]</code> array storing data in column major …","Creates a <code>[f32; 4]</code> array storing data in column major …","Creates a <code>[f32; 9]</code> array storing data in column major …","Creates a <code>[f32; 16]</code> array storing data in column major …","Creates a <code>[[f32; 2]; 3]</code> 2D array storing data in column …","Creates a <code>[[f32; 3]; 4]</code> 3D array storing data in column …","Creates a <code>[[f32; 3]; 3]</code> 3D array storing data in column …","Creates a <code>[[f32; 2]; 2]</code> 2D array storing data in column …","Creates a <code>[[f32; 3]; 3]</code> 3D array storing data in column …","Creates a <code>[[f32; 4]; 4]</code> 4D array storing data in column …","Returns the rotation angles for the given euler rotation …","","","","","","","","","","","","Extracts <code>scale</code>, <code>rotation</code> and <code>translation</code> from <code>self</code>.","Extracts <code>scale</code>, <code>rotation</code> and <code>translation</code> from <code>self</code>. The …","Returns the rotation axis scaled by the rotation in …","","","","","","","","","","","","Transforms the given 2D point, applying shear, scale, …","Transforms the given 2D vector as a point.","Transforms the given 2D vector as a point.","Transforms the given 3D points, applying shear, scale, …","Transforms the given 3D vector as a point.","Transforms the given <code>Vec3A</code>, applying shear, scale, …","Transforms the given <code>Vec3A</code> as 3D point.","Transforms the given 2D vector, applying shear, scale and …","Rotates the given 2D vector.","Rotates the given 2D vector.","Transforms the given 3D vector, applying shear, scale and …","Transforms the give 3D vector as a direction.","Transforms the given <code>Vec3A</code>, applying shear, scale and …","Transforms the give <code>Vec3A</code> as 3D vector.","","","Returns the transpose of <code>self</code>.","Returns the transpose of <code>self</code>.","Returns the transpose of <code>self</code>.","Returns the transpose of <code>self</code>.","Creates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","Creates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","Creates a 2D vector from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code>, …","","","","","","","","","","","","","","","","","","","","","","","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","","","","","","","","","","","","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","","","","Writes the columns of <code>self</code> to the first 6 elements in <code>slice</code>…","Writes the columns of <code>self</code> to the first 12 elements in …","Writes the columns of <code>self</code> to the first 9 elements in <code>slice</code>…","Writes the columns of <code>self</code> to the first 4 elements in <code>slice</code>…","Writes the columns of <code>self</code> to the first 9 elements in <code>slice</code>…","Writes the columns of <code>self</code> to the first 16 elements in …","Writes the elements of <code>self</code> to the first 2 elements in …","Writes the elements of <code>self</code> to the first 3 elements in …","Writes the quaternion to an unaligned slice.","Writes the elements of <code>self</code> to the first 3 elements in …","Writes the elements of <code>self</code> to the first 4 elements in …eturns the vector part of the quaternionhe unit axes.","The unit axes.","The unit axes.","A 2D affine transform, which can represent translation, …","A 3D affine transform, which can represent translation, …","A 2x2 column major matrix.","A 3x3 column major matrix.","A 4x4 column major matrix.","A quaternion representing an orientation.","A 2-dimensional vector.","A 3-dimensional vector.","A 4-dimensional vector.","The identity transform.","The identity transform.","A 2x2 identity matrix, where all diagonal elements are <code>1</code>, …","A 3x3 identity matrix, where all diagonal elements are <code>1</code>, …","A 4x4 identity matrix, where all diagonal elements are <code>1</code>, …","The identity quaternion. Corresponds to no rotation.","All NAN:s.","All NAN:s.","All NAN:s.","All NAN:s.","All NAN:s.","All NANs.","All NAN.","All NAN.","All NAN.","All negative ones.","All negative ones.","All negative ones.","A unit-length vector pointing along the negative W axis.","A unit-length vector pointing along the negative X axis.","A unit-length vector pointing along the negative X axis.","A unit-length vector pointing along the negative X axis.","A unit-length vector pointing along the negative Y axis.","A unit-length vector pointing along the negative Y axis.","A unit-length vector pointing along the negative Y axis.","A unit-length vector pointing along the negative Z axis.","A unit-length vector pointing along the negative Z axis.","All ones.","All ones.","All ones.","A unit-length vector pointing along the positive W axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Z axis.","A unit-length vector pointing along the positive Z axis.","The degenerate zero transform.","The degenerate zero transform.","A 2x2 matrix with all elements set to <code>0.0</code>.","A 3x3 matrix with all elements set to <code>0.0</code>.","A 4x4 matrix with all elements set to <code>0.0</code>.","All zeroes.","All zeroes.","All zeroes.","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","","","","","","Adds two quaternions.","","","","","","","","","","","","","","","","Adds two 2x2 matrices.","Adds two 3x3 matrices.","Adds two 4x4 matrices.","Returns the angle (in radians) for the minimal rotation …","Returns the angle (in radians) between <code>self</code> and <code>rhs</code>.","Returns the angle (in radians) between two vectors.","Returns some vector that is orthogonal to the given one.","Given a unit-length vector return two other vectors that …","Returns any unit-length vector that is orthogonal to the …","","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","","","","","","","","","","","","","","","","","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","","","","","","","","","","","","","","","","","","","Returns a vector containing the smallest integer greater …","Returns a vector containing the smallest integer greater …","Returns a vector containing the smallest integer greater …","Component-wise clamping of values, similar to <code>f64::clamp</code>.","Component-wise clamping of values, similar to <code>f64::clamp</code>.","Component-wise clamping of values, similar to <code>f64::clamp</code>.","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no less than <code>min</code>","Returns a vector with a length no less than <code>min</code>","Returns a vector with a length no less than <code>min</code>","","","","","","","","","","","","","","","","","","","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns the matrix column for the given <code>index</code>.","Returns the matrix column for the given <code>index</code>.","Returns the matrix column for the given <code>index</code>.","Returns a mutable reference to the matrix column for the …","Returns a mutable reference to the matrix column for the …","Returns a mutable reference to the matrix column for the …","Returns the quaternion conjugate of <code>self</code>. For a unit …","Computes the cross product of <code>self</code> and <code>rhs</code>.","","","","","","","","","","","","","","Returns the determinant of <code>self</code>.","Returns the determinant of <code>self</code>.","Returns the determinant of <code>self</code>.","Computes the Euclidean distance between two points in …","Computes the Euclidean distance between two points in …","Computes the Euclidean distance between two points in …","Compute the squared euclidean distance between two points …","Compute the squared euclidean distance between two points …","Compute the squared euclidean distance between two points …","Divides a quaternion by a scalar value. The quotient is …","","","","","","","","","","","","","Creates a 2x2 matrix from column vectors.","Creates a 3x3 matrix from column vectors.","Creates a 4x4 matrix from column vectors.","Computes the dot product of <code>self</code> and <code>rhs</code>. The dot product …","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Creates a quaternion from <code>x</code>, <code>y</code>, <code>z</code> and <code>w</code> values.","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","","","","","","","","","","Returns a vector containing <code>e^self</code> (the exponential …","Returns a vector containing <code>e^self</code> (the exponential …","Returns a vector containing <code>e^self</code> (the exponential …","Creates a 3D vector from <code>self</code> and the given <code>z</code> value.","Creates a 4D vector from <code>self</code> and the given <code>w</code> value.","Returns a vector containing the largest integer less than …","Returns a vector containing the largest integer less than …","Returns a vector containing the largest integer less than …","","","","","","","","","","","","","","","","","","","Returns a vector containing the fractional part of the …","Returns a vector containing the fractional part of the …","Returns a vector containing the fractional part of the …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","Creates a quaternion from a 3x3 rotation matrix inside a …","Creates an affine transform from the given rotation <code>angle</code>.","Creates a 2x2 matrix containing a rotation of <code>angle</code> (in …","Creates an affine transformation matrix from the given 2D …","Creates a 2D vector containing <code>[angle.cos(), angle.sin()]</code>. …","Creates an affine transform from the given 2D rotation …","Creates a rotation quaternion from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from a normalized rotation …","Creates an affine transformation matrix containing a 3D …","Create a quaternion for a normalized rotation <code>axis</code> and …","Creates an affine transform from three column vectors.","Creates an affine transform from three column vectors.","Creates a 2x2 matrix from two column vectors.","Creates a 3x3 matrix from two column vectors.","Creates a 4x4 matrix from two column vectors.","Creates an affine transform from a <code>[f64; 6]</code> array stored …","Creates an affine transform from a <code>[f64; 12]</code> array stored …","Creates a 2x2 matrix from a <code>[f64; 4]</code> array stored in …","Creates a 3x3 matrix from a <code>[f64; 9]</code> array stored in …","Creates a 4x4 matrix from a <code>[f64; 16]</code> array stored in …","Creates an affine transform from a <code>[[f64; 2]; 3]</code> 2D array …","Creates an affine transform from a <code>[[f64; 3]; 4]</code> 3D array …","Creates a 2x2 matrix from a <code>[[f64; 2]; 2]</code> 2D array stored …","Creates a 3x3 matrix from a <code>[[f64; 3]; 3]</code> 3D array stored …","Creates a 4x4 matrix from a <code>[[f64; 4]; 4]</code> 4D array stored …","Creates an affine transform from the first 6 values in …","Creates an affine transform from the first 12 values in …","Creates a 2x2 matrix from the first 4 values in <code>slice</code>.","Creates a 3x3 matrix from the first 9 values in <code>slice</code>.","Creates a 4x4 matrix from the first 16 values in <code>slice</code>.","Creates a 2x2 matrix with its diagonal set to <code>diagonal</code> and …","Creates a 3x3 matrix with its diagonal set to <code>diagonal</code> and …","Creates a 4x4 matrix with its diagonal set to <code>diagonal</code> and …","Creates a 3D rotation matrix from the given euler rotation …","Creates a affine transformation matrix containing a …","Creates a quaternion from the given Euler rotation …","Creates an affine transform from a 2x2 matrix (expressing …","Creates an affine transformation matrix from the given 2x2 …","Creates an affine transform from a 2x2 matrix (expressing …","The given <code>DMat3</code> must be an affine transform,","Creates an affine transform from a 3x3 matrix (expressing …","Creates a 2x2 matrix from a 3x3 matrix, discarding the 2nd …","Creates an affine transformation matrix from the given 3x3 …","Creates a quaternion from a 3x3 rotation matrix.","Creates an affine transform from a 3x3 matrix (expressing …","The given <code>DMat4</code> must be an affine transform, i.e. contain …","Creates a 3x3 matrix from a 4x4 matrix, discarding the 4th …","Creates a quaternion from a 3x3 rotation matrix inside a …","Creates an affine transform from the given <code>rotation</code> …","Creates a 3D rotation matrix from the given quaternion.","Creates an affine transformation matrix from the given …","Gets the minimal rotation for transforming <code>from</code> to <code>to</code>.  …","Gets the minimal rotation for transforming <code>from</code> to <code>to</code>.  …","Gets the minimal rotation for transforming <code>from</code> to either …","Creates an affine transform from the given 3D <code>rotation</code> and …","Creates an affine transformation matrix from the given 3D …","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates an affine transformation matrix containing a 3D …","Creates a quaternion from the <code>angle</code> (in radians) around …","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates an affine transformation matrix containing a 3D …","Creates a quaternion from the <code>angle</code> (in radians) around …","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates an affine transformation matrix containing a 3D …","Creates a quaternion from the <code>angle</code> (in radians) around …","Creates an affine transform that changes scale. Note that …","Creates an affine transform that changes scale. Note that …","Creates an affine transformation matrix from the given …","Creates an affine transformation matrix containing the …","Creates a 2x2 matrix containing the combining non-uniform …","Creates an affine transform from the given 2D <code>scale</code>, …","Creates an affine transformation matrix from the given 2D …","Creates an affine transform from the given 3D <code>scale</code>, …","Creates an affine transformation matrix from the given 3D …","Create a quaternion that rotates <code>v.length()</code> radians around …","Creates a rotation quaternion from a slice.","Creates a vector from the first 2 values in <code>slice</code>.","Creates a vector from the first 3 values in <code>slice</code>.","Creates a vector from the first 4 values in <code>slice</code>.","Creates an affine transformation from the given 2D …","Creates an affine transformation from the given 3D …","Creates an affine transformation matrix from the given 2D …","Creates an affine transformation matrix from the given 3D …","Creates a new rotation quaternion from a 4D vector.","Creates a new rotation quaternion.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return the inverse of this transform.","Return the inverse of this transform.","Returns the inverse of <code>self</code>.","Returns the inverse of <code>self</code>.","Returns the inverse of <code>self</code>.","Returns the inverse of a normalized quaternion.","Returns <code>true</code> if, and only if, all elements are finite.","Returns <code>true</code> if, and only if, all elements are finite.","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite.  If …","Returns <code>true</code> if, and only if, all elements are finite.  If …","Returns <code>true</code> if, and only if, all elements are finite.  If …","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Performs <code>is_nan</code> on each element of self, returning a …","Performs <code>is_nan</code> on each element of self, returning a …","Performs <code>is_nan</code> on each element of self, returning a …","","Returns whether <code>self</code> of length <code>1.0</code> or not.","Returns whether <code>self</code> is length <code>1.0</code> or not.","Returns whether <code>self</code> is length <code>1.0</code> or not.","Returns whether <code>self</code> is length <code>1.0</code> or not.","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Creates a left-handed view transform using a camera …","Creates a left-handed view matrix using a camera position, …","Creates a right-handed view transform using a camera …","Creates a right-handed view matrix using a camera …","","","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","","","","","","","","","","","","","","","","","","Multiplies a quaternion by a scalar value.","Multiplies two quaternions. If they each represent a …","Multiplies a quaternion and a 3D vector, returning the …","","","","","","","Fused multiply-add. Computes <code>(self * a) + b</code> element-wise …","Fused multiply-add. Computes <code>(self * a) + b</code> element-wise …","Fused multiply-add. Computes <code>(self * a) + b</code> element-wise …","","","","","","","Multiplies two quaternions. If they each represent a …","","","","","","","Multiplies two 2x2 matrices.","Multiplies two 3x3 matrices.","Multiplies two 4x4 matrices.","Multiplies two quaternions. If they each represent a …","Multiplies a 2x2 matrix by a scalar.","Multiplies a 3x3 matrix by a scalar.","Multiplies a 4x4 matrix by a scalar.","Transforms a 2D vector.","Transforms a 3D vector.","Multiplies a quaternion and a 3D vector, returning the …","Transforms a 4D vector.","","","","","","","","Creates a new vector.","Creates a new vector.","Creates a new vector.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Creates a left-handed orthographic projection matrix with …","Creates a right-handed orthographic projection matrix with …","Creates a right-handed orthographic projection matrix with …","Returns a vector that is equal to <code>self</code> rotated by 90 …","The perpendicular dot product of <code>self</code> and <code>rhs</code>. Also known …","Creates an infinite left-handed perspective projection …","Creates an infinite left-handed perspective projection …","Creates an infinite reverse right-handed perspective …","Creates an infinite right-handed perspective projection …","Creates a left-handed perspective projection matrix with …","Creates a right-handed perspective projection matrix with …","Creates a right-handed perspective projection matrix with […","Returns a vector containing each element of <code>self</code> raised to …","Returns a vector containing each element of <code>self</code> raised to …","Returns a vector containing each element of <code>self</code> raised to …","","","","","","","","","","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Transforms the given 3D vector as a point, applying …","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","","","","","","","","","","","","","Returns <code>rhs</code> rotated by the angle of <code>self</code>. If <code>self</code> is …","Returns a vector containing the nearest integer to a …","Returns a vector containing the nearest integer to a …","Returns a vector containing the nearest integer to a …","Returns the matrix row for the given <code>index</code>.","Returns the matrix row for the given <code>index</code>.","Returns the matrix row for the given <code>index</code>.","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Performs a spherical linear interpolation between <code>self</code> and …","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","","","","","","Subtracts the <code>rhs</code> quaternion from <code>self</code>.","","","","","","","","","","","","","","","","Subtracts two 2x2 matrices.","Subtracts two 3x3 matrices.","Subtracts two 4x4 matrices.","","","","","","","","<code>[x, y, z, w]</code>","<code>[x, y]</code>","<code>[x, y, z]</code>","<code>[x, y, z, w]</code>","Returns the rotation axis and angle (in radians) of <code>self</code>.","Creates a <code>[f64; 6]</code> array storing data in column major …","Creates a <code>[f64; 12]</code> array storing data in column major …","Creates a <code>[f64; 4]</code> array storing data in column major …","Creates a <code>[f64; 9]</code> array storing data in column major …","Creates a <code>[f64; 16]</code> array storing data in column major …","Creates a <code>[[f64; 2]; 3]</code> 2D array storing data in column …","Creates a <code>[[f64; 3]; 4]</code> 3D array storing data in column …","Creates a <code>[[f64; 2]; 2]</code> 2D array storing data in column …","Creates a <code>[[f64; 3]; 3]</code> 3D array storing data in column …","Creates a <code>[[f64; 4]; 4]</code> 4D array storing data in column …","Returns the rotation angles for the given euler rotation …","","","","","","","","","","Extracts <code>scale</code>, <code>rotation</code> and <code>translation</code> from <code>self</code>.","Extracts <code>scale</code>, <code>rotation</code> and <code>translation</code> from <code>self</code>. The …","Returns the rotation axis scaled by the rotation in …","","","","","","","","","","Transforms the given 2D point, applying shear, scale, …","Transforms the given 2D vector as a point.","Transforms the given 3D points, applying shear, scale, …","Transforms the given 3D vector as a point.","Transforms the given 2D vector, applying shear, scale and …","Rotates the given 2D vector.","Transforms the given 3D vector, applying shear, scale and …","Transforms the give 3D vector as a direction.","","","Returns the transpose of <code>self</code>.","Returns the transpose of <code>self</code>.","Returns the transpose of <code>self</code>.","Creates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","Creates a 2D vector from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code>, …","","","","","","","","","","","","","","","","","","","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","","","","","","","","","","","","","Writes the columns of <code>self</code> to the first 6 elements in <code>slice</code>…","Writes the columns of <code>self</code> to the first 12 elements in …","Writes the columns of <code>self</code> to the first 4 elements in <code>slice</code>…","Writes the columns of <code>self</code> to the first 9 elements in <code>slice</code>…","Writes the columns of <code>self</code> to the first 16 elements in …","Writes the quaternion to an unaligned slice.","Writes the elements of <code>self</code> to the first 2 elements in …","Writes the elements of <code>self</code> to the first 3 elements in …","Writes the elements of <code>self</code> to the first 4 elements in …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the vector part of the quaternionhe unit axes.","The unit axes.","The unit axes.","A 2-dimensional vector.","A 3-dimensional vector.","A 4-dimensional vector.","All negative ones.","All negative ones.","All negative ones.","A unit-length vector pointing along the negative W axis.","A unit-length vector pointing along the negative X axis.","A unit-length vector pointing along the negative X axis.","A unit-length vector pointing along the negative X axis.","A unit-length vector pointing along the negative Y axis.","A unit-length vector pointing along the negative Y axis.","A unit-length vector pointing along the negative Y axis.","A unit-length vector pointing along the negative Z axis.","A unit-length vector pointing along the negative Z axis.","All ones.","All ones.","All ones.","A unit-length vector pointing along the positive W axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Z axis.","A unit-length vector pointing along the positive Z axis.","All zeroes.","All zeroes.","All zeroes.","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","","","","","","","","","","","","","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","","","","","","","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Component-wise clamping of values, similar to <code>i32::clamp</code>.","Component-wise clamping of values, similar to <code>i32::clamp</code>.","Component-wise clamping of values, similar to <code>i32::clamp</code>.","","","","","","","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Computes the cross product of <code>self</code> and <code>rhs</code>.","","","","","","","","","","","","","","","","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","","","","Creates a 3D vector from <code>self</code> and the given <code>z</code> value.","Creates a 4D vector from <code>self</code> and the given <code>w</code> value.","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","Creates a new vector from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates a vector from the first 2 values in <code>slice</code>.","Creates a vector from the first 3 values in <code>slice</code>.","Creates a vector from the first 4 values in <code>slice</code>.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","","","","","","","","","","","","","","","","Creates a new vector.","Creates a new vector.","Creates a new vector.","","","","Returns a vector that is equal to <code>self</code> rotated by 90 …","The perpendicular dot product of <code>self</code> and <code>rhs</code>. Also known …","","","","","","","","","","","","","","","","Returns <code>rhs</code> rotated by the angle of <code>self</code>. If <code>self</code> is …","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","","","","","","","","","","","","","","","","<code>[x, y]</code>","<code>[x, y, z]</code>","<code>[x, y, z, w]</code>","","","","","","","Creates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","Creates a 2D vector from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code>, …","","","","","","","","","","","Writes the elements of <code>self</code> to the first 2 elements in …","Writes the elements of <code>self</code> to the first 3 elements in …","Writes the elements of <code>self</code> to the first 4 elements in …he unit axes.","The unit axes.","The unit axes.","All ones.","All ones.","All ones.","A 2-dimensional vector.","A 3-dimensional vector.","A 4-dimensional vector.","A unit-length vector pointing along the positive W axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Z axis.","A unit-length vector pointing along the positive Z axis.","All zeroes.","All zeroes.","All zeroes.","","","","","","","","","","","","","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","","","","","","","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Component-wise clamping of values, similar to <code>u32::clamp</code>.","Component-wise clamping of values, similar to <code>u32::clamp</code>.","Component-wise clamping of values, similar to <code>u32::clamp</code>.","","","","","","","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Computes the cross product of <code>self</code> and <code>rhs</code>.","","","","","","","","","","","","","","","","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","","","","Creates a 3D vector from <code>self</code> and the given <code>z</code> value.","Creates a 4D vector from <code>self</code> and the given <code>w</code> value.","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","Creates a new vector from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates a vector from the first 2 values in <code>slice</code>.","Creates a vector from the first 3 values in <code>slice</code>.","Creates a vector from the first 4 values in <code>slice</code>.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","","","","","","","","","","","","","Creates a new vector.","Creates a new vector.","Creates a new vector.","","","","","","","","","","","","","","","","","","","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","","","","","","","","","","","","","","","","<code>[x, y]</code>","<code>[x, y, z]</code>","<code>[x, y, z, w]</code>","","","","","","","Creates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","Creates a 2D vector from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code>, …","","","","","","","","","","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","","Writes the elements of <code>self</code> to the first 2 elements in …","Writes the elements of <code>self</code> to the first 3 elements in …","Writes the elements of <code>self</code> to the first 4 elements in …if":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[1,1],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[1,1],2],0,0,[[1,3],4],[[]],0,[[]],0,[[]],[[],5],[[],5],[[],6],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,[7,2],[8,2],[9,2],[7,2],[8,2],[9,2],[[7,7],7],[[8,8],8],[[9,9],9],[[7,7]],[[8,8]],[[9,9]],[7,10],[8,10],[9,10],[[7,7],7],[[8,8],8],[[9,9],9],[[7,7]],[[8,8]],[[9,9]],[[7,7],7],[[8,8],8],[[9,9],9],[[7,7]],[[8,8]],[[9,9]],[[]],[[]],[[]],[[]],[[]],[[]],[7,7],[8,8],[9,9],[[]],[[]],[[]],[[],7],[[],8],[[],9],[[7,7],2],[[8,8],2],[[9,9],2],[[7,3],4],[[7,3],4],[[8,3],4],[[8,3],4],[[9,3],4],[[9,3],4],[[]],[[]],[[]],[7],[8],[9],[[]],[[]],[[]],[[2,2],7],[[2,2,2],8],[[2,2,2,2],9],[7,7],[8,8],[9,9],[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[],6],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[12,12],[13,13],[14,14],[15,15],[[16,16,17],2],[[18,18,17],2],[[19,19,17],2],[[12,12,17],2],[[13,13,17],2],[[20,20,17],2],[[21,21,17],2],[[22,22,17],2],[[23,23,17],2],[[14,14,17],2],[[15,15,17],2],[[16,16]],[[18,18]],[[19,19]],[[12,12],12],[[12,17],12],[[13,13],13],[[13,17],13],[[20,20]],[[21,21]],[[22,22]],[[23,23],23],[[14,14],14],[[14,17],14],[[15,15],15],[[15,17],15],[[19,19]],[[12,12]],[[12,17]],[[13,13]],[[13,17]],[[20,20]],[[21,21]],[[22,22]],[[14,14]],[[14,17]],[[15,17]],[[15,15]],[[20,20],20],[[19,19],19],[[21,21],21],[[22,22],22],[[12,12],17],[[13,13],17],[[23,23],17],[[14,14],17],[13,13],[14,14],[13],[14],[13,13],[14,14],[20,24],[19,25],[21,25],[22,26],[12,27],[13,28],[14,28],[15,29],[23,30],[12,31],[13,32],[14,32],[15,33],[19],[12],[13],[20],[22],[14],[15],[19],[12],[13],[20],[22],[23],[14],[15],[12,34],[13,35],[14,35],[15,36],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[12,12],[13,13],[14,14],[15,15],[[12,12,12],12],[[13,13,13],13],[[14,14,14],14],[[15,15,15],15],[[12,17,17],12],[[13,17,17],13],[[14,17,17],14],[[15,17,17],15],[[12,17],12],[[13,17],13],[[14,17],14],[[15,17],15],[[12,17],12],[[13,17],13],[[14,17],14],[[15,17],15],[16,16],[18,18],[19,19],[12,12],[13,13],[20,20],[21,21],[22,22],[23,23],[14,14],[15,15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[12,12],7],[[13,13],8],[[14,14],8],[[15,15],9],[[12,12],7],[[13,13],8],[[14,14],8],[[15,15],9],[[12,12],7],[[13,13],8],[[14,14],8],[[15,15],9],[[12,12],7],[[13,13],8],[[14,14],8],[[15,15],9],[[12,12],7],[[13,13],8],[[14,14],8],[[15,15],9],[[12,12],7],[[13,13],8],[[14,14],8],[[15,15],9],[[19,37],13],[[20,37],12],[[21,37],14],[[22,37],15],[[19,37],13],[[20,37],12],[[21,37],14],[[22,37],15],[23,23],[[13,13],13],[[14,14],14],[[],16],[[],18],[[],19],[[],12],[[],13],[[],20],[[],21],[[],22],[[],23],[[],14],[[],15],[16],[18],[16],[18],[19,17],[20,17],[21,17],[22,17],[[12,12],17],[[13,13],17],[[14,14],17],[[15,15],17],[[12,12],17],[[13,13],17],[[14,14],17],[[15,15],17],[[12,12],12],[[12,17],12],[[13,13],13],[[13,17],13],[[23,17],23],[[14,17],14],[[14,14],14],[[15,17],15],[[15,15],15],[[12,12]],[[12,17]],[[13,17]],[[13,13]],[[14,14]],[[14,17]],[[15,17]],[[15,15]],[[12,12],17],[[13,13],17],[[23,23],17],[[14,14],17],[[15,15],17],[[16,16],2],[[18,18],2],[[19,19],2],[[12,12],2],[[13,13],2],[[20,20],2],[[21,21],2],[[22,22],2],[[23,23],2],[[14,14],2],[[15,15],2],[12,12],[13,13],[14,14],[15,15],[[12,17],13],[[13,17],15],[[14,17],15],[12,12],[13,13],[14,14],[15,15],[[16,3],4],[[16,3],4],[[18,3],4],[[18,3],4],[[19,3],4],[[19,3],4],[[12,3],4],[[12,3],4],[[13,3],4],[[13,3],4],[[20,3],4],[[20,3],4],[[21,3],4],[[21,3],4],[[22,3],4],[[22,3],4],[[23,3],4],[[23,3],4],[[14,3],4],[[14,3],4],[[15,3],4],[[15,3],4],[12,12],[13,13],[14,14],[15,15],[[]],[[]],[16,19],[21,19],[[]],[[],12],[[],12],[[]],[[],13],[[],13],[[]],[14,13],[[],13],[[]],[[]],[16,21],[19,21],[[]],[18,22],[[]],[[],14],[[]],[[],14],[15,14],[[],14],[13,14],[[],15],[[],15],[[],15],[[],15],[[],15],[23,15],[[],15],[[]],[[],15],[[],15],[18,23],[17,16],[17,19],[17,12],[17,20],[17,21],[[17,12],16],[[],12],[[],13],[[],23],[[],14],[[],15],[[13,17],18],[[13,17],19],[[13,17],21],[[13,17],22],[[13,17],23],[[12,12,12],16],[[14,14,14,14],18],[[13,13,13],19],[[12,12],20],[[14,14,14],21],[[15,15,15,15],22],[[],16],[[],18],[[],19],[[],20],[[],21],[[],22],[[],16],[[],18],[[],19],[[],20],[[],21],[[],22],[[],16],[[],18],[[],19],[[],20],[[],21],[[],22],[13,19],[12,20],[13,21],[15,22],[[1,17,17,17],19],[[1,17,17,17],21],[[1,17,17,17],22],[[1,17,17,17],23],[20,16],[20,19],[20,21],[[20,12],16],[19,16],[19,18],[19,20],[19,22],[19,23],[[19,13],18],[22,18],[22,19],[22,21],[22,23],[23,18],[23,19],[23,21],[23,22],[[13,13],23],[[12,12],23],[[13,13],23],[[23,13],18],[[23,13],22],[17,18],[17,19],[17,21],[17,22],[17,23],[17,18],[17,19],[17,21],[17,22],[17,23],[17,18],[17,19],[17,21],[17,22],[17,23],[12,16],[13,18],[12,19],[12,21],[13,22],[[12,17],20],[[12,17,12],16],[[12,17,12],19],[[12,17,12],21],[[13,23,13],18],[[13,23,13],22],[13,23],[[],12],[[],13],[[],23],[[],14],[[],15],[12,16],[13,18],[12,19],[12,21],[13,22],[15,23],[[17,17,17,17],23],[[12,37]],[[13,37]],[[14,37]],[[15,37]],[[12,37]],[[13,37]],[[14,37]],[[15,37]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[16,16],[18,18],[19,19],[20,20],[21,21],[22,22],[23,23],[16,2],[18,2],[19,2],[12,2],[13,2],[20,2],[21,2],[22,2],[23,2],[14,2],[15,2],[16,2],[18,2],[19,2],[12,2],[13,2],[20,2],[21,2],[22,2],[23,2],[14,2],[15,2],[12,7],[13,8],[14,8],[15,9],[23,2],[12,2],[13,2],[23,2],[14,2],[15,2],[12,17],[13,17],[23,17],[14,17],[15,17],[12,17],[13,17],[23,17],[14,17],[15,17],[12,17],[13,17],[23,17],[14,17],[15,17],[[12,12,17],12],[[13,13,17],13],[[23,23,17],23],[[14,14,17],14],[[15,15,17],15],[[13,13,13],18],[[13,13,13],22],[[13,13,13],18],[[13,13,13],22],[[12,12],20],[[13,13,13],19],[[14,14,14],21],[[15,15,15,15],22],0,0,[[12,12],12],[[13,13],13],[[14,14],14],[[15,15],15],[12,17],[13,17],[14,17],[15,17],[[12,12],12],[[13,13],13],[[14,14],14],[[15,15],15],[12,17],[13,17],[14,17],[15,17],[[16,19]],[[16,21]],[[16,17]],[[16,16]],[[18,18]],[[18,17]],[[18,22]],[[19,16]],[[19,14],14],[[19,17]],[[19,19]],[[19,13]],[[12,17],12],[[12,12],12],[[13,13],13],[[13,17],13],[[20,20]],[[20,17]],[[20,12]],[[21,17]],[[21,21]],[[21,13],13],[[21,16]],[[21,14]],[[22,22]],[[22,15]],[[22,18]],[[22,17]],[[23,17],23],[[23,13]],[[23,14]],[[23,23],23],[[14,17],14],[[14,14],14],[[15,17],15],[[15,15],15],[[12,12,12],12],[[13,13,13],13],[[14,14,14],14],[[15,15,15],15],[[19,17]],[[19,19]],[[12,17]],[[12,12]],[[13,13]],[[13,17]],[[20,17]],[[20,20]],[[21,17]],[[21,21]],[[22,22]],[[22,17]],[[23,23]],[[14,14]],[[14,17]],[[15,15]],[[15,17]],[[20,20],20],[[19,19],19],[[21,21],21],[[22,22],22],[[23,23],23],[[19,17],19],[[20,17],20],[[21,17],21],[[22,17],22],[[20,12],12],[[19,13],13],[[21,13],13],[[23,13],13],[[19,14],14],[[21,14],14],[[23,14],14],[[22,15],15],[19],[12,12],[13,13],[20],[21],[22],[23,23],[14,14],[15,15],[[17,17],12],[[17,17,17],13],[[17,17,17],14],[[17,17,17,17],15],[12,12],[13,13],[23,23],[14,14],[15,15],[12,12],[13,13],[14,14],[15,15],[[17,17,17,17,17,17],22],[[17,17,17,17,17,17],22],[[17,17,17,17,17,17],22],[12,12],[[12,12],17],[[17,17,17],22],[[17,17,17],22],[[17,17,17],22],[[17,17,17],22],[[17,17,17,17],22],[[17,17,17,17],22],[[17,17,17,17],22],[[12,17],12],[[13,17],13],[[14,17],14],[[15,17],15],[[],16],[[],18],[[],19],[[],12],[[],13],[[],20],[[],21],[[],22],[[],23],[[],14],[[],15],[[12,12],12],[[13,13],13],[[14,14],14],[[15,15],15],[[12,12],12],[[13,13],13],[[14,14],14],[[15,15],15],[[22,13],13],[[17,17,17,17],23],[12,12],[13,13],[14,14],[15,15],[[12,12],12],[[13,13],13],[[14,14],14],[[15,15],15],[[12,12],12],[[13,13],13],[[14,14],14],[[15,15],15],[[12,12],12],[[12,17],12],[[13,13],13],[[13,17],13],[[14,17],14],[[14,14],14],[[15,17],15],[[15,15],15],[[12,17]],[[12,12]],[[13,17]],[[13,13]],[[14,17]],[[14,14]],[[15,15]],[[15,17]],[[12,12],12],[12,12],[13,13],[14,14],[15,15],[[19,37],13],[[20,37],12],[[21,37],14],[[22,37],15],[[7,12,12],12],[[8,13,13],13],[[8,14,14],14],[[9,15,15],15],[12,12],[13,13],[14,14],[15,15],[[23,23,17],23],[17,12],[17,13],[17,14],[17,15],[[16,16]],[[18,18]],[[19,19]],[[12,17],12],[[12,12],12],[[13,13],13],[[13,17],13],[[20,20]],[[21,21]],[[22,22]],[[23,23],23],[[14,17],14],[[14,14],14],[[15,15],15],[[15,17],15],[[19,19]],[[12,12]],[[12,17]],[[13,13]],[[13,17]],[[20,20]],[[21,21]],[[22,22]],[[14,14]],[[14,17]],[[15,17]],[[15,15]],[[20,20],20],[[19,19],19],[[21,21],21],[[22,22],22],[[],19],[[],12],[[],13],[[],20],[[],21],[[],22],[[],23],[[],14],[[],15],[12],[13],[23],[14],[15],[23],[16],[18],[19],[20],[21],[22],[16],[18],[19],[20],[21],[22],[[23,1]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[18],[22],[23,13],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[16,12],12],[[19,12],12],[[21,12],12],[[18,13],13],[[22,13],13],[[18,14],14],[[22,14],14],[[16,12],12],[[19,12],12],[[21,12],12],[[18,13],13],[[22,13],13],[[18,14],14],[[22,14],14],0,0,[19,19],[20,20],[21,21],[22,22],[13,12],[14,12],[15,13],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[12,[[38,[12]]]],[13,[[38,[13]]]],[14,[[38,[14]]]],[15,[[38,[15]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[17,17],12],[[17,17,17],13],[[17,17,17],14],[[17,17,17,17],15],0,0,0,[16],[18],[19],[20],[21],[22],[12],[13],[23],[14],[15],[15,12],[15,13],[15,15],[15,15],[15,15],[15,15],[15,13],[15,15],[15,15],[15,15],[15,15],[15,13],[15,15],[15,15],[15,15],[15,15],[15,13],[15,15],[15,15],[15,15],[15,15],[15,12],[15,13],[15,15],[15,15],[15,15],[15,15],[15,13],[15,15],[15,15],[15,15],[15,15],[15,13],[15,15],[15,15],[15,15],[15,15],[15,13],[15,15],[15,15],[15,15],[15,15],[15,12],[15,13],[15,15],[15,15],[15,15],[15,15],[15,13],[15,15],[15,15],[15,15],[15,15],[15,13],[15,15],[15,15],[15,15],[15,15],[15,13],[15,15],[15,15],[15,15],[15,15],[15,12],[15,13],[15,15],[15,15],[15,15],[15,15],[15,13],[15,15],[15,15],[15,15],[15,15],[15,13],[15,15],[15,15],[15,15],[15,15],[15,13],[15,15],[15,15],[15,15],[15,15],0,0,0,0,0,0,0,0,0,[15,12],[15,13],[15,15],[15,15],[15,15],[15,15],[15,13],[15,15],[15,15],[15,15],[15,15],[15,13],[15,15],[15,15],[15,15],[15,15],[15,13],[15,15],[15,15],[15,15],[15,15],[12,12],[13,12],[14,12],[15,12],[15,13],[15,15],[15,15],[15,15],[15,15],[12,13],[13,13],[14,14],[15,13],[15,15],[12,15],[13,15],[14,15],[15,15],[12,15],[13,15],[14,15],[15,15],[13,15],[14,15],[15,15],[12,13],[13,13],[14,14],[15,13],[15,15],[12,15],[13,15],[14,15],[15,15],[12,15],[13,15],[14,15],[15,15],[13,15],[14,15],[15,15],[13,13],[14,14],[15,13],[15,15],[13,15],[14,15],[15,15],[13,15],[14,15],[15,15],[13,15],[14,15],[15,15],[12,12],[13,12],[14,12],[15,12],[15,13],[15,15],[15,15],[15,15],[15,15],[12,13],[13,13],[14,14],[15,13],[15,15],[12,15],[13,15],[14,15],[15,15],[12,15],[13,15],[14,15],[15,15],[13,15],[14,15],[15,15],[12,13],[13,13],[14,14],[15,13],[15,15],[12,15],[13,15],[14,15],[15,15],[12,15],[13,15],[14,15],[15,15],[13,15],[14,15],[15,15],[13,13],[23,13],[14,14],[15,13],[15,15],[13,15],[14,15],[15,15],[13,15],[14,15],[15,15],[13,15],[14,15],[15,15],[13,12],[14,12],[15,12],[15,13],[15,15],[15,15],[15,15],[15,15],[13,13],[14,14],[15,13],[15,15],[13,15],[14,15],[15,15],[13,15],[14,15],[15,15],[13,15],[14,15],[15,15],[13,13],[14,14],[15,13],[15,15],[13,15],[14,15],[15,15],[13,15],[14,15],[15,15],[13,15],[14,15],[15,15],[13,13],[14,14],[15,13],[15,15],[13,15],[14,15],[15,15],[13,15],[14,15],[15,15],[13,15],[14,15],[15,15],0,0,0,0,0,0,0,0,0,[15,12],[15,13],[15,15],[15,15],[15,15],[15,15],[15,13],[15,15],[15,15],[15,15],[15,15],[15,13],[15,15],[15,15],[15,15],[15,15],[15,13],[15,15],[15,15],[15,15],[15,15],[12,12],[13,12],[14,12],[15,12],[15,13],[15,15],[15,15],[15,15],[15,15],[12,13],[13,13],[14,14],[15,13],[15,15],[12,15],[13,15],[14,15],[15,15],[12,15],[13,15],[14,15],[15,15],[13,15],[14,15],[15,15],[12,13],[13,13],[14,14],[15,13],[15,15],[12,15],[13,15],[14,15],[15,15],[12,15],[13,15],[14,15],[15,15],[13,15],[14,15],[15,15],[13,13],[14,14],[15,13],[15,15],[13,15],[14,15],[15,15],[13,15],[14,15],[15,15],[13,15],[14,15],[15,15],[12,12],[13,12],[14,12],[15,12],[15,13],[15,15],[15,15],[15,15],[15,15],[12,13],[13,13],[14,14],[15,13],[15,15],[12,15],[13,15],[14,15],[15,15],[12,15],[13,15],[14,15],[15,15],[13,15],[14,15],[15,15],[12,13],[13,13],[14,14],[15,13],[15,15],[12,15],[13,15],[14,15],[15,15],[12,15],[13,15],[14,15],[15,15],[13,15],[14,15],[15,15],[13,13],[14,14],[15,13],[15,15],[13,15],[14,15],[15,15],[13,15],[14,15],[15,15],[13,15],[14,15],[15,15],[13,12],[14,12],[15,12],[15,13],[15,15],[15,15],[15,15],[15,15],[13,13],[14,14],[15,13],[15,15],[13,15],[14,15],[15,15],[13,15],[14,15],[15,15],[13,15],[14,15],[15,15],[13,13],[14,14],[15,13],[15,15],[13,15],[14,15],[15,15],[13,15],[14,15],[15,15],[13,15],[14,15],[15,15],[13,13],[14,14],[15,13],[15,15],[13,15],[14,15],[15,15],[13,15],[14,15],[15,15],[13,15],[14,15],[15,15],0,0,0,0,0,0,0,[15,12],[15,13],[15,15],[15,15],[15,15],[15,15],[15,13],[15,15],[15,15],[15,15],[15,15],[15,13],[15,15],[15,15],[15,15],[15,15],[15,13],[15,15],[15,15],[15,15],[15,15],[13,12],[14,12],[15,12],[15,13],[15,15],[15,15],[15,15],[15,15],[13,13],[14,14],[15,13],[15,15],[13,15],[14,15],[15,15],[13,15],[14,15],[15,15],[13,15],[14,15],[15,15],[13,13],[14,14],[15,13],[15,15],[13,15],[14,15],[15,15],[13,15],[14,15],[15,15],[13,15],[14,15],[15,15],[13,13],[14,14],[15,13],[15,15],[13,15],[14,15],[15,15],[13,15],[14,15],[15,15],[13,15],[14,15],[15,15],[13,12],[14,12],[15,12],[15,13],[15,15],[15,15],[15,15],[15,15],[13,13],[14,14],[15,13],[15,15],[13,15],[14,15],[15,15],[13,15],[14,15],[15,15],[13,15],[14,15],[15,15],[13,13],[14,14],[15,13],[15,15],[13,15],[14,15],[15,15],[13,15],[14,15],[15,15],[13,15],[14,15],[15,15],[13,13],[14,14],[15,13],[15,15],[13,15],[14,15],[15,15],[13,15],[14,15],[15,15],[13,15],[14,15],[15,15],[13,12],[14,12],[15,12],[15,13],[15,15],[15,15],[15,15],[15,15],[13,13],[14,14],[15,13],[15,15],[13,15],[14,15],[15,15],[13,15],[14,15],[15,15],[13,15],[14,15],[15,15],[13,13],[14,14],[15,13],[15,15],[13,15],[14,15],[15,15],[13,15],[14,15],[15,15],[13,15],[14,15],[15,15],[13,13],[14,14],[15,13],[15,15],[13,15],[14,15],[15,15],[13,15],[14,15],[15,15],[13,15],[14,15],[15,15],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[27,27],[28,28],[29,29],[[39,39,40],2],[[41,41,40],2],[[24,24,40],2],[[25,25,40],2],[[26,26,40],2],[[30,30,40],2],[[27,27,40],2],[[28,28,40],2],[[29,29,40],2],[[39,39]],[[41,41]],[[24,24]],[[25,25]],[[26,26]],[[30,30],30],[[27,27],27],[[27,40],27],[[28,28],28],[[28,40],28],[[29,29],29],[[29,40],29],[[24,24]],[[25,25]],[[26,26]],[[27,40]],[[27,27]],[[28,40]],[[28,28]],[[29,40]],[[29,29]],[[24,24],24],[[25,25],25],[[26,26],26],[[30,30],40],[[27,27],40],[[28,28],40],[28,28],[28],[28,28],[30,23],[27,31],[28,32],[29,33],[24,20],[25,19],[26,22],[24],[25],[26],[27],[28],[29],[24],[25],[26],[30],[27],[28],[29],[27,34],[28,35],[29,36],[27,12],[28,13],[28,14],[29,15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[27,27],[28,28],[29,29],[[27,27,27],27],[[28,28,28],28],[[29,29,29],29],[[27,40,40],27],[[28,40,40],28],[[29,40,40],29],[[27,40],27],[[28,40],28],[[29,40],29],[[27,40],27],[[28,40],28],[[29,40],29],[39,39],[41,41],[24,24],[25,25],[26,26],[30,30],[27,27],[28,28],[29,29],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[27,27],7],[[28,28],8],[[29,29],9],[[27,27],7],[[28,28],8],[[29,29],9],[[27,27],7],[[28,28],8],[[29,29],9],[[27,27],7],[[28,28],8],[[29,29],9],[[27,27],7],[[28,28],8],[[29,29],9],[[27,27],7],[[28,28],8],[[29,29],9],[[24,37],27],[[25,37],28],[[26,37],29],[[24,37],27],[[25,37],28],[[26,37],29],[30,30],[[28,28],28],[[],39],[[],41],[[],24],[[],25],[[],26],[[],30],[[],27],[[],28],[[],29],[39],[41],[39],[41],[24,40],[25,40],[26,40],[[27,27],40],[[28,28],40],[[29,29],40],[[27,27],40],[[28,28],40],[[29,29],40],[[30,40],30],[[27,27],27],[[27,40],27],[[28,28],28],[[28,40],28],[[29,40],29],[[29,29],29],[[27,40]],[[27,27]],[[28,40]],[[28,28]],[[29,29]],[[29,40]],[[27,27],24],[[28,28,28],25],[[29,29,29,29],26],[[30,30],40],[[27,27],40],[[28,28],40],[[29,29],40],[[40,40,40,40],30],[[40,40],27],[[40,40,40],28],[[40,40,40,40],29],[[39,39],2],[[41,41],2],[[24,24],2],[[25,25],2],[[26,26],2],[[30,30],2],[[27,27],2],[[28,28],2],[[29,29],2],[27,27],[28,28],[29,29],[[27,40],28],[[28,40],29],[27,27],[28,28],[29,29],[[39,3],4],[[39,3],4],[[41,3],4],[[41,3],4],[[24,3],4],[[24,3],4],[[25,3],4],[[25,3],4],[[26,3],4],[[26,3],4],[[30,3],4],[[30,3],4],[[27,3],4],[[27,3],4],[[28,3],4],[[28,3],4],[[29,3],4],[[29,3],4],[27,27],[28,28],[29,29],[[]],[[]],[[]],[39,25],[[]],[41,26],[[]],[[]],[[]],[[],27],[[],27],[[],28],[[]],[[],28],[[],28],[[]],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[30,29],[41,30],[40,39],[40,24],[40,25],[40,27],[[40,27],39],[[],30],[[],27],[[],28],[[],29],[[28,40],41],[[28,40],25],[[28,40],26],[[28,40],30],[[27,27,27],39],[[28,28,28,28],41],[[27,27],24],[[28,28,28],25],[[29,29,29,29],26],[[],39],[[],41],[[],24],[[],25],[[],26],[[],39],[[],41],[[],24],[[],25],[[],26],[[],39],[[],41],[[],24],[[],25],[[],26],[27,24],[28,25],[29,26],[[1,40,40,40],25],[[1,40,40,40],26],[[1,40,40,40],30],[24,39],[24,25],[[24,27],39],[25,39],[25,41],[25,24],[25,26],[25,30],[[25,28],41],[26,41],[26,25],[26,30],[30,41],[30,25],[30,26],[[28,28],30],[[27,27],30],[[28,28],30],[[30,28],41],[[30,28],26],[40,41],[40,25],[40,26],[40,30],[40,41],[40,25],[40,26],[40,30],[40,41],[40,25],[40,26],[40,30],[27,39],[28,41],[27,25],[28,26],[[27,40],24],[[27,40,27],39],[[27,40,27],25],[[28,30,28],41],[[28,30,28],26],[28,30],[[],30],[[],27],[[],28],[[],29],[27,39],[28,41],[27,25],[28,26],[29,30],[[40,40,40,40],30],[[27,37]],[[28,37]],[[29,37]],[[27,37]],[[28,37]],[[29,37]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[39,39],[41,41],[24,24],[25,25],[26,26],[30,30],[39,2],[41,2],[24,2],[25,2],[26,2],[30,2],[27,2],[28,2],[29,2],[39,2],[41,2],[24,2],[25,2],[26,2],[30,2],[27,2],[28,2],[29,2],[27,7],[28,8],[29,9],[30,2],[30,2],[27,2],[28,2],[29,2],[30,40],[27,40],[28,40],[29,40],[30,40],[27,40],[28,40],[29,40],[30,40],[27,40],[28,40],[29,40],[[30,30,40],30],[[27,27,40],27],[[28,28,40],28],[[29,29,40],29],[[28,28,28],41],[[28,28,28],26],[[28,28,28],41],[[28,28,28],26],0,0,[[27,27],27],[[28,28],28],[[29,29],29],[27,40],[28,40],[29,40],[[27,27],27],[[28,28],28],[[29,29],29],[27,40],[28,40],[29,40],[[39,25]],[[39,40]],[[39,39]],[[41,40]],[[41,26]],[[41,41]],[[24,24]],[[24,40]],[[24,27]],[[25,25]],[[25,39]],[[25,40]],[[25,28]],[[26,26]],[[26,40]],[[26,41]],[[26,29]],[[30,40],30],[[30,30],30],[[30,28]],[[27,27],27],[[27,40],27],[[28,28],28],[[28,40],28],[[29,40],29],[[29,29],29],[[27,27,27],27],[[28,28,28],28],[[29,29,29],29],[[24,24]],[[24,40]],[[25,40]],[[25,25]],[[26,40]],[[26,26]],[[30,30]],[[27,27]],[[27,40]],[[28,40]],[[28,28]],[[29,29]],[[29,40]],[[24,24],24],[[25,25],25],[[26,26],26],[[30,30],30],[[24,40],24],[[25,40],25],[[26,40],26],[[24,27],27],[[25,28],28],[[30,28],28],[[26,29],29],[24],[25],[26],[30,30],[27,27],[28,28],[29,29],[[40,40],27],[[40,40,40],28],[[40,40,40,40],29],[30,30],[27,27],[28,28],[29,29],[27,27],[28,28],[29,29],[[40,40,40,40,40,40],26],[[40,40,40,40,40,40],26],[[40,40,40,40,40,40],26],[27,27],[[27,27],40],[[40,40,40],26],[[40,40,40],26],[[40,40,40],26],[[40,40,40],26],[[40,40,40,40],26],[[40,40,40,40],26],[[40,40,40,40],26],[[27,40],27],[[28,40],28],[[29,40],29],[[],39],[[],41],[[],24],[[],25],[[],26],[[],30],[[],27],[[],28],[[],29],[[27,27],27],[[28,28],28],[[29,29],29],[[27,27],27],[[28,28],28],[[29,29],29],[[26,28],28],[27,27],[28,28],[29,29],[[27,27],27],[[28,28],28],[[29,29],29],[[27,27],27],[[28,28],28],[[29,29],29],[[27,27],27],[[27,40],27],[[28,28],28],[[28,40],28],[[29,29],29],[[29,40],29],[[27,40]],[[27,27]],[[28,28]],[[28,40]],[[29,29]],[[29,40]],[[27,27],27],[27,27],[28,28],[29,29],[[24,37],27],[[25,37],28],[[26,37],29],[[7,27,27],27],[[8,28,28],28],[[9,29,29],29],[27,27],[28,28],[29,29],[[30,30,40],30],[40,27],[40,28],[40,29],[[39,39]],[[41,41]],[[24,24]],[[25,25]],[[26,26]],[[30,30],30],[[27,27],27],[[27,40],27],[[28,28],28],[[28,40],28],[[29,29],29],[[29,40],29],[[24,24]],[[25,25]],[[26,26]],[[27,40]],[[27,27]],[[28,28]],[[28,40]],[[29,29]],[[29,40]],[[24,24],24],[[25,25],25],[[26,26],26],[[],24],[[],25],[[],26],[[],30],[[],27],[[],28],[[],29],[30],[27],[28],[29],[30],[39],[41],[24],[25],[26],[39],[41],[24],[25],[26],[[30,1]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[41],[26],[30,28],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[39,27],27],[[25,27],27],[[41,28],28],[[26,28],28],[[39,27],27],[[25,27],27],[[41,28],28],[[26,28],28],0,0,[24,24],[25,25],[26,26],[28,27],[29,28],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[27,[[38,[27]]]],[28,[[38,[28]]]],[29,[[38,[29]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],0,0,0,[39],[41],[24],[25],[26],[30],[27],[28],[29],[29,27],[29,28],[29,29],[29,29],[29,29],[29,29],[29,28],[29,29],[29,29],[29,29],[29,29],[29,28],[29,29],[29,29],[29,29],[29,29],[29,28],[29,29],[29,29],[29,29],[29,29],[29,27],[29,28],[29,29],[29,29],[29,29],[29,29],[29,28],[29,29],[29,29],[29,29],[29,29],[29,28],[29,29],[29,29],[29,29],[29,29],[29,28],[29,29],[29,29],[29,29],[29,29],[29,27],[29,28],[29,29],[29,29],[29,29],[29,29],[29,28],[29,29],[29,29],[29,29],[29,29],[29,28],[29,29],[29,29],[29,29],[29,29],[29,28],[29,29],[29,29],[29,29],[29,29],[29,27],[29,28],[29,29],[29,29],[29,29],[29,29],[29,28],[29,29],[29,29],[29,29],[29,29],[29,28],[29,29],[29,29],[29,29],[29,29],[29,28],[29,29],[29,29],[29,29],[29,29],0,0,0,0,0,0,0,[29,27],[29,28],[29,29],[29,29],[29,29],[29,29],[29,28],[29,29],[29,29],[29,29],[29,29],[29,28],[29,29],[29,29],[29,29],[29,29],[29,28],[29,29],[29,29],[29,29],[29,29],[27,27],[28,27],[29,27],[29,28],[29,29],[29,29],[29,29],[29,29],[27,28],[28,28],[29,28],[29,29],[27,29],[28,29],[29,29],[27,29],[28,29],[29,29],[28,29],[29,29],[27,28],[28,28],[29,28],[29,29],[27,29],[28,29],[29,29],[27,29],[28,29],[29,29],[28,29],[29,29],[28,28],[29,28],[29,29],[28,29],[29,29],[28,29],[29,29],[28,29],[29,29],[27,27],[28,27],[29,27],[29,28],[29,29],[29,29],[29,29],[29,29],[27,28],[28,28],[29,28],[29,29],[27,29],[28,29],[29,29],[27,29],[28,29],[29,29],[28,29],[29,29],[27,28],[28,28],[29,28],[29,29],[27,29],[28,29],[29,29],[27,29],[28,29],[29,29],[28,29],[29,29],[30,28],[28,28],[29,28],[29,29],[28,29],[29,29],[28,29],[29,29],[28,29],[29,29],[28,27],[29,27],[29,28],[29,29],[29,29],[29,29],[29,29],[28,28],[29,28],[29,29],[28,29],[29,29],[28,29],[29,29],[28,29],[29,29],[28,28],[29,28],[29,29],[28,29],[29,29],[28,29],[29,29],[28,29],[29,29],[28,28],[29,28],[29,29],[28,29],[29,29],[28,29],[29,29],[28,29],[29,29],0,0,0,0,0,0,0,[29,27],[29,28],[29,29],[29,29],[29,29],[29,29],[29,28],[29,29],[29,29],[29,29],[29,29],[29,28],[29,29],[29,29],[29,29],[29,29],[29,28],[29,29],[29,29],[29,29],[29,29],[27,27],[28,27],[29,27],[29,28],[29,29],[29,29],[29,29],[29,29],[27,28],[28,28],[29,28],[29,29],[27,29],[28,29],[29,29],[27,29],[28,29],[29,29],[28,29],[29,29],[27,28],[28,28],[29,28],[29,29],[27,29],[28,29],[29,29],[27,29],[28,29],[29,29],[28,29],[29,29],[28,28],[29,28],[29,29],[28,29],[29,29],[28,29],[29,29],[28,29],[29,29],[27,27],[28,27],[29,27],[29,28],[29,29],[29,29],[29,29],[29,29],[27,28],[28,28],[29,28],[29,29],[27,29],[28,29],[29,29],[27,29],[28,29],[29,29],[28,29],[29,29],[27,28],[28,28],[29,28],[29,29],[27,29],[28,29],[29,29],[27,29],[28,29],[29,29],[28,29],[29,29],[28,28],[29,28],[29,29],[28,29],[29,29],[28,29],[29,29],[28,29],[29,29],[28,27],[29,27],[29,28],[29,29],[29,29],[29,29],[29,29],[28,28],[29,28],[29,29],[28,29],[29,29],[28,29],[29,29],[28,29],[29,29],[28,28],[29,28],[29,29],[28,29],[29,29],[28,29],[29,29],[28,29],[29,29],[28,28],[29,28],[29,29],[28,29],[29,29],[28,29],[29,29],[28,29],[29,29],0,0,0,0,0,[29,27],[29,28],[29,29],[29,29],[29,29],[29,29],[29,28],[29,29],[29,29],[29,29],[29,29],[29,28],[29,29],[29,29],[29,29],[29,29],[29,28],[29,29],[29,29],[29,29],[29,29],[28,27],[29,27],[29,28],[29,29],[29,29],[29,29],[29,29],[28,28],[29,28],[29,29],[28,29],[29,29],[28,29],[29,29],[28,29],[29,29],[28,28],[29,28],[29,29],[28,29],[29,29],[28,29],[29,29],[28,29],[29,29],[28,28],[29,28],[29,29],[28,29],[29,29],[28,29],[29,29],[28,29],[29,29],[28,27],[29,27],[29,28],[29,29],[29,29],[29,29],[29,29],[28,28],[29,28],[29,29],[28,29],[29,29],[28,29],[29,29],[28,29],[29,29],[28,28],[29,28],[29,29],[28,29],[29,29],[28,29],[29,29],[28,29],[29,29],[28,28],[29,28],[29,29],[28,29],[29,29],[28,29],[29,29],[28,29],[29,29],[28,27],[29,27],[29,28],[29,29],[29,29],[29,29],[29,29],[28,28],[29,28],[29,29],[28,29],[29,29],[28,29],[29,29],[28,29],[29,29],[28,28],[29,28],[29,29],[28,29],[29,29],[28,29],[29,29],[28,29],[29,29],[28,28],[29,28],[29,29],[28,29],[29,29],[28,29],[29,29],[28,29],[29,29],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[31,31],[32,32],[33,33],[[31,42],31],[[31,31],31],[[32,42],32],[[32,32],32],[[33,42],33],[[33,33],33],[[31,31]],[[31,42]],[[32,32]],[[32,42]],[[33,33]],[[33,42]],[31,27],[32,28],[33,29],[31],[32],[33],[31],[32],[33],[31,34],[32,35],[33,36],[31,12],[32,13],[32,14],[33,15],[[31,31]],[[31,42]],[[32,32]],[[32,42]],[[33,33]],[[33,42]],[[31,31]],[[31,42]],[[32,42]],[[32,32]],[[33,33]],[[33,42]],[[31,31]],[[31,42]],[[32,32]],[[32,42]],[[33,42]],[[33,33]],[[]],[[]],[[]],[[]],[[]],[[]],[[31,31,31],31],[[32,32,32],32],[[33,33,33],33],[31,31],[32,32],[33,33],[[]],[[]],[[]],[[31,31],7],[[32,32],8],[[33,33],9],[[31,31],7],[[32,32],8],[[33,33],9],[[31,31],7],[[32,32],8],[[33,33],9],[[31,31],7],[[32,32],8],[[33,33],9],[[31,31],7],[[32,32],8],[[33,33],9],[[31,31],7],[[32,32],8],[[33,33],9],[[32,32],32],[[],31],[[],32],[[],33],[[31,42],31],[[31,31],31],[[32,42],32],[[32,32],32],[[33,33],33],[[33,42],33],[[31,42]],[[31,31]],[[32,42]],[[32,32]],[[33,42]],[[33,33]],[[31,31],42],[[32,32],42],[[33,33],42],[[31,31],2],[[32,32],2],[[33,33],2],[[31,42],32],[[32,42],33],[[31,3],4],[[31,3],4],[[32,3],4],[[32,3],4],[[33,3],4],[[33,3],4],[[],31],[[]],[[],31],[[],32],[[],32],[[],32],[[]],[[],33],[[]],[[],33],[[],33],[[],33],[[],33],[[],33],[[],31],[[],32],[[],33],[[],31],[[],32],[[],33],[31],[32],[33],[[31,37]],[[32,37]],[[33,37]],[[31,37]],[[32,37]],[[33,37]],[[]],[[]],[[]],[[42,42],31],[[42,42,42],32],[[42,42,42,42],33],[[31,31],31],[[32,32],32],[[33,33],33],[31,42],[32,42],[33,42],[[31,31],31],[[32,32],32],[[33,33],33],[31,42],[32,42],[33,42],[[31,42],31],[[31,31],31],[[32,42],32],[[32,32],32],[[33,33],33],[[33,42],33],[[31,31]],[[31,42]],[[32,42]],[[32,32]],[[33,42]],[[33,33]],[31,31],[32,32],[33,33],[[42,42],31],[[42,42,42],32],[[42,42,42,42],33],[31],[32],[33],[31,31],[[31,31],42],[[],31],[[],32],[[],33],[[31,42],31],[[31,31],31],[[32,32],32],[[32,42],32],[[33,33],33],[[33,42],33],[[31,31]],[[31,42]],[[32,42]],[[32,32]],[[33,42]],[[33,33]],[[31,31],31],[[7,31,31],31],[[8,32,32],32],[[9,33,33],33],[[31,43]],[[31,10]],[[31,34]],[[31,31]],[[31,44]],[[31,45]],[[31,46]],[[31,42]],[[32,32]],[[32,46]],[[32,35]],[[32,42]],[[32,45]],[[32,43]],[[32,10]],[[32,44]],[[33,42]],[[33,44]],[[33,10]],[[33,45]],[[33,46]],[[33,36]],[[33,43]],[[33,33]],[[31,45]],[[31,42]],[[31,43]],[[31,34]],[[31,10]],[[31,31]],[[31,44]],[[31,46]],[[32,10]],[[32,45]],[[32,44]],[[32,43]],[[32,42]],[[32,35]],[[32,32]],[[32,46]],[[33,36]],[[33,10]],[[33,33]],[[33,43]],[[33,42]],[[33,44]],[[33,45]],[[33,46]],[31,31],[32,32],[33,33],[42,31],[42,32],[42,33],[[31,31],31],[[31,42],31],[[32,42],32],[[32,32],32],[[33,42],33],[[33,33],33],[[31,31]],[[31,42]],[[32,32]],[[32,42]],[[33,33]],[[33,42]],[[],31],[[],32],[[],33],[31],[32],[33],[[]],[[]],[[]],[[],11],[[],11],[[],11],[32,31],[33,32],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[],6],0,[31],[32],[33],[33,31],[33,32],[33,33],[33,33],[33,33],[33,33],[33,32],[33,33],[33,33],[33,33],[33,33],[33,32],[33,33],[33,33],[33,33],[33,33],[33,32],[33,33],[33,33],[33,33],[33,33],[33,31],[33,32],[33,33],[33,33],[33,33],[33,33],[33,32],[33,33],[33,33],[33,33],[33,33],[33,32],[33,33],[33,33],[33,33],[33,33],[33,32],[33,33],[33,33],[33,33],[33,33],[33,31],[33,32],[33,33],[33,33],[33,33],[33,33],[33,32],[33,33],[33,33],[33,33],[33,33],[33,32],[33,33],[33,33],[33,33],[33,33],[33,32],[33,33],[33,33],[33,33],[33,33],[33,31],[33,32],[33,33],[33,33],[33,33],[33,33],[33,32],[33,33],[33,33],[33,33],[33,33],[33,32],[33,33],[33,33],[33,33],[33,33],[33,32],[33,33],[33,33],[33,33],[33,33],0,0,0,[33,31],[33,32],[33,33],[33,33],[33,33],[33,33],[33,32],[33,33],[33,33],[33,33],[33,33],[33,32],[33,33],[33,33],[33,33],[33,33],[33,32],[33,33],[33,33],[33,33],[33,33],[31,31],[32,31],[33,31],[33,32],[33,33],[33,33],[33,33],[33,33],[31,32],[32,32],[33,32],[33,33],[31,33],[32,33],[33,33],[31,33],[32,33],[33,33],[32,33],[33,33],[31,32],[32,32],[33,32],[33,33],[31,33],[32,33],[33,33],[31,33],[32,33],[33,33],[32,33],[33,33],[32,32],[33,32],[33,33],[32,33],[33,33],[32,33],[33,33],[32,33],[33,33],[31,31],[32,31],[33,31],[33,32],[33,33],[33,33],[33,33],[33,33],[31,32],[32,32],[33,32],[33,33],[31,33],[32,33],[33,33],[31,33],[32,33],[33,33],[32,33],[33,33],[31,32],[32,32],[33,32],[33,33],[31,33],[32,33],[33,33],[31,33],[32,33],[33,33],[32,33],[33,33],[32,32],[33,32],[33,33],[32,33],[33,33],[32,33],[33,33],[32,33],[33,33],[32,31],[33,31],[33,32],[33,33],[33,33],[33,33],[33,33],[32,32],[33,32],[33,33],[32,33],[33,33],[32,33],[33,33],[32,33],[33,33],[32,32],[33,32],[33,33],[32,33],[33,33],[32,33],[33,33],[32,33],[33,33],[32,32],[33,32],[33,33],[32,33],[33,33],[32,33],[33,33],[32,33],[33,33],0,0,0,[33,31],[33,32],[33,33],[33,33],[33,33],[33,33],[33,32],[33,33],[33,33],[33,33],[33,33],[33,32],[33,33],[33,33],[33,33],[33,33],[33,32],[33,33],[33,33],[33,33],[33,33],[31,31],[32,31],[33,31],[33,32],[33,33],[33,33],[33,33],[33,33],[31,32],[32,32],[33,32],[33,33],[31,33],[32,33],[33,33],[31,33],[32,33],[33,33],[32,33],[33,33],[31,32],[32,32],[33,32],[33,33],[31,33],[32,33],[33,33],[31,33],[32,33],[33,33],[32,33],[33,33],[32,32],[33,32],[33,33],[32,33],[33,33],[32,33],[33,33],[32,33],[33,33],[31,31],[32,31],[33,31],[33,32],[33,33],[33,33],[33,33],[33,33],[31,32],[32,32],[33,32],[33,33],[31,33],[32,33],[33,33],[31,33],[32,33],[33,33],[32,33],[33,33],[31,32],[32,32],[33,32],[33,33],[31,33],[32,33],[33,33],[31,33],[32,33],[33,33],[32,33],[33,33],[32,32],[33,32],[33,33],[32,33],[33,33],[32,33],[33,33],[32,33],[33,33],[32,31],[33,31],[33,32],[33,33],[33,33],[33,33],[33,33],[32,32],[33,32],[33,33],[32,33],[33,33],[32,33],[33,33],[32,33],[33,33],[32,32],[33,32],[33,33],[32,33],[33,33],[32,33],[33,33],[32,33],[33,33],[32,32],[33,32],[33,33],[32,33],[33,33],[32,33],[33,33],[32,33],[33,33],0,0,[33,31],[33,32],[33,33],[33,33],[33,33],[33,33],[33,32],[33,33],[33,33],[33,33],[33,33],[33,32],[33,33],[33,33],[33,33],[33,33],[33,32],[33,33],[33,33],[33,33],[33,33],[32,31],[33,31],[33,32],[33,33],[33,33],[33,33],[33,33],[32,32],[33,32],[33,33],[32,33],[33,33],[32,33],[33,33],[32,33],[33,33],[32,32],[33,32],[33,33],[32,33],[33,33],[32,33],[33,33],[32,33],[33,33],[32,32],[33,32],[33,33],[32,33],[33,33],[32,33],[33,33],[32,33],[33,33],[32,31],[33,31],[33,32],[33,33],[33,33],[33,33],[33,33],[32,32],[33,32],[33,33],[32,33],[33,33],[32,33],[33,33],[32,33],[33,33],[32,32],[33,32],[33,33],[32,33],[33,33],[32,33],[33,33],[32,33],[33,33],[32,32],[33,32],[33,33],[32,33],[33,33],[32,33],[33,33],[32,33],[33,33],[32,31],[33,31],[33,32],[33,33],[33,33],[33,33],[33,33],[32,32],[33,32],[33,33],[32,33],[33,33],[32,33],[33,33],[32,33],[33,33],[32,32],[33,32],[33,33],[32,33],[33,33],[32,33],[33,33],[32,33],[33,33],[32,32],[33,32],[33,33],[32,33],[33,33],[32,33],[33,33],[32,33],[33,33],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[34,10],34],[[34,34],34],[[35,35],35],[[35,10],35],[[36,10],36],[[36,36],36],[[34,34]],[[34,10]],[[35,10]],[[35,35]],[[36,36]],[[36,10]],[34,27],[35,28],[36,29],[34,31],[35,32],[36,33],[34],[35],[36],[34],[35],[36],[34,12],[35,13],[35,14],[36,15],[[34,34]],[[34,10]],[[35,35]],[[35,10]],[[36,10]],[[36,36]],[[34,34]],[[34,10]],[[35,35]],[[35,10]],[[36,10]],[[36,36]],[[34,10]],[[34,34]],[[35,35]],[[35,10]],[[36,36]],[[36,10]],[[]],[[]],[[]],[[]],[[]],[[]],[[34,34,34],34],[[35,35,35],35],[[36,36,36],36],[34,34],[35,35],[36,36],[[]],[[]],[[]],[[34,34],7],[[35,35],8],[[36,36],9],[[34,34],7],[[35,35],8],[[36,36],9],[[34,34],7],[[35,35],8],[[36,36],9],[[34,34],7],[[35,35],8],[[36,36],9],[[34,34],7],[[35,35],8],[[36,36],9],[[34,34],7],[[35,35],8],[[36,36],9],[[35,35],35],[[],34],[[],35],[[],36],[[34,34],34],[[34,10],34],[[35,10],35],[[35,35],35],[[36,10],36],[[36,36],36],[[34,34]],[[34,10]],[[35,10]],[[35,35]],[[36,36]],[[36,10]],[[34,34],10],[[35,35],10],[[36,36],10],[[34,34],2],[[35,35],2],[[36,36],2],[[34,10],35],[[35,10],36],[[34,3],4],[[34,3],4],[[35,3],4],[[35,3],4],[[36,3],4],[[36,3],4],[[],34],[[],34],[[]],[[],35],[[]],[[],35],[[],35],[[],36],[[],36],[[],36],[[],36],[[],36],[[]],[[],36],[[],34],[[],35],[[],36],[[],34],[[],35],[[],36],[34],[35],[36],[[34,37]],[[35,37]],[[36,37]],[[34,37]],[[35,37]],[[36,37]],[[]],[[]],[[]],[[34,34],34],[[35,35],35],[[36,36],36],[34,10],[35,10],[36,10],[[34,34],34],[[35,35],35],[[36,36],36],[34,10],[35,10],[36,10],[[34,10],34],[[34,34],34],[[35,10],35],[[35,35],35],[[36,36],36],[[36,10],36],[[34,34]],[[34,10]],[[35,35]],[[35,10]],[[36,36]],[[36,10]],[[10,10],34],[[10,10,10],35],[[10,10,10,10],36],[34],[35],[36],[[],34],[[],35],[[],36],[[34,10],34],[[34,34],34],[[35,35],35],[[35,10],35],[[36,36],36],[[36,10],36],[[34,34]],[[34,10]],[[35,35]],[[35,10]],[[36,10]],[[36,36]],[[7,34,34],34],[[8,35,35],35],[[9,36,36],36],[[34,46]],[[34,45]],[[34,34]],[[34,43]],[[34,44]],[[34,31]],[[34,10]],[[34,42]],[[35,42]],[[35,35]],[[35,44]],[[35,43]],[[35,32]],[[35,10]],[[35,46]],[[35,45]],[[36,43]],[[36,10]],[[36,46]],[[36,33]],[[36,44]],[[36,36]],[[36,42]],[[36,45]],[[34,43]],[[34,42]],[[34,10]],[[34,45]],[[34,31]],[[34,34]],[[34,44]],[[34,46]],[[35,35]],[[35,32]],[[35,43]],[[35,42]],[[35,46]],[[35,45]],[[35,10]],[[35,44]],[[36,10]],[[36,46]],[[36,42]],[[36,43]],[[36,44]],[[36,33]],[[36,45]],[[36,36]],[10,34],[10,35],[10,36],[[34,34],34],[[34,10],34],[[35,35],35],[[35,10],35],[[36,10],36],[[36,36],36],[[34,10]],[[34,34]],[[35,35]],[[35,10]],[[36,36]],[[36,10]],[[],34],[[],35],[[],36],[34],[35],[36],[[]],[[]],[[]],[[],11],[[],11],[[],11],[35,34],[36,35],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[],6],[[10,10],34],[[10,10,10],35],[[10,10,10,10],36],0,[34],[35],[36],[36,34],[36,35],[36,36],[36,36],[36,36],[36,36],[36,35],[36,36],[36,36],[36,36],[36,36],[36,35],[36,36],[36,36],[36,36],[36,36],[36,35],[36,36],[36,36],[36,36],[36,36],[36,34],[36,35],[36,36],[36,36],[36,36],[36,36],[36,35],[36,36],[36,36],[36,36],[36,36],[36,35],[36,36],[36,36],[36,36],[36,36],[36,35],[36,36],[36,36],[36,36],[36,36],[36,34],[36,35],[36,36],[36,36],[36,36],[36,36],[36,35],[36,36],[36,36],[36,36],[36,36],[36,35],[36,36],[36,36],[36,36],[36,36],[36,35],[36,36],[36,36],[36,36],[36,36],[36,34],[36,35],[36,36],[36,36],[36,36],[36,36],[36,35],[36,36],[36,36],[36,36],[36,36],[36,35],[36,36],[36,36],[36,36],[36,36],[36,35],[36,36],[36,36],[36,36],[36,36],0,0,0,[36,34],[36,35],[36,36],[36,36],[36,36],[36,36],[36,35],[36,36],[36,36],[36,36],[36,36],[36,35],[36,36],[36,36],[36,36],[36,36],[36,35],[36,36],[36,36],[36,36],[36,36],[34,34],[35,34],[36,34],[36,35],[36,36],[36,36],[36,36],[36,36],[34,35],[35,35],[36,35],[36,36],[34,36],[35,36],[36,36],[34,36],[35,36],[36,36],[35,36],[36,36],[34,35],[35,35],[36,35],[36,36],[34,36],[35,36],[36,36],[34,36],[35,36],[36,36],[35,36],[36,36],[35,35],[36,35],[36,36],[35,36],[36,36],[35,36],[36,36],[35,36],[36,36],[34,34],[35,34],[36,34],[36,35],[36,36],[36,36],[36,36],[36,36],[34,35],[35,35],[36,35],[36,36],[34,36],[35,36],[36,36],[34,36],[35,36],[36,36],[35,36],[36,36],[34,35],[35,35],[36,35],[36,36],[34,36],[35,36],[36,36],[34,36],[35,36],[36,36],[35,36],[36,36],[35,35],[36,35],[36,36],[35,36],[36,36],[35,36],[36,36],[35,36],[36,36],[35,34],[36,34],[36,35],[36,36],[36,36],[36,36],[36,36],[35,35],[36,35],[36,36],[35,36],[36,36],[35,36],[36,36],[35,36],[36,36],[35,35],[36,35],[36,36],[35,36],[36,36],[35,36],[36,36],[35,36],[36,36],[35,35],[36,35],[36,36],[35,36],[36,36],[35,36],[36,36],[35,36],[36,36],0,0,0,[36,34],[36,35],[36,36],[36,36],[36,36],[36,36],[36,35],[36,36],[36,36],[36,36],[36,36],[36,35],[36,36],[36,36],[36,36],[36,36],[36,35],[36,36],[36,36],[36,36],[36,36],[34,34],[35,34],[36,34],[36,35],[36,36],[36,36],[36,36],[36,36],[34,35],[35,35],[36,35],[36,36],[34,36],[35,36],[36,36],[34,36],[35,36],[36,36],[35,36],[36,36],[34,35],[35,35],[36,35],[36,36],[34,36],[35,36],[36,36],[34,36],[35,36],[36,36],[35,36],[36,36],[35,35],[36,35],[36,36],[35,36],[36,36],[35,36],[36,36],[35,36],[36,36],[34,34],[35,34],[36,34],[36,35],[36,36],[36,36],[36,36],[36,36],[34,35],[35,35],[36,35],[36,36],[34,36],[35,36],[36,36],[34,36],[35,36],[36,36],[35,36],[36,36],[34,35],[35,35],[36,35],[36,36],[34,36],[35,36],[36,36],[34,36],[35,36],[36,36],[35,36],[36,36],[35,35],[36,35],[36,36],[35,36],[36,36],[35,36],[36,36],[35,36],[36,36],[35,34],[36,34],[36,35],[36,36],[36,36],[36,36],[36,36],[35,35],[36,35],[36,36],[35,36],[36,36],[35,36],[36,36],[35,36],[36,36],[35,35],[36,35],[36,36],[35,36],[36,36],[35,36],[36,36],[35,36],[36,36],[35,35],[36,35],[36,36],[35,36],[36,36],[35,36],[36,36],[35,36],[36,36],0,0,[36,34],[36,35],[36,36],[36,36],[36,36],[36,36],[36,35],[36,36],[36,36],[36,36],[36,36],[36,35],[36,36],[36,36],[36,36],[36,36],[36,35],[36,36],[36,36],[36,36],[36,36],[35,34],[36,34],[36,35],[36,36],[36,36],[36,36],[36,36],[35,35],[36,35],[36,36],[35,36],[36,36],[35,36],[36,36],[35,36],[36,36],[35,35],[36,35],[36,36],[35,36],[36,36],[35,36],[36,36],[35,36],[36,36],[35,35],[36,35],[36,36],[35,36],[36,36],[35,36],[36,36],[35,36],[36,36],[35,34],[36,34],[36,35],[36,36],[36,36],[36,36],[36,36],[35,35],[36,35],[36,36],[35,36],[36,36],[35,36],[36,36],[35,36],[36,36],[35,35],[36,35],[36,36],[35,36],[36,36],[35,36],[36,36],[35,36],[36,36],[35,35],[36,35],[36,36],[35,36],[36,36],[35,36],[36,36],[35,36],[36,36],[35,34],[36,34],[36,35],[36,36],[36,36],[36,36],[36,36],[35,35],[36,35],[36,36],[35,36],[36,36],[35,36],[36,36],[35,36],[36,36],[35,35],[36,35],[36,36],[35,36],[36,36],[35,36],[36,36],[35,36],[36,36],[35,35],[36,35],[36,36],[35,36],[36,36],[35,36],[36,36],[35,36],[36,36]],"p":[[4,"EulerRot"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"],[3,"BVec2"],[3,"BVec3"],[3,"BVec4"],[15,"u32"],[3,"String"],[3,"Vec2"],[3,"Vec3"],[3,"Vec3A"],[3,"Vec4"],[3,"Affine2"],[15,"f32"],[3,"Affine3A"],[3,"Mat3"],[3,"Mat2"],[3,"Mat3A"],[3,"Mat4"],[3,"Quat"],[3,"DMat2"],[3,"DMat3"],[3,"DMat4"],[3,"DVec2"],[3,"DVec3"],[3,"DVec4"],[3,"DQuat"],[3,"IVec2"],[3,"IVec3"],[3,"IVec4"],[3,"UVec2"],[3,"UVec3"],[3,"UVec4"],[15,"usize"],[4,"Option"],[3,"DAffine2"],[15,"f64"],[3,"DAffine3"],[15,"i32"],[15,"u16"],[15,"i16"],[15,"u8"],[15,"i8"],[8,"Vec3Swizzles"],[8,"Vec4Swizzles"],[8,"Vec2Swizzles"]],"a":{"cross":[1346,2774,3679],"determinant":[1346,2774,3679],"magnitude":[1200,1201,1202,1203,1204,2666,2667,2668,2669],"magnitude2":[1210,1211,1212,1213,1214,2674,2675,2676,2677],"mix":[1215,1216,1217,1218,1219,2678,2679,2680,2681],"scale":[1072,1073,1074,1075,2561,2562,2563],"wedge":[1346,2774,3679]}},\
"hashbrown":{"doc":"This crate is a Rust port of Google’s high-performance …","t":"NNIDDELLLLLKLLLAALLLLLMGDDEEDDDDDDDNNNDDDDDEDDNNNDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLDDDEDDDDNDDDNDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["AllocError","CapacityOverflow","Equivalent","HashMap","HashSet","TryReserveError","borrow","borrow_mut","clone","clone_into","eq","equivalent","equivalent","fmt","from","hash_map","hash_set","into","to_owned","try_from","try_into","type_id","layout","DefaultHashBuilder","Drain","DrainFilter","Entry","EntryRef","HashMap","IntoIter","IntoKeys","IntoValues","Iter","IterMut","Keys","Occupied","Occupied","Occupied","OccupiedEntry","OccupiedEntryRef","OccupiedError","RawEntryBuilder","RawEntryBuilderMut","RawEntryMut","RawOccupiedEntryMut","RawVacantEntryMut","Vacant","Vacant","Vacant","VacantEntry","VacantEntryRef","Values","ValuesMut","allocator","and_modify","and_modify","and_modify","and_replace_entry_with","and_replace_entry_with","and_replace_entry_with","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","contains_key","default","drain","drain_filter","drop","entry","entry","entry_ref","eq","equivalent","extend","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_hash","from_hash","from_iter","from_key","from_key","from_key_hashed_nocheck","from_key_hashed_nocheck","get","get","get","get","get_key_value","get_key_value","get_key_value_mut","get_key_value_mut","get_many_key_value_mut","get_many_key_value_unchecked_mut","get_many_mut","get_many_unchecked_mut","get_mut","get_mut","get_mut","get_mut","hasher","index","insert","insert","insert","insert","insert","insert","insert","insert","insert","insert","insert_hashed_nocheck","insert_key","insert_unique_unchecked","insert_with_hasher","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_key","into_key","into_key","into_key_value","into_keys","into_mut","into_mut","into_mut","into_values","is_empty","iter","iter_mut","key","key","key","key","key","key","key","key_mut","keys","len","len","len","len","len","len","len","len","len","len","new","new_in","next","next","next","next","next","next","next","next","next","next","or_default","or_default","or_insert","or_insert","or_insert","or_insert_with","or_insert_with","or_insert_with","or_insert_with_key","or_insert_with_key","raw_entry","raw_entry_mut","remove","remove","remove","remove","remove_entry","remove_entry","remove_entry","remove_entry","replace_entry","replace_entry","replace_entry_with","replace_entry_with","replace_entry_with","replace_key","replace_key","reserve","retain","shrink_to","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_insert","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_reserve","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","values","values_mut","with_capacity","with_capacity_and_hasher","with_capacity_and_hasher_in","with_capacity_in","with_hasher","with_hasher_in","Difference","Drain","DrainFilter","Entry","HashSet","Intersection","IntoIter","Iter","Occupied","OccupiedEntry","SymmetricDifference","Union","Vacant","VacantEntry","allocator","bitand","bitor","bitxor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","contains","default","difference","drain","drain_filter","drop","entry","eq","equivalent","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","get","get","get","get","get_or_insert","get_or_insert_owned","get_or_insert_with","hasher","insert","insert","insert","insert_unique_unchecked","intersection","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_value","is_disjoint","is_empty","is_subset","is_superset","iter","len","len","len","len","new","new_in","next","next","next","next","next","next","next","next","or_insert","remove","remove","replace","replace","reserve","retain","shrink_to","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","sub","symmetric_difference","take","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_reserve","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","with_capacity","with_capacity_and_hasher","with_capacity_and_hasher_in","with_capacity_in","with_hasher","with_hasher_in"],"q":["hashbrown","","","","","","","","","","","","","","","","","","","","","","hashbrown::TryReserveError","hashbrown::hash_maphashbrown::hash_setd":["The memory allocator returned an error","Error due to the computed capacity exceeding the collection…","Key equivalence trait.","A hash map implemented with quadratic probing and SIMD …","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.","The error type for <code>try_reserve</code> methods.","","","","","","Checks if this value is equivalent to the given key.","","","Returns the argument unchanged.","A hash map implemented with quadratic probing and SIMD …","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.","Calls <code>U::from(self)</code>.","","","","","The layout of the allocation request that failed.","Default hasher for <code>HashMap</code>.","A draining iterator over the entries of a <code>HashMap</code> in …","A draining iterator over entries of a <code>HashMap</code> which don’…","A view into a single entry in a map, which may either be …","A view into a single entry in a map, which may either be …","A hash map implemented with quadratic probing and SIMD …","An owning iterator over the entries of a <code>HashMap</code> in …","An owning iterator over the keys of a <code>HashMap</code> in arbitrary …","An owning iterator over the values of a <code>HashMap</code> in …","An iterator over the entries of a <code>HashMap</code> in arbitrary …","A mutable iterator over the entries of a <code>HashMap</code> in …","An iterator over the keys of a <code>HashMap</code> in arbitrary order. …","An occupied entry.","An occupied entry.","An occupied entry.","A view into an occupied entry in a <code>HashMap</code>. It is part of …","A view into an occupied entry in a <code>HashMap</code>. It is part of …","The error returned by <code>try_insert</code> when the key already …","A builder for computing where in a <code>HashMap</code> a key-value …","A builder for computing where in a <code>HashMap</code> a key-value …","A view into a single entry in a map, which may either be …","A view into an occupied entry in a <code>HashMap</code>. It is part of …","A view into a vacant entry in a <code>HashMap</code>. It is part of the …","A vacant entry.","A vacant entry.","A vacant entry.","A view into a vacant entry in a <code>HashMap</code>. It is part of the …","A view into a vacant entry in a <code>HashMap</code>. It is part of the …","An iterator over the values of a <code>HashMap</code> in arbitrary …","A mutable iterator over the values of a <code>HashMap</code> in …","Returns a reference to the underlying allocator.","Provides in-place mutable access to an occupied entry …","Provides in-place mutable access to an occupied entry …","Provides in-place mutable access to an occupied entry …","Provides shared access to the key and owned access to the …","Provides shared access to the key and owned access to the …","Provides shared access to the key and owned access to the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the number of elements the map can hold without …","Clears the map, removing all key-value pairs. Keeps the …","","","","","","","","","","Returns <code>true</code> if the map contains a value for the specified …","Creates an empty <code>HashMap&lt;K, V, S, A&gt;</code>, with the <code>Default</code> …","Clears the map, returning all key-value pairs as an …","Drains elements which are true under the given predicate, …","","Gets the given key’s corresponding entry in the map for …","The entry in the map that was already occupied.","Gets the given key’s corresponding entry by reference in …","","","Inserts all new key-values from the iterator to existing …","Inserts all new key-values from the iterator to existing …","Inserts all new key-values from the iterator to existing …","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Examples","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a <code>RawEntryMut</code> from the given hash and matching …","Access an immutable entry by hash and matching function.","","Creates a <code>RawEntryMut</code> from the given key.","Access an immutable entry by key.","Creates a <code>RawEntryMut</code> from the given key and its hash.","Access an immutable entry by a key and its hash.","Returns a reference to the value corresponding to the key.","Gets a reference to the value in the entry.","Gets a reference to the value in the entry.","Gets a reference to the value in the entry.","Returns the key-value pair corresponding to the supplied …","Gets a reference to the key and value in the entry.","Returns the key-value pair corresponding to the supplied …","Gets a mutable reference to the key and value in the entry.","Attempts to get mutable references to <code>N</code> values in the map …","Attempts to get mutable references to <code>N</code> values in the map …","Attempts to get mutable references to <code>N</code> values in the map …","Attempts to get mutable references to <code>N</code> values in the map …","Returns a mutable reference to the value corresponding to …","Gets a mutable reference to the value in the entry.","Gets a mutable reference to the value in the entry.","Gets a mutable reference to the value in the entry.","Returns a reference to the map’s <code>BuildHasher</code>.","Returns a reference to the value corresponding to the …","Inserts a key-value pair into the map.","Sets the value of the entry, and returns a …","Sets the value of the entry, and returns the entry’s old …","Sets the value of the entry with the VacantEntry’s key, …","Sets the value of the entry, and returns an OccupiedEntry.","Sets the value of the entry, and returns the entry’s old …","Sets the value of the entry with the VacantEntry’s key, …","Sets the value of the entry, and returns an …","Sets the value of the entry, and returns the entry’s old …","Sets the value of the entry with the VacantEntryRef’s …","Sets the value of the entry with the VacantEntry’s key, …","Sets the value of the entry, and returns the entry’s old …","Insert a key-value pair into the map without checking if …","Set the value of an entry with a custom hasher function.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a consuming iterator, that is, one that moves each …","Creates an iterator over the entries of a <code>HashMap</code> in …","Creates an iterator over the entries of a <code>HashMap</code> in …","","","","","","","","","","","Converts the entry into a mutable reference to the key in …","Take ownership of the key.","Take ownership of the key.","Converts the OccupiedEntry into a mutable reference to the …","Creates a consuming iterator visiting all the keys in …","Converts the OccupiedEntry into a mutable reference to the …","Converts the OccupiedEntry into a mutable reference to the …","Converts the OccupiedEntryRef into a mutable reference to …","Creates a consuming iterator visiting all the values in …","Returns <code>true</code> if the map contains no elements.","An iterator visiting all key-value pairs in arbitrary …","An iterator visiting all key-value pairs in arbitrary …","Gets a reference to the key in the entry.","Returns a reference to this entry’s key.","Gets a reference to the key in the entry.","Gets a reference to the key that would be used when …","Returns a reference to this entry’s key.","Gets a reference to the key in the entry.","Gets a reference to the key that would be used when …","Gets a mutable reference to the key in the entry.","An iterator visiting all keys in arbitrary order. The …","Returns the number of elements in the map.","","","","","","","","","","Creates an empty <code>HashMap</code>.","Creates an empty <code>HashMap</code> using the given allocator.","","","","","","","","","","","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the result of …","Ensures a value is in the entry by inserting the result of …","Ensures a value is in the entry by inserting the result of …","Ensures a value is in the entry by inserting, if empty, …","Ensures a value is in the entry by inserting, if empty, …","Creates a raw immutable entry builder for the HashMap.","Creates a raw entry builder for the HashMap.","Removes a key from the map, returning the value at the key …","Takes the value out of the entry, and returns it.","Takes the value out of the entry, and returns it. Keeps …","Takes the value out of the entry, and returns it. Keeps …","Removes a key from the map, returning the stored key and …","Take the ownership of the key and value from the map.","Take the ownership of the key and value from the map. …","Take the ownership of the key and value from the map. …","Replaces the entry, returning the old key and value. The …","Replaces the entry, returning the old key and value. The …","Provides shared access to the key and owned access to the …","Provides shared access to the key and owned access to the …","Provides shared access to the key and owned access to the …","Replaces the key in the hash map with the key used to …","Replaces the key in the hash map with the key used to …","Reserves capacity for at least <code>additional</code> more elements to …","Retains only the elements specified by the predicate. …","Shrinks the capacity of the map with a lower limit. It …","Shrinks the capacity of the map as much as possible. It …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Tries to insert a key-value pair into the map, and returns …","","","","","","","","","","","","","","","","","","","","","","","","Tries to reserve capacity for at least <code>additional</code> more …","","","","","","","","","","","","","","","","","","","","","","","","The value which was not inserted, because the entry was …","An iterator visiting all values in arbitrary order. The …","An iterator visiting all values mutably in arbitrary order.","Creates an empty <code>HashMap</code> with the specified capacity.","Creates an empty <code>HashMap</code> with the specified capacity, …","Creates an empty <code>HashMap</code> with the specified capacity, …","Creates an empty <code>HashMap</code> with the specified capacity using …","Creates an empty <code>HashMap</code> which will use the given hash …","Creates an empty <code>HashMap</code> which will use the given hash …","A lazy iterator producing elements in the difference of …","A draining iterator over the items of a <code>HashSet</code>.","A draining iterator over entries of a <code>HashSet</code> which don’…","A view into a single entry in a set, which may either be …","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.","A lazy iterator producing elements in the intersection of …","An owning iterator over the items of a <code>HashSet</code>.","An iterator over the items of a <code>HashSet</code>.","An occupied entry.","A view into an occupied entry in a <code>HashSet</code>. It is part of …","A lazy iterator producing elements in the symmetric …","A lazy iterator producing elements in the union of <code>HashSet</code>…","A vacant entry.","A view into a vacant entry in a <code>HashSet</code>. It is part of the …","Returns a reference to the underlying allocator.","Returns the intersection of <code>self</code> and <code>rhs</code> as a new …","Returns the union of <code>self</code> and <code>rhs</code> as a new <code>HashSet&lt;T, S&gt;</code>.","Returns the symmetric difference of <code>self</code> and <code>rhs</code> as a new …","","","","","","","","","","","","","","","","","","","","","","","","","Returns the number of elements the set can hold without …","Clears the set, removing all values.","","","","","","","","","","","","","","Returns <code>true</code> if the set contains a value.","Creates an empty <code>HashSet&lt;T, S&gt;</code> with the <code>Default</code> value for …","Visits the values representing the difference, i.e., the …","Clears the set, returning all elements in an iterator.","Drains elements which are true under the given predicate, …","","Gets the given value’s corresponding entry in the set …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Examples","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns a reference to the value in the set, if any, that …","Returns a reference to this entry’s value.","Gets a reference to the value in the entry.","Gets a reference to the value that would be used when …","Inserts the given <code>value</code> into the set if it is not present, …","Inserts an owned copy of the given <code>value</code> into the set if …","Inserts a value computed from <code>f</code> into the set if the given …","Returns a reference to the set’s <code>BuildHasher</code>.","Adds a value to the set.","Sets the value of the entry, and returns an OccupiedEntry.","Sets the value of the entry with the VacantEntry’s value.","Insert a value the set without checking if the value …","Visits the values representing the intersection, i.e., the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a consuming iterator, that is, one that moves each …","","","","","","","","","","Take ownership of the value.","Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>. …","Returns <code>true</code> if the set contains no elements.","Returns <code>true</code> if the set is a subset of another, i.e., <code>other</code>…","Returns <code>true</code> if the set is a superset of another, i.e., …","An iterator visiting all elements in arbitrary order. The …","Returns the number of elements in the set.","","","","Creates an empty <code>HashSet</code>.","Creates an empty <code>HashSet</code>.","","","","","","","","","Ensures a value is in the entry by inserting if it was …","Removes a value from the set. Returns whether the value was","Takes the value out of the entry, and returns it. Keeps …","Adds a value to the set, replacing the existing value, if …","Replaces the entry, returning the old value. The new value …","Reserves capacity for at least <code>additional</code> more elements to …","Retains only the elements specified by the predicate.","Shrinks the capacity of the set with a lower limit. It …","Shrinks the capacity of the set as much as possible. It …","","","","","","","","","Returns the difference of <code>self</code> and <code>rhs</code> as a new …","Visits the values representing the symmetric difference, …","Removes and returns the value in the set, if any, that is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Tries to reserve capacity for at least <code>additional</code> more …","","","","","","","","","","","","","Visits the values representing the union, i.e., all the …","Creates an empty <code>HashSet</code> with the specified capacity.","Creates an empty <code>HashSet</code> with the specified capacity, using","Creates an empty <code>HashSet</code> with the specified capacity, using","Creates an empty <code>HashSet</code> with the specified capacity.","Creates a new empty hash set which will use the given …","Creates a new empty hash set which will use the given …"],"i":[1,1,0,0,0,0,1,1,1,1,1,56,1,1,1,0,0,1,1,1,1,1,57,0,0,0,0,0,0,0,0,0,0,0,0,9,10,12,0,0,0,0,0,0,0,0,9,10,12,0,0,0,0,8,9,10,12,9,10,12,8,14,21,22,23,24,15,16,17,18,25,26,9,27,28,29,10,30,31,12,33,34,35,8,14,21,22,23,24,15,16,17,18,25,26,9,27,28,29,10,30,31,12,33,34,35,8,8,8,14,15,16,8,8,14,15,16,8,8,8,8,18,8,35,8,8,8,8,8,8,8,14,21,22,23,24,15,16,17,25,26,9,27,28,29,10,30,31,12,33,34,35,35,8,8,14,21,22,23,24,15,16,17,18,25,26,9,27,28,29,10,30,31,12,33,34,35,26,29,8,26,29,26,29,8,27,30,33,8,27,8,27,8,8,8,8,8,27,30,33,8,8,8,9,27,28,10,30,31,12,33,34,28,27,8,28,8,14,21,22,23,24,15,16,17,18,25,26,9,27,28,29,10,30,31,12,33,34,35,8,8,8,14,21,22,23,24,15,16,17,18,25,27,31,34,27,8,27,30,33,8,8,8,8,27,10,30,31,12,33,34,27,8,8,14,21,22,23,24,15,16,17,25,8,8,14,21,22,23,24,15,16,17,18,25,10,12,9,10,12,9,10,12,10,12,8,8,8,27,30,33,8,27,30,33,30,33,27,30,33,30,33,8,8,8,8,14,21,22,23,24,15,16,17,18,25,8,14,15,16,35,8,14,21,22,23,24,15,16,17,18,25,26,9,27,28,29,10,30,31,12,33,34,35,8,8,14,21,22,23,24,15,16,17,18,25,26,9,27,28,29,10,30,31,12,33,34,35,8,8,14,21,22,23,24,15,16,17,18,25,26,9,27,28,29,10,30,31,12,33,34,35,35,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0,0,50,0,0,0,50,0,42,42,42,42,42,43,51,48,49,44,45,46,47,50,52,53,42,43,51,48,49,44,45,46,47,50,52,53,42,42,42,43,44,45,46,47,42,42,43,44,45,46,47,42,42,42,42,42,49,42,42,42,42,42,42,43,51,48,44,45,46,47,50,52,53,42,42,42,43,51,48,49,44,45,46,47,50,52,53,42,42,50,52,53,42,42,42,42,42,50,53,42,42,42,43,51,48,49,44,45,46,47,50,52,53,42,42,43,51,48,49,44,45,46,47,53,42,42,42,42,42,42,43,51,48,42,42,43,51,48,49,44,45,46,47,50,42,52,42,52,42,42,42,42,43,51,48,49,44,45,46,47,42,42,42,42,43,44,45,46,47,42,43,51,48,49,44,45,46,47,50,52,53,42,43,51,48,49,44,45,46,47,50,52,53,42,42,43,51,48,49,44,45,46,47,50,52,53,42,42,42,42,42,42,42],"f":[0,0,0,0,0,0,[[]],[[]],[1,1],[[]],[[1,1],2],[[],2],[[],2],[[1,3],4],[[]],0,0,[[]],[[]],[[],5],[[],5],[[],6],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[8,[[0,[0,7]]]]]],[[[9,[[0,[0,7]]]]],[[9,[[0,[0,7]]]]]],[[[10,[[0,[0,7]]]]],[[10,[[0,[0,7]]]]]],[[[12,[11,[0,[0,7]]]]],[[12,[11,[0,[0,7]]]]]],[[[9,[[0,[0,7]]]]],[[9,[[0,[0,7]]]]]],[[[10,[[0,[0,7]]]]],[[10,[[0,[0,7]]]]]],[[[12,[11,[0,[0,7]]]]],[[12,[11,[0,[0,7]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[8,[[0,[0,7]]]]],13],[[[8,[[0,[0,7]]]]]],[[[8,[7,7,7,[0,[0,7]]]]],[[8,[7,7,7,[0,[0,7]]]]]],[14,14],[15,15],[16,16],[[[8,[7,7,7,[0,[0,7]]]],[8,[7,7,7,[0,[0,7]]]]]],[[]],[[]],[[]],[[]],[8,2],[[],8],[[[8,[[0,[0,7]]]]],[[17,[[0,[0,7]]]]]],[[[8,[[0,[0,7]]]]],[[18,[[0,[0,7]]]]]],[18],[8,10],0,[8,12],[[8,8],2],[[],2],[[8,19]],[[8,19]],[[8,19]],[[8,3],4],[[[14,[20,20]],3],4],[[21,3],4],[[[22,[20,20,[0,[0,7]]]],3],4],[[[23,[20,20,[0,[0,7]]]],3],4],[[[24,[20,[0,[0,7]]]],3],4],[[[15,[20]],3],4],[[[16,[20]],3],4],[[17,3],4],[[[25,[20]],3],4],[[[26,[[0,[0,7]]]],3],4],[[[9,[20,20,[0,[0,7]]]],3],4],[[[27,[20,20,[0,[0,7]]]],3],4],[[[28,[[0,[0,7]]]],3],4],[[[29,[[0,[0,7]]]],3],4],[[[10,[20,20,[0,[0,7]]]],3],4],[[[30,[20,20,[0,[0,7]]]],3],4],[[[31,[20,[0,[0,7]]]],3],4],[[[12,[[32,[[0,[11,20]]]],[0,[11,20]],20,[0,[0,7]]]],3],4],[[[33,[[32,[[0,[11,20]]]],[0,[11,20]],20,[0,[0,7]]]],3],4],[[[34,[[32,[[0,[11,20]]]],[0,[11,20]],[0,[0,7]]]],3],4],[[[35,[20,20,[0,[0,7]]]],3],4],[[[35,[20,20,[0,[0,7]]]],3],4],[[]],[[],[[8,[36]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[26,[[0,[0,7]]]],37],[[9,[[0,[0,7]]]]]],[[[29,[[0,[0,7]]]],37],38],[19,8],[[[26,[[0,[0,7]]]]],[[9,[[0,[0,7]]]]]],[[[29,[[0,[0,7]]]]],38],[[[26,[[0,[0,7]]]],37],[[9,[[0,[0,7]]]]]],[[[29,[[0,[0,7]]]],37],38],[8,38],[[[27,[[0,[0,7]]]]]],[[[30,[[0,[0,7]]]]]],[[[33,[11,[0,[0,7]]]]]],[8,38],[[[27,[[0,[0,7]]]]]],[8,38],[[[27,[[0,[0,7]]]]]],[8,38],[8,38],[8,38],[8,38],[8,38],[[[27,[[0,[0,7]]]]]],[[[30,[[0,[0,7]]]]]],[[[33,[11,[0,[0,7]]]]]],[[[8,[[0,[0,7]]]]]],[8],[8,38],[[[9,[[0,[0,7]]]]],[[27,[[0,[0,7]]]]]],[[[27,[[0,[0,7]]]]]],[[[28,[[0,[0,7]]]]]],[[[10,[[0,[0,7]]]]],[[30,[[0,[0,7]]]]]],[[[30,[[0,[0,7]]]]]],[[[31,[[0,[0,7]]]]]],[[[12,[11,[0,[0,7]]]]],[[33,[11,[0,[0,7]]]]]],[[[33,[11,[0,[0,7]]]]]],[[[34,[11,[0,[0,7]]]]]],[[[28,[[0,[0,7]]]],37]],[[[27,[[0,[0,7]]]]]],[8],[[[28,[[0,[0,7]]]],37]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[8,[[0,[0,7]]]]],[[22,[[0,[0,7]]]]]],[8,14],[8,21],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[27,[[0,[0,7]]]]]],[[[31,[[0,[0,7]]]]]],[[[34,[11,[0,[0,7]]]]]],[[[27,[[0,[0,7]]]]]],[[[8,[[0,[0,7]]]]],[[23,[[0,[0,7]]]]]],[[[27,[[0,[0,7]]]]]],[[[30,[[0,[0,7]]]]]],[[[33,[11,[0,[0,7]]]]]],[[[8,[[0,[0,7]]]]],[[24,[[0,[0,7]]]]]],[[[8,[[0,[0,7]]]]],2],[[[8,[[0,[0,7]]]]],14],[[[8,[[0,[0,7]]]]],21],[[[27,[[0,[0,7]]]]]],[[[10,[[0,[0,7]]]]]],[[[30,[[0,[0,7]]]]]],[[[31,[[0,[0,7]]]]]],[[[12,[11,[0,[0,7]]]]]],[[[33,[11,[0,[0,7]]]]]],[[[34,[11,[0,[0,7]]]]]],[[[27,[[0,[0,7]]]]]],[[[8,[[0,[0,7]]]]],15],[[[8,[[0,[0,7]]]]],13],[14,13],[21,13],[[[22,[[0,[0,7]]]]],13],[[[23,[[0,[0,7]]]]],13],[[[24,[[0,[0,7]]]]],13],[15,13],[16,13],[[[17,[[0,[0,7]]]]],13],[25,13],[[],[[8,[36]]]],[[[0,[0,7]]],[[8,[36,[0,[0,7]]]]]],[14,38],[21,38],[[[22,[[0,[0,7]]]]],38],[[[23,[[0,[0,7]]]]],38],[[[24,[[0,[0,7]]]]],38],[15,38],[16,38],[[[17,[[0,[0,7]]]]],38],[18,38],[25,38],[[[10,[39,[0,[0,7]]]]]],[[[12,[11,39,[0,[0,7]]]]]],[[[9,[[0,[0,7]]]]]],[[[10,[[0,[0,7]]]]]],[[[12,[11,[0,[0,7]]]]]],[[[9,[[0,[0,7]]]]]],[[[10,[[0,[0,7]]]],40]],[[[12,[11,[0,[0,7]]]],40]],[[[10,[[0,[0,7]]]],40]],[[[12,[11,[0,[0,7]]]],40]],[[[8,[[0,[0,7]]]]],[[29,[[0,[0,7]]]]]],[[[8,[[0,[0,7]]]]],[[26,[[0,[0,7]]]]]],[8,38],[[[27,[[0,[0,7]]]]]],[[[30,[[0,[0,7]]]]]],[[[33,[11,[0,[0,7]]]]]],[8,38],[[[27,[[0,[0,7]]]]]],[[[30,[[0,[0,7]]]]]],[[[33,[11,[0,[0,7]]]]]],[[[30,[[0,[0,7]]]]]],[[[33,[11,[0,[0,7]]]]]],[[[27,[[0,[0,7]]]]],[[9,[[0,[0,7]]]]]],[[[30,[[0,[0,7]]]]],[[10,[[0,[0,7]]]]]],[[[33,[11,[0,[0,7]]]]],[[12,[11,[0,[0,7]]]]]],[[[30,[[0,[0,7]]]]]],[[[33,[11,[0,[0,7]]]]]],[[8,13]],[[[8,[[0,[0,7]]]]]],[[8,13]],[8],[14],[21],[[[22,[[0,[0,7]]]]]],[[[23,[[0,[0,7]]]]]],[[[24,[[0,[0,7]]]]]],[15],[16],[[[17,[[0,[0,7]]]]]],[18],[25],[[]],[[]],[[]],[[]],[[],41],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[8,[[5,[35]]]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[8,13],[[5,[1]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],0,[[[8,[[0,[0,7]]]]],16],[[[8,[[0,[0,7]]]]],25],[13,[[8,[36]]]],[13,8],[[13,[0,[0,7]]],[[8,[[0,[0,7]]]]]],[[13,[0,[0,7]]],[[8,[36,[0,[0,7]]]]]],[[],8],[[[0,[0,7]]],[[8,[[0,[0,7]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[42],[[42,42],42],[[42,42],42],[[42,42],42],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[42,[[0,[0,7]]]]],13],[[[42,[[0,[0,7]]]]]],[[[42,[7,7,[0,[0,7]]]]],[[42,[7,7,[0,[0,7]]]]]],[43,43],[[[44,[[0,[0,7]]]]],[[44,[[0,[0,7]]]]]],[[[45,[[0,[0,7]]]]],[[45,[[0,[0,7]]]]]],[[[46,[[0,[0,7]]]]],[[46,[[0,[0,7]]]]]],[[[47,[[0,[0,7]]]]],[[47,[[0,[0,7]]]]]],[[[42,[7,7,[0,[0,7]]]],[42,[7,7,[0,[0,7]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[42,2],[[],42],[[42,42],45],[[[42,[[0,[0,7]]]]],[[48,[[0,[0,7]]]]]],[[[42,[[0,[0,7]]]]],[[49,[[0,[0,7]]]]]],[[[49,[[0,[0,7]]]]]],[42,50],[[42,42],2],[[],2],[[42,19]],[[42,19]],[[42,3],4],[[[43,[20]],3],4],[[[51,[20,[0,[0,7]]]],3],4],[[[48,[20,[0,[0,7]]]],3],4],[[44,3],4],[[45,3],4],[[46,3],4],[[47,3],4],[[[50,[20,[0,[0,7]]]],3],4],[[[52,[20,[0,[0,7]]]],3],4],[[[53,[20,[0,[0,7]]]],3],4],[[]],[[],[[42,[36]]]],[8,42],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[19,42],[42,38],[[[50,[[0,[0,7]]]]]],[[[52,[[0,[0,7]]]]]],[[[53,[[0,[0,7]]]]]],[42],[42],[42],[42],[42,2],[[[50,[[0,[0,7]]]]],[[52,[[0,[0,7]]]]]],[[[53,[[0,[0,7]]]]]],[42],[[42,42],44],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[42,[[0,[0,7]]]]],[[51,[[0,[0,7]]]]]],[42,43],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[53,[[0,[0,7]]]]]],[[42,42],2],[[[42,[[0,[0,7]]]]],2],[[42,42],2],[[42,42],2],[[[42,[[0,[0,7]]]]],43],[[[42,[[0,[0,7]]]]],13],[43,13],[[[51,[[0,[0,7]]]]],13],[[[48,[[0,[0,7]]]]],13],[[],[[42,[36]]]],[[[0,[0,7]]],[[42,[[0,[54,55]],36,[0,[0,7]]]]]],[43,38],[[[51,[[0,[0,7]]]]],38],[[[48,[[0,[0,7]]]]],38],[[[49,[[0,[0,7]]]]],38],[44,38],[45,38],[46,38],[47,38],[[[50,[[0,[0,7]]]]]],[42,2],[[[52,[[0,[0,7]]]]]],[42,38],[[[52,[[0,[0,7]]]]]],[[42,13]],[[[42,[[0,[0,7]]]]]],[[42,13]],[42],[43],[[[51,[[0,[0,7]]]]]],[[[48,[[0,[0,7]]]]]],[[[49,[[0,[0,7]]]]]],[44],[45],[46],[47],[[42,42],42],[[42,42],46],[42,38],[[]],[[]],[[]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[42,13],[[5,[1]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[42,42],47],[13,[[42,[36]]]],[13,[[42,[0]]]],[13,42],[[13,[0,[0,7]]],[[42,[[0,[54,55]],36,[0,[0,7]]]]]],[[],[[42,[0]]]],[[],42]],"p":[[4,"TryReserveError"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"],[8,"Clone"],[3,"HashMap"],[4,"RawEntryMut"],[4,"Entry"],[8,"Sized"],[4,"EntryRef"],[15,"usize"],[3,"Iter"],[3,"Keys"],[3,"Values"],[3,"Drain"],[3,"DrainFilter"],[8,"IntoIterator"],[8,"Debug"],[3,"IterMut"],[3,"IntoIter"],[3,"IntoKeys"],[3,"IntoValues"],[3,"ValuesMut"],[3,"RawEntryBuilderMut"],[3,"RawOccupiedEntryMut"],[3,"RawVacantEntryMut"],[3,"RawEntryBuilder"],[3,"OccupiedEntry"],[3,"VacantEntry"],[8,"Borrow"],[3,"OccupiedEntryRef"],[3,"VacantEntryRef"],[3,"OccupiedError"],[6,"DefaultHashBuilder"],[15,"u64"],[4,"Option"],[8,"Default"],[8,"FnOnce"],[3,"String"],[3,"HashSet"],[3,"Iter"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Union"],[3,"Drain"],[3,"DrainFilter"],[4,"Entry"],[3,"IntoIter"],[3,"OccupiedEntry"],[3,"VacantEntry"],[8,"Hash"],[8,"Eq"],[8,"Equivalent"],[13,"AllocError"]]},\
"hashlink":{"doc":"","t":"CCCAAANNDEDDDDDNNDDDEDDENNDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCCCCCDCCCCCCLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["LinkedHashMap","LinkedHashSet","LruCache","linked_hash_map","linked_hash_set","lru_cache","AllocError","CapacityOverflow","Drain","Entry","IntoIter","Iter","IterMut","Keys","LinkedHashMap","Occupied","Occupied","OccupiedEntry","RawEntryBuilder","RawEntryBuilderMut","RawEntryMut","RawOccupiedEntryMut","RawVacantEntryMut","TryReserveError","Vacant","Vacant","VacantEntry","Values","ValuesMut","and_modify","and_modify","back","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","contains_key","default","drain","drop","drop","drop","entry","eq","equivalent","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_hash","from_hash","from_iter","from_key","from_key","from_key_hashed_nocheck","from_key_hashed_nocheck","front","ge","get","get","get","get_key_value","get_key_value","get_key_value_mut","get_mut","get_mut","get_mut","gt","hash","hasher","index","index_mut","insert","insert","insert","insert","insert_entry","insert_hashed_nocheck","insert_with_hasher","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_key","into_key","into_key_value","into_mut","into_mut","is_empty","iter","iter_mut","key","key","key","key","key_mut","keys","le","len","len","len","len","lt","new","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","or_insert","or_insert","or_insert_with","or_insert_with","partial_cmp","pop_back","pop_front","raw_entry","raw_entry_mut","remove","remove","remove","remove_entry","remove_entry","remove_entry","replace","replace_entry","replace_key","replace_key","replace_value","reserve","retain","retain_with_order","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","to_back","to_back","to_back","to_front","to_front","to_front","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_reserve","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","values","values_mut","with_capacity","with_capacity_and_hasher","with_hasher","layout","Difference","Drain","Intersection","IntoIter","Iter","LinkedHashSet","SymmetricDifference","Union","back","bitand","bitor","bitxor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","contains","default","difference","drain","eq","equivalent","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_iter","front","get","get_or_insert","get_or_insert_with","hash","hasher","insert","intersection","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_disjoint","is_empty","is_subset","is_superset","iter","len","new","next","next","next","next","next","next","next","next_back","next_back","next_back","pop_back","pop_front","remove","replace","reserve","retain","retain_with_order","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","sub","symmetric_difference","take","to_back","to_front","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_reserve","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","with_capacity","with_capacity_and_hasher","with_hasher","Drain","Entry","IntoIter","Iter","IterMut","LruCache","OccupiedEntry","RawEntryBuilder","RawEntryBuilderMut","RawOccupiedEntryMut","RawVacantEntryMut","VacantEntry","borrow","borrow_mut","capacity","clear","clone","clone_into","contains_key","drain","entry","extend","fmt","from","get","get_mut","insert","into","into_iter","into_iter","into_iter","is_empty","iter","iter_mut","len","new","new_unbounded","peek","peek_mut","raw_entry","raw_entry_mut","remove","remove_entry","remove_lru","set_capacity","to_owned","try_from","try_into","type_id","with_hasher"],"q":["hashlink","","","","","","hashlink::linked_hash_maphashlink::linked_hash_map::TryReserveError","hashlink::linked_hash_set","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hashlink::lru_cache","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","A version of <code>HashMap</code> that has a user controllable order …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","Inserts the given key / value pair at the <em>back</em> of the …","Replaces this entry’s value with the provided value.","Insert’s the key for this vacant entry paired with the …","","Similar to <code>OccupiedEntry::replace_entry</code>, but <em>does</em> move the …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","If this entry is vacant, inserts a new entry with the …","Similarly to <code>Entry::or_insert</code>, if this entry is occupied, …","Similar to <code>Entry::or_insert</code>, but accepts a function to …","Similarly to <code>Entry::or_insert_with</code>, if this entry is …","","","","","","","","","","","","If the given key is not in this map, inserts the key / …","Replaces the entry’s key with the key provided to …","Replaces this entry’s key with the key provided to …","","","","","","","","","","","","","","If an entry with this key exists, move it to the back of …","","","If an entry with this key exists, move it to the front of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Inserts the given value into the set.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Adds the given value to the set, replacing the existing …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","If the returned entry is vacant, it will always have room …","","","Returns the argument unchanged.","Retrieve the given key, marking it as recently used and …","Retrieve the given key, marking it as recently used and …","Insert a new value into the <code>LruCache</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Create a new unbounded <code>LruCache</code> that does not …","Get the value for the given key, <em>without</em> marking the value …","Get the value for the given key mutably, <em>without</em> marking …","The constructed raw entry is never automatically moved to …","If the constructed raw entry is vacant, it will always …","","","Remove the least recently used entry and return it.","Set the new cache capacity for the <code>LruCache</code>.","","","","",""],"i":[0,0,0,0,0,0,38,38,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,1,2,0,0,0,1,2,3,38,3,1,23,24,25,26,2,27,28,10,29,17,16,11,12,30,38,3,1,23,24,25,26,2,27,28,10,29,17,16,11,12,30,3,3,3,10,11,12,3,10,11,12,3,3,3,3,3,17,16,3,3,3,3,3,3,1,23,24,25,26,2,27,28,10,29,17,16,11,12,30,38,3,1,23,24,25,26,2,27,28,10,29,17,16,11,12,30,25,26,3,25,26,25,26,3,3,3,23,27,3,27,27,3,23,27,3,3,3,3,3,3,23,24,28,23,28,28,38,3,1,23,24,25,26,2,27,28,10,29,17,16,11,12,30,3,3,3,10,29,17,16,11,12,30,24,27,27,23,27,3,3,3,1,23,24,27,27,3,3,3,11,12,30,3,3,10,29,17,16,11,12,30,10,29,17,16,11,12,30,1,2,1,2,3,3,3,3,3,3,23,27,3,23,27,3,23,23,27,27,3,3,3,3,10,29,17,16,11,12,30,3,23,27,3,23,27,3,10,11,12,38,3,1,23,24,25,26,2,27,28,10,29,17,16,11,12,30,38,3,1,23,24,25,26,2,27,28,10,29,17,16,11,12,30,3,38,3,1,23,24,25,26,2,27,28,10,29,17,16,11,12,30,3,3,3,3,3,50,0,0,0,0,0,0,0,0,40,40,40,40,40,41,47,46,42,43,44,45,40,41,47,46,42,43,44,45,40,40,40,41,42,43,44,45,40,41,42,43,44,45,40,40,40,40,40,40,40,40,40,41,42,43,44,45,40,41,47,46,42,43,44,45,40,40,40,40,40,40,40,40,40,40,41,47,46,42,43,44,45,40,40,41,47,46,42,43,44,45,40,40,40,40,40,40,40,41,47,46,42,43,44,45,41,47,46,40,40,40,40,40,40,40,40,41,47,46,42,43,44,45,40,40,40,40,40,40,41,42,43,44,45,40,41,47,46,42,43,44,45,40,41,47,46,42,43,44,45,40,40,41,47,46,42,43,44,45,40,40,40,40,0,0,0,0,0,0,0,0,0,0,0,0,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,1],[2,2],[3,4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,5],[3],[[[3,[[0,[6,7,8]],8,[0,[9,8]]]]],[[3,[[0,[6,7,8]],8,[0,[9,8]]]]]],[10,10],[11,11],[12,12],[[]],[[]],[[]],[[]],[[[3,[[0,[6,7,13]],13,9]],[3,[[0,[6,7,13]],13,9]]],14],[3,15],[[],3],[3,16],[3],[17],[16],[3,1],[[[3,[[0,[6,7]],18,9]],[3,[[0,[6,7]],18,9]]],15],[[],15],[[3,19]],[[[3,[[0,[6,7]],9]],19]],[[3,20],21],[[[1,[22,22]],20],21],[[[23,[22,22]],20],21],[[[24,[22]],20],21],[[25,20],21],[[26,20],21],[[[2,[22,22]],20],21],[[[27,[22,22]],20],21],[[28,20],21],[[[10,[22,22]],20],21],[[29,20],21],[[17,20],21],[[16,20],21],[[[11,[22]],20],21],[[[12,[22]],20],21],[[30,20],21],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[25,31,32],4],[[26,31,32],2],[19,[[3,[[0,[6,7]],[0,[9,33]]]]]],[25,4],[26,2],[[25,31],4],[[26,31],2],[3,4],[[[3,[[0,[6,7,34]],34,9]],[3,[[0,[6,7,34]],34,9]]],15],[3,4],[23],[27],[3,4],[27],[27],[3,4],[23],[27],[[[3,[[0,[6,7,34]],34,9]],[3,[[0,[6,7,34]],34,9]]],15],[[[3,[[0,[6,7]],6,9]]]],[3],[3],[3],[3,4],[23],[24],[28],[23],[[28,31]],[[28,31,35]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,29],[3,17],[3,10],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[24],[27],[27],[23],[27],[3,15],[3,10],[3,29],[1],[23],[24],[27],[27],[3,11],[[[3,[[0,[6,7,34]],34,9]],[3,[[0,[6,7,34]],34,9]]],15],[3,5],[11,5],[12,5],[30,5],[[[3,[[0,[6,7,34]],34,9]],[3,[[0,[6,7,34]],34,9]]],15],[[],3],[10,4],[29,4],[17,4],[16,4],[11,4],[12,4],[30,4],[10,4],[29,4],[17,4],[16,4],[11,4],[12,4],[30,4],[1],[2],[[1,36]],[2],[[[3,[[0,[6,7,34]],34,9]],[3,[[0,[6,7,34]],34,9]]],[[4,[14]]]],[3,4],[3,4],[3,25],[3,26],[3,4],[23],[27],[3,4],[23],[27],[3,4],[23],[23],[27],[27],[[3,5]],[3],[3],[3],[10],[29],[17],[16],[11],[12],[30],[3,4],[23],[27],[3,4],[23],[27],[[]],[[]],[[]],[[]],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[3,5],[[37,[38]]]],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[3,12],[3,30],[5,3],[5,3],[[],3],0,0,0,0,0,0,0,0,0,[40,4],[[40,40],40],[[40,40],40],[[40,40],40],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[40,5],[40],[[[40,[[0,[6,7,8]],[0,[9,8]]]]],[[40,[[0,[6,7,8]],[0,[9,8]]]]]],[41,41],[42,42],[43,43],[44,44],[45,45],[[]],[[]],[[]],[[]],[[]],[[]],[40,15],[[],40],[[40,40],43],[40,46],[[40,40],15],[[],15],[[40,19]],[[40,19]],[[40,20],21],[[[41,[22]],20],21],[[42,20],21],[[43,20],21],[[44,20],21],[[45,20],21],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[19,40],[40,4],[40,4],[40],[40],[40],[40],[40,15],[[40,40],42],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[40,41],[40,47],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[40,40],15],[40,15],[[40,40],15],[[40,40],15],[40,41],[40,5],[[],[[40,[[0,[6,7]],48]]]],[41,4],[47,4],[46,4],[42,4],[43,4],[44,4],[45,4],[41,4],[47,4],[46,4],[40,4],[40,4],[40,15],[40,4],[[40,5]],[40],[40],[40],[41],[47],[46],[42],[43],[44],[45],[[40,40],40],[[40,40],44],[40,4],[40,15],[40,15],[[]],[[]],[[]],[[]],[[]],[[]],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[40,5],[[37,[38]]]],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[40,40],45],[5,[[40,[[0,[6,7]],48]]]],[5,40],[[],40],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[49,5],[49],[[[49,[[0,[6,7,8]],8,[0,[9,8]]]]],[[49,[[0,[6,7,8]],8,[0,[9,8]]]]]],[[]],[[[49,[[0,[7,6]]]]],15],[49,16],[[[49,[[0,[7,6]]]],[0,[7,6]]],[[1,[[0,[7,6]]]]]],[[[49,[[0,[7,6]],9]],19]],[[49,20],21],[[]],[[[49,[[0,[7,6]]]]],4],[[[49,[[0,[7,6]]]]],4],[[[49,[[0,[7,6]]]],[0,[7,6]]],4],[[]],[49,10],[49,29],[49,17],[49,15],[49,10],[49,29],[49,5],[5,[[49,[[0,[7,6]]]]]],[[],[[49,[[0,[7,6]]]]]],[[[49,[[0,[7,6]]]]],4],[[[49,[[0,[7,6]]]]],4],[[[49,[[0,[7,6]]]]],[[25,[[0,[7,6]]]]]],[[[49,[[0,[7,6]]]]],[[26,[[0,[7,6]]]]]],[[[49,[[0,[7,6]]]]],4],[[[49,[[0,[7,6]]]]],4],[[[49,[[0,[7,6]]]]],4],[[[49,[[0,[7,6]]]],5]],[[]],[[],37],[[],37],[[],39],[5,49]],"p":[[4,"Entry"],[4,"RawEntryMut"],[3,"LinkedHashMap"],[4,"Option"],[15,"usize"],[8,"Hash"],[8,"Eq"],[8,"Clone"],[8,"BuildHasher"],[3,"Iter"],[3,"Keys"],[3,"Values"],[8,"Ord"],[4,"Ordering"],[15,"bool"],[3,"Drain"],[3,"IntoIter"],[8,"PartialEq"],[8,"IntoIterator"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"RawEntryBuilder"],[3,"RawEntryBuilderMut"],[3,"RawOccupiedEntryMut"],[3,"RawVacantEntryMut"],[3,"IterMut"],[3,"ValuesMut"],[15,"u64"],[8,"FnMut"],[8,"Default"],[8,"PartialOrd"],[8,"Fn"],[8,"FnOnce"],[4,"Result"],[4,"TryReserveError"],[3,"TypeId"],[3,"LinkedHashSet"],[3,"Iter"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Union"],[3,"Drain"],[3,"IntoIter"],[6,"DefaultHashBuilder"],[3,"LruCache"],[13,"AllocError"]]},\
"iana_time_zone":{"doc":"get the IANA time zone for the current system","t":"NENNLLLLLLFLLLLLLL","n":["FailedParsingString","GetTimezoneError","IoError","OsError","borrow","borrow_mut","fmt","fmt","from","from","get_timezone","into","provide","source","to_string","try_from","try_into","type_id"],"q":["iana_time_zone","","","","","","","","","","","","","","","","",""],"d":["Failed to parse","Error types","Wrapped IO error","Platform-specific error from the operating system","","","","","Returns the argument unchanged.","","Get the current IANA time zone as a string.","Calls <code>U::from(self)</code>.","","","","","",""],"i":[1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1],"f":[0,0,0,0,[[]],[[]],[[1,2],3],[[1,2],[[5,[4]]]],[[]],[6,1],[[],[[5,[7,1]]]],[[]],[8],[1,[[10,[9]]]],[[],7],[[],5],[[],5],[[],11]],"p":[[4,"GetTimezoneError"],[3,"Formatter"],[6,"Result"],[3,"Error"],[4,"Result"],[3,"Error"],[3,"String"],[3,"Demand"],[8,"Error"],[4,"Option"],[3,"TypeId"]]},\
"image":{"doc":"Overview","t":"NINNNNNSSSESSNDEIENCDDIINGGNNDIIICENNNNECNNNNNNNNNNNNNNNNNNNNNNDDNIQIDNNNIDNQDNNNNNNGNNNGDNNNNNNGNNNGDQNNNNNLKLLLLKLLLLKLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLALLLLLLLLKLLLLKLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLKLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLLLALLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLKLLLLKLLLLLKLLLLKLLLLLFLLLLLLLLLLLLLLLLLFALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLKLLLLLLLKLLLLLALFFFKLLLLKLLLLKLLLLLLALLLLLLLLLLLLLLLLLFLLLLLLLKLLLLLLLLLKLLLLLLLLLLLLFFLLLLLLLLLLLLLKLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFKLLIDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAAADDLLLLLLLLLLLLLLLLLLLLLLLLLLLNNDDNDELLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLNDNNENNENNNDDDNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNDNNNDNNNNNEEGNNDENNNNDENNNNDELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMNNEDNENNNDNNDDNLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLCCNCECNCNCNCNFLLCLLACFFCLFFFFFFFLLCCCCFCCLCFFFFFFFFFFFFFLLLLFFDQILLFFLLFFFLFFFFLLFFFKLLFLLKLLLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLDLLLLLLLLMLLLLLMMM","n":["A8","AnimationDecoder","Avif","Bgr8","Bgra8","Bmp","Bmp","CHANNEL_COUNT","COLOR_MODEL","COLOR_TYPE","ColorType","DEFAULT_MAX_VALUE","DEFAULT_MIN_VALUE","Dds","Delay","DynamicImage","EncodableLayout","ExtendedColorType","Farbfeld","FlatSamples","Frame","Frames","GenericImage","GenericImageView","Gif","GrayAlphaImage","GrayImage","Hdr","Ico","ImageBuffer","ImageDecoder","ImageDecoderRect","ImageEncoder","ImageError","ImageFormat","ImageLuma16","ImageLuma8","ImageLumaA16","ImageLumaA8","ImageOutputFormat","ImageResult","ImageRgb16","ImageRgb32F","ImageRgb8","ImageRgba16","ImageRgba32F","ImageRgba8","Jpeg","Jpeg","L1","L16","L16","L2","L4","L8","L8","La1","La16","La16","La2","La4","La8","La8","Luma","LumaA","OpenExr","Pixel","Pixel","PixelWithColorType","Pixels","Png","Png","Pnm","Primitive","Progress","Qoi","Reader","Rgb","Rgb1","Rgb16","Rgb16","Rgb2","Rgb32F","Rgb32F","Rgb32FImage","Rgb4","Rgb8","Rgb8","RgbImage","Rgba","Rgba1","Rgba16","Rgba16","Rgba2","Rgba32F","Rgba32F","Rgba32FImage","Rgba4","Rgba8","Rgba8","RgbaImage","SubImage","Subpixel","Tga","Tiff","Unknown","Unsupported","WebP","adjust_contrast","apply","apply","apply","apply","apply","apply2","apply2","apply2","apply2","apply2","apply_with_alpha","apply_with_alpha","apply_with_alpha","apply_with_alpha","apply_with_alpha","apply_without_alpha","apply_without_alpha","as_bytes","as_bytes","as_flat_samples","as_flat_samples_f32","as_flat_samples_mut","as_flat_samples_u16","as_flat_samples_u8","as_luma16","as_luma8","as_luma_alpha16","as_luma_alpha8","as_mut_luma16","as_mut_luma8","as_mut_luma_alpha16","as_mut_luma_alpha8","as_mut_rgb16","as_mut_rgb32f","as_mut_rgb8","as_mut_rgba16","as_mut_rgba32f","as_mut_rgba8","as_raw","as_rgb16","as_rgb32f","as_rgb8","as_rgba16","as_rgba32f","as_rgba8","bits_per_pixel","blend","blend","blend","blend","blend","blend_pixel","blend_pixel","blend_pixel","blur","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounds","bounds","bounds","brighten","buffer","buffer","buffer_mut","bytes_per_pixel","can_read","can_write","change_bounds","channel_count","channel_count","channels","channels","channels","channels","channels","channels4","channels4","channels4","channels4","channels4","channels_mut","channels_mut","channels_mut","channels_mut","channels_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","codecs","collect_frames","color","color_type","convert","copy_from","copy_from","copy_within","copy_within","copy_within","crop","crop_imm","current","default","default","delay","deref","deref","deref_mut","deref_mut","dimensions","dimensions","dimensions","dimensions","dimensions","enumerate_pixels","enumerate_pixels_mut","enumerate_rows","enumerate_rows_mut","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","error","expand_palette","expand_palette","extensions_str","filter3x3","flat","fliph","flipv","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_channels","from_channels","from_channels","from_channels","from_channels","from_decoder","from_extension","from_fn","from_mime_type","from_numer_denom_ms","from_parts","from_path","from_pixel","from_raw","from_saturating_duration","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice_mut","from_slice_mut","from_slice_mut","from_slice_mut","from_slice_mut","from_vec","get_pixel","get_pixel","get_pixel","get_pixel","get_pixel_checked","get_pixel_mut","get_pixel_mut","get_pixel_mut","get_pixel_mut","get_pixel_mut_checked","grayscale","guess_format","has_alpha","has_color","hash","hash","hash","hash","hash","hash","hash","hash","height","height","height","height","huerotate","icc_profile","icc_profile","image_dimensions","imageops","in_bounds","in_bounds","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","inner","inner_mut","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_buffer","into_bytes","into_flat_samples","into_frames","into_iter","into_iter","into_luma16","into_luma8","into_luma_alpha16","into_luma_alpha8","into_raw","into_reader","into_rgb16","into_rgb32f","into_rgb8","into_rgba16","into_rgba32f","into_rgba8","into_vec","invert","invert","invert","invert","invert","invert","io","left","load","load_from_memory","load_from_memory_with_format","map","map","map","map","map","map2","map2","map2","map2","map2","map_with_alpha","map_with_alpha","map_with_alpha","map_with_alpha","map_with_alpha","map_without_alpha","map_without_alpha","math","new","new","new","new","new_luma16","new_luma8","new_luma_a16","new_luma_a8","new_rgb16","new_rgb32f","new_rgb8","new_rgba16","new_rgba32f","new_rgba8","next","next","numer_denom_ms","open","original_color_type","original_color_type","partial_cmp","pixels","pixels","pixels","pixels_mut","put_pixel","put_pixel","put_pixel","put_pixel","read_image","read_image","read_image_with_progress","read_image_with_progress","read_rect","read_rect","read_rect_with_progress","remaining","resize","resize_exact","resize_to_fill","rotate180","rotate270","rotate90","rows","rows_mut","sample_layout","save","save","save_buffer","save_buffer_with_format","save_with_format","save_with_format","scanline_bytes","scanline_bytes","set_limits","set_limits","sub_image","sub_image","sub_image","thumbnail","thumbnail_exact","to_bytes","to_image","to_luma","to_luma","to_luma","to_luma","to_luma","to_luma16","to_luma32f","to_luma8","to_luma_alpha","to_luma_alpha","to_luma_alpha","to_luma_alpha","to_luma_alpha","to_luma_alpha16","to_luma_alpha32f","to_luma_alpha8","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_rgb","to_rgb","to_rgb","to_rgb","to_rgb","to_rgb16","to_rgb32f","to_rgb8","to_rgba","to_rgba","to_rgba","to_rgba","to_rgba","to_rgba16","to_rgba32f","to_rgba8","top","total","total_bytes","total_bytes","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unsafe_get_pixel","unsafe_get_pixel","unsafe_get_pixel","unsafe_put_pixel","unsafe_put_pixel","unsafe_put_pixel","unsharpen","view","view","view","width","width","width","width","write_buffer_with_format","write_image","write_to","write_to","ConvertBuffer","EnumeratePixels","EnumeratePixelsMut","EnumerateRows","EnumerateRowsMut","Pixels","PixelsMut","Rows","RowsMut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","convert","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","len","len","len","len","len","len","len","len","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","bmp","jpeg","png","BmpDecoder","BmpEncoder","borrow","borrow","borrow_mut","borrow_mut","color_type","dimensions","encode","encode_with_palette","from","from","get_palette","into","into","into_reader","new","new","new_without_file_header","read_image","read_rect_with_progress","set_indexed_color","try_from","try_from","try_into","try_into","type_id","type_id","write_image","Centimeters","Inches","JpegDecoder","JpegEncoder","PixelAspectRatio","PixelDensity","PixelDensityUnit","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","color_type","default","density","dimensions","dpi","encode","encode_image","eq","eq","fmt","fmt","from","from","from","from","icc_profile","into","into","into","into","into_reader","new","new","new_with_quality","read_image","scale","set_pixel_density","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unit","write_image","Adaptive","ApngDecoder","Avg","Best","CompressionType","Default","Fast","FilterType","Huffman","NoFilter","Paeth","PngDecoder","PngEncoder","PngReader","Rle","Sub","Up","apng","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","color_type","default","default","dimensions","encode","eq","eq","fmt","fmt","from","from","from","from","from","from","icc_profile","into","into","into","into","into","into","into_frames","into_reader","is_apng","new","new","new_with_quality","read","read_image","read_to_end","scanline_bytes","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","with_limits","write_image","Color","Decoding","DecodingError","DimensionError","DimensionMismatch","Encoding","EncodingError","Exact","FailedAlready","Format","Generic","GenericFeature","ImageError","ImageFormatHint","ImageResult","InsufficientMemory","IoError","LimitError","LimitErrorKind","Limits","Name","NoMoreData","Parameter","ParameterError","ParameterErrorKind","PathExtension","Unknown","Unsupported","Unsupported","UnsupportedError","UnsupportedErrorKind","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format_hint","format_hint","format_hint","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_format_and_kind","from_format_hint","from_format_hint","from_kind","from_kind","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into","into","kind","kind","kind","new","new","provide","provide","provide","provide","provide","provide","source","source","source","source","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","limits","supported","ChannelCountMismatch","ColumnMajorPacked","Error","FlatSamples","ImagePacked","NormalForm","NormalFormRequired","PixelPacked","RowMajorPacked","SampleLayout","TooLarge","Unaliased","View","ViewMut","WrongColor","as_mut","as_mut_slice","as_ref","as_slice","as_view","as_view_mut","as_view_with_mut_samples","blend_pixel","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounds","bounds","bounds","bounds","channel_stride","channels","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","color_hint","column_major_packed","dimensions","dimensions","eq","eq","eq","extents","extents","fits","fits","flat","flat","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get_mut_sample","get_mut_sample","get_mut_sample","get_pixel","get_pixel","get_pixel_mut","get_sample","get_sample","get_sample","has_aliased_samples","has_aliased_samples","hash","hash","hash","height","height_stride","image_mut_slice","image_mut_slice","image_mut_slice","image_slice","image_slice","image_slice","in_bounds","in_bounds","in_bounds","in_bounds","in_bounds_index","in_bounds_index","index","index","index","index_ignoring_bounds","index_ignoring_bounds","index_mut","into","into","into","into","into","into","into_inner","into_inner","is_normal","is_normal","layout","min_length","min_length","min_length","min_length","partial_cmp","provide","put_pixel","row_major_packed","samples","samples","samples","shrink_to","shrink_to","shrink_to","shrink_to","strides_cwh","strides_cwh","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_vec","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into_buffer","try_upgrade","type_id","type_id","type_id","type_id","type_id","type_id","width","width_stride","with_monocolor","BiLevel","CatmullRom","CatmullRom","ColorMap","FilterType","Gaussian","Gaussian","Lanczos3","Lanczos3","Nearest","Nearest","Triangle","Triangle","blur","borrow","borrow_mut","brighten","clone","clone_into","colorops","contrast","crop","crop_imm","dither","eq","filter3x3","flip_horizontal","flip_horizontal_in","flip_horizontal_in_place","flip_vertical","flip_vertical_in","flip_vertical_in_place","fmt","from","grayscale","grayscale_alpha","grayscale_with_type","grayscale_with_type_alpha","horizontal_gradient","huerotate","index_colors","into","invert","overlay","overlay_bounds","replace","resize","rotate180","rotate180_in","rotate180_in_place","rotate270","rotate270_in","rotate90","rotate90_in","thumbnail","tile","to_owned","try_from","try_into","type_id","unsharpen","vertical_gradient","BiLevel","Color","ColorMap","borrow","borrow_mut","brighten","brighten_in_place","clone","clone_into","contrast","contrast_in_place","dither","from","grayscale","grayscale_alpha","grayscale_with_type","grayscale_with_type_alpha","has_lookup","has_lookup","huerotate","huerotate_in_place","index_colors","index_of","index_of","into","invert","lookup","lookup","map_color","map_color","to_owned","try_from","try_into","type_id","LimitSupport","Limits","Reader","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","check_dimensions","check_support","clear_format","clone","clone","clone_into","clone_into","decode","default","default","eq","eq","fmt","fmt","format","free","free_usize","from","from","from","hash","hash","into","into","into","into_dimensions","into_inner","limits","max_alloc","max_image_height","max_image_width","new","no_limits","no_limits","open","reserve","reserve_usize","set_format","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_format","with_guessed_format","Rect","borrow","borrow_mut","clone","clone_into","eq","fmt","from","hash","height","into","to_owned","try_from","try_into","type_id","width","x","y"],"q":["imageimage::buffer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","image::codecs","","","image::codecs::bmp","","","","","","","","","","","","","","","","","","","","","","","","","","","","","image::codecs::jpeg","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","image::codecs::png","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","image::errorimage::error::LimitErrorKind","","image::flatimage::imageops","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","image::imageops::colorops","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","image::io","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","image::math","","","","","","","","","","","","","","","","",""],"d":["Pixel is 8-bit alpha","AnimationDecoder trait","An Image in AVIF format.","Pixel contains 8-bit B, G and R channels","Pixel is 8-bit BGR with an alpha channel","An Image in BMP Format","An Image in BMP Format","The number of channels of this pixel type.","A string that can help to interpret the meaning each …","This pixel has the format of one of the predefined …","An enumeration over supported color types and bit depths","The maximum value for this type of primitive within the …","The minimum value for this type of primitive within the …","An Image in DDS Format","The delay of a frame relative to the previous one.","A Dynamic Image","Types which are safe to treat as an immutable byte slice …","An enumeration of color types encountered in image formats.","An Image in farbfeld Format","","A single animation frame","An implementation dependent iterator, reading the frames …","A trait for manipulating images.","Trait to inspect an image.","An Image in GIF Format","Sendable grayscale + alpha channel image buffer","Sendable grayscale image buffer","An Image in Radiance HDR Format","An Image in ICO Format","Generic image buffer","The trait that all decoders implement","Specialized image decoding not be supported by all formats","The trait all encoders implement","","An enumeration of supported image formats. Not all formats …","Each pixel in this image is 16-bit Luma","Each pixel in this image is 8-bit Luma","Each pixel in this image is 16-bit Luma with alpha","Each pixel in this image is 8-bit Luma with alpha","An enumeration of supported image formats for encoding.","","Each pixel in this image is 16-bit Rgb","Each pixel in this image is 32-bit float Rgb","Each pixel in this image is 8-bit Rgb","Each pixel in this image is 16-bit Rgb with alpha","Each pixel in this image is 32-bit float Rgb with alpha","Each pixel in this image is 8-bit Rgb with alpha","An Image in JPEG Format","An Image in JPEG Format with specified quality, up to 100","Pixel is 1-bit luminance","Pixel is 16-bit luminance","Pixel is 16-bit luminance","Pixel is 2-bit luminance","Pixel is 4-bit luminance","Pixel is 8-bit luminance","Pixel is 8-bit luminance","Pixel is 1-bit luminance with an alpha channel","Pixel is 16-bit luminance with an alpha channel","Pixel is 16-bit luminance with an alpha channel","Pixel is 2-bit luminance with an alpha channel","Pixel is 4-bit luminance with an alpha channel","Pixel is 8-bit luminance with an alpha channel","Pixel is 8-bit luminance with an alpha channel","Grayscale colors.","Grayscale colors + alpha channel","An Image in OpenEXR Format","A generalized pixel.","The type of pixel.","The pixel with an associated <code>ColorType</code>. Not all possible …","Immutable pixel iterator","An Image in PNG Format","An Image in PNG Format","An Image in general PNM Format","The type of each channel in a pixel. For example, this can …","Represents the progress of an image operation.","An Image in QOI format.","The type of reader produced by <code>into_reader</code>.","RGB colors.","Pixel contains 1-bit R, G and B channels","Pixel is 16-bit RGB","Pixel contains 16-bit R, G and B channels","Pixel contains 2-bit R, G and B channels","Pixel is 32-bit float RGB","Pixel is 32-bit float RGB","An image buffer for 32-bit float RGB pixels, where the …","Pixel contains 4-bit R, G and B channels","Pixel contains 8-bit R, G and B channels","Pixel contains 8-bit R, G and B channels","Sendable Rgb image buffer","RGB colors + alpha channel","Pixel is 1-bit RGB with an alpha channel","Pixel is 16-bit RGBA","Pixel is 16-bit RGB with an alpha channel","Pixel is 2-bit RGB with an alpha channel","Pixel is 32-bit float RGBA","Pixel is 32-bit float RGBA","An image buffer for 32-bit float RGBA pixels, where the …","Pixel is 4-bit RGB with an alpha channel","Pixel is 8-bit RGB with an alpha channel","Pixel is 8-bit RGB with an alpha channel","Sendable Rgb + alpha channel image buffer","A View into another image","The scalar type that is used to store each channel in this …","An Image in TGA Format","An Image in TIFF Format","Pixel is of unknown color type with the specified bits per …","A value for signalling an error: An unsupported format was …","An Image in WEBP Format","Adjust the contrast of this image. <code>contrast</code> is the amount …","Apply the function <code>f</code> to each channel of this pixel.","","","","","Apply the function <code>f</code> to each channel of this pixel and …","","","","","Apply the function <code>f</code> to each channel except the alpha …","","","","","Apply the function <code>f</code> to each channel except the alpha …","Apply the function <code>f</code> to each channel except the alpha …","Get the bytes of this value.","Return this image’s pixels as a native endian byte slice.","Return a view on the raw sample buffer.","Return a view on the raw sample buffer for 32bit per …","Return a mutable view on the raw sample buffer.","Return a view on the raw sample buffer for 16 bit per …","Return a view on the raw sample buffer for 8 bit per …","Return a reference to an 16bit Grayscale image","Return a reference to an 8bit Grayscale image","Return a reference to an 16bit Grayscale image with an …","Return a reference to an 8bit Grayscale image with an …","Return a mutable reference to an 16bit Grayscale image","Return a mutable reference to an 8bit Grayscale image","Return a mutable reference to an 16bit Grayscale image …","Return a mutable reference to an 8bit Grayscale image with …","Return a mutable reference to an 16bit RGB image","Return a mutable reference to an 32bit RGB image","Return a mutable reference to an 8bit RGB image","Return a mutable reference to an 16bit RGBA image","Return a mutable reference to an 16bit RGBA image","Return a mutable reference to an 8bit RGBA image","Returns the underlying raw buffer","Return a reference to an 16bit RGB image","Return a reference to an 32bit RGB image","Return a reference to an 8bit RGB image","Return a reference to an 16bit RGBA image","Return a reference to an 32bit RGBA image","Return a reference to an 8bit RGBA image","Returns the number of bits contained in a pixel of …","Blend the color of a given pixel into ourself, taking into …","","","","","Put a pixel at location (x, y), taking into account alpha …","Put a pixel at location (x, y), taking into account alpha …","","Performs a Gaussian blur on this image. <code>sigma</code> is a measure …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The bounding rectangle of this image.","","","Brighten the pixels of this image. <code>value</code> is the amount to …","Iterators and other auxiliary structure for the <code>ImageBuffer</code>…","Returns the image buffer","Returns a mutable image buffer","Returns the number of bytes contained in a pixel of …","Return if the ImageFormat can be decoded by the lib.","Return if the ImageFormat can be encoded by the lib.","Change the coordinates of this subimage.","Returns the number of color channels that make up this …","Get the number of channels for colors of this type.","Returns the components as a slice.","","","","","Returns the channels of this pixel as a 4 tuple. If the …","","","","","Returns the components as a mutable slice","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Encoding and decoding for various image file formats.","Steps through the iterator from the current frame until …","Return this image’s color type.","Returns the color type of the image data produced by this …","Examples","Copies all of the pixels from another image into this …","Copies all of the pixels from another image into this …","Copies all of the pixels from one part of this image to …","Copies all of the pixels from one part of this image to …","","Return a cut-out of this image delimited by the bounding …","Return a cut-out of this image delimited by the bounding …","A measure of completed decoding.","","","Delay of this frame","","","","","Returns a tuple containing the width and height of the …","The width and height of this image.","","The width and height of this image.","","Enumerates over the pixels of the image. The iterator …","Enumerates over the pixels of the image. The iterator …","Enumerates over the rows of the image. The iterator yields …","Enumerates over the rows of the image. The iterator yields …","","","","","","","","","","","","","Contains detailed error representation.","Expands a color palette by re-using the existing buffer. …","Expands a color palette by re-using the existing buffer. …","Return a list of applicable extensions for this format.","Filters this image with the specified 3x3 kernel.","Image representations for ffi.","Flip this image horizontally","Flip this image vertically","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Construct a pixel from the 4 channels a, b, c and d. If …","","","","","Decodes an encoded image into a dynamic image.","Return the image format specified by a path’s file …","Constructs a new ImageBuffer by repeated application of …","Return the image format specified by a MIME type.","Create a delay from a ratio of milliseconds.","Constructs a new frame","Return the image format specified by the path’s file …","Constructs a new ImageBuffer by copying a pixel","Constructs a buffer from a generic container (for example …","Convert from a duration, clamped between 0 and an …","Returns a view into a slice.","","","","","Returns mutable view into a mutable slice.","","","","","Creates an image buffer out of an existing buffer. Returns …","Returns the pixel located at (x, y). Indexed from top left.","Gets a reference to the pixel at location <code>(x, y)</code>","","","Gets a reference to the pixel at location <code>(x, y)</code> or …","Gets a reference to the mutable pixel at location <code>(x, y)</code>. …","","Gets a reference to the mutable pixel at location <code>(x, y)</code>","Do not use is function: It is unimplemented!","Gets a reference to the mutable pixel at location <code>(x, y)</code> …","Return a grayscale version of this image. Returns <code>Luma</code> …","Guess image format from memory block","Returns if there is an alpha channel.","Returns false if the color scheme is grayscale, true …","","","","","","","","","The height of this image.","The height of this image.","The height of this image.","Returns the height of the underlying image","Hue rotate the supplied image. <code>value</code> is the degrees to …","Returns the ICC color profile embedded in the image","Returns the ICC color profile embedded in the image","Read a tuple containing the (width, height) of the image …","Image Processing Functions","Returns true if this x, y coordinate is contained inside …","Returns true if this x, y coordinate is contained inside …","","","","","","","","","","","Get a reference to the underlying image.","Get a mutable reference to the underlying image.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the image buffer","Return this image’s pixels as a byte vector. If the …","Return the raw sample buffer with its stride an dimension …","Consume the decoder producing a series of frames.","","","Consume the image and returns a Luma image.","Consume the image and returns a Luma image.","Consume the image and returns a LumaA image.","Consume the image and returns a LumaA image.","Returns the underlying raw buffer","Returns a reader that can be used to obtain the bytes of …","Consume the image and returns a RGB image.","Consume the image and returns a RGB image.","Consume the image and returns a RGB image.","Consume the image and returns a RGBA image.","Consume the image and returns a RGBA image.","Consume the image and returns a RGBA image.","Consumes the image buffer and returns the underlying data …","Invert this pixel","","","","","Invert the colors of this image. This method operates …","Input and output of images.","Returns the x offset","Create a new image from a Reader.","Create a new image from a byte slice","Create a new image from a byte slice","Apply the function <code>f</code> to each channel of this pixel.","","","","","Apply the function <code>f</code> to each channel of this pixel and …","","","","","Apply the function <code>f</code> to each channel except the alpha …","","","","","Apply the function <code>f</code> to each channel except the alpha …","Apply the function <code>f</code> to each channel except the alpha …","Mathematical helper functions and types.","Creates a new <code>Frames</code> from an implementation specific …","Constructs a new frame without any delay.","Creates a new image buffer based on a <code>Vec&lt;P::Subpixel&gt;</code>.","Construct a new subimage The coordinates set the position …","Creates a dynamic image backed by a buffer of gray pixels.","Creates a dynamic image backed by a buffer of gray pixels.","Creates a dynamic image backed by a buffer of gray pixels …","Creates a dynamic image backed by a buffer of gray pixels …","Creates a dynamic image backed by a buffer of RGB pixels.","Creates a dynamic image backed by a buffer of RGB pixels.","Creates a dynamic image backed by a buffer of RGB pixels.","Creates a dynamic image backed by a buffer of RGBA pixels.","Creates a dynamic image backed by a buffer of RGBA pixels.","Creates a dynamic image backed by a buffer of RGBA pixels.","","","The numerator and denominator of the delay in milliseconds.","Open the image located at the path specified. The image’…","Returns the color type of the image file before decoding","Returns the color type of the image file before decoding","","Returns an Iterator over the pixels of this image. The …","Returns an Iterator over the pixels of this image. The …","Returns an iterator over the pixels of this image. The …","Returns an iterator over the mutable pixels of this image.","Put a pixel at location (x, y). Indexed from top left.","","Puts a pixel at location <code>(x, y)</code>","","Returns all the bytes in the image.","Returns all the bytes in the image.","Same as <code>read_image</code> but periodically calls the provided …","Same as <code>read_image</code> but periodically calls the provided …","Decode a rectangular section of the image; see …","Decode a rectangular section of the image; see …","Decode a rectangular section of the image, periodically …","Calculate a measure for remaining decoding work.","Resize this image using the specified filter algorithm. …","Resize this image using the specified filter algorithm. …","Resize this image using the specified filter algorithm. …","Rotate this image 180 degrees clockwise.","Rotate this image 270 degrees clockwise.","Rotate this image 90 degrees clockwise.","Returns an iterator over the rows of this image.","Returns an iterator over the mutable rows of this image.","Get the format of the buffer when viewed as a matrix of …","Saves the buffer to a file at the path specified.","Saves the buffer to a file at the path specified.","Saves the supplied buffer to a file at the path specified.","Saves the supplied buffer to a file at the path specified …","Saves the buffer to a file at the specified path in the …","Saves the buffer to a file at the specified path in the …","Returns the minimum number of bytes that can be …","Returns the minimum number of bytes that can be …","Set decoding limits for this decoder. See <code>Limits</code> for the …","Set decoding limits for this decoder. See <code>Limits</code> for the …","Returns a mutable subimage that is a view into this image. …","Returns a mutable subimage that is a view into this image. …","Create a mutable sub-view of the image.","Scale this image down to fit within a specific size. …","Scale this image down to a specific size. Returns a new …","Return a copy of this image’s pixels as a byte vector. …","Convert this subimage to an ImageBuffer","Convert this pixel to luma","","","","","Returns a copy of this image as a Luma image.","Returns a copy of this image as a Luma image.","Returns a copy of this image as a Luma image.","Convert this pixel to luma with an alpha channel","","","","","Returns a copy of this image as a LumaA image.","Returns a copy of this image as a LumaA image.","Returns a copy of this image as a LumaA image.","","","","","","","","","","","","","","","","Convert this pixel to RGB","","","","","Returns a copy of this image as an RGB image.","Returns a copy of this image as an RGB image.","Returns a copy of this image as an RGB image.","Convert this pixel to RGB with an alpha channel","","","","","Returns a copy of this image as an RGBA image.","Returns a copy of this image as an RGBA image.","Returns a copy of this image as an RGBA image.","Returns the y offset","A measure of all necessary decoding work.","Returns the total number of bytes in the decoded image.","Returns the total number of bytes in the decoded image.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the pixel located at (x, y). Indexed from top left.","Returns the pixel located at (x, y). Indexed from top left.","Returns the pixel located at (x, y), ignoring bounds …","Puts a pixel at location (x, y). Indexed from top left.","Puts a pixel at location (x, y). Indexed from top left.","Puts a pixel at location (x, y), ignoring bounds checking.","Performs an unsharpen mask on this image. <code>sigma</code> is the …","Returns a subimage that is an immutable view into this …","Returns a subimage that is an immutable view into this …","Create a sub-view of the image.","The width of this image.","The width of this image.","The width of this image.","Returns the width of the underlying image","Writes the supplied buffer to a writer in the specified …","Writes all the bytes in an image to the encoder.","Writes the buffer to a writer in the specified format.","Encode this image and write it to <code>w</code>.","Provides color conversions for whole image buffers.","Enumerate the pixels of an image.","Enumerate the pixels of an image.","Enumerate the rows of an image.","Enumerate the rows of an image.","Iterate over pixel refs.","Iterate over mutable pixel refs.","Iterate over rows of an image","Iterate over mutable rows of an image","","","","","","","","","","","","","","","","","","","","","","","","","Converts <code>self</code> to a buffer of type T","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Decoding and Encoding of BMP Images","Decoding and Encoding of JPEG Images","Decoding and Encoding of PNG Images","A bmp decoder","The representation of a BMP encoder.","","","","","","","Encodes the image <code>image</code> that has dimensions <code>width</code> and …","Same as <code>encode</code>, but allow a palette to be passed in. The …","Returns the argument unchanged.","Returns the argument unchanged.","Get the palette that is embedded in the BMP image, if any.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a new decoder that decodes from the stream <code>r</code>","Create a new encoder that writes its output to <code>w</code>.","Create a new decoder that decodes from the stream <code>r</code> …","","","If true, the palette in BMP does not apply to the image …","","","","","","","","Pixels per centimeter","Pixels per inch (2.54 cm)","JPEG decoder","The representation of a JPEG encoder","Represents the absence of a unit, the values indicate only …","Represents the pixel density of an image","Represents a unit in which the density of an image is …","","","","","","","","","","","","","","Returns a pixel density with a pixel aspect ratio of 1","A couple of values for (Xdensity, Ydensity)","","Creates the most common pixel density type: the horizontal …","Encodes the image stored in the raw byte buffer <code>image</code> that …","Encodes the given image.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a new decoder that decodes from the stream <code>r</code>","Create a new encoder that writes its output to <code>w</code>","Create a new encoder that writes its output to <code>w</code>, and has …","","Configure the decoder to scale the image during decoding.","Set the pixel density of the images the encoder will …","","","","","","","","","","","","","","","The unit in which the density is measured","","Uses a heuristic to select one of the preceding filters …","An <code>AnimationDecoder</code> adapter of <code>PngDecoder</code>.","Filters based on the average of left and right neighbor …","High compression level","Compression level of a PNG encoder. The default setting is …","Default compression level","Fast, minimal compression","Filter algorithms used to process image data to improve …","Huffman coding compression","No processing done, best used for low bit depth grayscale …","Algorithm that takes into account the left, upper left, …","PNG decoder","PNG encoder","Png Reader","Run-length encoding compression","Filters based on previous pixel in the same scanline","Filters based on the scanline above","Turn this into an iterator over the animation frames.","","","","","","","","","","","","","","","","","","","","","Encodes the image <code>data</code> that has dimensions <code>width</code> and <code>height</code>…","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns if the image contains an animation.","Creates a new decoder that decodes from the stream <code>r</code>","Create a new encoder that writes its output to <code>w</code>","Create a new encoder that writes its output to <code>w</code> with …","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new decoder that decodes from the stream <code>r</code> with …","Write a PNG image with the specified width, height, and …","The required color type can not be handled.","An error was encountered while decoding.","An error was encountered while decoding an image.","The resulting image exceed dimension limits in either …","The dimensions passed are wrong.","An error was encountered while encoding.","An error was encountered while encoding an image.","The format is known exactly.","Repeated an operation for which error that could not be …","An image format is not supported.","A string describing the parameter. This is discouraged and …","Some feature specified by string. This is discouraged and …","The generic error type for image operations.","A best effort representation for image formats.","Result of an image decoding/encoding process","The operation would have performed an allocation larger …","An error occurred while interacting with the environment.","Completing the operation would have required more …","Indicates the limit that prevented an operation from …","Completing the operation would have required more …","The format can be identified by a name.","The end of the image has been reached.","An error was encountered in input arguments.","An error was encountered in inputs arguments.","Details how a parameter is malformed.","A common path extension for the format is known.","The format is not known or could not be determined.","An operation can not be completed by the chosen …","The specified strict limits are not supported for this …","The implementation for an operation was not provided.","Details what feature is not supported.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the image format associated with this error.","Return the image format associated with this error.","Returns the image format associated with this error.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Create an <code>UnsupportedError</code> for an image with details on …","Create an <code>EncodingError</code> for an image format.","Create a <code>DecodingError</code> for an image format.","Construct a <code>ParameterError</code> directly from a corresponding …","Construct a generic <code>LimitError</code> directly from a …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the corresponding <code>UnsupportedErrorKind</code> of the …","Returns the corresponding <code>ParameterErrorKind</code> of the error.","Returns the corresponding <code>LimitErrorKind</code> of the error.","Create an <code>EncodingError</code> that stems from an arbitrary error …","Create a <code>DecodingError</code> that stems from an arbitrary error …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The given limits","The supported strict limits","The color format did not match the channel count.","The samples are in column-major form and all samples are …","Denotes invalid flat sample buffers when trying to convert …","A flat buffer over a (multi channel) image.","All samples are packed.","Different normal forms of buffers.","The represented image can not use this representation.","At least pixels are packed.","The samples are in row-major form and all samples are …","A ffi compatible description of a sample buffer.","The represented image was too large.","No pixel aliases another.","A flat buffer that can be used as an image view.","A mutable owning version of a flat buffer.","Deprecated - ChannelCountMismatch is used instead","Get a mutable reference based version.","View the samples as a slice.","Get a reference based version.","View the samples as a slice.","View this buffer as an image over some type of pixel.","Interpret this buffer as a mutable image.","View this buffer but keep mutability at a sample level.","","","","","","","","","","","","","","Tuple of bounds in the order of coordinate inputs.","Tuple of bounds in the order of coordinate inputs.","","","Add this to an index to get to the sample in the next …","The number of channels in the color representation of the …","","","","","","","","","","","","","Supplementary color information.","Describe a column-major image packed in all directions.","","","","","","Get the dimensions <code>(channels, width, height)</code>.","Get the dimensions <code>(channels, width, height)</code>.","Check if a buffer of length <code>len</code> is large enough.","Check if a buffer of length <code>len</code> is large enough.","Get a reference on the inner sample descriptor.","Get a reference on the sample buffer descriptor.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get a mutable reference to a single sample.","Get a mutable reference to a selected subpixel if it is …","Get a mutable reference to a selected sample.","","","","Get a reference to a single sample.","Get a reference to a selected subpixel if it is in-bounds.","Get a reference to a selected subpixel.","If there are any samples aliasing each other.","If there are any samples aliasing each other.","","","","The height of the represented image.","Add this to an index to get to the next sample in …","Mutable portion of the buffer that holds sample values.","Return the mutable portion of the buffer that holds sample …","Return the mutable buffer that holds sample values.","Return the portion of the buffer that holds sample values.","Return the portion of the buffer that holds sample values.","Return the portion of the buffer that holds sample values.","Check that the pixel and the channel index are in bounds.","Check that the pixel and the channel index are in bounds.","","","Get an index provided it is inbouds.","Get an index provided it is inbouds.","Return a reference to a single sample at specified …","Resolve the index of a particular sample.","Resolve the index of a particular sample.","Get the theoretical position of sample (x, y, channel).","Get the theoretical position of sample (channel, x, y).","Return a mutable reference to a single sample at specified …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Take out the sample buffer.","Take out the sample buffer.","Check if a buffer fulfills the requirements of a normal …","Check if a buffer fulfills the requirements of a normal …","A <code>repr(C)</code> description of the layout of buffer samples.","Get the minimum length of a buffer such that all in-bounds …","Get the minimum length of a buffer such that all in-bounds …","Get the minimum length of a buffer such that all in-bounds …","Get the minimum length of a buffer such that all in-bounds …","Compares the logical preconditions.","","","Describe a row-major image packed in all directions.","Get a reference on the inner buffer.","Get a reference on the inner buffer.","Underlying linear container holding sample values.","Shrink the image to the minimum of current and given …","Shrink the image to the minimum of current and given …","Shrink the inner image.","Shrink the inner image.","Get the strides for indexing matrix-like <code>[(c, w, h)]</code>.","Get the strides for indexing matrix-like <code>[(c, w, h)]</code>.","","","","","","","","Copy the data into an owned vector.","","","","","","","","","","","","","Move the data into an image buffer.","Try to convert this into an image with mutable pixels.","","","","","","","The width of the represented image.","Add this to an index to get to the next sample in …","Create a monocolor image from a single pixel.","Color operations","","Cubic Filter","Color operations","Available Sampling Filters.","","Gaussian Filter","","Lanczos with window 3","","Nearest Neighbor","","Linear Filter","Image sampling Performs a Gaussian blur on the supplied …","","","Color operations","","","Functions for altering and converting the color of …","Color operations","Return a mutable view into an image The coordinates set …","Return an immutable view into an image The coordinates set …","Color operations","","Image sampling Perform a 3x3 box filter on the supplied …","Affine transformations Flip an image horizontally","Affine transformations Flip an image horizontally and put …","Affine transformations Flip an image horizontally in place.","Affine transformations Flip an image vertically","Affine transformations Flip an image vertically and put …","Affine transformations Flip an image vertically in place.","","Returns the argument unchanged.","Color operations","Color operations","Color operations","Color operations","Fill the image with a linear horizontal gradient","Color operations","Color operations","Calls <code>U::from(self)</code>.","Color operations","Overlay an image at a given coordinate (x, y)","Calculate the region that can be copied from top to bottom.","Replace the contents of an image at a given coordinate (x, …","Image sampling Resize the supplied image to the specified …","Affine transformations Rotate an image 180 degrees …","Affine transformations Rotate an image 180 degrees …","Affine transformations Rotate an image 180 degrees …","Affine transformations Rotate an image 270 degrees …","Affine transformations Rotate an image 270 degrees …","Affine transformations Rotate an image 90 degrees …","Affine transformations Rotate an image 90 degrees …","Image sampling Resize the supplied image to the specific …","Tile an image by repeating it multiple times","","","","","Image sampling Performs an unsharpen mask on the supplied …","Fill the image with a linear vertical gradient","A bi-level color map","The color type on which the map operates on","A color map","","","Brighten the supplied image. <code>value</code> is the amount to …","Brighten the supplied image in place. <code>value</code> is the amount …","","","Adjust the contrast of the supplied image. <code>contrast</code> is the …","Adjust the contrast of the supplied image in place. …","Reduces the colors of the image using the supplied …","Returns the argument unchanged.","Convert the supplied image to grayscale. Alpha channel is …","Convert the supplied image to grayscale. Alpha channel is …","Convert the supplied image to a grayscale image with the …","Convert the supplied image to a grayscale image with the …","Determine if this implementation of ColorMap overrides the …","Indicate NeuQuant implements <code>lookup</code>.","Hue rotate the supplied image. <code>value</code> is the degrees to …","Hue rotate the supplied image in place. <code>value</code> is the …","Reduces the colors using the supplied <code>color_map</code> and …","Returns the index of the closest match of <code>color</code> in the …","","Calls <code>U::from(self)</code>.","Invert each pixel within the supplied image. This function …","Looks up color by index in the color map.  If <code>idx</code> is out …","","Maps <code>color</code> to the closest color in the color map.","","","","","","Set of supported strict limits for a decoder.","Resource limits for decoding.","A multi-format image reader.","","","","","","","This function checks the <code>max_image_width</code> and …","This function checks that all currently set strict limits …","Remove the current information on the image format.","","","","","Read the image (replaces <code>load</code>).","","","","","","","Get the currently determined format.","This function increases the <code>max_alloc</code> limit with amount. …","This function acts identically to [<code>free</code>], but takes a <code>usize</code>…","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Read the image dimensions.","Unwrap the reader.","Set a custom set of decoding limits.","The maximum allowed sum of allocations allocated by the …","The maximum allowed image height. This limit is strict. …","The maximum allowed image width. This limit is strict. The …","Create a new image reader without a preset format.","Disable all decoding limits.","Disable all limits.","Open a file to read, format will be guessed from path.","This function checks that the current limit allows for …","This function acts identically to [<code>reserve</code>], but takes a …","Supply the format as which to interpret the read image.","","","","","","","","","","","","Construct a reader with specified format.","Make a format guess based on the content, replacing it on …","A Rectangle defined by its top left corner, width and …","","","","","","","Returns the argument unchanged.","","The rectangle’s height.","Calls <code>U::from(self)</code>.","","","","","The rectangle’s width.","The x coordinate of the top left corner.","The y coordinate of the top left corner."],"i":[26,0,23,26,26,23,29,36,36,110,0,3,3,23,0,0,0,0,23,0,0,0,0,0,23,0,0,23,23,0,0,0,0,0,0,1,1,1,1,0,0,1,1,1,1,1,1,23,29,26,17,26,26,26,17,26,26,17,26,26,26,17,26,0,0,23,0,56,0,0,23,29,23,0,0,23,48,0,26,17,26,26,17,26,0,26,17,26,0,0,26,17,26,26,17,26,0,26,17,26,0,0,36,23,23,26,29,23,1,36,4,5,6,7,36,4,5,6,7,36,4,5,6,7,36,36,111,1,8,1,8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,8,1,1,1,1,1,1,17,36,4,5,6,7,112,8,1,1,33,22,27,8,17,26,4,5,6,7,1,23,29,30,32,25,33,22,27,8,17,26,4,5,6,7,1,23,29,30,32,25,56,8,1,1,0,22,22,17,23,23,25,17,26,36,4,5,6,7,36,4,5,6,7,36,4,5,6,7,22,27,8,17,26,4,5,6,7,1,23,29,30,32,25,22,27,8,17,26,4,5,6,7,1,23,29,30,32,25,0,33,1,48,8,112,112,112,112,8,1,1,30,8,1,22,8,25,8,25,48,56,8,8,1,8,8,8,8,27,8,17,26,4,5,6,7,1,23,29,30,0,11,8,23,1,0,1,1,27,8,17,26,4,5,6,7,1,23,29,30,32,33,22,27,8,17,26,26,4,4,5,5,6,6,7,7,1,1,1,1,1,1,1,1,1,1,1,1,1,23,29,29,30,32,25,36,4,5,6,7,1,23,8,23,27,22,23,8,8,27,36,4,5,6,7,36,4,5,6,7,8,56,8,8,1,8,112,8,8,1,8,1,0,17,17,8,17,26,4,5,6,7,23,56,56,8,1,1,48,48,0,0,56,56,8,4,5,6,7,8,4,5,6,7,25,25,33,22,27,8,17,26,4,5,6,7,1,23,29,30,32,25,22,1,8,113,33,32,1,1,1,1,8,48,1,1,1,1,1,1,8,36,4,5,6,7,1,0,22,0,0,0,36,4,5,6,7,36,4,5,6,7,36,4,5,6,7,36,36,0,33,22,8,25,1,1,1,1,1,1,1,1,1,1,33,32,27,0,48,48,27,56,56,8,8,112,8,8,1,48,48,48,48,114,114,114,30,1,1,1,1,1,1,8,8,8,8,1,0,0,8,1,48,48,48,48,112,112,25,1,1,1,25,36,4,5,6,7,1,1,1,36,4,5,6,7,1,1,1,22,27,8,17,26,4,5,6,7,1,23,29,30,32,25,36,4,5,6,7,1,1,1,36,4,5,6,7,1,1,1,22,30,48,48,33,22,27,8,17,26,4,5,6,7,1,23,29,30,32,25,33,22,27,8,17,26,4,5,6,7,1,23,29,30,32,25,33,22,27,8,17,26,4,5,6,7,1,23,29,30,32,25,56,56,8,112,112,8,1,56,56,25,56,56,8,1,0,115,8,1,0,0,0,0,0,0,0,0,0,58,59,62,63,39,41,40,42,58,59,62,63,39,41,40,42,58,62,39,41,58,62,39,41,116,58,59,62,63,39,41,40,42,58,59,62,63,39,41,40,42,58,59,62,63,39,41,40,42,58,59,62,63,39,41,40,42,58,59,62,63,39,41,40,42,58,59,62,63,39,41,40,42,58,59,62,63,58,59,62,63,39,41,40,42,58,62,39,41,58,59,62,63,39,41,40,42,58,59,62,63,39,41,40,42,58,59,62,63,39,41,40,42,0,0,0,0,0,70,72,70,72,70,70,72,72,70,72,70,70,72,70,70,72,70,70,70,70,70,72,70,72,70,72,72,73,73,0,0,73,0,0,75,76,73,74,75,76,73,74,73,74,73,74,75,74,74,75,74,76,76,73,74,73,74,75,76,73,74,75,75,76,73,74,75,75,76,76,75,75,76,73,74,75,76,73,74,75,76,73,74,75,76,73,74,74,76,80,0,80,79,0,79,79,0,79,80,80,0,0,0,79,80,80,77,82,77,78,81,79,80,82,77,78,81,79,80,79,80,79,80,77,79,80,77,81,79,80,79,80,82,77,78,81,79,80,77,82,77,78,81,79,80,78,77,77,77,81,81,82,77,82,77,79,80,82,77,78,81,79,80,82,77,78,81,79,80,82,77,78,81,79,80,77,81,84,88,0,86,85,88,0,87,85,84,85,84,0,0,0,86,88,0,0,88,87,85,88,0,0,87,87,88,86,0,0,88,90,84,91,92,85,93,94,86,87,88,90,84,91,92,85,93,94,86,87,84,85,86,87,84,85,86,87,84,85,86,87,88,88,90,90,84,91,91,92,92,85,93,93,94,94,86,87,87,90,91,93,88,88,88,90,90,84,91,92,85,93,94,86,87,87,87,90,91,93,92,94,84,85,86,87,88,90,84,91,92,85,93,94,86,87,90,92,94,91,93,88,90,91,92,93,94,88,91,92,93,84,85,86,87,88,90,91,92,93,94,87,88,90,84,91,92,85,93,94,86,87,88,90,84,91,92,85,93,94,86,87,88,90,84,91,92,85,93,94,86,87,117,117,96,103,0,0,103,0,96,103,103,0,96,103,0,0,96,9,9,9,9,9,9,9,102,9,64,101,102,96,103,9,64,101,102,96,103,9,64,101,102,64,64,9,64,101,102,96,103,9,64,101,102,96,103,9,64,101,102,64,96,103,9,64,9,64,101,102,9,64,101,102,96,96,103,9,64,101,102,96,103,9,101,102,101,102,102,9,101,102,9,64,64,96,103,64,64,9,101,102,9,101,102,9,64,101,102,9,64,9,9,64,9,64,9,9,64,101,102,96,103,101,102,9,64,9,9,64,101,102,103,96,102,64,101,102,9,9,64,101,102,9,64,9,64,101,102,96,103,96,9,9,64,101,102,96,103,9,64,101,102,96,103,9,101,9,64,101,102,96,103,64,64,9,0,0,61,0,0,0,61,0,61,0,61,0,61,0,61,61,0,61,61,0,0,0,0,0,61,0,0,0,0,0,0,0,61,61,0,0,0,0,0,0,0,61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,61,61,61,0,0,0,118,0,105,105,0,0,105,105,0,0,0,105,0,0,0,0,118,105,0,0,0,118,105,105,0,118,105,118,105,105,105,105,105,0,0,0,107,106,65,107,106,65,65,65,107,106,65,106,65,107,106,65,106,65,106,65,107,65,65,107,106,65,106,65,107,106,65,107,107,107,65,65,65,107,107,65,107,65,65,107,106,65,107,106,65,107,106,65,107,106,65,107,107,0,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2],1],[[]],[[[4,[[0,[3,0]]]]]],[[[5,[3]]]],[[[6,[[0,[3,0]]]]]],[[[7,[3]]]],[[]],[[[4,[[0,[3,0]]]],4]],[[[5,[3]],5]],[[[6,[[0,[3,0]]]],6]],[[[7,[3]],7]],[[]],[[[4,[[0,[3,0]]]]]],[[[5,[3]]]],[[[6,[[0,[3,0]]]]]],[[[7,[3]]]],[[]],[[]],[[]],[1],[8,9],[1,[[10,[9]]]],[8,9],[1,[[10,[9]]]],[1,[[10,[9]]]],[1,[[10,[8]]]],[1,[[10,[11]]]],[1,[[10,[8]]]],[1,[[10,[12]]]],[1,[[10,[8]]]],[1,[[10,[11]]]],[1,[[10,[8]]]],[1,[[10,[12]]]],[1,[[10,[8]]]],[1,[[10,[13]]]],[1,[[10,[14]]]],[1,[[10,[8]]]],[1,[[10,[15]]]],[1,[[10,[16]]]],[8],[1,[[10,[8]]]],[1,[[10,[13]]]],[1,[[10,[14]]]],[1,[[10,[8]]]],[1,[[10,[15]]]],[1,[[10,[16]]]],[17,18],[[]],[[[4,[[0,[3,0]]]],4]],[[[5,[3]],5]],[[[6,[[0,[3,0]]]],6]],[[[7,[3]],7]],[[19,19]],[[8,19,19]],[[1,19,19,[6,[20]]]],[[1,2],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[8],[1],[[1,21],1],0,[22,16],[22,16],[17,20],[23,24],[23,24],[[25,19,19,19,19]],[17,20],[26,20],[[]],[[[4,[[0,[3,0]]]]]],[[[5,[3]]]],[[[6,[[0,[3,0]]]]]],[[[7,[3]]]],[[]],[[[4,[[0,[3,0]]]]]],[[[5,[3]]]],[[[6,[[0,[3,0]]]]]],[[[7,[3]]]],[[]],[[[4,[[0,[3,0]]]]]],[[[5,[3]]]],[[[6,[[0,[3,0]]]]]],[[[7,[3]]]],[22,22],[27,27],[8,8],[17,17],[26,26],[[[4,[28]]],[[4,[28]]]],[[[5,[28]]],[[5,[28]]]],[[[6,[28]]],[[6,[28]]]],[[[7,[28]]],[[7,[28]]]],[1,1],[23,23],[29,29],[30,30],[[[32,[31]]],[[32,[31]]]],[[[25,[28]]],[[25,[28]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[33,[[35,[[34,[22]]]]]],[1,17],[[],17],[[[8,[36]]],[[8,[34]]]],[[19,19],35],[[19,19],35],[[37,19,19],24],[[37,19,19],24],[[8,37,19,19],24],[[1,19,19,19,19],1],[[1,19,19,19,19],1],[30,38],[[],8],[[],1],[22,27],[8],[25],[8],[25],[[]],[[]],[8],[8],[1],[8,39],[8,40],[8,41],[8,42],[[27,27],24],[[[8,[[0,[43,36]],43]],8],24],[[17,17],24],[[26,26],24],[[[4,[43]],4],24],[[[5,[43]],5],24],[[[6,[43]],6],24],[[[7,[43]],7],24],[[1,1],24],[[23,23],24],[[29,29],24],[[30,30],24],0,[[11,[10,[20]]],16],[[[8,[[5,[20]],[34,[20,44]]]],[10,[20]]],16],[23],[1,1],0,[1,1],[1,1],[[27,45],46],[[[8,[[0,[47,36]],47]],45],46],[[17,45],46],[[26,45],46],[[[4,[47]],45],46],[[[5,[47]],45],46],[[[6,[47]],45],46],[[[7,[47]],45],46],[[1,45],46],[[23,45],46],[[29,45],46],[[30,45],46],[[[32,[[0,[47,31]]]],45],46],[[]],[[]],[[]],[[]],[[]],[[]],[17,26],[[]],[[],4],[[]],[[],5],[[],6],[[]],[[],7],[[]],[16,1],[15,1],[[[8,[[7,[18]],[34,[18]]]]],1],[[[8,[[6,[18]],[34,[18]]]]],1],[13,1],[[[8,[[7,[2]],[34,[2]]]]],1],[12,1],[[]],[14,1],[[[8,[[4,[18]],[34,[18]]]]],1],[[[8,[[5,[2]],[34,[2]]]]],1],[[[8,[[5,[18]],[34,[18]]]]],1],[11,1],[[]],[[]],[23,29],[[]],[[]],[[]],[[]],[[[0,[3,0]],[0,[3,0]],[0,[3,0]],[0,[3,0]]],[[4,[[0,[3,0]]]]]],[[3,3,3,3],[[5,[3]]]],[[[0,[3,0]],[0,[3,0]],[0,[3,0]],[0,[3,0]]],[[6,[[0,[3,0]]]]]],[[3,3,3,3],[[7,[3]]]],[48,[[35,[1]]]],[[],[[10,[23]]]],[[19,19],[[8,[36,34]]]],[[],[[10,[23]]]],[[19,19],27],[[16,19,19,27],22],[[],[[35,[23]]]],[[19,19,36],[[8,[36,34]]]],[[19,19],[[10,[8]]]],[49,27],[[]],[[],4],[[],5],[[],6],[[],7],[[]],[[],4],[[],5],[[],6],[[],7],[[19,19,34],[[10,[[8,[36,34]]]]]],[[19,19]],[[8,19,19]],[[8,19,19]],[[1,19,19],[[6,[20]]]],[[8,19,19],10],[[19,19]],[[8,19,19]],[[8,19,19]],[[1,19,19],6],[[8,19,19],10],[1,1],[[],[[35,[23]]]],[17,24],[17,24],[[[8,[[0,[50,36]],50]]]],[17],[26],[[[4,[50]]]],[[[5,[50]]]],[[[6,[50]]]],[[[7,[50]]]],[23],[[],19],[[],19],[8,19],[1,19],[[1,21],1],[[],[[10,[[34,[20]]]]]],[[],[[10,[[34,[20]]]]]],[[],35],0,[[19,19],24],[[19,19],24],[8],[[4,51]],[[5,51]],[[6,51]],[[7,51]],[8],[[4,51]],[[5,51]],[[6,51]],[[7,51]],[25],[25],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[22,16],[1,[[34,[20]]]],[8,9],[[],33],[[]],[[]],[1,[[8,[[5,[18]],[34,[18]]]]]],[1,11],[1,[[8,[[7,[18]],[34,[18]]]]]],[1,12],[8],[[],35],[1,[[8,[[4,[18]],[34,[18]]]]]],[1,13],[1,14],[1,[[8,[[6,[18]],[34,[18]]]]]],[1,15],[1,16],[[[8,[36,34]]],34],[[]],[[[4,[[0,[3,0]]]]]],[[[5,[3]]]],[[[6,[[0,[3,0]]]]]],[[[7,[3]]]],[1],0,[22,19],[[[0,[52,53]],23],[[35,[1]]]],[[],[[35,[1]]]],[23,[[35,[1]]]],[[]],[[[4,[[0,[3,0]]]]],[[4,[[0,[3,0]]]]]],[[[5,[3]]],[[5,[3]]]],[[[6,[[0,[3,0]]]]],[[6,[[0,[3,0]]]]]],[[[7,[3]]],[[7,[3]]]],[[]],[[[4,[[0,[3,0]]]],[4,[[0,[3,0]]]]],[[4,[[0,[3,0]]]]]],[[[5,[3]],[5,[3]]],[[5,[3]]]],[[[6,[[0,[3,0]]]],[6,[[0,[3,0]]]]],[[6,[[0,[3,0]]]]]],[[[7,[3]],[7,[3]]],[[7,[3]]]],[[]],[[[4,[[0,[3,0]]]]],[[4,[[0,[3,0]]]]]],[[[5,[3]]],[[5,[3]]]],[[[6,[[0,[3,0]]]]],[[6,[[0,[3,0]]]]]],[[[7,[3]]],[[7,[3]]]],[[]],[[]],0,[[[55,[54]]],33],[16,22],[[19,19],[[8,[36,34]]]],[[19,19,19,19],25],[[19,19],1],[[19,19],1],[[19,19],1],[[19,19],1],[[19,19],1],[[19,19],1],[[19,19],1],[[19,19],1],[[19,19],1],[[19,19],1],[33,[[10,[[35,[22]]]]]],[[[32,[56]]],10],[27],[[],[[35,[1]]]],[[],26],[[],26],[[27,27],[[10,[57]]]],[[],32],[[],32],[8,58],[8,59],[[19,19]],[[8,19,19]],[[8,19,19]],[[1,19,19,[6,[20]]]],[[],35],[[],35],[60,35],[60,35],[[19,19,19,19],35],[[19,19,19,19],35],[[19,19,19,19,60],35],[30,38],[[1,19,19,61],1],[[1,19,19,61],1],[[1,19,19,61],1],[1,1],[1,1],[1,1],[8,62],[8,63],[8,64],[8,35],[1,35],[[19,19,17],35],[[19,19,17,23],35],[[8,23],35],[[1,23],35],[[],38],[[],38],[65,35],[65,35],[[19,19,19,19],25],[[19,19,19,19],25],[[25,19,19,19,19],25],[[1,19,19],1],[[1,19,19],1],[1,[[34,[20]]]],[25,[[8,[34]]]],[[],5],[[[4,[[0,[3,0]]]]],[[5,[[0,[3,0]]]]]],[[[5,[3]]],[[5,[3]]]],[[[6,[[0,[3,0]]]]],[[5,[[0,[3,0]]]]]],[[[7,[3]]],[[5,[3]]]],[1,[[8,[[5,[18]],[34,[18]]]]]],[1,[[8,[[5,[2]],[34,[2]]]]]],[1,11],[[],7],[[[4,[[0,[3,0]]]]],[[7,[[0,[3,0]]]]]],[[[5,[3]]],[[7,[3]]]],[[[6,[[0,[3,0]]]]],[[7,[[0,[3,0]]]]]],[[[7,[3]]],[[7,[3]]]],[1,[[8,[[7,[18]],[34,[18]]]]]],[1,[[8,[[7,[2]],[34,[2]]]]]],[1,12],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],4],[[[4,[[0,[3,0]]]]],[[4,[[0,[3,0]]]]]],[[[5,[3]]],[[4,[3]]]],[[[6,[[0,[3,0]]]]],[[4,[[0,[3,0]]]]]],[[[7,[3]]],[[4,[3]]]],[1,[[8,[[4,[18]],[34,[18]]]]]],[1,13],[1,14],[[],6],[[[4,[[0,[3,0]]]]],[[6,[[0,[3,0]]]]]],[[[5,[3]]],[[6,[3]]]],[[[6,[[0,[3,0]]]]],[[6,[[0,[3,0]]]]]],[[[7,[3]]],[[6,[3]]]],[1,[[8,[[6,[18]],[34,[18]]]]]],[1,15],[1,16],[22,19],[30,38],[[],38],[[],38],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[19,19]],[[19,19]],[[8,19,19]],[[19,19]],[[19,19]],[[8,19,19]],[[1,2,21],1],[[19,19,19,19],25],[[19,19,19,19],25],[[25,19,19,19,19],25],[[],19],[[],19],[8,19],[1,19],[[19,19,17],35],[[19,19,17],35],[8,35],[[1,[68,[29]]],35],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[58,[36]]],[[58,[36]]]],[[[62,[36]]],[[62,[36]]]],[[[39,[36]]],[[39,[36]]]],[[[41,[36]]],[[41,[36]]]],[[]],[[]],[[]],[[]],[[]],[[[58,[36]],45],46],[[[59,[36]],45],46],[[[62,[36]],45],46],[[[63,[36]],45],46],[[[39,[36]],45],46],[[[41,[36]],45],46],[[[40,[36]],45],46],[[[42,[36]],45],46],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[58,[36]]],51],[[[59,[36]]],51],[[[62,[36]]],51],[[[63,[36]]],51],[[[39,[36]]],51],[[[41,[36]]],51],[[[40,[36]]],51],[[[42,[36]]],51],[[[58,[36]]],10],[[[59,[36]]],10],[[[62,[36]]],[[10,[[58,[36]]]]]],[[[63,[36]]],[[10,[[59,[36]]]]]],[[[39,[36]]],10],[[[41,[36]]],10],[[[40,[36]]],10],[[[42,[36]]],10],[[[58,[36]]],10],[[[59,[36]]],10],[[[62,[36]]],[[10,[[58,[36]]]]]],[[[63,[36]]],[[10,[[59,[36]]]]]],[[[58,[36]]]],[[[59,[36]]]],[[[62,[36]]]],[[[63,[36]]]],[[[39,[36]]]],[[[41,[36]]]],[[[40,[36]]]],[[[42,[36]]]],[[]],[[]],[[]],[[]],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],0,0,0,0,0,[[]],[[]],[[]],[[]],[[[70,[[0,[69,53]]]]],17],[[[70,[[0,[69,53]]]]]],[[[72,[71]],19,19,17],35],[[[72,[71]],19,19,17,10],35],[[]],[[]],[[[70,[[0,[69,53]]]]],10],[[]],[[]],[[[70,[[0,[69,53]]]]],35],[[[0,[69,53]]],[[35,[[70,[[0,[69,53]]]]]]]],[[],[[72,[71]]]],[[[0,[69,53]]],[[35,[[70,[[0,[69,53]]]]]]]],[[[70,[[0,[69,53]]]]],35],[[[70,[[0,[69,53]]]],19,19,19,19,60],35],[[[70,[[0,[69,53]]]],24]],[[],66],[[],66],[[],66],[[],66],[[],67],[[],67],[[[72,[71]],19,19,17],35],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[73,73],[74,74],[[]],[[]],[[[75,[69]]],17],[[],74],0,[[[75,[69]]]],[18,74],[[[76,[71]],19,19,17],35],[[[76,[71]]],35],[[73,73],24],[[74,74],24],[[73,45],46],[[74,45],46],[[]],[[]],[[]],[[]],[[[75,[69]]],[[10,[[34,[20]]]]]],[[]],[[]],[[]],[[]],[[[75,[69]]],35],[69,[[35,[[75,[69]]]]]],[71,[[76,[71]]]],[[71,20],[[76,[71]]]],[[[75,[69]]],35],[[[75,[69]],18,18],35],[[[76,[71]],74]],[[]],[[]],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],67],[[],67],[[],67],[[],67],0,[[[76,[71]],19,19,17],35],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[77,[69]]],[[78,[69]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[79,79],[80,80],[[]],[[]],[[[77,[69]]],17],[[],79],[[],80],[[[77,[69]]]],[[[81,[71]],19,19,17],35],[[79,79],24],[[80,80],24],[[79,45],46],[[80,45],46],[[]],[[]],[[]],[[]],[[]],[[]],[[[77,[69]]],[[10,[[34,[20]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[78,[69]]],33],[[[77,[69]]],35],[[[77,[69]]],24],[69,[[35,[[77,[69]]]]]],[71,[[81,[71]]]],[[71,79,80],[[81,[71]]]],[[[82,[69]]],[[83,[51]]]],[[[77,[69]]],35],[[[82,[69]],34],[[83,[51]]]],[[[77,[69]]],38],[[]],[[]],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[69,65],[[35,[[77,[69]]]]]],[[[81,[71]],19,19,17],35],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[84,84],[85,85],[86,86],[87,87],[[]],[[]],[[]],[[]],[[84,84],24],[[85,85],24],[[86,86],24],[[87,87],24],[[88,45],[[66,[89]]]],[[88,45],46],[[90,45],46],[[90,45],[[66,[89]]]],[[84,45],46],[[91,45],46],[[91,45],[[66,[89]]]],[[92,45],46],[[92,45],[[66,[89]]]],[[85,45],46],[[93,45],46],[[93,45],[[66,[89]]]],[[94,45],46],[[94,45],[[66,[89]]]],[[86,45],46],[[87,45],[[66,[89]]]],[[87,45],46],[90,87],[91,87],[93,87],[95,88],[96,88],[[]],[87,90],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[97,87],[23,87],[[]],[[87,84],90],[87,91],[87,93],[85,92],[86,94],[84],[85],[86],[87],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[90,84],[92,85],[94,86],[[87,[68,[[55,[98]]]]],91],[[87,[68,[[55,[98]]]]],93],[99],[99],[99],[99],[99],[99],[88,[[10,[98]]]],[91,[[10,[98]]]],[92,[[10,[98]]]],[93,[[10,[98]]]],[[]],[[]],[[]],[[]],[[],100],[[],100],[[],100],[[],100],[[],100],[[],100],[[],100],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[9,9],[9],[9,9],[9],[9,[[66,[101,96]]]],[9,[[66,[102,96]]]],[9,[[66,[101,96]]]],[[[102,[36]],19,19]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9],[64],[[[101,[36]]]],[[[102,[36]]]],0,0,[[[9,[28]]],[[9,[28]]]],[64,64],[[[101,[[0,[28,36]]]]],[[101,[[0,[28,36]]]]]],[[[102,[[0,[28,36]]]]],[[102,[[0,[28,36]]]]]],[96,96],[103,103],[[]],[[]],[[]],[[]],[[]],[[]],0,[[20,19,19],64],[[[101,[36]]]],[[[102,[36]]]],[[64,64],24],[[96,96],24],[[103,103],24],[9],[64],[[9,51],24],[[64,51],24],[[[101,[36]]],9],[[[102,[36]]],9],[[[9,[47]],45],46],[[64,45],46],[[[101,[[0,[47,36]]]],45],46],[[[102,[[0,[47,36]]]],45],46],[[96,45],46],[[96,45],46],[[103,45],46],[[]],[[]],[[]],[[]],[[]],[[]],[[9,20,19,19],10],[[[101,[36]],20,19,19],10],[[[102,[36]],20,19,19],10],[[[101,[36]],19,19]],[[[102,[36]],19,19]],[[[102,[36]],19,19]],[[9,20,19,19],10],[[[101,[36]],20,19,19],10],[[[102,[36]],20,19,19],10],[9,24],[64,24],[64],[96],[103],0,0,[9,10],[[[101,[36]]]],[[[102,[36]]]],[9,10],[[[101,[36]]]],[[[102,[36]]]],[[9,20,19,19],24],[[64,20,19,19],24],[[[101,[36]],19,19],24],[[[102,[36]],19,19],24],[[9,20,19,19],51],[[64,20,19,19],51],[9],[[9,20,19,19],[[10,[51]]]],[[64,20,19,19],[[10,[51]]]],[[9,51,51,51],[[10,[51]]]],[[64,51,51,51],[[10,[51]]]],[9],[[]],[[]],[[]],[[]],[[]],[[]],[[[101,[36]]],9],[[[102,[36]]],9],[[9,103],24],[[64,103],24],0,[9,[[10,[51]]]],[64,[[10,[51]]]],[[[101,[36]]],51],[[[102,[36]]],51],[[103,103],[[10,[57]]]],[99],[[[102,[36]],19,19]],[[20,19,19],64],[[[101,[36]]]],[[[102,[36]]]],0,[[9,20,19,19]],[[64,20,19,19]],[[[101,[36]],19,19]],[[[102,[36]],19,19]],[9],[64],[[]],[[]],[[]],[[]],[[]],[[]],[[],100],[9,[[9,[34]]]],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[9,[[66,[8]]]],[[[101,[36]]],[[66,[[102,[36]]]]]],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],0,0,[[19,19],9],0,0,0,0,0,0,0,0,0,0,0,0,0,[2,[[8,[34]]]],[[]],[[]],0,[61,61],[[]],0,0,[[19,19,19,19],25],[[19,19,19,19],25],0,[[61,61],24],[[],[[8,[34]]]],[[],[[8,[34]]]],[8,35],[[]],[[],[[8,[34]]]],[8,35],[[]],[[61,45],46],[[]],0,0,0,0,[[]],0,0,[[]],0,[[104,104]],[[19,19]],[[104,104]],[[19,19,61],[[8,[34]]]],[[],[[8,[34]]]],[8,35],[[]],[[],[[8,[34]]]],[8,35],[[],[[8,[34]]]],[8,35],[[19,19],[[8,[34]]]],[[]],[[]],[[],66],[[],66],[[],67],[[2,21],[[8,[34]]]],[[]],0,0,0,[[]],[[]],[21,[[8,[34]]]],[21],[105,105],[[]],[2,[[8,[34]]]],[2],[8],[[]],[[],[[8,[5,34]]]],[[],[[8,[7,34]]]],[[],[[8,[34]]]],[[],[[8,[34]]]],[[],24],[105,24],[21,[[8,[34]]]],[21],[8,[[8,[[5,[20]],[34,[20]]]]]],[[],51],[[105,5],51],[[]],[[]],[51,10],[[105,51],10],[[]],[[105,5]],[[]],[[],66],[[],66],[[],67],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[65,19,19],35],[[65,106],35],[[[107,[69]]]],[106,106],[65,65],[[]],[[]],[[[107,[[0,[52,53]]]]],[[35,[1]]]],[[],106],[[],65],[[106,106],24],[[65,65],24],[[106,45],46],[[65,45],46],[[[107,[69]]],[[10,[23]]]],[[65,38]],[[65,51]],[[]],[[]],[[]],[106],[65],[[]],[[]],[[]],[[[107,[[0,[52,53]]]]],35],[[[107,[69]]],69],[[[107,[69]],65]],0,0,0,[69,[[107,[69]]]],[[[107,[69]]]],[[],65],[[],[[83,[[107,[[109,[108]]]]]]]],[[65,38],35],[[65,51],35],[[[107,[69]],23]],[[]],[[]],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],67],[[],67],[[],67],[[69,23],[[107,[69]]]],[[[107,[[0,[52,53]]]]],[[83,[[107,[[0,[52,53]]]]]]]],0,[[]],[[]],[37,37],[[]],[[37,37],24],[[37,45],46],[[]],[37],0,[[]],[[]],[[],66],[[],66],[[],67],0,0,0],"p":[[4,"DynamicImage"],[15,"f32"],[8,"Primitive"],[3,"Rgb"],[3,"Luma"],[3,"Rgba"],[3,"LumaA"],[3,"ImageBuffer"],[3,"FlatSamples"],[4,"Option"],[6,"GrayImage"],[6,"GrayAlphaImage"],[6,"Rgb32FImage"],[6,"RgbImage"],[6,"Rgba32FImage"],[6,"RgbaImage"],[4,"ColorType"],[15,"u16"],[15,"u32"],[15,"u8"],[15,"i32"],[3,"Frame"],[4,"ImageFormat"],[15,"bool"],[3,"SubImage"],[4,"ExtendedColorType"],[3,"Delay"],[8,"Clone"],[4,"ImageOutputFormat"],[3,"Progress"],[8,"Sized"],[3,"Pixels"],[3,"Frames"],[3,"Vec"],[6,"ImageResult"],[8,"Pixel"],[3,"Rect"],[15,"u64"],[3,"EnumeratePixels"],[3,"EnumeratePixelsMut"],[3,"EnumerateRows"],[3,"EnumerateRowsMut"],[8,"PartialEq"],[3,"Global"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[8,"ImageDecoder"],[3,"Duration"],[8,"Hash"],[15,"usize"],[8,"BufRead"],[8,"Seek"],[8,"Iterator"],[3,"Box"],[8,"GenericImageView"],[4,"Ordering"],[3,"Pixels"],[3,"PixelsMut"],[8,"Fn"],[4,"FilterType"],[3,"Rows"],[3,"RowsMut"],[3,"SampleLayout"],[3,"Limits"],[4,"Result"],[3,"TypeId"],[8,"Into"],[8,"Read"],[3,"BmpDecoder"],[8,"Write"],[3,"BmpEncoder"],[4,"PixelDensityUnit"],[3,"PixelDensity"],[3,"JpegDecoder"],[3,"JpegEncoder"],[3,"PngDecoder"],[3,"ApngDecoder"],[4,"CompressionType"],[4,"FilterType"],[3,"PngEncoder"],[3,"PngReader"],[6,"Result"],[4,"UnsupportedErrorKind"],[4,"ParameterErrorKind"],[4,"LimitErrorKind"],[4,"ImageFormatHint"],[4,"ImageError"],[3,"Error"],[3,"UnsupportedError"],[3,"EncodingError"],[3,"ParameterError"],[3,"DecodingError"],[3,"LimitError"],[3,"Error"],[4,"Error"],[3,"Path"],[8,"Error"],[3,"Demand"],[3,"String"],[3,"View"],[3,"ViewMut"],[4,"NormalForm"],[15,"i64"],[3,"BiLevel"],[3,"LimitSupport"],[3,"Reader"],[3,"File"],[3,"BufReader"],[8,"PixelWithColorType"],[8,"EncodableLayout"],[8,"GenericImage"],[8,"AnimationDecoder"],[8,"ImageDecoderRect"],[8,"ImageEncoder"],[8,"ConvertBuffer"],[13,"Unsupported"],[8,"ColorMap"]]},\
"indexmap":{"doc":"<code>IndexMap</code> is a hash table where the iteration order of the …","t":"ICCKOOAADEDDDDDDQDINDNDQDDKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Equivalent","IndexMap","IndexSet","equivalent","indexmap","indexset","map","set","Drain","Entry","IndexMap","IntoIter","IntoKeys","IntoValues","Iter","IterMut","Key","Keys","MutableKeys","Occupied","OccupiedEntry","Vacant","VacantEntry","Value","Values","ValuesMut","__private_marker","__private_marker","and_modify","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","collect","collect","collect","collect","collect","collect","collect","collect","collect","contains_key","count","count","count","count","count","count","count","count","count","default","drain","entry","eq","extend","extend","first","first_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","get","get","get_full","get_full_mut","get_full_mut2","get_full_mut2","get_index","get_index_mut","get_index_of","get_key_value","get_mut","get_mut","hasher","index","index","index","index","index","index_mut","index_mut","insert","insert","insert","insert_full","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_key","into_keys","into_mut","into_values","is_empty","iter","iter_mut","key","key","key","keys","last","last","last","last","last","last","last","last","last","last","last_mut","len","len","len","len","len","len","len","len","len","len","move_index","new","next","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","or_default","or_insert","or_insert_with","or_insert_with_key","pop","remove","remove","remove_entry","remove_entry","reserve","retain","retain2","retain2","reverse","shift_remove","shift_remove","shift_remove_entry","shift_remove_entry","shift_remove_full","shift_remove_index","shrink_to","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","sort_by","sort_keys","sort_unstable_by","sort_unstable_keys","sorted_by","sorted_unstable_by","split_off","swap_indices","swap_remove","swap_remove","swap_remove_entry","swap_remove_entry","swap_remove_full","swap_remove_index","to_owned","to_owned","to_owned","to_owned","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","values","values_mut","with_capacity","with_capacity_and_hasher","with_hasher","Difference","Drain","IndexSet","Intersection","IntoIter","Iter","SymmetricDifference","Union","bitand","bitor","bitxor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","collect","collect","collect","contains","count","count","count","default","difference","drain","eq","extend","extend","first","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","from","from","from","from","from","from","from","from","from","from_iter","get","get_full","get_index","get_index_of","hasher","index","insert","insert_full","intersection","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_disjoint","is_empty","is_subset","is_superset","iter","last","last","last","last","len","len","len","len","move_index","new","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","nth","nth","nth","nth_back","nth_back","nth_back","pop","remove","replace","replace_full","reserve","retain","reverse","rfold","rfold","shift_remove","shift_remove_full","shift_remove_index","shift_take","shrink_to","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","sort","sort_by","sort_unstable","sort_unstable_by","sorted_by","sorted_unstable_by","split_off","sub","swap_indices","swap_remove","swap_remove_full","swap_remove_index","swap_take","symmetric_difference","take","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","with_capacity","with_capacity_and_hasher","with_hasher"],"q":["indexmap","","","","","","","","indexmap::mapindexmap::setd":["Key equivalence trait.","","","Compare self to <code>key</code> and return <code>true</code> if they are equal.","Create an <code>IndexMap</code> from a list of key-value pairs","Create an <code>IndexSet</code> from a list of values","<code>IndexMap</code> is a hash table where the iteration order of the …","A hash set implemented using <code>IndexMap</code>","A draining iterator over the entries of a <code>IndexMap</code>.","Entry for an existing key-value pair or a vacant location …","A hash table where the iteration order of the key-value …","An owning iterator over the entries of a <code>IndexMap</code>.","An owning iterator over the keys of a <code>IndexMap</code>.","An owning iterator over the values of a <code>IndexMap</code>.","An iterator over the entries of a <code>IndexMap</code>.","A mutable iterator over the entries of a <code>IndexMap</code>.","","An iterator over the keys of a <code>IndexMap</code>.","Opt-in mutable access to keys.","Existing slot with equivalent key.","A view into an occupied entry in a <code>IndexMap</code>. It is part of …","Vacant slot (no equivalent key in the map).","A view into a vacant entry in a <code>IndexMap</code>. It is part of …","","An iterator over the values of a <code>IndexMap</code>.","A mutable iterator over the values of a <code>IndexMap</code>.","This method is not useful in itself – it is there to …","","Modifies the entry if it is occupied.","","","","","","","","","","","","","","","","","","","","","","","","","","","Computes in <strong>O(1)</strong> time.","Remove all key-value pairs in the map, while preserving …","","","","","","","","","","","","","","","","","","","Return <code>true</code> if an equivalent to <code>key</code> exists in the map.","","","","","","","","","","Return an empty <code>IndexMap</code>","Clears the <code>IndexMap</code> in the given index range, returning …","Get the given key’s corresponding entry in the map for …","","Extend the map with all key-value pairs in the iterable.","Extend the map with all key-value pairs in the iterable.","Get the first key-value pair","Get the first key-value pair, with mutable access to the …","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Examples","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create an <code>IndexMap</code> from the sequence of key-value pairs in …","Gets a reference to the entry’s value in the map.","Return a reference to the value stored for <code>key</code>, if it is …","Return item index, key and value","","Return item index, mutable reference to key and value","","Get a key-value pair by index","Get a key-value pair by index","Return item index, if it exists in the map","Return references to the key-value pair stored for <code>key</code>, if …","Gets a mutable reference to the entry’s value in the map.","","Return a reference to the map’s <code>BuildHasher</code>.","Return the index of the key-value pair","Return the index where the key-value pair exists or will …","Return the index where the key-value pair will be inserted.","Returns a reference to the value at the supplied <code>index</code>.","Returns a reference to the value corresponding to the …","Returns a mutable reference to the value corresponding to …","Returns a mutable reference to the value at the supplied …","Sets the value of the entry to <code>value</code>, and returns the entry…","Inserts the entry’s key and the given value into the …","Insert a key-value pair in the map.","Insert a key-value pair in the map, and get their index.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Takes ownership of the key, leaving the entry vacant.","Return an owning iterator over the keys of the map, in …","Converts into a mutable reference to the entry’s value …","Return an owning iterator over the values of the map, in …","Returns true if the map contains no elements.","Return an iterator over the key-value pairs of the map, in …","Return an iterator over the key-value pairs of the map, in …","Gets a reference to the entry’s key in the map.","Gets a reference to the entry’s key, either within the …","Gets a reference to the key that was used to find the …","Return an iterator over the keys of the map, in their order","Get the last key-value pair","","","","","","","","","","Get the last key-value pair, with mutable access to the …","Return the number of key-value pairs in the map.","","","","","","","","","","Moves the position of a key-value pair from one index to …","Create a new map. (Does not allocate.)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Inserts a default-constructed value in the entry if it is …","Inserts the given default value in the entry if it is …","Inserts the result of the <code>call</code> function in the entry if it …","Inserts the result of the <code>call</code> function with a reference …","Remove the last key-value pair","Remove the key, value pair stored in the map for this …","Remove the key-value pair equivalent to <code>key</code> and return its …","Remove and return the key, value pair stored in the map …","Remove and return the key-value pair equivalent to <code>key</code>.","Reserve capacity for <code>additional</code> more key-value pairs.","Scan through each key-value pair in the map and keep those …","Scan through each key-value pair in the map and keep those …","","Reverses the order of the map’s key-value pairs in place.","Remove the key, value pair stored in the map for this …","Remove the key-value pair equivalent to <code>key</code> and return its …","Remove and return the key, value pair stored in the map …","Remove and return the key-value pair equivalent to <code>key</code>.","Remove the key-value pair equivalent to <code>key</code> and return it …","Remove the key-value pair by index","Shrink the capacity of the map with a lower limit.","Shrink the capacity of the map as much as possible.","","","","","","","","","","Sort the map’s key-value pairs in place using the …","Sort the map’s key-value pairs by the default ordering …","Sort the map’s key-value pairs in place using the …","Sort the map’s key-value pairs by the default ordering …","Sort the key-value pairs of the map and return a by-value …","Sort the key-value pairs of the map and return a by-value …","Splits the collection into two at the given index.","Swaps the position of two key-value pairs in the map.","Remove the key, value pair stored in the map for this …","Remove the key-value pair equivalent to <code>key</code> and return its …","Remove and return the key, value pair stored in the map …","Remove and return the key-value pair equivalent to <code>key</code>.","Remove the key-value pair equivalent to <code>key</code> and return it …","Remove the key-value pair by index","","","","","Shortens the map, keeping the first <code>len</code> elements and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return an iterator over the values of the map, in their …","Return an iterator over mutable references to the values …","Create a new map with capacity for <code>n</code> key-value pairs. …","Create a new map with capacity for <code>n</code> key-value pairs. …","Create a new map with <code>hash_builder</code>.","A lazy iterator producing elements in the difference of …","A draining iterator over the items of a <code>IndexSet</code>.","A hash set where the iteration order of the values is …","A lazy iterator producing elements in the intersection of …","An owning iterator over the items of a <code>IndexSet</code>.","An iterator over the items of a <code>IndexSet</code>.","A lazy iterator producing elements in the symmetric …","A lazy iterator producing elements in the union of <code>IndexSet</code>…","Returns the set intersection, cloned into a new set.","Returns the set union, cloned into a new set.","Returns the set symmetric-difference, cloned into a new …","","","","","","","","","","","","","","","","","Computes in <strong>O(1)</strong> time.","Remove all elements in the set, while preserving its …","","","","","","","","","","","","","","","","","Return <code>true</code> if an equivalent to <code>value</code> exists in the set.","","","","Return an empty <code>IndexSet</code>","Return an iterator over the values that are in <code>self</code> but …","Clears the <code>IndexSet</code> in the given index range, returning …","","","","Get the first value","","","","","","","","","","","Examples","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Return a reference to the value stored in the set, if it …","Return item index and value","Get a value by index","Return item index, if it exists in the set","Return a reference to the set’s <code>BuildHasher</code>.","Returns a reference to the value at the supplied <code>index</code>.","Insert the value into the set.","Insert the value into the set, and get its index.","Return an iterator over the values that are in both <code>self</code> …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>.","Returns true if the set contains no elements.","Returns <code>true</code> if all elements of <code>self</code> are contained in <code>other</code>…","Returns <code>true</code> if all elements of <code>other</code> are contained in <code>self</code>…","Return an iterator over the values of the set, in their …","Get the last value","","","","Return the number of elements in the set.","","","","Moves the position of a value from one index to another by …","Create a new set. (Does not allocate.)","","","","","","","","","","","","","","","","","","","","","Remove the last value","Remove the value from the set, and return <code>true</code> if it was …","Adds a value to the set, replacing the existing value, if …","Adds a value to the set, replacing the existing value, if …","Reserve capacity for <code>additional</code> more values.","Scan through each value in the set and keep those where the","Reverses the order of the set’s values in place.","","","Remove the value from the set, and return <code>true</code> if it was …","Remove the value from the set return it and the index it …","Remove the value by index","Removes and returns the value in the set, if any, that is …","Shrink the capacity of the set with a lower limit.","Shrink the capacity of the set as much as possible.","","","","","","","","Sort the set’s values by their default ordering.","Sort the set’s values in place using the comparison …","Sort the set’s values by their default ordering.","Sort the set’s values in place using the comparison …","Sort the values of the set and return a by-value iterator …","Sort the values of the set and return a by-value iterator …","Splits the collection into two at the given index.","Returns the set difference, cloned into a new set.","Swaps the position of two values in the set.","Remove the value from the set, and return <code>true</code> if it was …","Remove the value from the set return it and the index it …","Remove the value by index","Removes and returns the value in the set, if any, that is …","Return an iterator over the values that are in <code>self</code> or …","Removes and returns the value in the set, if any, that is …","","","","","","","Shortens the set, keeping the first <code>len</code> elements and …","","","","","","","","","","","","","","","","","","","","","","","","","Return an iterator over all values that are in <code>self</code> or …","Create a new set with capacity for <code>n</code> elements. (Does not …","Create a new set with capacity for <code>n</code> elements. (Does not …","Create a new set with <code>hash_builder</code>."],"i":[0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,33,0,0,3,0,3,0,33,0,0,33,2,3,17,3,20,2,5,8,6,9,10,7,11,12,13,17,3,20,2,5,8,6,9,10,7,11,12,13,2,2,2,5,6,7,2,2,5,6,7,5,8,6,9,10,7,11,12,13,2,5,8,6,9,10,7,11,12,13,2,2,2,2,2,2,2,2,17,3,20,2,5,8,6,9,10,7,11,12,13,17,3,20,2,2,5,8,6,9,10,7,11,12,13,2,17,2,2,2,33,2,2,2,2,2,17,2,2,17,3,20,2,2,2,2,17,20,2,2,17,3,20,2,5,8,6,9,10,7,11,12,13,2,2,2,5,8,6,9,10,7,11,12,13,20,2,17,2,2,2,2,17,3,20,2,2,5,8,6,9,10,7,11,12,13,2,2,5,8,6,9,10,7,11,12,13,2,2,5,8,6,9,10,7,11,12,13,5,8,6,9,10,7,11,12,13,5,8,6,9,10,7,11,12,13,5,8,6,9,10,7,11,12,13,3,3,3,3,2,17,2,17,2,2,2,33,2,2,17,2,17,2,2,2,2,2,5,8,6,9,10,7,11,12,13,2,2,2,2,2,2,2,2,17,2,17,2,2,2,2,5,6,7,2,17,3,20,2,5,8,6,9,10,7,11,12,13,17,3,20,2,5,8,6,9,10,7,11,12,13,17,3,20,2,5,8,6,9,10,7,11,12,13,2,2,2,2,2,0,0,0,0,0,0,0,0,24,24,24,24,30,25,31,26,27,28,29,24,30,25,31,26,27,28,29,24,24,24,25,26,27,28,29,24,24,25,26,27,28,29,30,25,31,24,30,25,31,24,24,24,24,24,24,24,24,30,25,31,26,27,28,29,28,29,24,24,30,25,31,26,27,28,29,24,24,24,24,24,24,24,24,24,24,24,30,25,31,26,27,28,29,24,24,30,25,31,26,27,28,29,24,24,24,24,24,24,30,25,31,24,30,25,31,24,24,30,25,31,26,27,28,29,30,25,31,26,27,28,29,30,25,31,30,25,31,24,24,24,24,24,24,24,28,29,24,24,24,24,24,24,30,25,31,26,27,28,29,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,26,27,28,29,24,24,30,25,31,26,27,28,29,24,30,25,31,26,27,28,29,24,30,25,31,26,27,28,29,24,24,24,24],"f":[0,0,0,[[],1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[3,3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2,4],[2],[2,2],[5,5],[6,6],[7,7],[[2,2]],[[]],[[]],[[]],[[]],[5],[8],[6],[9],[10],[7],[11],[12],[13],[2,1],[5,4],[8,4],[6,4],[9,4],[10,4],[7,4],[11,4],[12,4],[13,4],[[],2],[2,13],[2,3],[[2,2],1],[[2,14]],[[2,14]],[2,15],[2,15],[[[17,[16,16]],18],19],[[[3,[16,16]],18],19],[[[20,[16]],18],19],[[2,18],19],[[[5,[16]],18],19],[[[8,[16]],18],19],[[[6,[16]],18],19],[[[9,[16]],18],19],[[[10,[16]],18],19],[[[7,[16,16]],18],19],[[[11,[16,16]],18],19],[[[12,[16,16]],18],19],[[[13,[16,16]],18],19],[[]],[[]],[[]],[[]],[[],[[2,[21]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[14,2],[17],[2,15],[2,15],[2,15],[[],15],[2,15],[[2,4],15],[[2,4],15],[2,[[15,[4]]]],[2,15],[17],[2,15],[2],[17,4],[3,4],[20,4],[[2,4]],[2],[2],[[2,4]],[17],[20],[2,15],[2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2],[2],[2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[20],[2,8],[17],[2,10],[2,1],[2,7],[2,11],[17],[3],[20],[2,5],[2,15],[5,15],[8,15],[6,15],[9,15],[10,15],[7,15],[11,15],[12,15],[13,15],[2,15],[2,4],[5,4],[8,4],[6,4],[9,4],[10,4],[7,4],[11,4],[12,4],[13,4],[[2,4,4]],[[],2],[5,15],[8,15],[6,15],[9,15],[10,15],[7,15],[11,15],[12,15],[13,15],[5,15],[8,15],[6,15],[9,15],[10,15],[7,15],[11,15],[12,15],[13,15],[[5,4],15],[[8,4],15],[[6,4],15],[[9,4],15],[[10,4],15],[[7,4],15],[[11,4],15],[[12,4],15],[[13,4],15],[[5,4],15],[[8,4],15],[[6,4],15],[[9,4],15],[[10,4],15],[[7,4],15],[[11,4],15],[[12,4],15],[[13,4],15],[3],[3],[3],[3],[2,15],[17],[2,15],[17],[2,15],[[2,4]],[2],[[]],[2],[2],[17],[2,15],[17],[2,15],[2,15],[[2,4],15],[[2,4]],[2],[5],[8],[6],[9],[10],[7],[11],[12],[13],[2],[2],[2],[2],[2,12],[2,12],[[2,4],2],[[2,4,4]],[17],[2,15],[17],[2,15],[2,15],[[2,4],15],[[]],[[]],[[]],[[]],[[2,4]],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[2,6],[2,9],[4,2],[4,2],[[],2],0,0,0,0,0,0,0,0,[[24,24]],[[24,24]],[[24,24]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[24,4],[24],[24,24],[25,25],[26,26],[27,27],[28,28],[29,29],[[24,24]],[[]],[[]],[[]],[[]],[[]],[[]],[30],[25],[31],[24,1],[30,4],[25,4],[31,4],[[],24],[[24,24],26],[24,31],[[24,24],1],[[24,14]],[[24,14]],[24,15],[[24,18],19],[[[30,[16]],18],19],[[[25,[16]],18],19],[[[31,[16]],18],19],[[26,18],19],[[27,18],19],[[28,18],19],[[29,18],19],[28],[29],[[],[[24,[21]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[14,24],[24,15],[24,15],[[24,4],15],[24,[[15,[4]]]],[24],[[24,4]],[24,1],[24],[[24,24],27],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[24],[24],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[24,24],1],[24,1],[[24,24],1],[[24,24],1],[24,25],[24,15],[30,15],[25,15],[31,15],[24,4],[30,4],[25,4],[31,4],[[24,4,4]],[[],24],[30,15],[25,15],[31,15],[26,15],[27,15],[28,15],[29,15],[30,15],[25,15],[31,15],[26,15],[27,15],[28,15],[29,15],[[30,4],15],[[25,4],15],[[31,4],15],[[30,4],15],[[25,4],15],[[31,4],15],[24,15],[24,1],[24,15],[24],[[24,4]],[24],[24],[28],[29],[24,1],[24,15],[[24,4],15],[24,15],[[24,4]],[24],[30],[25],[31],[26],[27],[28],[29],[24],[24],[24],[24],[24,30],[24,30],[[24,4],24],[[24,24]],[[24,4,4]],[24,1],[24,15],[[24,4],15],[24,15],[[24,24],28],[24,15],[[]],[[]],[[]],[[]],[[]],[[]],[[24,4]],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[24,24],29],[4,24],[4,24],[[],24]],"p":[[15,"bool"],[3,"IndexMap"],[4,"Entry"],[15,"usize"],[3,"Keys"],[3,"Values"],[3,"Iter"],[3,"IntoKeys"],[3,"ValuesMut"],[3,"IntoValues"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[8,"IntoIterator"],[4,"Option"],[8,"Debug"],[3,"OccupiedEntry"],[3,"Formatter"],[6,"Result"],[3,"VacantEntry"],[3,"RandomState"],[4,"Result"],[3,"TypeId"],[3,"IndexSet"],[3,"Iter"],[3,"Difference"],[3,"Intersection"],[3,"SymmetricDifference"],[3,"Union"],[3,"IntoIter"],[3,"Drain"],[8,"Equivalent"],[8,"MutableKeys"]]},\
"jpeg_decoder":{"doc":"This crate contains a JPEG decoder.","t":"NNNEENNNNNDENNNDNNNNNNNNNENNNNNNENNLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLM","n":["ArithmeticEntropyCoding","CMYK","CMYK32","CodingProcess","ColorTransform","ColorTransform","ComponentCount","DNL","DctProgressive","DctSequential","Decoder","Error","Format","Grayscale","Hierarchical","ImageInfo","Internal","Io","JcsBgRgb","JcsBgYcc","L16","L8","Lossless","NonIntegerSubsamplingRatio","None","PixelFormat","RGB","RGB24","SamplePrecision","SubsamplingRatio","Unknown","Unsupported","UnsupportedFeature","YCCK","YCbCr","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","coding_process","decode","decode_scan_lossless","eq","eq","eq","eq","eq","exif_data","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","hash","hash","height","icc_profile","info","into","into","into","into","into","into","into","new","pixel_bytes","pixel_format","provide","read_info","scale","set_color_transform","set_max_decoding_buffer_size","source","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","width"],"q":["jpeg_decoder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["JPEG using arithmetic entropy coding instead of Huffman …","CMYK transform should be applied.","CMYK, 8 bits per channel","Represents the coding process of an image.","Describes the colour transform to apply before binary data …","Colour transform","Number of components in an image. 1, 3 and 4 components …","An image can specify a zero height in the frame header and …","Progressive Discrete Cosine Transform","Sequential Discrete Cosine Transform","JPEG decoder","Errors that can occur while decoding a JPEG image.","The image is not formatted properly. The string contains …","Grayscale transform should be applied (expects 1 channel)","Hierarchical JPEG.","Represents metadata of an image.","An internal error occurred while decoding the image.","An I/O error occurred while decoding the image.","big gamut red/green/blue, bg-sRGB","big gamut Y/Cb/Cr, bg-sYCC","Luminance (grayscale), 16 bits","Luminance (grayscale), 8 bits","Lossless","A subsampling ratio not representable as an integer.","No transform should be applied and the data is returned …","An enumeration over combinations of color spaces and bit …","RGB transform should be applied.","RGB, 8 bits per channel","Sample precision in bits. 8 bit sample precision is what …","Subsampling ratio.","Unknown colour transformation","The image makes use of a JPEG feature not (currently) …","An enumeration over JPEG features (currently) unsupported …","YCCK transform should be applied.","YCbCr transform should be applied.","","","","","","","","","","","","","","","","","","","","","","","","","The coding process of the image.","Decodes the image and returns the decoded pixels if …","decode_scan_lossless","","","","","","Returns raw exif data, starting at the TIFF header, if the …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","The height of the image, in pixels.","Returns the embeded icc profile if the image contains one.","Returns metadata about the image.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new <code>Decoder</code> using the reader <code>reader</code>.","Determine the size in bytes of each pixel in this format","The pixel format of the image.","","Tries to read metadata from the image without decoding it.","Configure the decoder to scale the image during decoding.","Colour transform to use when decoding the image. App …","Set maximum buffer size allowed for decoded images","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The width of the image, in pixels."],"i":[4,3,1,0,0,4,4,4,5,5,0,0,10,3,4,0,10,10,3,3,1,1,5,4,3,0,3,1,4,4,3,10,0,3,3,7,1,2,3,4,10,5,7,1,2,3,4,10,5,1,2,3,4,5,1,2,3,4,5,2,7,7,1,2,3,4,5,7,1,2,3,4,10,10,5,7,1,2,3,4,10,10,5,3,4,2,7,7,7,1,2,3,4,10,5,7,1,2,10,7,7,7,7,10,1,2,3,4,5,10,7,1,2,3,4,10,5,7,1,2,3,4,10,5,7,1,2,3,4,10,5,2],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[3,3],[4,4],[5,5],[[]],[[]],[[]],[[]],[[]],0,[[[7,[6]]],[[11,[[9,[8]],10]]]],0,[[1,1],12],[[2,2],12],[[3,3],12],[[4,4],12],[[5,5],12],[[[7,[6]]],13],[[1,14],15],[[2,14],15],[[3,14],15],[[4,14],15],[[10,14],15],[[10,14],15],[[5,14],15],[[]],[[]],[[]],[[]],[[]],[[]],[16,10],[[]],[3],[4],0,[[[7,[6]]],[[13,[[9,[8]]]]]],[[[7,[6]]],[[13,[2]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[6,[[7,[6]]]],[1,17],0,[18],[[[7,[6]]],[[11,[10]]]],[[[7,[6]],19,19],[[11,[10]]]],[[[7,[6]],3]],[[[7,[6]],17]],[10,[[13,[20]]]],[[]],[[]],[[]],[[]],[[]],[[],21],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],0],"p":[[4,"PixelFormat"],[3,"ImageInfo"],[4,"ColorTransform"],[4,"UnsupportedFeature"],[4,"CodingProcess"],[8,"Read"],[3,"Decoder"],[15,"u8"],[3,"Vec"],[4,"Error"],[4,"Result"],[15,"bool"],[4,"Option"],[3,"Formatter"],[6,"Result"],[3,"Error"],[15,"usize"],[3,"Demand"],[15,"u16"],[8,"Error"],[3,"String"],[3,"TypeId"]]},\
"lazy_static":{"doc":"A macro for declaring lazily evaluated statics.","t":"IFO","n":["LazyStatic","initialize","lazy_static"],"q":["lazy_static","",""],"d":["Support trait for enabling a few common operation on lazy …","Takes a shared reference to a lazy static and initializes …",""],"i":[0,0,0],"f":[0,[[]],0],"p":[]},\
"libc":{"doc":"libc - Raw FFI bindings to platforms’ system libraries","t":"RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRGGFGRRRRRRRRRRRRRRRRFFFFFRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRERRRRRRRRRRRRRRRRRRRRRRRRRRDRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRFFFRFRRRERRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRFNNNNNNRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRNNNNNNNNNNNNNNNNNNNNNNNNNNNNNRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRFRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRFRFFFFFRRRFFRRRRRRRRRRRRRRRRRRRFFRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRFRRRRRRMDDDDFMMMMMMMGGMMMMMMGGMMFFFFFMMFFFFFMMMMDFMMMMMMMMMMFFMFMMMFMFMFFDFMMMMMFFFDMFFFFFFFMMGDDDFFFFFFFMMMMFMGGMGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDFFMMMMMMGGGMGMMGGMMGGGGGGGEMFMGFFFFFFMFFFFFMMFFFFGGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFMMMMMMMMMDMMMMMFFFMMFGGMMMGMMGMMMMMMMMMFFFMDMMMMMMMMMMMMMMMGFMMDFFFMFFFMMMMFFMMMMMMMMMMDFFFFMMFFFFFMMMMFFFFFFFFMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMFMMFFFFFFFFFFMDFFFFMMFFFFFFMMFMMMMMMMMMMMMMMMMFDFFFLFFMMFFEFFFMFFMMFFFFFMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGFFFFFFGDMMMMMFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFMGMMMFDFFFMMMMFDMMMMMMMMMMMGGGFFFGDFFFFGGMMGDDFMFDDMDFFMMMMDMMMDMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMDDMMMMMMMMMMMMMDMMMMMMMMMDDDGDGMMFMMGGGGGMMMMMMMMGMGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGFMMDDDDDMMMMMDMMMFFFFFFFFFFFFFMMDMMFRRRRRRRRRRRRRGDFFDGFFFMMMMMMMMMMFFFDGGDFFFFFMDGFFFFFDFMMFFFFFMDDFGGDGGFHFDFGGFGGMFMMFFFFFFFDFFFFFFFFFFDFDMMMMMGGFFFFFGGFFFFFMFFFFFFFFFFFFFMGMMMMMFFFMMMMMMMDDFFFFFMMMMFMGMMMFGFGFGMMFMMFFDMGMMFFFFFFFDFGFGFFFGGGFFFDGFFMMMMMMMMMMDFFMMMMMMMMMMMMMMMMMMMMFMFGFMMGFDFMFFFFFFFFFGFFFFFFFFFFFFFFGFMFFMMFMDFFFFFFFFFFFFFFFFFDDDDDGGMDGGGGGDGGDGGDFRRRRRMMMMMMMMMMMMMMMMMMMMMMFFFFFFFFFDFFFFFDFFFFFFDFFFFFFFFFFFFFFGFGFFFFFFFGFFFFFFDFFFFFFFDFFFDFFFFFFFFDFFFFFFFGFMMMMMMMMMMMMMMMMMMMFGFMMMMFFFFFMMMMMMMMMMMMFFEFFFMMDFFMMFFFFFFFFFFFFFDFFDGMFFFFFFFMMMMMFFMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMGDMMFMMMMMMMMMMMMDDDMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMDGDDDDDMMMMMMMDMGMMMMGGMMMMMFMMMMMFFFDMFMMMMMMMMMFFDDMMFMFMMMMMFMMMMMFGFFFDFFDFTFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDMMMMMMMMFMMFFGFFFDFLMMMLMMLMLMLDFFFFFMMMMDFGDFFFFGDFMMMMMMMMMMMMMMMMMMMMMMGMMFMMMMMFDDDDDDDDDFFGMMGFFFMMMMMMFGMMMMMMMMMMMMMMMMMMMMMMMDDFDFMDFMFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFMMMGMMMMFFFFFFFFFEEGFFMFMMMMMFGFFGGFGFDGGFFGFFFFFFFFFDMGGDGGDGGDGGMDGGDGGGMMDGGFGGDGGGMGFFGDGGDGGGDGGGMDGGMFMMGDFFMDDDDEDMMMMMMMMMMMFFDMMMMMFMFMMFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMDMMMGGGGGGGFFFFFFFFGFMMMFMMMMMMMDFFFDFDMGMMMMMMMMMDMMMGFGGGHGDGDDGGGGMMMMDDDDGMMMMMMMMMMMMMMMMMMMMMMMFFFFGFFDMMFFFMMMMMMMMMDDMM","n":["ABDAY_1","ABDAY_2","ABDAY_3","ABDAY_4","ABDAY_5","ABDAY_6","ABDAY_7","ABMON_1","ABMON_10","ABMON_11","ABMON_12","ABMON_2","ABMON_3","ABMON_4","ABMON_5","ABMON_6","ABMON_7","ABMON_8","ABMON_9","ACCOUNTING","AF_APPLETALK","AF_CCITT","AF_CHAOS","AF_CNT","AF_COIP","AF_DATAKIT","AF_DECnet","AF_DLI","AF_E164","AF_ECMA","AF_HYLINK","AF_IMPLINK","AF_INET","AF_INET6","AF_IPX","AF_ISDN","AF_ISO","AF_LAT","AF_LINK","AF_LOCAL","AF_NATM","AF_NDRV","AF_NETBIOS","AF_NS","AF_OSI","AF_PPP","AF_PUP","AF_ROUTE","AF_SIP","AF_SNA","AF_SYSTEM","AF_SYS_CONTROL","AF_UNIX","AF_UNSPEC","AIO_ALLDONE","AIO_CANCELED","AIO_LISTIO_MAX","AIO_NOTCANCELED","AI_ADDRCONFIG","AI_ALL","AI_CANONNAME","AI_DEFAULT","AI_MASK","AI_NUMERICHOST","AI_NUMERICSERV","AI_PASSIVE","AI_UNUSABLE","AI_V4MAPPED","AI_V4MAPPED_CFG","ALTWERASE","ALT_DIGITS","AM_STR","ARPOP_REPLY","ARPOP_REQUEST","ATF_COM","ATF_PERM","ATF_PUBL","ATF_USETRAILERS","ATTR_BIT_MAP_COUNT","ATTR_CMNEXT_CLONEID","ATTR_CMNEXT_EXT_FLAGS","ATTR_CMNEXT_LINKID","ATTR_CMNEXT_NOFIRMLINKPATH","ATTR_CMNEXT_PRIVATESIZE","ATTR_CMNEXT_REALDEVID","ATTR_CMNEXT_REALFSID","ATTR_CMNEXT_RECURSIVE_GENCOUNT","ATTR_CMNEXT_RELPATH","ATTR_CMN_ACCESSMASK","ATTR_CMN_ACCTIME","ATTR_CMN_ADDEDTIME","ATTR_CMN_BKUPTIME","ATTR_CMN_CHGTIME","ATTR_CMN_CRTIME","ATTR_CMN_DATA_PROTECT_FLAGS","ATTR_CMN_DEVID","ATTR_CMN_DOCUMENT_ID","ATTR_CMN_EXTENDED_SECURITY","ATTR_CMN_FILEID","ATTR_CMN_FLAGS","ATTR_CMN_FNDRINFO","ATTR_CMN_FSID","ATTR_CMN_FULLPATH","ATTR_CMN_GEN_COUNT","ATTR_CMN_GRPID","ATTR_CMN_GRPUUID","ATTR_CMN_MODTIME","ATTR_CMN_NAME","ATTR_CMN_OBJID","ATTR_CMN_OBJPERMANENTID","ATTR_CMN_OBJTAG","ATTR_CMN_OBJTYPE","ATTR_CMN_OWNERID","ATTR_CMN_PARENTID","ATTR_CMN_PAROBJID","ATTR_CMN_RETURNED_ATTRS","ATTR_CMN_SCRIPT","ATTR_CMN_USERACCESS","ATTR_CMN_UUID","ATTR_DIR_ALLOCSIZE","ATTR_DIR_DATALENGTH","ATTR_DIR_ENTRYCOUNT","ATTR_DIR_IOBLOCKSIZE","ATTR_DIR_LINKCOUNT","ATTR_DIR_MOUNTSTATUS","ATTR_FILE_ALLOCSIZE","ATTR_FILE_DATAALLOCSIZE","ATTR_FILE_DATALENGTH","ATTR_FILE_DEVTYPE","ATTR_FILE_FORKCOUNT","ATTR_FILE_FORKLIST","ATTR_FILE_IOBLOCKSIZE","ATTR_FILE_LINKCOUNT","ATTR_FILE_RSRCALLOCSIZE","ATTR_FILE_RSRCLENGTH","ATTR_FILE_TOTALSIZE","ATTR_VOL_ALLOCATIONCLUMP","ATTR_VOL_ATTRIBUTES","ATTR_VOL_CAPABILITIES","ATTR_VOL_DIRCOUNT","ATTR_VOL_ENCODINGSUSED","ATTR_VOL_FILECOUNT","ATTR_VOL_FSTYPE","ATTR_VOL_INFO","ATTR_VOL_IOBLOCKSIZE","ATTR_VOL_MAXOBJCOUNT","ATTR_VOL_MINALLOCATION","ATTR_VOL_MOUNTEDDEVICE","ATTR_VOL_MOUNTFLAGS","ATTR_VOL_MOUNTPOINT","ATTR_VOL_NAME","ATTR_VOL_OBJCOUNT","ATTR_VOL_QUOTA_SIZE","ATTR_VOL_RESERVED_SIZE","ATTR_VOL_SIGNATURE","ATTR_VOL_SIZE","ATTR_VOL_SPACEAVAIL","ATTR_VOL_SPACEFREE","ATTR_VOL_SPACEUSED","ATTR_VOL_UUID","AT_EACCESS","AT_FDCWD","AT_REMOVEDIR","AT_SYMLINK_FOLLOW","AT_SYMLINK_NOFOLLOW","B0","B110","B115200","B1200","B134","B14400","B150","B1800","B19200","B200","B230400","B2400","B28800","B300","B38400","B4800","B50","B57600","B600","B7200","B75","B76800","B9600","BIOCFLUSH","BIOCGBLEN","BIOCGDLT","BIOCGDLTLIST","BIOCGETIF","BIOCGHDRCMPLT","BIOCGRSIG","BIOCGRTIMEOUT","BIOCGSEESENT","BIOCGSTATS","BIOCIMMEDIATE","BIOCPROMISC","BIOCSBLEN","BIOCSDLT","BIOCSETF","BIOCSETFNR","BIOCSETIF","BIOCSHDRCMPLT","BIOCSRSIG","BIOCSRTIMEOUT","BIOCSSEESENT","BIOCVERSION","BOOT_TIME","BPF_ALIGNMENT","BRKINT","BS0","BS1","BSDLY","BUFSIZ","BUS_ADRALN","BUS_ADRERR","BUS_OBJERR","CCCryptorStatus","CCRNGStatus","CCRandomGenerateBytes","CCStatus","CIGNORE","CLD_CONTINUED","CLD_DUMPED","CLD_EXITED","CLD_KILLED","CLD_STOPPED","CLD_TRAPPED","CLOCAL","CLOCK_MONOTONIC","CLOCK_MONOTONIC_RAW","CLOCK_MONOTONIC_RAW_APPROX","CLOCK_PROCESS_CPUTIME_ID","CLOCK_REALTIME","CLOCK_THREAD_CPUTIME_ID","CLOCK_UPTIME_RAW","CLOCK_UPTIME_RAW_APPROX","CMSG_DATA","CMSG_FIRSTHDR","CMSG_LEN","CMSG_NXTHDR","CMSG_SPACE","CODESET","CONNECT_DATA_AUTHENTICATED","CONNECT_DATA_IDEMPOTENT","CONNECT_RESUME_ON_READ_WRITE","COPYFILE_ACL","COPYFILE_CHECK","COPYFILE_CLONE","COPYFILE_CLONE_FORCE","COPYFILE_CONTINUE","COPYFILE_COPY_DATA","COPYFILE_COPY_XATTR","COPYFILE_DATA","COPYFILE_DATA_SPARSE","COPYFILE_ERR","COPYFILE_EXCL","COPYFILE_FINISH","COPYFILE_METADATA","COPYFILE_MOVE","COPYFILE_NOFOLLOW","COPYFILE_NOFOLLOW_DST","COPYFILE_NOFOLLOW_SRC","COPYFILE_PACK","COPYFILE_PRESERVE_DST_TRACKED","COPYFILE_PROGRESS","COPYFILE_QUIT","COPYFILE_RECURSE_DIR","COPYFILE_RECURSE_DIR_CLEANUP","COPYFILE_RECURSE_ERROR","COPYFILE_RECURSE_FILE","COPYFILE_RECURSIVE","COPYFILE_RUN_IN_PLACE","COPYFILE_SECURITY","COPYFILE_SKIP","COPYFILE_START","COPYFILE_STAT","COPYFILE_UNLINK","COPYFILE_UNPACK","COPYFILE_VERBOSE","COPYFILE_XATTR","CPU_STATE_IDLE","CPU_STATE_MAX","CPU_STATE_NICE","CPU_STATE_SYSTEM","CPU_STATE_USER","CR0","CR1","CR2","CR3","CRDLY","CREAD","CRNCYSTR","CRTSCTS","CS5","CS6","CS7","CS8","CSIZE","CSTOPB","CTLFLAG_ANYBODY","CTLFLAG_KERN","CTLFLAG_LOCKED","CTLFLAG_MASKED","CTLFLAG_NOAUTO","CTLFLAG_NOLOCK","CTLFLAG_OID2","CTLFLAG_RD","CTLFLAG_RW","CTLFLAG_SECURE","CTLFLAG_WR","CTLIOCGINFO","CTLTYPE","CTLTYPE_INT","CTLTYPE_NODE","CTLTYPE_OPAQUE","CTLTYPE_QUAD","CTLTYPE_STRING","CTLTYPE_STRUCT","CTL_DEBUG","CTL_DEBUG_MAXID","CTL_DEBUG_NAME","CTL_DEBUG_VALUE","CTL_HW","CTL_KERN","CTL_MACHDEP","CTL_MAXID","CTL_NET","CTL_UNSPEC","CTL_USER","CTL_VFS","CTL_VM","DAY_1","DAY_2","DAY_3","DAY_4","DAY_5","DAY_6","DAY_7","DEAD_PROCESS","DIR","DIR_MNTSTATUS_MNTPOINT","DLT_ARCNET","DLT_ATM_RFC1483","DLT_AX25","DLT_CHAOS","DLT_EN10MB","DLT_EN3MB","DLT_FDDI","DLT_IEEE802","DLT_LOOP","DLT_NULL","DLT_PPP","DLT_PRONET","DLT_RAW","DLT_SLIP","DT_BLK","DT_CHR","DT_DIR","DT_FIFO","DT_LNK","DT_REG","DT_SOCK","DT_UNKNOWN","D_FMT","D_MD_ORDER","D_T_FMT","Dl_info","E2BIG","EACCES","EADDRINUSE","EADDRNOTAVAIL","EAFNOSUPPORT","EAGAIN","EAI_AGAIN","EAI_BADFLAGS","EAI_FAIL","EAI_FAMILY","EAI_MEMORY","EAI_NODATA","EAI_NONAME","EAI_OVERFLOW","EAI_SERVICE","EAI_SOCKTYPE","EAI_SYSTEM","EALREADY","EAUTH","EBADARCH","EBADEXEC","EBADF","EBADMACHO","EBADMSG","EBADRPC","EBUSY","ECANCELED","ECHILD","ECHO","ECHOCTL","ECHOE","ECHOK","ECHOKE","ECHONL","ECHOPRT","ECONNABORTED","ECONNREFUSED","ECONNRESET","EDEADLK","EDESTADDRREQ","EDEVERR","EDOM","EDQUOT","EEXIST","EFAULT","EFBIG","EFTYPE","EHOSTDOWN","EHOSTUNREACH","EIDRM","EILSEQ","EINPROGRESS","EINTR","EINVAL","EIO","EISCONN","EISDIR","ELAST","ELOOP","EMFILE","EMLINK","EMPTY","EMSGSIZE","EMULTIHOP","ENAMETOOLONG","ENEEDAUTH","ENETDOWN","ENETRESET","ENETUNREACH","ENFILE","ENOATTR","ENOBUFS","ENODATA","ENODEV","ENOENT","ENOEXEC","ENOLCK","ENOLINK","ENOMEM","ENOMSG","ENOPOLICY","ENOPROTOOPT","ENOSPC","ENOSR","ENOSTR","ENOSYS","ENOTBLK","ENOTCONN","ENOTDIR","ENOTEMPTY","ENOTRECOVERABLE","ENOTSOCK","ENOTSUP","ENOTTY","ENXIO","EOF","EOPNOTSUPP","EOVERFLOW","EOWNERDEAD","EPERM","EPFNOSUPPORT","EPIPE","EPROCLIM","EPROCUNAVAIL","EPROGMISMATCH","EPROGUNAVAIL","EPROTO","EPROTONOSUPPORT","EPROTOTYPE","EPWROFF","EQFULL","ERA","ERANGE","ERA_D_FMT","ERA_D_T_FMT","ERA_T_FMT","EREMOTE","EROFS","ERPCMISMATCH","ESHLIBVERS","ESHUTDOWN","ESOCKTNOSUPPORT","ESPIPE","ESRCH","ESTALE","ETIME","ETIMEDOUT","ETOOMANYREFS","ETXTBSY","EUSERS","EVFILT_AIO","EVFILT_FS","EVFILT_MACHPORT","EVFILT_PROC","EVFILT_READ","EVFILT_SIGNAL","EVFILT_TIMER","EVFILT_USER","EVFILT_VM","EVFILT_VNODE","EVFILT_WRITE","EV_ADD","EV_CLEAR","EV_DELETE","EV_DISABLE","EV_DISPATCH","EV_ENABLE","EV_EOF","EV_ERROR","EV_FLAG0","EV_FLAG1","EV_ONESHOT","EV_OOBAND","EV_POLL","EV_RECEIPT","EV_SYSFLAGS","EWOULDBLOCK","EXDEV","EXIT_FAILURE","EXIT_SUCCESS","EXTA","EXTB","EXTPROC","FD_CLOEXEC","FD_CLR","FD_ISSET","FD_SET","FD_SETSIZE","FD_ZERO","FF0","FF1","FFDLY","FILE","FILENAME_MAX","FIOASYNC","FIOCLEX","FIODTYPE","FIOGETOWN","FIONBIO","FIONCLEX","FIONREAD","FIOSETOWN","FLUSHO","FOPEN_MAX","FSOPT_ATTR_CMN_EXTENDED","FSOPT_NOFOLLOW","FSOPT_NOFOLLOW_ANY","FSOPT_PACK_INVAL_ATTRS","FSOPT_REPORT_FULLSIZE","FSOPT_RETURN_REALDEV","F_ALLOCATEALL","F_ALLOCATECONTIG","F_BARRIERFSYNC","F_DUPFD","F_DUPFD_CLOEXEC","F_FREEZE_FS","F_FULLFSYNC","F_GETFD","F_GETFL","F_GETLK","F_GETOWN","F_GETPATH","F_GETPATH_NOFIRMLINK","F_GLOBAL_NOCACHE","F_LOCK","F_LOG2PHYS","F_LOG2PHYS_EXT","F_NOCACHE","F_NODIRECT","F_OK","F_PEOFPOSMODE","F_PREALLOCATE","F_RDADVISE","F_RDAHEAD","F_RDLCK","F_SETFD","F_SETFL","F_SETLK","F_SETLKW","F_SETOWN","F_TEST","F_THAW_FS","F_TLOCK","F_ULOCK","F_UNLCK","F_VOLPOSMODE","F_WRLCK","GETALL","GETNCNT","GETPID","GETVAL","GETZCNT","GLOB_ABORTED","GLOB_APPEND","GLOB_DOOFFS","GLOB_ERR","GLOB_MARK","GLOB_NOCHECK","GLOB_NOESCAPE","GLOB_NOMATCH","GLOB_NOSORT","GLOB_NOSPACE","GRPQUOTA","HOST_CPU_LOAD_INFO","HOST_CPU_LOAD_INFO_COUNT","HOST_EXPIRED_TASK_INFO","HOST_EXTMOD_INFO64","HOST_LOAD_INFO","HOST_VM_INFO","HOST_VM_INFO64","HOST_VM_INFO64_COUNT","HUPCL","HW_AVAILCPU","HW_BUS_FREQ","HW_BYTEORDER","HW_CACHELINE","HW_CPU_FREQ","HW_DISKNAMES","HW_DISKSTATS","HW_EPOCH","HW_FLOATINGPT","HW_L1DCACHESIZE","HW_L1ICACHESIZE","HW_L2CACHESIZE","HW_L2SETTINGS","HW_L3CACHESIZE","HW_L3SETTINGS","HW_MACHINE","HW_MACHINE_ARCH","HW_MAXID","HW_MEMSIZE","HW_MODEL","HW_NCPU","HW_PAGESIZE","HW_PHYSMEM","HW_PRODUCT","HW_TARGET","HW_TB_FREQ","HW_USERMEM","HW_VECTORUNIT","ICANON","ICRNL","IEXTEN","IFF_ALLMULTI","IFF_ALTPHYS","IFF_BROADCAST","IFF_DEBUG","IFF_LINK0","IFF_LINK1","IFF_LINK2","IFF_LOOPBACK","IFF_MULTICAST","IFF_NOARP","IFF_NOTRAILERS","IFF_OACTIVE","IFF_POINTOPOINT","IFF_PROMISC","IFF_RUNNING","IFF_SIMPLEX","IFF_UP","IFNAMSIZ","IF_NAMESIZE","IGNBRK","IGNCR","IGNPAR","IMAXBEL","INADDR_ANY","INADDR_BROADCAST","INADDR_LOOPBACK","INADDR_NONE","INIT_PROCESS","INLCR","INPCK","INT_MAX","INT_MIN","IOV_MAX","IPC_CREAT","IPC_EXCL","IPC_M","IPC_NOWAIT","IPC_PRIVATE","IPC_R","IPC_RMID","IPC_SET","IPC_STAT","IPC_W","IPPROTO_3PC","IPPROTO_ADFS","IPPROTO_AH","IPPROTO_AHIP","IPPROTO_APES","IPPROTO_ARGUS","IPPROTO_AX25","IPPROTO_BHA","IPPROTO_BLT","IPPROTO_BRSATMON","IPPROTO_CFTP","IPPROTO_CHAOS","IPPROTO_CMTP","IPPROTO_CPHB","IPPROTO_CPNX","IPPROTO_DDP","IPPROTO_DGP","IPPROTO_DIVERT","IPPROTO_DONE","IPPROTO_DSTOPTS","IPPROTO_EGP","IPPROTO_EMCON","IPPROTO_ENCAP","IPPROTO_EON","IPPROTO_ESP","IPPROTO_ETHERIP","IPPROTO_FRAGMENT","IPPROTO_GGP","IPPROTO_GMTP","IPPROTO_GRE","IPPROTO_HELLO","IPPROTO_HMP","IPPROTO_HOPOPTS","IPPROTO_ICMP","IPPROTO_ICMPV6","IPPROTO_IDP","IPPROTO_IDPR","IPPROTO_IDRP","IPPROTO_IGMP","IPPROTO_IGP","IPPROTO_IGRP","IPPROTO_IL","IPPROTO_INLSP","IPPROTO_INP","IPPROTO_IP","IPPROTO_IPCOMP","IPPROTO_IPCV","IPPROTO_IPEIP","IPPROTO_IPIP","IPPROTO_IPPC","IPPROTO_IPV6","IPPROTO_IRTP","IPPROTO_KRYPTOLAN","IPPROTO_LARP","IPPROTO_LEAF1","IPPROTO_LEAF2","IPPROTO_MAX","IPPROTO_MEAS","IPPROTO_MHRP","IPPROTO_MICP","IPPROTO_MTP","IPPROTO_MUX","IPPROTO_ND","IPPROTO_NHRP","IPPROTO_NONE","IPPROTO_NSP","IPPROTO_NVPII","IPPROTO_OSPFIGP","IPPROTO_PGM","IPPROTO_PIGP","IPPROTO_PIM","IPPROTO_PRM","IPPROTO_PUP","IPPROTO_PVP","IPPROTO_RAW","IPPROTO_RCCMON","IPPROTO_RDP","IPPROTO_ROUTING","IPPROTO_RSVP","IPPROTO_RVD","IPPROTO_SATEXPAK","IPPROTO_SATMON","IPPROTO_SCCSP","IPPROTO_SCTP","IPPROTO_SDRP","IPPROTO_SEP","IPPROTO_SRPC","IPPROTO_ST","IPPROTO_SVMTP","IPPROTO_SWIPE","IPPROTO_TCF","IPPROTO_TCP","IPPROTO_TP","IPPROTO_TPXX","IPPROTO_TRUNK1","IPPROTO_TRUNK2","IPPROTO_TTP","IPPROTO_UDP","IPPROTO_VINES","IPPROTO_VISA","IPPROTO_VMTP","IPPROTO_WBEXPAK","IPPROTO_WBMON","IPPROTO_WSN","IPPROTO_XNET","IPPROTO_XTP","IPTOS_ECN_CE","IPTOS_ECN_ECT0","IPTOS_ECN_ECT1","IPTOS_ECN_MASK","IPTOS_ECN_NOTECT","IPV6_BOUND_IF","IPV6_CHECKSUM","IPV6_DONTFRAG","IPV6_HOPLIMIT","IPV6_JOIN_GROUP","IPV6_LEAVE_GROUP","IPV6_MULTICAST_HOPS","IPV6_MULTICAST_IF","IPV6_MULTICAST_LOOP","IPV6_PKTINFO","IPV6_RECVPKTINFO","IPV6_RECVTCLASS","IPV6_TCLASS","IPV6_UNICAST_HOPS","IPV6_V6ONLY","IP_ADD_MEMBERSHIP","IP_ADD_SOURCE_MEMBERSHIP","IP_BLOCK_SOURCE","IP_BOUND_IF","IP_DONTFRAG","IP_DROP_MEMBERSHIP","IP_DROP_SOURCE_MEMBERSHIP","IP_HDRINCL","IP_MULTICAST_IF","IP_MULTICAST_LOOP","IP_MULTICAST_TTL","IP_PKTINFO","IP_RECVDSTADDR","IP_RECVIF","IP_RECVTOS","IP_TOS","IP_TTL","IP_UNBLOCK_SOURCE","ISIG","ISTRIP","ITIMER_PROF","ITIMER_REAL","ITIMER_VIRTUAL","IUTF8","IXANY","IXOFF","IXON","KERN_ABORTED","KERN_AFFINITY","KERN_AIOMAX","KERN_AIOPROCMAX","KERN_AIOTHREADS","KERN_ALREADY_IN_SET","KERN_ALREADY_WAITING","KERN_ARGMAX","KERN_BOOTFILE","KERN_BOOTTIME","KERN_CHECKOPENEVT","KERN_CLASSIC","KERN_CLASSICHANDLER","KERN_CLOCKRATE","KERN_CODESIGN_ERROR","KERN_COREDUMP","KERN_COREFILE","KERN_DEFAULT_SET","KERN_DOMAINNAME","KERN_DUMMY","KERN_DUMPDEV","KERN_EXCEPTION_PROTECTED","KERN_EXEC","KERN_FAILURE","KERN_FILE","KERN_HOSTID","KERN_HOSTNAME","KERN_INSUFFICIENT_BUFFER_SIZE","KERN_INVALID_ADDRESS","KERN_INVALID_ARGUMENT","KERN_INVALID_CAPABILITY","KERN_INVALID_HOST","KERN_INVALID_LEDGER","KERN_INVALID_MEMORY_CONTROL","KERN_INVALID_NAME","KERN_INVALID_OBJECT","KERN_INVALID_POLICY","KERN_INVALID_PROCESSOR_SET","KERN_INVALID_RIGHT","KERN_INVALID_SECURITY","KERN_INVALID_TASK","KERN_INVALID_VALUE","KERN_IPC","KERN_JOB_CONTROL","KERN_KDBUFWAIT","KERN_KDCPUMAP","KERN_KDDFLAGS","KERN_KDEBUG","KERN_KDEFLAGS","KERN_KDENABLE","KERN_KDGETBUF","KERN_KDGETENTROPY","KERN_KDGETREG","KERN_KDPIDEX","KERN_KDPIDTR","KERN_KDREADCURTHRMAP","KERN_KDREADTR","KERN_KDREMOVE","KERN_KDSETBUF","KERN_KDSETREG","KERN_KDSETRTCDEC","KERN_KDSETUP","KERN_KDSET_TYPEFILTER","KERN_KDTHRMAP","KERN_KDWRITEMAP","KERN_KDWRITETR","KERN_LOCK_OWNED","KERN_LOCK_OWNED_SELF","KERN_LOCK_SET_DESTROYED","KERN_LOCK_UNSTABLE","KERN_LOGSIGEXIT","KERN_LOW_PRI_DELAY","KERN_LOW_PRI_WINDOW","KERN_MAXFILES","KERN_MAXFILESPERPROC","KERN_MAXID","KERN_MAXPARTITIONS","KERN_MAXPROC","KERN_MAXPROCPERUID","KERN_MAXVNODES","KERN_MEMORY_DATA_MOVED","KERN_MEMORY_ERROR","KERN_MEMORY_FAILURE","KERN_MEMORY_PRESENT","KERN_MEMORY_RESTART_COPY","KERN_NAME_EXISTS","KERN_NETBOOT","KERN_NGROUPS","KERN_NISDOMAINNAME","KERN_NODE_DOWN","KERN_NOT_DEPRESSED","KERN_NOT_IN_SET","KERN_NOT_RECEIVER","KERN_NOT_SUPPORTED","KERN_NOT_WAITING","KERN_NO_ACCESS","KERN_NO_SPACE","KERN_NTP_PLL","KERN_NX_PROTECTION","KERN_OPENEVT_PROC","KERN_OPERATION_TIMED_OUT","KERN_OSRELDATE","KERN_OSRELEASE","KERN_OSREV","KERN_OSTYPE","KERN_OSVERSION","KERN_POLICY_LIMIT","KERN_POLICY_STATIC","KERN_POSIX","KERN_POSIX1","KERN_PROC","KERN_PROCARGS","KERN_PROCARGS2","KERN_PROCDELAYTERM","KERN_PROCNAME","KERN_PROC_ALL","KERN_PROC_LCID","KERN_PROC_PGRP","KERN_PROC_PID","KERN_PROC_RUID","KERN_PROC_SESSION","KERN_PROC_TTY","KERN_PROC_UID","KERN_PROF","KERN_PROTECTION_FAILURE","KERN_PS_STRINGS","KERN_RAGEVNODE","KERN_RAGE_PROC","KERN_RAGE_THREAD","KERN_RESOURCE_SHORTAGE","KERN_RIGHT_EXISTS","KERN_RPC_CONTINUE_ORPHAN","KERN_RPC_SERVER_TERMINATED","KERN_RPC_TERMINATE_ORPHAN","KERN_SAFEBOOT","KERN_SAVED_IDS","KERN_SECURELVL","KERN_SEMAPHORE_DESTROYED","KERN_SHREG_PRIVATIZABLE","KERN_SPECULATIVE_READS","KERN_SUCCESS","KERN_SUGID_COREDUMP","KERN_SYMFILE","KERN_SYSV","KERN_TERMINATED","KERN_TFP","KERN_TFP_POLICY","KERN_TFP_POLICY_DEFAULT","KERN_TFP_POLICY_DENY","KERN_THALTSTACK","KERN_THREADNAME","KERN_TRANSLATE","KERN_TTY","KERN_UNOPENEVT_PROC","KERN_UNRAGE_PROC","KERN_UNRAGE_THREAD","KERN_UPDATEINTERVAL","KERN_UREFS_OVERFLOW","KERN_USRSTACK32","KERN_USRSTACK64","KERN_VERSION","KERN_VNODE","KIPC_MAXSOCKBUF","KIPC_MAX_DATALEN","KIPC_MAX_HDR","KIPC_MAX_LINKHDR","KIPC_MAX_PROTOHDR","KIPC_MBSTAT","KIPC_NMBCLUSTERS","KIPC_SOCKBUF_WASTE","KIPC_SOMAXCONN","KIPC_SOQLIMITCOMPAT","LC_ALL","LC_ALL_MASK","LC_COLLATE","LC_COLLATE_MASK","LC_CTYPE","LC_CTYPE_MASK","LC_MESSAGES","LC_MESSAGES_MASK","LC_MONETARY","LC_MONETARY_MASK","LC_NUMERIC","LC_NUMERIC_MASK","LC_SEGMENT","LC_SEGMENT_64","LC_TIME","LC_TIME_MASK","LIO_NOP","LIO_NOWAIT","LIO_READ","LIO_WAIT","LIO_WRITE","LOCAL_PEERCRED","LOCAL_PEEREPID","LOCAL_PEEREUUID","LOCAL_PEERPID","LOCAL_PEERUUID","LOCK_EX","LOCK_NB","LOCK_SH","LOCK_UN","LOGIN_PROCESS","LOG_ALERT","LOG_AUTH","LOG_AUTHPRIV","LOG_CONS","LOG_CRIT","LOG_CRON","LOG_DAEMON","LOG_DEBUG","LOG_EMERG","LOG_ERR","LOG_FACMASK","LOG_FTP","LOG_INFO","LOG_INSTALL","LOG_KERN","LOG_LAUNCHD","LOG_LOCAL0","LOG_LOCAL1","LOG_LOCAL2","LOG_LOCAL3","LOG_LOCAL4","LOG_LOCAL5","LOG_LOCAL6","LOG_LOCAL7","LOG_LPR","LOG_MAIL","LOG_NDELAY","LOG_NETINFO","LOG_NEWS","LOG_NFACILITIES","LOG_NOTICE","LOG_NOWAIT","LOG_ODELAY","LOG_PERROR","LOG_PID","LOG_PRIMASK","LOG_RAS","LOG_REMOTEAUTH","LOG_SYSLOG","LOG_USER","LOG_UUCP","LOG_WARNING","L_tmpnam","MACH_PORT_NULL","MACH_TASK_BASIC_INFO","MACH_TASK_BASIC_INFO_COUNT","MADV_CAN_REUSE","MADV_DONTNEED","MADV_FREE","MADV_FREE_REUSABLE","MADV_FREE_REUSE","MADV_NORMAL","MADV_RANDOM","MADV_SEQUENTIAL","MADV_WILLNEED","MADV_ZERO_WIRED_PAGES","MAP_ANON","MAP_ANONYMOUS","MAP_COPY","MAP_FAILED","MAP_FILE","MAP_FIXED","MAP_HASSEMAPHORE","MAP_JIT","MAP_NOCACHE","MAP_NOEXTEND","MAP_NORESERVE","MAP_PRIVATE","MAP_RENAME","MAP_SHARED","MAXCOMLEN","MAXFREQ","MAXPATHLEN","MAXPHASE","MAXSEC","MAXTC","MAXTHREADNAMESIZE","MAX_KCTL_NAME","MCL_CURRENT","MCL_FUTURE","MDMBUF","MEMORY_OBJECT_NULL","MH_MAGIC","MH_MAGIC_64","MINCORE_INCORE","MINCORE_MODIFIED","MINCORE_MODIFIED_OTHER","MINCORE_REFERENCED","MINCORE_REFERENCED_OTHER","MINSEC","MINSIGSTKSZ","MNT_ASYNC","MNT_AUTOMOUNTED","MNT_CPROTECT","MNT_DEFWRITE","MNT_DONTBROWSE","MNT_DOVOLFS","MNT_EXPORTED","MNT_FORCE","MNT_IGNORE_OWNERSHIP","MNT_JOURNALED","MNT_LOCAL","MNT_MULTILABEL","MNT_NOATIME","MNT_NOBLOCK","MNT_NODEV","MNT_NOEXEC","MNT_NOSUID","MNT_NOUSERXATTR","MNT_NOWAIT","MNT_QUARANTINE","MNT_QUOTA","MNT_RDONLY","MNT_RELOAD","MNT_ROOTFS","MNT_SNAPSHOT","MNT_SYNCHRONOUS","MNT_UNION","MNT_UPDATE","MNT_WAIT","MOD_CLKA","MOD_CLKB","MOD_ESTERROR","MOD_FREQUENCY","MOD_MAXERROR","MOD_MICRO","MOD_NANO","MOD_OFFSET","MOD_PPSMAX","MOD_STATUS","MOD_TAI","MOD_TIMECONST","MON_1","MON_10","MON_11","MON_12","MON_2","MON_3","MON_4","MON_5","MON_6","MON_7","MON_8","MON_9","MSG_CTRUNC","MSG_DONTROUTE","MSG_DONTWAIT","MSG_EOF","MSG_EOR","MSG_FLUSH","MSG_HAVEMORE","MSG_HOLD","MSG_OOB","MSG_PEEK","MSG_RCVMORE","MSG_SEND","MSG_TRUNC","MSG_WAITALL","MS_ASYNC","MS_DEACTIVATE","MS_INVALIDATE","MS_KILLPAGES","MS_SYNC","NANOSECOND","NCCS","NET_RT_DUMP","NET_RT_FLAGS","NET_RT_IFLIST","NET_RT_IFLIST2","NEW_TIME","NI_DGRAM","NI_MAXHOST","NI_MAXSERV","NI_NAMEREQD","NI_NOFQDN","NI_NUMERICHOST","NI_NUMERICSCOPE","NI_NUMERICSERV","NL0","NL1","NLDLY","NOEXPR","NOFLSH","NOKERNINFO","NOSTR","NOTE_ABSOLUTE","NOTE_ATTRIB","NOTE_BACKGROUND","NOTE_CHILD","NOTE_CRITICAL","NOTE_DELETE","NOTE_EXEC","NOTE_EXIT","NOTE_EXITSTATUS","NOTE_EXIT_CSERROR","NOTE_EXIT_DECRYPTFAIL","NOTE_EXIT_DETAIL","NOTE_EXIT_DETAIL_MASK","NOTE_EXIT_MEMORY","NOTE_EXTEND","NOTE_FFAND","NOTE_FFCOPY","NOTE_FFCTRLMASK","NOTE_FFLAGSMASK","NOTE_FFNOP","NOTE_FFOR","NOTE_FORK","NOTE_LEEWAY","NOTE_LINK","NOTE_LOWAT","NOTE_NONE","NOTE_NSECONDS","NOTE_PCTRLMASK","NOTE_PDATAMASK","NOTE_RENAME","NOTE_REVOKE","NOTE_SECONDS","NOTE_SIGNAL","NOTE_TRACK","NOTE_TRACKERR","NOTE_TRIGGER","NOTE_USECONDS","NOTE_VM_ERROR","NOTE_VM_PRESSURE","NOTE_VM_PRESSURE_SUDDEN_TERMINATE","NOTE_VM_PRESSURE_TERMINATE","NOTE_WRITE","NTP_API","OCRNL","OFDEL","OFILL","OLD_TIME","ONLCR","ONLRET","ONOCR","ONOEOT","OPOST","OS_LOG_TYPE_DEBUG","OS_LOG_TYPE_DEFAULT","OS_LOG_TYPE_ERROR","OS_LOG_TYPE_FAULT","OS_LOG_TYPE_INFO","OS_SIGNPOST_EVENT","OS_SIGNPOST_INTERVAL_BEGIN","OS_SIGNPOST_INTERVAL_END","OS_UNFAIR_LOCK_INIT","OXTABS","O_ACCMODE","O_APPEND","O_ASYNC","O_CLOEXEC","O_CREAT","O_DIRECTORY","O_DSYNC","O_EVTONLY","O_EXCL","O_EXLOCK","O_FSYNC","O_NDELAY","O_NOCTTY","O_NOFOLLOW","O_NOFOLLOW_ANY","O_NONBLOCK","O_RDONLY","O_RDWR","O_SHLOCK","O_SYMLINK","O_SYNC","O_TRUNC","O_WRONLY","PARENB","PARMRK","PARODD","PATH_MAX","PENDIN","PF_APPLETALK","PF_CCITT","PF_CHAOS","PF_CNT","PF_COIP","PF_DATAKIT","PF_DECnet","PF_DLI","PF_ECMA","PF_HYLINK","PF_IMPLINK","PF_INET","PF_INET6","PF_IPX","PF_ISDN","PF_ISO","PF_KEY","PF_LAT","PF_LINK","PF_LOCAL","PF_NATM","PF_NDRV","PF_NETBIOS","PF_NS","PF_OSI","PF_PIP","PF_PPP","PF_PUP","PF_ROUTE","PF_RTIP","PF_SIP","PF_SNA","PF_SYSTEM","PF_UNIX","PF_UNSPEC","PF_XTP","PIPE_BUF","PM_STR","POLLERR","POLLHUP","POLLIN","POLLNVAL","POLLOUT","POLLPRI","POLLRDBAND","POLLRDNORM","POLLWRBAND","POLLWRNORM","POSIX_MADV_DONTNEED","POSIX_MADV_NORMAL","POSIX_MADV_RANDOM","POSIX_MADV_SEQUENTIAL","POSIX_MADV_WILLNEED","POSIX_SPAWN_CLOEXEC_DEFAULT","POSIX_SPAWN_RESETIDS","POSIX_SPAWN_SETEXEC","POSIX_SPAWN_SETPGROUP","POSIX_SPAWN_SETSIGDEF","POSIX_SPAWN_SETSIGMASK","POSIX_SPAWN_START_SUSPENDED","PRIO_DARWIN_BG","PRIO_DARWIN_NONUI","PRIO_DARWIN_PROCESS","PRIO_DARWIN_THREAD","PRIO_MAX","PRIO_MIN","PRIO_PGRP","PRIO_PROCESS","PRIO_USER","PROCESSOR_BASIC_INFO","PROCESSOR_CPU_LOAD_INFO","PROCESSOR_PM_REGS_INFO","PROCESSOR_SET_BASIC_INFO","PROCESSOR_SET_LOAD_INFO","PROCESSOR_TEMPERATURE","PROC_CSM_ALL","PROC_CSM_NOSMT","PROC_CSM_TECS","PROC_PIDPATHINFO_MAXSIZE","PROC_PIDTASKALLINFO","PROC_PIDTASKINFO","PROC_PIDTBSDINFO","PROC_PIDTHREADINFO","PROC_PIDVNODEPATHINFO","PROT_EXEC","PROT_NONE","PROT_READ","PROT_WRITE","PTHREAD_COND_INITIALIZER","PTHREAD_CREATE_DETACHED","PTHREAD_CREATE_JOINABLE","PTHREAD_INTROSPECTION_THREAD_CREATE","PTHREAD_INTROSPECTION_THREAD_DESTROY","PTHREAD_INTROSPECTION_THREAD_START","PTHREAD_INTROSPECTION_THREAD_TERMINATE","PTHREAD_MUTEX_DEFAULT","PTHREAD_MUTEX_ERRORCHECK","PTHREAD_MUTEX_INITIALIZER","PTHREAD_MUTEX_NORMAL","PTHREAD_MUTEX_RECURSIVE","PTHREAD_PROCESS_PRIVATE","PTHREAD_PROCESS_SHARED","PTHREAD_RWLOCK_INITIALIZER","PTHREAD_STACK_MIN","PT_ATTACH","PT_ATTACHEXC","PT_CONTINUE","PT_DENY_ATTACH","PT_DETACH","PT_FIRSTMACH","PT_FORCEQUOTA","PT_KILL","PT_READ_D","PT_READ_I","PT_READ_U","PT_SIGEXC","PT_STEP","PT_THUPDATE","PT_TRACE_ME","PT_WRITE_D","PT_WRITE_I","PT_WRITE_U","P_ALL","P_PGID","P_PID","QCMD","QOS_CLASS_BACKGROUND","QOS_CLASS_DEFAULT","QOS_CLASS_UNSPECIFIED","QOS_CLASS_USER_INITIATED","QOS_CLASS_USER_INTERACTIVE","QOS_CLASS_UTILITY","Q_GETQUOTA","Q_QUOTAOFF","Q_QUOTAON","Q_SETQUOTA","Q_SYNC","RADIXCHAR","RAND_MAX","REG_ASSERT","REG_ATOI","REG_BACKR","REG_BADBR","REG_BADPAT","REG_BADRPT","REG_BASIC","REG_DUMP","REG_EBRACE","REG_EBRACK","REG_ECOLLATE","REG_ECTYPE","REG_EESCAPE","REG_EMPTY","REG_EPAREN","REG_ERANGE","REG_ESPACE","REG_ESUBREG","REG_EXTENDED","REG_ICASE","REG_INVARG","REG_ITOA","REG_LARGE","REG_NEWLINE","REG_NOMATCH","REG_NOSPEC","REG_NOSUB","REG_NOTBOL","REG_NOTEOL","REG_PEND","REG_STARTEND","REG_TRACE","RENAME_EXCL","RENAME_SWAP","RLIMIT_AS","RLIMIT_CORE","RLIMIT_CPU","RLIMIT_DATA","RLIMIT_FSIZE","RLIMIT_MEMLOCK","RLIMIT_NOFILE","RLIMIT_NPROC","RLIMIT_RSS","RLIMIT_STACK","RLIM_INFINITY","RLIM_NLIMITS","RTAX_AUTHOR","RTAX_BRD","RTAX_DST","RTAX_GATEWAY","RTAX_GENMASK","RTAX_IFA","RTAX_IFP","RTAX_MAX","RTAX_NETMASK","RTA_AUTHOR","RTA_BRD","RTA_DST","RTA_GATEWAY","RTA_GENMASK","RTA_IFA","RTA_IFP","RTA_NETMASK","RTF_BLACKHOLE","RTF_BROADCAST","RTF_CLONING","RTF_CONDEMNED","RTF_DEAD","RTF_DELCLONE","RTF_DONE","RTF_DYNAMIC","RTF_GATEWAY","RTF_GLOBAL","RTF_HOST","RTF_IFREF","RTF_IFSCOPE","RTF_LLINFO","RTF_LOCAL","RTF_MODIFIED","RTF_MULTICAST","RTF_NOIFREF","RTF_PINNED","RTF_PRCLONING","RTF_PROTO1","RTF_PROTO2","RTF_PROTO3","RTF_PROXY","RTF_REJECT","RTF_ROUTER","RTF_STATIC","RTF_UP","RTF_WASCLONED","RTF_XRESOLVE","RTLD_DEFAULT","RTLD_FIRST","RTLD_GLOBAL","RTLD_LAZY","RTLD_LOCAL","RTLD_NEXT","RTLD_NODELETE","RTLD_NOLOAD","RTLD_NOW","RTLD_SELF","RTM_ADD","RTM_CHANGE","RTM_DELADDR","RTM_DELETE","RTM_DELMADDR","RTM_GET","RTM_GET2","RTM_IFINFO","RTM_IFINFO2","RTM_LOCK","RTM_LOSING","RTM_MISS","RTM_NEWADDR","RTM_NEWMADDR","RTM_NEWMADDR2","RTM_OLDADD","RTM_OLDDEL","RTM_REDIRECT","RTM_RESOLVE","RTM_VERSION","RTV_EXPIRE","RTV_HOPCOUNT","RTV_MTU","RTV_RPIPE","RTV_RTT","RTV_RTTVAR","RTV_SPIPE","RTV_SSTHRESH","RUN_LVL","RUSAGE_CHILDREN","RUSAGE_INFO_V0","RUSAGE_INFO_V1","RUSAGE_INFO_V2","RUSAGE_INFO_V3","RUSAGE_INFO_V4","RUSAGE_SELF","R_OK","SAE_ASSOCID_ALL","SAE_ASSOCID_ANY","SAE_CONNID_ALL","SAE_CONNID_ANY","SA_NOCLDSTOP","SA_NOCLDWAIT","SA_NODEFER","SA_ONSTACK","SA_RESETHAND","SA_RESTART","SA_SIGINFO","SCALE_PPM","SCHED_FIFO","SCHED_OTHER","SCHED_RR","SCM_CREDS","SCM_RIGHTS","SCM_TIMESTAMP","SEEK_CUR","SEEK_DATA","SEEK_END","SEEK_HOLE","SEEK_SET","SEM_FAILED","SEM_UNDO","SETALL","SETVAL","SF_APPEND","SF_ARCHIVED","SF_IMMUTABLE","SF_SETTABLE","SHMLBA","SHM_R","SHM_RDONLY","SHM_RND","SHM_W","SHUTDOWN_TIME","SHUT_RD","SHUT_RDWR","SHUT_WR","SIDL","SIGABRT","SIGALRM","SIGBUS","SIGCHLD","SIGCONT","SIGEMT","SIGEV_NONE","SIGEV_SIGNAL","SIGEV_THREAD","SIGFPE","SIGHUP","SIGILL","SIGINFO","SIGINT","SIGIO","SIGIOT","SIGKILL","SIGNATURE","SIGPIPE","SIGPROF","SIGQUIT","SIGSEGV","SIGSTKSZ","SIGSTOP","SIGSYS","SIGTERM","SIGTRAP","SIGTSTP","SIGTTIN","SIGTTOU","SIGURG","SIGUSR1","SIGUSR2","SIGVTALRM","SIGWINCH","SIGXCPU","SIGXFSZ","SIG_BLOCK","SIG_DFL","SIG_ERR","SIG_IGN","SIG_SETMASK","SIG_UNBLOCK","SIOCGIFADDR","SOCK_DGRAM","SOCK_MAXADDRLEN","SOCK_RAW","SOCK_RDM","SOCK_SEQPACKET","SOCK_STREAM","SOL_LOCAL","SOL_SOCKET","SOMAXCONN","SO_ACCEPTCONN","SO_BROADCAST","SO_DEBUG","SO_DONTROUTE","SO_DONTTRUNC","SO_ERROR","SO_KEEPALIVE","SO_LABEL","SO_LINGER","SO_LINGER_SEC","SO_NKE","SO_NOADDRERR","SO_NOSIGPIPE","SO_NOTIFYCONFLICT","SO_NP_EXTENSIONS","SO_NREAD","SO_NWRITE","SO_OOBINLINE","SO_PEERLABEL","SO_RANDOMPORT","SO_RCVBUF","SO_RCVLOWAT","SO_RCVTIMEO","SO_REUSEADDR","SO_REUSEPORT","SO_REUSESHAREUID","SO_SNDBUF","SO_SNDLOWAT","SO_SNDTIMEO","SO_TIMESTAMP","SO_TIMESTAMP_MONOTONIC","SO_TYPE","SO_USELOOPBACK","SO_WANTMORE","SO_WANTOOBFLAG","SRUN","SSLEEP","SSTOP","SS_DISABLE","SS_ONSTACK","STA_CLK","STA_CLOCKERR","STA_DEL","STA_FLL","STA_FREQHOLD","STA_INS","STA_MODE","STA_NANO","STA_PLL","STA_PPSERROR","STA_PPSFREQ","STA_PPSJITTER","STA_PPSSIGNAL","STA_PPSTIME","STA_PPSWANDER","STA_RONLY","STA_UNSYNC","STDERR_FILENO","STDIN_FILENO","STDOUT_FILENO","ST_NOSUID","ST_RDONLY","SUPERPAGE_NONE","SUPERPAGE_SIZE_2MB","SUPERPAGE_SIZE_ANY","SYSDIR_DIRECTORY_ADMIN_APPLICATION","SYSDIR_DIRECTORY_ALL_APPLICATIONS","SYSDIR_DIRECTORY_ALL_LIBRARIES","SYSDIR_DIRECTORY_APPLICATION","SYSDIR_DIRECTORY_APPLICATION_SUPPORT","SYSDIR_DIRECTORY_AUTOSAVED_INFORMATION","SYSDIR_DIRECTORY_CACHES","SYSDIR_DIRECTORY_CORESERVICE","SYSDIR_DIRECTORY_DEMO_APPLICATION","SYSDIR_DIRECTORY_DESKTOP","SYSDIR_DIRECTORY_DEVELOPER","SYSDIR_DIRECTORY_DEVELOPER_APPLICATION","SYSDIR_DIRECTORY_DOCUMENT","SYSDIR_DIRECTORY_DOCUMENTATION","SYSDIR_DIRECTORY_DOWNLOADS","SYSDIR_DIRECTORY_INPUT_METHODS","SYSDIR_DIRECTORY_LIBRARY","SYSDIR_DIRECTORY_MOVIES","SYSDIR_DIRECTORY_MUSIC","SYSDIR_DIRECTORY_PICTURES","SYSDIR_DIRECTORY_PREFERENCE_PANES","SYSDIR_DIRECTORY_PRINTER_DESCRIPTION","SYSDIR_DIRECTORY_SHARED_PUBLIC","SYSDIR_DIRECTORY_USER","SYSDIR_DOMAIN_MASK_ALL","SYSDIR_DOMAIN_MASK_LOCAL","SYSDIR_DOMAIN_MASK_NETWORK","SYSDIR_DOMAIN_MASK_SYSTEM","SYSDIR_DOMAIN_MASK_USER","SYSPROTO_CONTROL","SYSPROTO_EVENT","SZOMB","S_IEXEC","S_IFBLK","S_IFCHR","S_IFDIR","S_IFIFO","S_IFLNK","S_IFMT","S_IFREG","S_IFSOCK","S_IREAD","S_IRGRP","S_IROTH","S_IRUSR","S_IRWXG","S_IRWXO","S_IRWXU","S_ISGID","S_ISUID","S_ISVTX","S_IWGRP","S_IWOTH","S_IWRITE","S_IWUSR","S_IXGRP","S_IXOTH","S_IXUSR","TAB0","TAB1","TAB2","TAB3","TABDLY","TASK_THREAD_TIMES_INFO","TASK_THREAD_TIMES_INFO_COUNT","TCIFLUSH","TCIOFF","TCIOFLUSH","TCION","TCOFLUSH","TCOOFF","TCOON","TCP_FASTOPEN","TCP_KEEPALIVE","TCP_KEEPCNT","TCP_KEEPINTVL","TCP_MAXSEG","TCP_NODELAY","TCP_NOOPT","TCP_NOPUSH","TCSADRAIN","TCSAFLUSH","TCSANOW","THOUSEP","THREAD_AFFINITY_POLICY","THREAD_AFFINITY_POLICY_COUNT","THREAD_AFFINITY_TAG_NULL","THREAD_BACKGROUND_POLICY","THREAD_BACKGROUND_POLICY_COUNT","THREAD_BACKGROUND_POLICY_DARWIN_BG","THREAD_BASIC_INFO","THREAD_BASIC_INFO_COUNT","THREAD_EXTENDED_INFO","THREAD_EXTENDED_INFO_COUNT","THREAD_EXTENDED_POLICY","THREAD_EXTENDED_POLICY_COUNT","THREAD_IDENTIFIER_INFO","THREAD_IDENTIFIER_INFO_COUNT","THREAD_LATENCY_QOS_POLICY","THREAD_LATENCY_QOS_POLICY_COUNT","THREAD_PRECEDENCE_POLICY","THREAD_PRECEDENCE_POLICY_COUNT","THREAD_STANDARD_POLICY","THREAD_STANDARD_POLICY_COUNT","THREAD_THROUGHPUT_QOS_POLICY","THREAD_THROUGHPUT_QOS_POLICY_COUNT","THREAD_TIME_CONSTRAINT_POLICY","THREAD_TIME_CONSTRAINT_POLICY_COUNT","TH_FLAGS_GLOBAL_FORCED_IDLE","TH_FLAGS_IDLE","TH_FLAGS_SWAPPED","TH_STATE_HALTED","TH_STATE_RUNNING","TH_STATE_STOPPED","TH_STATE_UNINTERRUPTIBLE","TH_STATE_WAITING","TIME_DEL","TIME_ERROR","TIME_INS","TIME_OK","TIME_OOP","TIME_WAIT","TIOCCBRK","TIOCCDTR","TIOCCONS","TIOCDCDTIMESTAMP","TIOCDRAIN","TIOCDSIMICROCODE","TIOCEXCL","TIOCEXT","TIOCFLUSH","TIOCGDRAINWAIT","TIOCGETD","TIOCGPGRP","TIOCGWINSZ","TIOCIXOFF","TIOCIXON","TIOCMBIC","TIOCMBIS","TIOCMGDTRWAIT","TIOCMGET","TIOCMODG","TIOCMODS","TIOCMSDTRWAIT","TIOCMSET","TIOCM_CAR","TIOCM_CD","TIOCM_CTS","TIOCM_DSR","TIOCM_DTR","TIOCM_LE","TIOCM_RI","TIOCM_RNG","TIOCM_RTS","TIOCM_SR","TIOCM_ST","TIOCNOTTY","TIOCNXCL","TIOCOUTQ","TIOCPKT","TIOCPKT_DATA","TIOCPKT_DOSTOP","TIOCPKT_FLUSHREAD","TIOCPKT_FLUSHWRITE","TIOCPKT_IOCTL","TIOCPKT_NOSTOP","TIOCPKT_START","TIOCPKT_STOP","TIOCPTYGNAME","TIOCPTYGRANT","TIOCPTYUNLK","TIOCREMOTE","TIOCSBRK","TIOCSCONS","TIOCSCTTY","TIOCSDRAINWAIT","TIOCSDTR","TIOCSETD","TIOCSIG","TIOCSPGRP","TIOCSTART","TIOCSTAT","TIOCSTI","TIOCSTOP","TIOCSWINSZ","TIOCTIMESTAMP","TIOCUCNTL","TMP_MAX","TOSTOP","T_FMT","T_FMT_AMPM","UF_APPEND","UF_COMPRESSED","UF_HIDDEN","UF_IMMUTABLE","UF_NODUMP","UF_OPAQUE","UF_SETTABLE","UF_TRACKED","USER_BC_BASE_MAX","USER_BC_DIM_MAX","USER_BC_SCALE_MAX","USER_BC_STRING_MAX","USER_COLL_WEIGHTS_MAX","USER_CS_PATH","USER_EXPR_NEST_MAX","USER_LINE_MAX","USER_MAXID","USER_POSIX2_CHAR_TERM","USER_POSIX2_C_BIND","USER_POSIX2_C_DEV","USER_POSIX2_FORT_DEV","USER_POSIX2_FORT_RUN","USER_POSIX2_LOCALEDEF","USER_POSIX2_SW_DEV","USER_POSIX2_UPE","USER_POSIX2_VERSION","USER_PROCESS","USER_RE_DUP_MAX","USER_STREAM_MAX","USER_TZNAME_MAX","USRQUOTA","UTIME_NOW","UTIME_OMIT","UTUN_OPT_FLAGS","UTUN_OPT_IFNAME","VDISCARD","VDSUSP","VEOF","VEOL","VEOL2","VERASE","VINTR","VKILL","VLNEXT","VMIN","VM_FLAGS_ALIAS_MASK","VM_FLAGS_ANYWHERE","VM_FLAGS_FIXED","VM_FLAGS_NO_CACHE","VM_FLAGS_OVERWRITE","VM_FLAGS_PURGABLE","VM_FLAGS_RANDOM_ADDR","VM_FLAGS_RESILIENT_CODESIGN","VM_FLAGS_RESILIENT_MEDIA","VM_FLAGS_RETURN_4K_DATA_ADDR","VM_FLAGS_RETURN_DATA_ADDR","VM_FLAGS_SUPERPAGE_MASK","VM_FLAGS_SUPERPAGE_NONE","VM_FLAGS_SUPERPAGE_SHIFT","VM_FLAGS_SUPERPAGE_SIZE_2MB","VM_FLAGS_SUPERPAGE_SIZE_ANY","VM_FLAGS_USER_ALLOCATE","VM_FLAGS_USER_MAP","VM_FLAGS_USER_REMAP","VM_LOADAVG","VM_MACHFACTOR","VM_MAKE_TAG","VM_MAXID","VM_MEMORY_ACCELERATE","VM_MEMORY_ANALYSIS_TOOL","VM_MEMORY_APPKIT","VM_MEMORY_APPLICATION_SPECIFIC_1","VM_MEMORY_APPLICATION_SPECIFIC_16","VM_MEMORY_ASL","VM_MEMORY_ASSETSD","VM_MEMORY_ATS","VM_MEMORY_CARBON","VM_MEMORY_CGIMAGE","VM_MEMORY_COREDATA","VM_MEMORY_COREDATA_OBJECTIDS","VM_MEMORY_COREGRAPHICS","VM_MEMORY_COREGRAPHICS_BACKINGSTORES","VM_MEMORY_COREGRAPHICS_DATA","VM_MEMORY_COREGRAPHICS_FRAMEBUFFERS","VM_MEMORY_COREGRAPHICS_MISC","VM_MEMORY_COREGRAPHICS_SHARED","VM_MEMORY_COREGRAPHICS_XALLOC","VM_MEMORY_COREIMAGE","VM_MEMORY_COREPROFILE","VM_MEMORY_CORESERVICES","VM_MEMORY_COREUI","VM_MEMORY_COREUIFILE","VM_MEMORY_CORPSEINFO","VM_MEMORY_DHMM","VM_MEMORY_DYLD","VM_MEMORY_DYLD_MALLOC","VM_MEMORY_DYLIB","VM_MEMORY_FOUNDATION","VM_MEMORY_GENEALOGY","VM_MEMORY_GLSL","VM_MEMORY_GUARD","VM_MEMORY_IMAGEIO","VM_MEMORY_IOKIT","VM_MEMORY_JAVA","VM_MEMORY_JAVASCRIPT_CORE","VM_MEMORY_JAVASCRIPT_JIT_EXECUTABLE_ALLOCATOR","VM_MEMORY_JAVASCRIPT_JIT_REGISTER_FILE","VM_MEMORY_LAYERKIT","VM_MEMORY_LIBDISPATCH","VM_MEMORY_MACH_MSG","VM_MEMORY_MALLOC","VM_MEMORY_MALLOC_HUGE","VM_MEMORY_MALLOC_LARGE","VM_MEMORY_MALLOC_LARGE_REUSABLE","VM_MEMORY_MALLOC_LARGE_REUSED","VM_MEMORY_MALLOC_NANO","VM_MEMORY_MALLOC_SMALL","VM_MEMORY_MALLOC_TINY","VM_MEMORY_OBJC_DISPATCHERS","VM_MEMORY_OPENCL","VM_MEMORY_OS_ALLOC_ONCE","VM_MEMORY_RAWCAMERA","VM_MEMORY_REALLOC","VM_MEMORY_SBRK","VM_MEMORY_SCENEKIT","VM_MEMORY_SHARED_PMAP","VM_MEMORY_SKYWALK","VM_MEMORY_SQLITE","VM_MEMORY_STACK","VM_MEMORY_SWIFT_METADATA","VM_MEMORY_SWIFT_RUNTIME","VM_MEMORY_TCMALLOC","VM_MEMORY_UNSHARED_PMAP","VM_MEMORY_WEBCORE_PURGEABLE_BUFFERS","VM_METER","VM_PAGE_QUERY_PAGE_COPIED","VM_PAGE_QUERY_PAGE_CS_NX","VM_PAGE_QUERY_PAGE_CS_TAINTED","VM_PAGE_QUERY_PAGE_CS_VALIDATED","VM_PAGE_QUERY_PAGE_DIRTY","VM_PAGE_QUERY_PAGE_EXTERNAL","VM_PAGE_QUERY_PAGE_FICTITIOUS","VM_PAGE_QUERY_PAGE_PAGED_OUT","VM_PAGE_QUERY_PAGE_PRESENT","VM_PAGE_QUERY_PAGE_REF","VM_PAGE_QUERY_PAGE_SPECULATIVE","VM_PROT_EXECUTE","VM_PROT_NONE","VM_PROT_READ","VM_PROT_WRITE","VM_SWAPUSAGE","VOL_CAPABILITIES_FORMAT","VOL_CAPABILITIES_INTERFACES","VOL_CAP_FMT_2TB_FILESIZE","VOL_CAP_FMT_64BIT_OBJECT_IDS","VOL_CAP_FMT_CASE_PRESERVING","VOL_CAP_FMT_CASE_SENSITIVE","VOL_CAP_FMT_DECMPFS_COMPRESSION","VOL_CAP_FMT_DIR_HARDLINKS","VOL_CAP_FMT_DOCUMENT_ID","VOL_CAP_FMT_FAST_STATFS","VOL_CAP_FMT_HARDLINKS","VOL_CAP_FMT_HIDDEN_FILES","VOL_CAP_FMT_JOURNAL","VOL_CAP_FMT_JOURNAL_ACTIVE","VOL_CAP_FMT_NO_IMMUTABLE_FILES","VOL_CAP_FMT_NO_PERMISSIONS","VOL_CAP_FMT_NO_ROOT_TIMES","VOL_CAP_FMT_NO_VOLUME_SIZES","VOL_CAP_FMT_OPENDENYMODES","VOL_CAP_FMT_PATH_FROM_ID","VOL_CAP_FMT_PERSISTENTOBJECTIDS","VOL_CAP_FMT_SEALED","VOL_CAP_FMT_SHARED_SPACE","VOL_CAP_FMT_SPARSE_FILES","VOL_CAP_FMT_SYMBOLICLINKS","VOL_CAP_FMT_VOL_GROUPS","VOL_CAP_FMT_WRITE_GENERATION_COUNT","VOL_CAP_FMT_ZERO_RUNS","VOL_CAP_INT_ADVLOCK","VOL_CAP_INT_ALLOCATE","VOL_CAP_INT_ATTRLIST","VOL_CAP_INT_CLONE","VOL_CAP_INT_COPYFILE","VOL_CAP_INT_EXCHANGEDATA","VOL_CAP_INT_EXTENDED_ATTR","VOL_CAP_INT_EXTENDED_SECURITY","VOL_CAP_INT_FLOCK","VOL_CAP_INT_MANLOCK","VOL_CAP_INT_NAMEDSTREAMS","VOL_CAP_INT_NFSEXPORT","VOL_CAP_INT_READDIRATTR","VOL_CAP_INT_RENAME_EXCL","VOL_CAP_INT_RENAME_OPENFAIL","VOL_CAP_INT_RENAME_SWAP","VOL_CAP_INT_SEARCHFS","VOL_CAP_INT_SNAPSHOT","VOL_CAP_INT_USERACCESS","VOL_CAP_INT_VOL_RENAME","VQUIT","VREPRINT","VSTART","VSTATUS","VSTOP","VSUSP","VT0","VT1","VTDLY","VTIME","VWERASE","WCONTINUED","WCOREDUMP","WEXITED","WEXITSTATUS","WIFCONTINUED","WIFEXITED","WIFSIGNALED","WIFSTOPPED","WNOHANG","WNOWAIT","WSTOPPED","WSTOPSIG","WTERMSIG","WUNTRACED","W_OK","XATTR_CREATE","XATTR_NODEFAULT","XATTR_NOFOLLOW","XATTR_NOSECURITY","XATTR_REPLACE","XATTR_SHOWCOMPRESSION","XUCRED_VERSION","X_OK","YESEXPR","YESSTR","_CS_DARWIN_USER_CACHE_DIR","_CS_DARWIN_USER_DIR","_CS_DARWIN_USER_TEMP_DIR","_CS_PATH","_IOFBF","_IOLBF","_IONBF","_NSGetEnviron","_NSGetExecutablePath","_PC_CHOWN_RESTRICTED","_PC_LINK_MAX","_PC_MAX_CANON","_PC_MAX_INPUT","_PC_NAME_MAX","_PC_NO_TRUNC","_PC_PATH_MAX","_PC_PIPE_BUF","_PC_VDISABLE","_POSIX_VDISABLE","_PTHREAD_COND_SIG_init","_PTHREAD_MUTEX_SIG_init","_PTHREAD_RWLOCK_SIG_init","_RLIMIT_POSIX_FLAG","_SC_2_CHAR_TERM","_SC_2_C_BIND","_SC_2_C_DEV","_SC_2_FORT_DEV","_SC_2_FORT_RUN","_SC_2_LOCALEDEF","_SC_2_PBS","_SC_2_PBS_ACCOUNTING","_SC_2_PBS_CHECKPOINT","_SC_2_PBS_LOCATE","_SC_2_PBS_MESSAGE","_SC_2_PBS_TRACK","_SC_2_SW_DEV","_SC_2_UPE","_SC_2_VERSION","_SC_ADVISORY_INFO","_SC_AIO_LISTIO_MAX","_SC_AIO_MAX","_SC_AIO_PRIO_DELTA_MAX","_SC_ARG_MAX","_SC_ASYNCHRONOUS_IO","_SC_ATEXIT_MAX","_SC_BARRIERS","_SC_BC_BASE_MAX","_SC_BC_DIM_MAX","_SC_BC_SCALE_MAX","_SC_BC_STRING_MAX","_SC_CHILD_MAX","_SC_CLK_TCK","_SC_CLOCK_SELECTION","_SC_COLL_WEIGHTS_MAX","_SC_CPUTIME","_SC_DELAYTIMER_MAX","_SC_EXPR_NEST_MAX","_SC_FILE_LOCKING","_SC_FSYNC","_SC_GETGR_R_SIZE_MAX","_SC_GETPW_R_SIZE_MAX","_SC_HOST_NAME_MAX","_SC_IOV_MAX","_SC_IPV6","_SC_JOB_CONTROL","_SC_LINE_MAX","_SC_LOGIN_NAME_MAX","_SC_MAPPED_FILES","_SC_MEMLOCK","_SC_MEMLOCK_RANGE","_SC_MEMORY_PROTECTION","_SC_MESSAGE_PASSING","_SC_MONOTONIC_CLOCK","_SC_MQ_OPEN_MAX","_SC_MQ_PRIO_MAX","_SC_NGROUPS_MAX","_SC_NPROCESSORS_CONF","_SC_NPROCESSORS_ONLN","_SC_OPEN_MAX","_SC_PAGESIZE","_SC_PAGE_SIZE","_SC_PASS_MAX","_SC_PHYS_PAGES","_SC_PRIORITIZED_IO","_SC_PRIORITY_SCHEDULING","_SC_RAW_SOCKETS","_SC_READER_WRITER_LOCKS","_SC_REALTIME_SIGNALS","_SC_REGEXP","_SC_RE_DUP_MAX","_SC_RTSIG_MAX","_SC_SAVED_IDS","_SC_SEMAPHORES","_SC_SEM_NSEMS_MAX","_SC_SEM_VALUE_MAX","_SC_SHARED_MEMORY_OBJECTS","_SC_SHELL","_SC_SIGQUEUE_MAX","_SC_SPAWN","_SC_SPIN_LOCKS","_SC_SPORADIC_SERVER","_SC_SS_REPL_MAX","_SC_STREAM_MAX","_SC_SYMLOOP_MAX","_SC_SYNCHRONIZED_IO","_SC_THREADS","_SC_THREAD_ATTR_STACKADDR","_SC_THREAD_ATTR_STACKSIZE","_SC_THREAD_CPUTIME","_SC_THREAD_DESTRUCTOR_ITERATIONS","_SC_THREAD_KEYS_MAX","_SC_THREAD_PRIORITY_SCHEDULING","_SC_THREAD_PRIO_INHERIT","_SC_THREAD_PRIO_PROTECT","_SC_THREAD_PROCESS_SHARED","_SC_THREAD_SAFE_FUNCTIONS","_SC_THREAD_SPORADIC_SERVER","_SC_THREAD_STACK_MIN","_SC_THREAD_THREADS_MAX","_SC_TIMEOUTS","_SC_TIMERS","_SC_TIMER_MAX","_SC_TRACE","_SC_TRACE_EVENT_FILTER","_SC_TRACE_EVENT_NAME_MAX","_SC_TRACE_INHERIT","_SC_TRACE_LOG","_SC_TRACE_NAME_MAX","_SC_TRACE_SYS_MAX","_SC_TRACE_USER_EVENT_MAX","_SC_TTY_NAME_MAX","_SC_TYPED_MEMORY_OBJECTS","_SC_TZNAME_MAX","_SC_V6_ILP32_OFF32","_SC_V6_ILP32_OFFBIG","_SC_V6_LP64_OFF64","_SC_V6_LPBIG_OFFBIG","_SC_VERSION","_SC_XBS5_ILP32_OFF32","_SC_XBS5_ILP32_OFFBIG","_SC_XBS5_LP64_OFF64","_SC_XBS5_LPBIG_OFFBIG","_SC_XOPEN_CRYPT","_SC_XOPEN_ENH_I18N","_SC_XOPEN_LEGACY","_SC_XOPEN_REALTIME","_SC_XOPEN_REALTIME_THREADS","_SC_XOPEN_SHM","_SC_XOPEN_STREAMS","_SC_XOPEN_UNIX","_SC_XOPEN_VERSION","_SC_XOPEN_XCU_VERSION","_UTX_HOSTSIZE","_UTX_IDSIZE","_UTX_LINESIZE","_UTX_USERSIZE","_WSTATUS","_WSTOPPED","__PTHREAD_CONDATTR_SIZE__","__PTHREAD_COND_SIZE__","__PTHREAD_MUTEX_SIZE__","__PTHREAD_RWLOCKATTR_SIZE__","__PTHREAD_RWLOCK_SIZE__","__cpsr","__darwin_arm_exception_state64","__darwin_arm_neon_state64","__darwin_arm_thread_state64","__darwin_mcontext64","__error","__es","__esr","__exception","__far","__fp","__fpcr","__fpsr","__int128","__int128_t","__lr","__ns","__pad","__pc","__sp","__ss","__uint128","__uint128_t","__v","__x","_dyld_get_image_header","_dyld_get_image_name","_dyld_get_image_vmaddr_slide","_dyld_image_count","_exit","_key","_seq","abort","abs","accept","access","acct","actime","active_count","active_count","address","addrinfo","adjtime","affinity_tag","ai_addr","ai_addrlen","ai_canonname","ai_family","ai_flags","ai_next","ai_protocol","ai_socktype","aio_buf","aio_cancel","aio_error","aio_fildes","aio_fsync","aio_lio_opcode","aio_nbytes","aio_offset","aio_read","aio_reqprio","aio_return","aio_sigevent","aio_suspend","aio_write","aiocb","alarm","ar_hln","ar_hrd","ar_op","ar_pln","ar_pro","arc4random","arc4random_buf","arc4random_uniform","arphdr","array","asctime","asctime_r","atexit","atof","atoi","atol","atoll","attr_dataoffset","attr_length","attrgroup_t","attribute_set_t","attrlist","attrreference_t","backtrace","backtrace_async","backtrace_from_fp","backtrace_image_offsets","backtrace_symbols","backtrace_symbols_fd","basename","bh_caplen","bh_datalen","bh_hdrlen","bh_tstamp","bind","bitmapcount","blkcnt_t","blksize_t","blocks_in_use","boolean_t","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bpf_hdr","brk","bsearch","buf","bytes_free","bytes_total","bytes_used","c_cc","c_cflag","c_char","c_double","c_float","c_iflag","c_int","c_ispeed","c_lflag","c_long","c_longlong","c_oflag","c_ospeed","c_schar","c_short","c_uchar","c_uint","c_ulong","c_ulonglong","c_ushort","c_void","calcnt","calloc","capabilities","cc_t","cfgetispeed","cfgetospeed","cfmakeraw","cfsetispeed","cfsetospeed","cfsetspeed","cgid","chdir","chflags","chmod","chown","chroot","chunks_free","chunks_used","clearerr","clock_getres","clock_gettime","clock_settime","clock_t","clockid_t","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clonefile","clonefileat","close","closedir","closelog","cmd","cmd","cmd","cmdsize","cmdsize","cmdsize","cmsg_len","cmsg_level","cmsg_type","cmsghdr","commonattr","commonattr","compressions","compressor_page_count","computation","confstr","connect","connectx","constant","constraint","copyfile","copyfile_flags_t","copyfile_state_t","cow_faults","cow_faults","cpu_subtype","cpu_subtype_t","cpu_ticks","cpu_type","cpu_type_t","cpu_usage","cpusubtype","cpusubtype","cputype","cputype","cr_groups","cr_ngroups","cr_uid","cr_version","creat","ctime","ctime_r","ctl_id","ctl_info","ctl_name","cuid","currency_symbol","d_ino","d_name","d_namlen","d_reclen","d_seekoff","d_type","data","data","decimal_point","decompressions","default_policy","denom","dev_t","difftime","dirattr","dirattr","dirent","dirfd","dirname","disconnectx","dispatch_qaddr","dladdr","dlclose","dlerror","dli_fbase","dli_fname","dli_saddr","dli_sname","dlopen","dlsym","dqb_bhardlimit","dqb_bsoftlimit","dqb_btime","dqb_curbytes","dqb_curinodes","dqb_id","dqb_ihardlimit","dqb_isoftlimit","dqb_itime","dqb_spare","dqblk","drand48","dup","dup2","duplocale","e_tdev","e_tpgid","endgrent","endpwent","endservent","endutxent","erand48","errcnt","esterror","esterror","events","exchangedata","execl","execle","execlp","execv","execve","execvp","exit","ext","external_page_count","f_bavail","f_bavail","f_bfree","f_bfree","f_blocks","f_blocks","f_bsize","f_bsize","f_favail","f_ffree","f_ffree","f_files","f_files","f_flag","f_flags","f_flags_ext","f_frsize","f_fsid","f_fsid","f_fssubtype","f_fstypename","f_iosize","f_mntfromname","f_mntonname","f_namemax","f_owner","f_reserved","f_type","faccessat","faults","faults","fchdir","fchflags","fchmod","fchmodat","fchown","fchownat","fclonefileat","fclose","fcntl","fcopyfile","fd","fd_set","fdopen","fdopendir","feof","ferror","fflags","fflags","fflush","fgetattrlist","fgetc","fgetpos","fgets","fgetxattr","fileattr","fileattr","fileno","fileoff","fileoff","filesize","filesize","filetype","filetype","filter","filter","flag","flags","flags","flags","flags","flags","flags","flags","flistxattr","flock","flock","fmemopen","fmount","fmt","fopen","fork","forkattr","forkattr","forkpty","fpathconf","fpos_t","fprintf","fputc","fputs","frac_digits","fread","free","free_count","free_count","freeaddrinfo","freeifaddrs","freelocale","fremovexattr","freopen","freq","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","fsblkcnt_t","fscanf","fseek","fseeko","fsetattrlist","fsetpos","fsetxattr","fsfilcnt_t","fsid_t","fst_bytesalloc","fst_flags","fst_length","fst_offset","fst_posmode","fstat","fstatat","fstatfs","fstatvfs","fstore_t","fsync","ftell","ftello","ftok","ftruncate","futimens","futimes","fwrite","gai_strerror","getaddrinfo","getattrlist","getattrlistat","getattrlistbulk","getchar","getchar_unlocked","getcwd","getdate","getdomainname","getdtablesize","getegid","getenv","geteuid","getfsstat","getgid","getgrent","getgrgid","getgrgid_r","getgrnam","getgrnam_r","getgrouplist","getgroups","gethostid","gethostname","gethostuuid","getifaddrs","getitimer","getline","getloadavg","getlogin","getmntinfo","getnameinfo","getopt","getopt_long","getpeereid","getpeername","getpgid","getpgrp","getpid","getppid","getpriority","getprogname","getprotobyname","getprotobynumber","getpwent","getpwnam","getpwnam_r","getpwuid","getpwuid_r","getrlimit","getrusage","getservbyname","getservbyport","getservent","getsid","getsockname","getsockopt","gettimeofday","getuid","getutxent","getutxid","getutxline","getxattr","gid","gid_t","gl_offs","gl_pathc","gl_pathv","glob","glob_t","globfree","gmtime","gmtime_r","gr_gid","gr_mem","gr_name","gr_passwd","grantpt","group","grouping","h_addr_list","h_addrtype","h_aliases","h_length","h_name","has_arg","hdr_cnt","headers","hits","hits","host_flavor_t","host_info64_t","host_info_t","host_processor_info","host_statistics","host_statistics64","host_t","hostent","hstrerror","iconv","iconv_close","iconv_open","iconv_t","id_t","ident","ident","idtype_t","if_data","if_data64","if_freenameindex","if_index","if_indextoname","if_msghdr","if_msghdr2","if_name","if_nameindex","if_nameindex","if_nametoindex","ifa_addr","ifa_data","ifa_dstaddr","ifa_flags","ifa_msghdr","ifa_name","ifa_netmask","ifa_next","ifaddrs","ifam_addrs","ifam_flags","ifam_index","ifam_metric","ifam_msglen","ifam_type","ifam_version","ifi_addrlen","ifi_addrlen","ifi_baudrate","ifi_baudrate","ifi_collisions","ifi_collisions","ifi_hdrlen","ifi_hdrlen","ifi_hwassist","ifi_ibytes","ifi_ibytes","ifi_ierrors","ifi_ierrors","ifi_imcasts","ifi_imcasts","ifi_ipackets","ifi_ipackets","ifi_iqdrops","ifi_iqdrops","ifi_lastchange","ifi_lastchange","ifi_metric","ifi_metric","ifi_mtu","ifi_mtu","ifi_noproto","ifi_noproto","ifi_obytes","ifi_obytes","ifi_oerrors","ifi_oerrors","ifi_omcasts","ifi_omcasts","ifi_opackets","ifi_opackets","ifi_physical","ifi_physical","ifi_recvquota","ifi_recvquota","ifi_recvtiming","ifi_recvtiming","ifi_reserved1","ifi_reserved2","ifi_type","ifi_type","ifi_typelen","ifi_typelen","ifi_unused1","ifi_unused1","ifi_unused2","ifi_xmitquota","ifi_xmitquota","ifi_xmittiming","ifi_xmittiming","ifm_addrs","ifm_addrs","ifm_data","ifm_data","ifm_flags","ifm_flags","ifm_index","ifm_index","ifm_msglen","ifm_msglen","ifm_snd_drops","ifm_snd_len","ifm_snd_maxlen","ifm_timer","ifm_type","ifm_type","ifm_version","ifm_version","ifma_msghdr","ifma_msghdr2","ifmam_addrs","ifmam_addrs","ifmam_flags","ifmam_flags","ifmam_index","ifmam_index","ifmam_msglen","ifmam_msglen","ifmam_refcount","ifmam_type","ifmam_type","ifmam_version","ifmam_version","image_offset","importance","imr_address","imr_ifindex","imr_interface","imr_interface","imr_multiaddr","imr_multiaddr","imr_multiaddr","imr_sourceaddr","in6_addr","in6_pktinfo","in_addr","in_addr_t","in_pktinfo","in_port_t","inactive_count","inactive_count","initgroups","initprot","initprot","ino_t","int16_t","int32_t","int64_t","int8_t","int_curr_symbol","int_frac_digits","int_n_cs_precedes","int_n_sep_by_space","int_n_sign_posn","int_p_cs_precedes","int_p_sep_by_space","int_p_sign_posn","integer_t","internal_page_count","intmax_t","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","intptr_t","ioctl","iov_base","iov_len","iovec","ip_mreq","ip_mreq_source","ip_mreqn","ipc_perm","ipi6_addr","ipi6_ifindex","ipi_addr","ipi_ifindex","ipi_spec_dst","ipv6_mreq","ipv6mr_interface","ipv6mr_multiaddr","is_master","isalnum","isalpha","isatty","isblank","iscntrl","isdigit","isgraph","islower","isprint","ispunct","isspace","isupper","isxdigit","it_interval","it_value","itimerval","jitcnt","jitter","jrand48","kCCAlignmentError","kCCBufferTooSmall","kCCCallSequenceError","kCCDecodeError","kCCInvalidKey","kCCKeySizeError","kCCMemoryFailure","kCCOverflow","kCCParamError","kCCRNGFailure","kCCSuccess","kCCUnimplemented","kCCUnspecifiedError","kern_return_t","kevent","kevent","kevent64","kevent64_s","key_t","kill","killpg","kqueue","l2p_contigbytes","l2p_devoffset","l2p_flags","l_len","l_linger","l_onoff","l_pid","l_start","l_type","l_whence","labs","lchown","lcong48","lconv","ledger_array_t","ledger_t","linger","link","linkat","lio_listio","listen","listxattr","load_average","load_command","locale_t","localeconv","localeconv_l","localtime","localtime_r","lockf","log2phys","login_tty","lookups","lookups","lrand48","lseek","lstat","lutimes","mach_absolute_time","mach_factor","mach_header","mach_header_64","mach_host_self","mach_msg_type_number_t","mach_port_t","mach_task_basic_info","mach_task_basic_info_data_t","mach_task_basic_info_t","mach_task_self","mach_task_self_","mach_thread_self","mach_timebase_info","mach_timebase_info","mach_timebase_info_data_t","mach_vm_address_t","mach_vm_map","mach_vm_offset_t","mach_vm_size_t","machine","madvise","magic","magic","major","makedev","malloc","malloc_default_zone","malloc_good_size","malloc_printf","malloc_size","malloc_statistics_t","malloc_zone_calloc","malloc_zone_check","malloc_zone_free","malloc_zone_from_ptr","malloc_zone_log","malloc_zone_malloc","malloc_zone_print","malloc_zone_print_ptr_info","malloc_zone_realloc","malloc_zone_statistics","malloc_zone_t","malloc_zone_valloc","max_align_t","max_size_in_use","maxerror","maxerror","maxprot","maxprot","mcontext_t","mem_entry_name_port_t","memchr","memcmp","memcpy","memmem","memmove","memory_object_offset_t","memory_object_t","memset","memset_pattern16","memset_pattern4","memset_pattern8","memset_s","microseconds","mincore","minor","mkdir","mkdirat","mkdtemp","mkfifo","mknod","mkstemp","mkstemps","mktime","mlock","mlockall","mmap","mode","mode_t","modes","modtime","mon_decimal_point","mon_grouping","mon_thousands_sep","mount","mprotect","mrand48","msg_control","msg_controllen","msg_flags","msg_iov","msg_iovlen","msg_name","msg_namelen","msghdr","mstats","mstats","msync","munlock","munlockall","munmap","n_cs_precedes","n_sep_by_space","n_sign_posn","name","nanosleep","nativeattr","natural_t","ncmds","ncmds","negative_sign","newlocale","nfds_t","nice","nl_item","nl_langinfo","nlink_t","no_data","nodename","nrand48","nsects","nsects","ntp_adjtime","ntp_gettime","ntptimeval","numer","off_t","offset","offset","open","open_memstream","open_wmemstream","openat","opendir","openlog","openpty","option","os_log_create","os_log_t","os_log_type_enabled","os_log_type_t","os_signpost_enabled","os_signpost_id_generate","os_signpost_id_make_with_pointer","os_signpost_id_t","os_signpost_type_t","os_unfair_lock","os_unfair_lock_assert_not_owner","os_unfair_lock_assert_owner","os_unfair_lock_lock","os_unfair_lock_s","os_unfair_lock_t","os_unfair_lock_trylock","os_unfair_lock_unlock","p_aliases","p_cs_precedes","p_name","p_proto","p_sep_by_space","p_sign_posn","pageins","pageins","pageouts","pageouts","passwd","pathconf","pause","pbi_comm","pbi_flags","pbi_gid","pbi_name","pbi_nfiles","pbi_nice","pbi_pgid","pbi_pid","pbi_pjobc","pbi_ppid","pbi_rgid","pbi_ruid","pbi_start_tvsec","pbi_start_tvusec","pbi_status","pbi_svgid","pbi_svuid","pbi_uid","pbi_xstatus","pbsd","pclose","period","perror","pid_t","pipe","policy","policy","policy_t","poll","pollfd","popen","positive_sign","posix_madvise","posix_memalign","posix_openpt","posix_spawn","posix_spawn_file_actions_addclose","posix_spawn_file_actions_adddup2","posix_spawn_file_actions_addopen","posix_spawn_file_actions_destroy","posix_spawn_file_actions_init","posix_spawn_file_actions_t","posix_spawnattr_destroy","posix_spawnattr_get_qos_class_np","posix_spawnattr_getarchpref_np","posix_spawnattr_getflags","posix_spawnattr_getpgroup","posix_spawnattr_getsigdefault","posix_spawnattr_getsigmask","posix_spawnattr_init","posix_spawnattr_set_qos_class_np","posix_spawnattr_setarchpref_np","posix_spawnattr_setflags","posix_spawnattr_setpgroup","posix_spawnattr_setsigdefault","posix_spawnattr_setsigmask","posix_spawnattr_t","posix_spawnp","ppsfreq","pread","preadv","precision","preemptible","printf","priority","proc_bsdinfo","proc_kmsgbuf","proc_libversion","proc_listallpids","proc_listchildpids","proc_listpgrppids","proc_listpids","proc_name","proc_pid_rusage","proc_pidfdinfo","proc_pidfileportinfo","proc_pidinfo","proc_pidpath","proc_regionfilename","proc_set_csm","proc_set_no_smt","proc_setthread_csm","proc_setthread_no_smt","proc_taskallinfo","proc_taskinfo","proc_threadinfo","proc_vnodepathinfo","processor_basic_info","processor_basic_info_data_t","processor_basic_info_t","processor_count","processor_cpu_load_info","processor_cpu_load_info_data_t","processor_cpu_load_info_t","processor_flavor_t","processor_info_array_t","processor_info_t","processor_set_basic_info","processor_set_basic_info_data_t","processor_set_basic_info_t","processor_set_load_info","processor_set_load_info_data_t","processor_set_load_info_t","protoent","pselect","pseudo_AF_HDRCMPLT","pseudo_AF_KEY","pseudo_AF_PIP","pseudo_AF_RTIP","pseudo_AF_XTP","pth_cpu_usage","pth_cpu_usage","pth_curpri","pth_curpri","pth_flags","pth_flags","pth_maxpriority","pth_maxpriority","pth_name","pth_name","pth_policy","pth_policy","pth_priority","pth_priority","pth_run_state","pth_run_state","pth_sleep_time","pth_sleep_time","pth_system_time","pth_system_time","pth_user_time","pth_user_time","pthread_atfork","pthread_attr_destroy","pthread_attr_get_qos_class_np","pthread_attr_getschedparam","pthread_attr_init","pthread_attr_set_qos_class_np","pthread_attr_setdetachstate","pthread_attr_setschedparam","pthread_attr_setstacksize","pthread_attr_t","pthread_cancel","pthread_cond_broadcast","pthread_cond_destroy","pthread_cond_init","pthread_cond_signal","pthread_cond_t","pthread_cond_timedwait","pthread_cond_wait","pthread_condattr_destroy","pthread_condattr_getpshared","pthread_condattr_init","pthread_condattr_setpshared","pthread_condattr_t","pthread_cpu_number_np","pthread_create","pthread_create_from_mach_thread","pthread_detach","pthread_exit","pthread_from_mach_thread_np","pthread_get_qos_class_np","pthread_get_stackaddr_np","pthread_get_stacksize_np","pthread_getname_np","pthread_getschedparam","pthread_getspecific","pthread_introspection_getspecific_np","pthread_introspection_hook_install","pthread_introspection_hook_t","pthread_introspection_setspecific_np","pthread_jit_write_callback_t","pthread_jit_write_freeze_callbacks_np","pthread_jit_write_protect_np","pthread_jit_write_protect_supported_np","pthread_jit_write_with_callback_np","pthread_join","pthread_key_create","pthread_key_delete","pthread_key_t","pthread_kill","pthread_mach_thread_np","pthread_main_np","pthread_mutex_destroy","pthread_mutex_init","pthread_mutex_lock","pthread_mutex_t","pthread_mutex_trylock","pthread_mutex_unlock","pthread_mutexattr_destroy","pthread_mutexattr_getpshared","pthread_mutexattr_init","pthread_mutexattr_setpshared","pthread_mutexattr_settype","pthread_mutexattr_t","pthread_rwlock_destroy","pthread_rwlock_init","pthread_rwlock_rdlock","pthread_rwlock_t","pthread_rwlock_tryrdlock","pthread_rwlock_trywrlock","pthread_rwlock_unlock","pthread_rwlock_wrlock","pthread_rwlockattr_destroy","pthread_rwlockattr_getpshared","pthread_rwlockattr_init","pthread_rwlockattr_setpshared","pthread_rwlockattr_t","pthread_self","pthread_set_qos_class_self_np","pthread_setname_np","pthread_setschedparam","pthread_setspecific","pthread_sigmask","pthread_stack_frame_decode_np","pthread_t","pthread_threadid_np","pti_cow_faults","pti_csw","pti_faults","pti_messages_received","pti_messages_sent","pti_numrunning","pti_pageins","pti_policy","pti_priority","pti_resident_size","pti_syscalls_mach","pti_syscalls_unix","pti_threadnum","pti_threads_system","pti_threads_user","pti_total_system","pti_total_user","pti_virtual_size","ptinfo","ptrace","ptrdiff_t","ptsname","purgeable_count","purgeable_count","purges","purges","putchar","putchar_unlocked","putenv","puts","pututxline","pvi_cdir","pvi_rdir","pw_change","pw_class","pw_dir","pw_expire","pw_gecos","pw_gid","pw_name","pw_passwd","pw_shell","pw_uid","pwrite","pwritev","qos_class_t","qsort","querylocale","quotactl","ra_count","ra_offset","radvisory","raise","rand","reactivations","reactivations","read","readdir","readdir_r","readlink","readlinkat","readv","realloc","realpath","recv","recvfrom","recvmsg","regcomp","regerror","regex_t","regexec","regfree","regmatch_t","regoff_t","release","remove","removexattr","rename","renameat","renameatx_np","renamex_np","res_init","reserved","reserved","resident_size","resident_size_max","revents","rewind","rewinddir","rfu_1","ri_billed_energy","ri_billed_system_time","ri_billed_system_time","ri_child_elapsed_abstime","ri_child_elapsed_abstime","ri_child_elapsed_abstime","ri_child_elapsed_abstime","ri_child_interrupt_wkups","ri_child_interrupt_wkups","ri_child_interrupt_wkups","ri_child_interrupt_wkups","ri_child_pageins","ri_child_pageins","ri_child_pageins","ri_child_pageins","ri_child_pkg_idle_wkups","ri_child_pkg_idle_wkups","ri_child_pkg_idle_wkups","ri_child_pkg_idle_wkups","ri_child_system_time","ri_child_system_time","ri_child_system_time","ri_child_system_time","ri_child_user_time","ri_child_user_time","ri_child_user_time","ri_child_user_time","ri_cpu_time_qos_background","ri_cpu_time_qos_background","ri_cpu_time_qos_default","ri_cpu_time_qos_default","ri_cpu_time_qos_legacy","ri_cpu_time_qos_legacy","ri_cpu_time_qos_maintenance","ri_cpu_time_qos_maintenance","ri_cpu_time_qos_user_initiated","ri_cpu_time_qos_user_initiated","ri_cpu_time_qos_user_interactive","ri_cpu_time_qos_user_interactive","ri_cpu_time_qos_utility","ri_cpu_time_qos_utility","ri_cycles","ri_diskio_bytesread","ri_diskio_bytesread","ri_diskio_bytesread","ri_diskio_byteswritten","ri_diskio_byteswritten","ri_diskio_byteswritten","ri_instructions","ri_interrupt_wkups","ri_interrupt_wkups","ri_interrupt_wkups","ri_interrupt_wkups","ri_interrupt_wkups","ri_interval_max_phys_footprint","ri_lifetime_max_phys_footprint","ri_logical_writes","ri_pageins","ri_pageins","ri_pageins","ri_pageins","ri_pageins","ri_phys_footprint","ri_phys_footprint","ri_phys_footprint","ri_phys_footprint","ri_phys_footprint","ri_pkg_idle_wkups","ri_pkg_idle_wkups","ri_pkg_idle_wkups","ri_pkg_idle_wkups","ri_pkg_idle_wkups","ri_proc_exit_abstime","ri_proc_exit_abstime","ri_proc_exit_abstime","ri_proc_exit_abstime","ri_proc_exit_abstime","ri_proc_start_abstime","ri_proc_start_abstime","ri_proc_start_abstime","ri_proc_start_abstime","ri_proc_start_abstime","ri_resident_size","ri_resident_size","ri_resident_size","ri_resident_size","ri_resident_size","ri_runnable_time","ri_serviced_energy","ri_serviced_system_time","ri_serviced_system_time","ri_system_time","ri_system_time","ri_system_time","ri_system_time","ri_system_time","ri_user_time","ri_user_time","ri_user_time","ri_user_time","ri_user_time","ri_uuid","ri_uuid","ri_uuid","ri_uuid","ri_uuid","ri_wired_size","ri_wired_size","ri_wired_size","ri_wired_size","ri_wired_size","rlim_cur","rlim_max","rlim_t","rlimit","rm_eo","rm_so","rmdir","rmx_expire","rmx_filler","rmx_hopcount","rmx_locks","rmx_mtu","rmx_pksent","rmx_recvpipe","rmx_rtt","rmx_rttvar","rmx_sendpipe","rmx_ssthresh","rmx_state","rt_metrics","rt_msghdr","rt_msghdr2","rtm_addrs","rtm_addrs","rtm_errno","rtm_flags","rtm_flags","rtm_index","rtm_index","rtm_inits","rtm_inits","rtm_msglen","rtm_msglen","rtm_parentflags","rtm_pid","rtm_refcnt","rtm_reserved","rtm_rmx","rtm_rmx","rtm_seq","rtm_type","rtm_type","rtm_use","rtm_use","rtm_version","rtm_version","ru_idrss","ru_inblock","ru_isrss","ru_ixrss","ru_majflt","ru_maxrss","ru_minflt","ru_msgrcv","ru_msgsnd","ru_nivcsw","ru_nsignals","ru_nswap","ru_nvcsw","ru_oublock","ru_stime","ru_utime","run_state","running","rusage","rusage_info_t","rusage_info_v0","rusage_info_v1","rusage_info_v2","rusage_info_v3","rusage_info_v4","s6_addr","s_addr","s_aliases","s_name","s_port","s_proto","sa_data","sa_endpoints_t","sa_family","sa_family_t","sa_flags","sa_len","sa_mask","sa_sigaction","sae_associd_t","sae_connid_t","sae_dstaddr","sae_dstaddrlen","sae_srcaddr","sae_srcaddrlen","sae_srcif","sbrk","sc_family","sc_id","sc_len","sc_reserved","sc_unit","scanf","sched_get_priority_max","sched_get_priority_min","sched_param","sched_priority","sched_yield","sdl_alen","sdl_data","sdl_family","sdl_index","sdl_len","sdl_nlen","sdl_slen","sdl_type","seconds","seed48","seekdir","segment_command","segment_command_64","segname","segname","select","sem_base","sem_close","sem_ctime","sem_flg","sem_nsems","sem_num","sem_op","sem_open","sem_otime","sem_pad1","sem_pad2","sem_pad3","sem_perm","sem_post","sem_t","sem_trywait","sem_unlink","sem_wait","sembuf","semctl","semget","semid_ds","semop","semun","send","sendfile","sendmsg","sendto","servent","setattrlist","setattrlistat","setbuf","setdomainname","setegid","setenv","seteuid","setgid","setgrent","setgroups","sethostid","sethostname","setitimer","setlocale","setlogin","setlogmask","setpgid","setpriority","setprogname","setpwent","setregid","setreuid","setrlimit","setservent","setsid","setsockopt","settimeofday","setuid","setutxent","setvbuf","setxattr","sf_hdtr","shift","shm_atime","shm_cpid","shm_ctime","shm_dtime","shm_internal","shm_lpid","shm_nattch","shm_open","shm_perm","shm_segsz","shm_unlink","shmat","shmatt_t","shmctl","shmdt","shmget","shmid_ds","shutdown","si_addr","si_addr","si_code","si_errno","si_pid","si_pid","si_signo","si_status","si_status","si_uid","si_uid","si_value","sigaction","sigaction","sigaddset","sigaltstack","sigdelset","sigemptyset","sigev_notify","sigev_notify_attributes","sigev_signo","sigev_value","sigevent","sigfillset","sighandler_t","siginfo_t","sigismember","signal","sigpending","sigprocmask","sigset_t","sigval","sigwait","sin6_addr","sin6_family","sin6_flowinfo","sin6_len","sin6_port","sin6_scope_id","sin_addr","sin_addr","sin_family","sin_family","sin_len","sin_len","sin_other","sin_port","sin_port","sin_srcaddr","sin_tos","sin_zero","sival_ptr","size","size_allocated","size_in_use","size_t","sizeofcmds","sizeofcmds","sleep","sleep_time","slot_num","snd_family","snd_len","snd_name","snprintf","sockaddr","sockaddr_ctl","sockaddr_dl","sockaddr_in","sockaddr_in6","sockaddr_inarp","sockaddr_ndrv","sockaddr_storage","sockaddr_un","socket","socketpair","socklen_t","speculative_count","speculative_count","speed_t","sprintf","srand","srand48","ss_family","ss_flags","ss_len","ss_size","ss_sp","ss_sysaddr","sscanf","ssize_t","st_atime","st_atime_nsec","st_birthtime","st_birthtime_nsec","st_blksize","st_blocks","st_ctime","st_ctime_nsec","st_dev","st_flags","st_gen","st_gid","st_ino","st_lspare","st_mode","st_mtime","st_mtime_nsec","st_nlink","st_qspare","st_rdev","st_size","st_uid","stabil","stack_t","stat","stat","statfs","statfs","status","statvfs","statvfs","stbcnt","stpcpy","stpncpy","strcasecmp","strcasestr","strcat","strchr","strcmp","strcoll","strcpy","strcspn","strdup","strerror","strerror_r","strftime","strlen","strncasecmp","strncat","strncmp","strncpy","strndup","strnlen","strpbrk","strptime","strrchr","strsignal","strspn","strstr","strtod","strtof","strtok","strtok_r","strtol","strtoll","strtonum","strtoul","strtoull","strxfrm","sun_family","sun_len","sun_path","suseconds_t","suspend_count","suspend_count","swapins","swapouts","symlink","symlinkat","sync","syscall","sysconf","sysctl","sysctlbyname","sysctlnametomib","sysdir_get_next_search_path_enumeration","sysdir_search_path_directory_t","sysdir_search_path_domain_mask_t","sysdir_search_path_enumeration_state","sysdir_start_search_path_enumeration","syslog","sysname","system","system_time","system_time","system_time","tai","task_count","task_create","task_flavor_t","task_for_pid","task_info","task_info_t","task_inspect_t","task_set_info","task_t","task_terminate","task_thread_times_info","task_thread_times_info_data_t","task_thread_times_info_t","task_threads","tcdrain","tcflag_t","tcflow","tcflush","tcgetattr","tcgetpgrp","tcgetsid","tcsendbreak","tcsetattr","tcsetpgrp","telldir","termios","thousands_sep","thread_act_array_t","thread_act_t","thread_affinity_policy","thread_affinity_policy_data_t","thread_affinity_policy_t","thread_background_policy","thread_background_policy_data_t","thread_background_policy_t","thread_basic_info","thread_basic_info_data_t","thread_basic_info_t","thread_count","thread_extended_info","thread_extended_info_data_t","thread_extended_info_t","thread_extended_policy","thread_extended_policy_data_t","thread_extended_policy_t","thread_flavor_t","thread_handle","thread_id","thread_identifier_info","thread_identifier_info_data_t","thread_identifier_info_t","thread_info","thread_info_t","thread_inspect_t","thread_latency_qos_policy","thread_latency_qos_policy_data_t","thread_latency_qos_policy_t","thread_latency_qos_t","thread_latency_qos_tier","thread_policy_flavor_t","thread_policy_get","thread_policy_set","thread_policy_t","thread_precedence_policy","thread_precedence_policy_data_t","thread_precedence_policy_t","thread_standard_policy","thread_standard_policy_data_t","thread_standard_policy_t","thread_t","thread_throughput_qos_policy","thread_throughput_qos_policy_data_t","thread_throughput_qos_policy_t","thread_throughput_qos_t","thread_throughput_qos_tier","thread_time_constraint_policy","thread_time_constraint_policy_data_t","thread_time_constraint_policy_t","throttled_count","time","time","time_state","time_t","time_value_t","timegm","times","timeshare","timespec","timeval","timeval32","timex","timezone","tm","tm_gmtoff","tm_hour","tm_isdst","tm_mday","tm_min","tm_mon","tm_sec","tm_wday","tm_yday","tm_year","tm_zone","tmpfile","tmpnam","tms","tms_cstime","tms_cutime","tms_stime","tms_utime","tolerance","tolower","total_uncompressed_pages_in_compressor","toupper","trailers","trl_cnt","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ttyname","ttyname_r","tv_nsec","tv_sec","tv_sec","tv_sec","tv_usec","tv_usec","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uc_link","uc_mcontext","uc_mcsize","uc_onstack","uc_sigmask","uc_stack","ucontext_t","udata","udata","uid","uid_t","uint16_t","uint32_t","uint64_t","uint8_t","uintmax_t","uintptr_t","umask","uname","ungetc","unlink","unlinkat","unlockpt","unmount","unsetenv","useconds_t","uselocale","user_time","user_time","user_time","usleep","ut_host","ut_id","ut_line","ut_pid","ut_tv","ut_type","ut_user","utimbuf","utime","utimensat","utimes","utmpx","utmpxname","utsname","uuid","uuid_t","val","val","valid","validattr","version","vi_fsid","vi_pad","vi_stat","vi_type","vinfo_stat","vip_path","vip_vi","virtual_size","vm_address_t","vm_deallocate","vm_inherit_t","vm_map_t","vm_offset_t","vm_page_size","vm_prot_t","vm_range_t","vm_size_t","vm_statistics","vm_statistics64","vm_statistics64_data_t","vm_statistics64_t","vm_statistics_data_t","vm_statistics_t","vmaddr","vmaddr","vmsize","vmsize","vnode_info","vnode_info_path","vol_attributes_attr_t","vol_capabilities_attr_t","vol_capabilities_set_t","volattr","volattr","vst_atime","vst_atimensec","vst_birthtime","vst_birthtimensec","vst_blksize","vst_blocks","vst_ctime","vst_ctimensec","vst_dev","vst_flags","vst_gen","vst_gid","vst_ino","vst_mode","vst_mtime","vst_mtimensec","vst_nlink","vst_qspare","vst_rdev","vst_size","vst_uid","wait","wait4","waitid","waitpid","wchar_t","wcslen","wcstombs","winsize","wire_count","wire_count","wmemchr","write","writev","ws_col","ws_row","ws_xpixel","ws_ypixel","xsu_avail","xsu_encrypted","xsu_pagesize","xsu_total","xsu_used","xsw_usage","xucred","zero_fill_count","zero_fill_count"],"q":["libcddata includes security that replaces the TFO-cookie","data is idempotent","resume connect() on read/writehird Party Connect","Any distributed FS","IP6 Auth Header","any host internal protocol","any private encr. scheme","Argus","AX.25 Frames","BHA","Bulk Data Transfer","BackRoom SATNET Monitoring","CFTP","Chaos","Control Message Transport","Comp. Prot. HeartBeat","Comp. Prot. Net. Executive","Datagram Delivery","dissimilar gateway prot.","divert pseudo-protocol","last return value of *_input(), meaning “all job for …","IP6 destination option","exterior gateway protocol","EMCON","encapsulation header","ISO cnlp","IP6 Encap Sec. Payload","Ethernet IP encapsulation","IP6 fragmentation header","gateway2 (deprecated)","GMTP","General Routing Encap.","“hello” routing protocol","Host Monitoring","IP6 hop-by-hop options","","","xns idp","InterDomain Policy Routing","InterDomain Routing","group mgmt protocol","NSFNET-IGP","Cisco/GXS IGRP","IL transport protocol","Integ. Net Layer Security","Merit Internodal","","payload compression (IPComp)","Packet Core Utility","IP encapsulated in IP","for compatibility","Pluribus Packet Core","","Reliable Transaction","Kryptolan","Locus Address Resoloution","Leaf-1","Leaf-2","","DCN Measurement Subsystems","Mobile Host Routing","Mobile Int.ing control","Multicast Transport","Multiplexing","Sun net disk proto (temp.)","Next Hop Resolution","IP6 no next header","Network Services","network voice protocol","OSPFIGP","PGM","private interior gateway","Protocol Independent Mcast","Packet Radio Measurement","pup","Packet Video Protocol","raw IP packet","BBN RCC Monitoring","Reliable Data","IP6 routing header","resource reservation","Remote Virtual Disk","SATNET/Backroom EXPAK","Satnet Monitoring","Semaphore Comm. security","SCTP","Source Demand Routing","Sequential Exchange","Strite RPC protocol","Stream protocol II.","Secure VMTP","IP with encryption","TCF","","tp-4 w/ class negotiation","TP++ Transport","Trunk-1","Trunk-2","TTP","","Banyon VINES","VISA Protocol","VMTP","WIDEBAND EXPAK","WIDEBAND Monitoring","Wang Span Network","Cross Net Debuggersae_associd_t)(-1ULL))","","((sae_connid_t)(-1ULL))","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Process being created by fork.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Currently runnable.","Sleeping on an address.","Process debugging or suspension.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Awaiting collection by parent.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Enable/Disable TCP Fastopen on this socket","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","C <code>__int128</code> (a GCC extension that’s part of many ABIs)","C __int128_t (alternate name for __int128)","","","","","","","C <code>unsigned __int128</code> (a GCC extension that’s part of many …","C __uint128_t (alternate name for __uintquivalent to C’s <code>void</code> type when used as a pointereturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Notesalls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codehe 64-bit libc on Solaris and illumos only has readdir_r. …if":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[3,1],[4,4],[[3,1],1],[4,4],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[5,6]],[[5,6],7],[[5,6]],0,[6],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[5,5],5],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[8,9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[5,7],0,[5,5],[5,7],[5,7],[5,7],[5,7],0,0,0,[5,5],[5,5],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[5,5],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25],[26,26],[27,27],[28,28],[29,29],[30,30],[31,31],[32,32],[33,33],[6,6],[34,34],[3,3],[1,1],[35,35],[36,36],[37,37],[38,38],[39,39],[40,40],[41,41],[42,42],[43,43],[44,44],[45,45],[46,46],[47,47],[48,48],[49,49],[50,50],[51,51],[52,52],[53,53],[54,54],[55,55],[56,56],[57,57],[58,58],[59,59],[60,60],[61,61],[62,62],[63,63],[64,64],[65,65],[66,66],[67,67],[68,68],[69,69],[70,70],[71,71],[72,72],[73,73],[74,74],[75,75],[76,76],[77,77],[78,78],[79,79],[80,80],[81,81],[82,82],[83,83],[84,84],[85,85],[86,86],[87,87],[88,88],[89,89],[90,90],[91,91],[92,92],[93,93],[94,94],[95,95],[96,96],[97,97],[98,98],[99,99],[100,100],[101,101],[102,102],[103,103],[104,104],[105,105],[106,106],[107,107],[108,108],[109,109],[110,110],[111,111],[112,112],[113,113],[114,114],[115,115],[116,116],[117,117],[118,118],[119,119],[120,120],[121,121],[122,122],[123,123],[124,124],[125,125],[126,126],[127,127],[128,128],[129,129],[130,130],[131,131],[132,132],[133,133],[134,134],[135,135],[136,136],[137,137],[138,138],[139,139],[140,140],[141,141],[142,142],[143,143],[144,144],[145,145],[146,146],[147,147],[148,148],[149,149],[150,150],[151,151],[152,152],[153,153],[154,154],[155,155],[156,156],[157,157],[158,158],[159,159],[160,160],[161,161],[162,162],[163,163],[164,164],[165,165],[166,166],[167,167],[168,168],[169,169],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[170,171],[[173,[172]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],174],0,0,0,0,0,0,0,0,0,0,0,0,0,[175,176],[[176,176],175],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[175,176],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[57,170],0,0,0,[57,177],0,0,[57,5],0,[57,178],0,[57,25],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],0,0,0,0,0,0,0,0,[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],[[],179],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"p":[[3,"cmsghdr"],[6,"c_uchar"],[3,"msghdr"],[6,"c_uint"],[6,"c_int"],[3,"fd_set"],[15,"bool"],[15,"u8"],[15,"u32"],[4,"DIR"],[4,"FILE"],[4,"fpos_t"],[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"servent"],[3,"protoent"],[3,"sockaddr"],[3,"sockaddr_in6"],[3,"passwd"],[3,"ifaddrs"],[3,"tm"],[3,"fsid_t"],[3,"if_nameindex"],[3,"regex_t"],[3,"regmatch_t"],[3,"option"],[3,"sockaddr_un"],[3,"utsname"],[4,"timezone"],[4,"qos_class_t"],[4,"sysdir_search_path_directory_t"],[4,"sysdir_search_path_domain_mask_t"],[3,"ip_mreq"],[3,"ip_mreqn"],[3,"ip_mreq_source"],[3,"aiocb"],[3,"glob_t"],[3,"addrinfo"],[3,"mach_timebase_info"],[3,"stat"],[3,"pthread_mutexattr_t"],[3,"pthread_condattr_t"],[3,"pthread_rwlockattr_t"],[3,"siginfo_t"],[3,"sigaction"],[3,"stack_t"],[3,"fstore_t"],[3,"radvisory"],[3,"statvfs"],[3,"Dl_info"],[3,"sockaddr_in"],[3,"kevent64_s"],[3,"dqblk"],[3,"if_msghdr"],[3,"ifa_msghdr"],[3,"ifma_msghdr"],[3,"ifma_msghdr2"],[3,"rt_metrics"],[3,"rt_msghdr"],[3,"rt_msghdr2"],[3,"termios"],[3,"flock"],[3,"sf_hdtr"],[3,"lconv"],[3,"proc_taskinfo"],[3,"proc_bsdinfo"],[3,"proc_taskallinfo"],[3,"xsw_usage"],[3,"xucred"],[3,"mach_header"],[3,"mach_header_64"],[3,"segment_command"],[3,"segment_command_64"],[3,"load_command"],[3,"sockaddr_dl"],[3,"sockaddr_inarp"],[3,"sockaddr_ctl"],[3,"in_pktinfo"],[3,"in6_pktinfo"],[3,"ipc_perm"],[3,"sembuf"],[3,"arphdr"],[3,"in_addr"],[3,"sockaddr_ndrv"],[3,"sa_endpoints_t"],[3,"timex"],[3,"ntptimeval"],[3,"thread_standard_policy"],[3,"thread_extended_policy"],[3,"thread_time_constraint_policy"],[3,"thread_precedence_policy"],[3,"thread_affinity_policy"],[3,"thread_background_policy"],[3,"thread_latency_qos_policy"],[3,"thread_throughput_qos_policy"],[3,"malloc_statistics_t"],[3,"mstats"],[3,"vm_range_t"],[3,"sched_param"],[3,"vinfo_stat"],[3,"vnode_info"],[3,"vnode_info_path"],[3,"proc_vnodepathinfo"],[3,"vm_statistics"],[3,"task_thread_times_info"],[3,"rusage_info_v0"],[3,"rusage_info_v1"],[3,"rusage_info_v2"],[3,"rusage_info_v3"],[3,"rusage_info_v4"],[3,"image_offset"],[3,"attrlist"],[3,"attrreference_t"],[3,"vol_capabilities_attr_t"],[3,"attribute_set_t"],[3,"vol_attributes_attr_t"],[3,"kevent"],[3,"semid_ds"],[3,"shmid_ds"],[3,"proc_threadinfo"],[3,"statfs"],[3,"dirent"],[3,"pthread_rwlock_t"],[3,"pthread_mutex_t"],[3,"pthread_cond_t"],[3,"sockaddr_storage"],[3,"utmpx"],[3,"sigevent"],[3,"processor_cpu_load_info"],[3,"processor_basic_info"],[3,"processor_set_basic_info"],[3,"processor_set_load_info"],[3,"time_value_t"],[3,"thread_basic_info"],[3,"thread_identifier_info"],[3,"thread_extended_info"],[3,"if_data64"],[3,"if_msghdr2"],[3,"vm_statistics64"],[3,"mach_task_basic_info"],[3,"log2phys"],[3,"os_unfair_lock_s"],[19,"semun"],[3,"timeval32"],[3,"if_data"],[3,"bpf_hdr"],[3,"pthread_attr_t"],[3,"malloc_zone_t"],[3,"max_align_t"],[3,"ucontext_t"],[3,"__darwin_mcontext64"],[3,"__darwin_arm_exception_state64"],[3,"__darwin_arm_thread_state64"],[3,"__darwin_arm_neon_state64"],[3,"ctl_info"],[3,"in6_addr"],[4,"c_void"],[3,"Formatter"],[3,"Error"],[4,"Result"],[6,"mach_port_t"],[6,"dev_t"],[15,"i32"],[6,"pid_t"],[6,"uid_t"],[3,"TypeId"]],"a":{"__errno_location":[2360],"errno":[2360]}},\
"log":{"doc":"A lightweight logging facade.","t":"NNNNNNEEIDDNDDDRDNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOKLLLLLLLOLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOLLLLLLLLLLLLLLLLLLLLKOOFLLLLLLFLLLLLLLLLLLLLLFFFLLLLLLOLLLLLLLLLLLLLLLLLLLLLLLLO","n":["Debug","Debug","Error","Error","Info","Info","Level","LevelFilter","Log","Metadata","MetadataBuilder","Off","ParseLevelError","Record","RecordBuilder","STATIC_MAX_LEVEL","SetLoggerError","Trace","Trace","Warn","Warn","args","args","as_str","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","builder","builder","clone","clone","clone","clone","cmp","cmp","cmp","cmp","debug","enabled","eq","eq","eq","eq","eq","eq","eq","error","file","file","file_static","file_static","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_str","from_str","ge","ge","ge","ge","gt","gt","gt","gt","hash","hash","hash","hash","info","into","into","into","into","into","into","into","into","iter","iter","le","le","le","le","level","level","level","level","line","line","log","log","log_enabled","logger","lt","lt","lt","lt","max","max","max_level","metadata","metadata","module_path","module_path","module_path_static","module_path_static","new","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","set_logger","set_logger_racy","set_max_level","target","target","target","target","to_level","to_level_filter","trace","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","warn"],"q":["logd":["The “debug” level.","Corresponds to the <code>Debug</code> log level.","The “error” level.","Corresponds to the <code>Error</code> log level.","The “info” level.","Corresponds to the <code>Info</code> log level.","An enum representing the available verbosity levels of the …","An enum representing the available verbosity level filters …","A trait encapsulating the operations required of a logger.","Metadata about a log message.","Builder for <code>Metadata</code>.","A level lower than all log levels.","The type returned by <code>from_str</code> when the string doesn’t …","The “payload” of a log message.","Builder for <code>Record</code>.","The statically resolved maximum log level.","The type returned by <code>set_logger</code> if <code>set_logger</code> has already …","The “trace” level.","Corresponds to the <code>Trace</code> log level.","The “warn” level.","Corresponds to the <code>Warn</code> log level.","The message body.","Set <code>args</code>.","Returns the string representation of the <code>Level</code>.","Returns the string representation of the <code>LevelFilter</code>.","","","","","","","","","","","","","","","","","Invoke the builder and return a <code>Record</code>","Returns a <code>Metadata</code> object.","Returns a new builder.","Returns a new builder.","","","","","","","","","Logs a message at the debug level.","Determines if a log message with the specified metadata …","","","","","","","","Logs a message at the error level.","The source file containing the message.","Set <code>file</code>","The module path of the message, if it is a <code>&#39;static</code> string.","Set <code>file</code> to a <code>&#39;static</code> string.","Flushes any buffered records.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","Logs a message at the info level.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Iterate through all supported logging levels.","Iterate through all supported filtering levels.","","","","","The verbosity level of the message.","Set <code>Metadata::level</code>.","The verbosity level of the message.","Setter for <code>level</code>.","The line containing the message.","Set <code>line</code>","Logs the <code>Record</code>.","The standard logging macro.","Determines if a message logged at the specified level in …","Returns a reference to the logger.","","","","","Returns the most verbose logging level.","Returns the most verbose logging level filter.","Returns the current maximum log level.","Metadata about the log directive.","Set <code>metadata</code>. Construct a <code>Metadata</code> object with …","The module path of the message.","Set <code>module_path</code>","The module path of the message, if it is a <code>&#39;static</code> string.","Set <code>module_path</code> to a <code>&#39;static</code> string","Construct new <code>RecordBuilder</code>.","Construct a new <code>MetadataBuilder</code>.","","","","","","","Sets the global logger to a <code>&amp;&#39;static Log</code>.","A thread-unsafe version of <code>set_logger</code>.","Sets the global maximum log level.","The name of the target of the directive.","Set <code>Metadata::target</code>","The name of the target of the directive.","Setter for <code>target</code>.","Converts <code>self</code> to the equivalent <code>Level</code>.","Converts the <code>Level</code> to the equivalent <code>LevelFilter</code>.","Logs a message at the trace level.","","","","","","","","","","","","","","","","","","","","","","","","","Logs a message at the warn level."],"i":[4,6,4,6,4,6,0,0,0,0,0,6,0,0,0,0,0,4,6,4,6,1,3,4,6,4,6,1,3,8,7,15,11,4,6,1,3,8,7,15,11,3,7,1,8,4,6,1,8,4,6,8,7,0,19,4,4,6,6,8,7,11,0,1,3,1,3,19,4,4,6,6,1,3,8,7,15,15,11,11,4,6,1,3,8,7,15,11,4,6,4,4,6,6,4,4,6,6,4,6,8,7,0,4,6,1,3,8,7,15,11,4,6,4,4,6,6,1,3,8,7,1,3,19,0,0,0,4,4,6,6,4,6,0,1,3,1,3,1,3,3,7,4,4,6,6,8,7,0,0,0,1,3,8,7,6,4,0,4,6,1,3,8,7,15,11,4,6,1,3,8,7,15,11,4,6,1,3,8,7,15,11,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[[3,2],3],[4,5],[6,5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,1],[7,8],[[],3],[[],7],[4,4],[6,6],[1,1],[8,8],[[4,4],9],[[6,6],9],[[8,8],9],[[7,7],9],0,[8,10],[[4,6],10],[[4,4],10],[[6,4],10],[[6,6],10],[[8,8],10],[[7,7],10],[[11,11],10],0,[1,[[12,[5]]]],[[3,[12,[5]]],3],[1,[[12,[5]]]],[[3,[12,[5]]],3],[[]],[[4,13],14],[[4,13],14],[[6,13],14],[[6,13],14],[[1,13],14],[[3,13],14],[[8,13],14],[[7,13],14],[[15,13],14],[[15,13],14],[[11,13],14],[[11,13],14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[5,[[16,[4]]]],[5,[[16,[6]]]],[[4,6],10],[[4,4],10],[[6,4],10],[[6,6],10],[[4,4],10],[[4,6],10],[[6,4],10],[[6,6],10],[4],[6],[8],[7],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],17],[[],17],[[4,6],10],[[4,4],10],[[6,4],10],[[6,6],10],[1,4],[[3,4],3],[8,4],[[7,4],7],[1,[[12,[18]]]],[[3,[12,[18]]],3],[1],0,0,[[],19],[[4,6],10],[[4,4],10],[[6,6],10],[[6,4],10],[[],4],[[],6],[[],6],[1,8],[[3,8],3],[1,[[12,[5]]]],[[3,[12,[5]]],3],[1,[[12,[5]]]],[[3,[12,[5]]],3],[[],3],[[],7],[[4,6],[[12,[9]]]],[[4,4],[[12,[9]]]],[[6,4],[[12,[9]]]],[[6,6],[[12,[9]]]],[[8,8],[[12,[9]]]],[[7,7],[[12,[9]]]],[19,[[16,[15]]]],[19,[[16,[15]]]],[6],[1,5],[[3,5],3],[8,5],[[7,5],7],[6,[[12,[4]]]],[4,6],0,[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],0],"p":[[3,"Record"],[3,"Arguments"],[3,"RecordBuilder"],[4,"Level"],[15,"str"],[4,"LevelFilter"],[3,"MetadataBuilder"],[3,"Metadata"],[4,"Ordering"],[15,"bool"],[3,"ParseLevelError"],[4,"Option"],[3,"Formatter"],[6,"Result"],[3,"SetLoggerError"],[4,"Result"],[8,"Iterator"],[15,"u32"],[8,"Log"],[3,"TypeId"]]},\
"miniz_oxide":{"doc":"A pure rust replacement for the miniz DEFLATE/zlib …","t":"NNNENNNEEGENNNNNNNNNDNNNNLLLLLLLLLLMMLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLALLLLLLMLLLLLLLLLLLLLLLLLLLLLNNENNNNLLLLFFALLLLLALLLLNDEDNNNNNNNNNNNNEELLLLLLLLLLLLLLLLLFFFLLALLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLRRRRRRRRFNNDNNNNNELLLLLLAFFFFFLLLLLLLLLLMMALLLLLLLLDRLLLLFLLALLLLLLRRRRRDDDIDLLLLLLLLLLLLLLFLLLLLLLLKLLLLLLLLLLLLLLLLL","n":["Block","Buf","Data","DataFormat","ErrNo","Finish","Full","MZError","MZFlush","MZResult","MZStatus","Mem","NeedDict","None","Ok","Param","Partial","Raw","Stream","StreamEnd","StreamResult","Sync","Version","ZLibIgnoreChecksum","Zlib","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes_consumed","bytes_written","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","deflate","eq","eq","eq","eq","eq","error","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_window_bits","hash","hash","hash","hash","hash","inflate","into","into","into","into","into","new","status","to_owned","to_owned","to_owned","to_owned","to_owned","to_window_bits","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","BestCompression","BestSpeed","CompressionLevel","DefaultCompression","DefaultLevel","NoCompression","UberCompression","borrow","borrow_mut","clone","clone_into","compress_to_vec","compress_to_vec_zlib","core","eq","fmt","from","hash","into","stream","to_owned","try_from","try_into","type_id","BadParam","CallbackFunc","CompressionStrategy","CompressorOxide","Default","Done","Filtered","Finish","Fixed","Full","HuffmanOnly","None","Okay","PutBufFailed","RLE","Sync","TDEFLFlush","TDEFLStatus","adler32","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","compress","compress_to_output","create_comp_flags_from_zip_params","data_format","default","deflate_flags","eq","eq","eq","flags","fmt","fmt","fmt","from","from","from","from","from","from","hash","hash","hash","into","into","into","into","into","new","new","prev_return_status","put_buf_func","reset","set_compression_level","set_compression_level_raw","set_format_and_level","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","TDEFL_COMPUTE_ADLER32","TDEFL_FILTER_MATCHES","TDEFL_FORCE_ALL_RAW_BLOCKS","TDEFL_FORCE_ALL_STATIC_BLOCKS","TDEFL_GREEDY_PARSING_FLAG","TDEFL_NONDETERMINISTIC_PARSING_FLAG","TDEFL_RLE_MATCHES","TDEFL_WRITE_ZLIB_HEADER","deflate","Adler32Mismatch","BadParam","DecompressError","Done","Failed","FailedCannotMakeProgress","HasMoreOutput","NeedsMoreInput","TINFLStatus","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","core","decompress_slice_iter_to_slice","decompress_to_vec","decompress_to_vec_with_limit","decompress_to_vec_zlib","decompress_to_vec_zlib_with_limit","eq","fmt","fmt","fmt","from","from","from_i32","hash","into","into","output","status","stream","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","DecompressorOxide","TINFL_LZ_DICT_SIZE","adler32","adler32_header","borrow","borrow_mut","decompress","default","from","inflate_flags","init","into","new","try_from","try_into","type_id","TINFL_FLAG_COMPUTE_ADLER32","TINFL_FLAG_HAS_MORE_INPUT","TINFL_FLAG_IGNORE_ADLER32","TINFL_FLAG_PARSE_ZLIB_HEADER","TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF","FullReset","InflateState","MinReset","ResetPolicy","ZeroReset","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","decompressor","default","from","from","from","from","inflate","into","into","into","into","last_status","new","new_boxed","new_boxed_with_window_bits","reset","reset","reset","reset","reset","reset_as","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":["miniz_oxide","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","miniz_oxide::deflate","","","","","","","","","","","","","","","","","","","","","","","","miniz_oxide::deflate::core","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","miniz_oxide::deflate::core::deflate_flags","","","","","","","","miniz_oxide::deflate::stream","miniz_oxide::inflate","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","miniz_oxide::inflate::core","","","","","","","","","","","","","","","","miniz_oxide::inflate::core::inflate_flags","","","","","miniz_oxide::inflate::stream","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Not implemented.","Buffer-related error.","Error in inflation; see <code>inflate::stream::inflate()</code> for …","How compressed data is wrapped.","Unused","Attempt to flush the remaining data and end the stream.","Same as <code>Sync</code>, but resets the compression dictionary so …","A list of miniz failed status codes.","A list of flush types.","<code>Result</code> alias for all miniz status codes both successful …","A list of miniz successful status codes.","Unused","Unused","Don’t force any flushing. Used when more input data is …","Operation succeeded.","Bad parameters.","Zlib partial flush. Currently treated as <code>Sync</code>.","Raw DEFLATE.","General stream error.","Operation succeeded and end of deflate stream was found.","A structure containing the result of a call to the inflate …","Finish compressing the currently buffered data, and output …","Unused","Zlib wrapped but ignore and don’t compute the adler32 …","Wrapped using the zlib format.","","","","","","","","","","","The number of bytes consumed from the input slice.","The number of bytes written to the output slice.","","","","","","","","","","","This module contains functionality for compression.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","This module contains functionality for decompression.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create an MZFlush value from an integer value.","The return status of the call.","","","","","","","","","","","","","","","","","","","","","","Slow/high compression. Do a lot of checks to try to find …","Fast compression. Uses a special compression routine that …","How much processing the compressor should do to compress …","Use the default compression level.","Default compromise between speed and compression.","Don’t do any compression, only output uncompressed …","Even more checks, can be very slow.","","","","","Compress the input data to a vector, using the specified …","Compress the input data to a vector, using the specified …","Streaming compression functionality.","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Extra streaming compression functionality.","","","","","Usage error.","Callback function and user used in <code>compress_to_output</code>.","Strategy setting for compression.","Main compression struct.","Don’t use any of the special strategies.","Compression succeeded and the deflate stream was ended.","Only use matches that are at least 5 bytes long.","Try to flush everything and end the deflate stream.","Only use static/fixed blocks. (Blocks using the default …","Same as <code>Sync</code>, but reset the dictionary so that the …","Don’t look for matches, only huffman encode the literals.","Normal operation.","Compression succeeded normally.","Error putting data into output buffer.","Only look for matches with a distance of 1, i.e do …","Try to flush all the current data and output an empty raw …","A list of deflate flush types.","Return status of compression.","Get the adler32 checksum of the currently encoded data.","","","","","","","","","","","","","","","","","Main compression function. Tries to compress as much as …","Main compression function. Callbacks output.","Create a set of compression flags using parameters used by …","Returns whether the compressor is wrapping the data in a …","Initialize the compressor with a level of 4, zlib wrapper …","","","","","Get the raw compressor flags.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new <code>CompressorOxide</code> with the given flags.","","Get the return status of the previous <code>compress</code> call with …","","Reset the state of the compressor, keeping the same …","Set the compression level of the compressor.","Set the compression level of the compressor using an …","Update the compression settings of the compressor.","","","","","","","","","","","","","","","","","","","Should we compute the adler32 checksum.","Only use matches that are at least 6 bytes long.","Force the compressor to only output raw/uncompressed …","Force the compressor to only output static blocks. (Blocks …","Should we use greedy parsing (as opposed to lazy parsing …","Used in miniz to skip zero-initializing hash and dict. We …","Only look for matches with a distance of 0.","Whether to use a zlib wrapper.","Try to compress from input to output with the given …","The decompression went fine, but the adler32 checksum did …","The output buffer is an invalid size; consider the <code>flags</code> …","Struct return when decompress_to_vec functions fail.","Finished decompression without issues.","Failed to decompress due to invalid data.","More input data was expected, but the caller indicated …","There is still pending data that didn’t fit in the …","The decompressor needs more input data to continue …","Return status codes.","","","","","","","Streaming decompression functionality.","Decompress one or more source slices from an iterator into …","Decompress the deflate-encoded data in <code>input</code> to a vector.","Decompress the deflate-encoded data in <code>input</code> to a vector.","Decompress the deflate-encoded data (with a zlib wrapper) …","Decompress the deflate-encoded data (with a zlib wrapper) …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The currently decompressed data if any.","Decompressor status on failure. See TINFLStatus for …","Extra streaming decompression functionality.","","","","","","","","","Main decompression struct.","","Returns the adler32 checksum of the currently decompressed …","Returns the adler32 that was read from the zlib header if …","","","Main decompression function. Keeps decompressing data from …","Create a new tinfl_decompressor with all fields set to 0.","Returns the argument unchanged.","Flags to <code>decompress()</code> to control how inflation works.","Set the current state to <code>Start</code>.","Calls <code>U::from(self)</code>.","Create a new tinfl_decompressor with all fields set to 0.","","","","Calculate the adler32 checksum of the output data even if …","There will be more input that hasn’t been given to the …","Ignore adler32 checksum even if we are inflating a zlib …","Should we try to parse a zlib header?","The output buffer should not wrap around.","Full reset of the state, including zeroing memory.","A struct that compbines a decompressor with extra data for …","Resets state, without performing expensive ops (e.g. …","Tag that determines reset policy of InflateState","Resets state and zero memory, continuing to use the same …","","","","","","","","","Access the innner decompressor.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Try to decompress from <code>input</code> to <code>output</code> with the given …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return the status of the last call to <code>inflate</code> with this …","Create a new state.","Create a new state on the heap.","Create a new state using miniz/zlib style window bits …","Performs reset","","","","Reset the decompressor without re-allocating memory, using …","Resets the state according to specified policy.","","","","","","","","","","","",""],"i":[1,3,3,0,3,1,1,0,0,0,0,3,2,1,2,3,1,4,3,2,0,1,3,4,4,1,2,3,4,5,1,2,3,4,5,5,5,1,2,3,4,5,1,2,3,4,5,0,1,2,3,4,5,5,1,2,3,4,5,9,9,1,2,3,4,5,4,1,2,3,4,5,0,1,2,3,4,5,1,5,1,2,3,4,5,4,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,13,13,0,13,13,13,13,13,13,13,13,0,0,0,13,13,13,13,13,0,13,13,13,13,20,0,0,0,18,20,18,19,18,19,18,19,20,20,18,19,0,0,16,16,35,18,19,20,16,35,18,19,20,18,19,20,18,19,20,0,0,0,16,16,0,18,19,20,16,18,19,20,16,35,18,19,19,20,18,19,20,16,35,18,19,20,16,19,16,35,16,16,16,16,18,19,20,16,35,18,19,20,16,35,18,19,20,16,35,18,19,20,0,0,0,0,0,0,0,0,0,22,22,0,22,22,22,22,22,0,22,25,22,25,22,22,0,0,0,0,0,0,22,22,25,25,22,25,22,22,22,25,25,25,0,22,25,22,25,22,25,22,25,0,0,28,28,28,28,0,28,28,0,28,28,28,28,28,28,0,0,0,0,0,0,0,0,0,0,31,32,33,29,31,32,33,29,29,29,31,32,33,29,0,31,32,33,29,29,29,29,29,34,31,32,33,29,29,31,32,33,29,31,32,33,29,31,32,33,29],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[1,1],[2,2],[3,3],[4,4],[5,5],[[]],[[]],[[]],[[]],[[]],0,[[1,1],6],[[2,2],6],[[3,3],6],[[4,4],6],[[5,5],6],[3,5],[[1,7],8],[[2,7],8],[[3,7],8],[[4,7],8],[[5,7],8],[5,9],[5,9],[[]],[[]],[[]],[[]],[[]],[10,4],[1],[2],[3],[4],[5],0,[[]],[[]],[[]],[[]],[[]],[10,[[11,[1,3]]]],0,[[]],[[]],[[]],[[]],[[]],[4,10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[[],12],0,0,0,0,0,0,0,[[]],[[]],[13,13],[[]],[14,[[15,[14]]]],[14,[[15,[14]]]],0,[[13,13],6],[[13,7],8],[[]],[13],[[]],0,[[]],[[],11],[[],11],[[],12],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[16,17],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[18,18],[19,19],[20,20],[[]],[[]],[[]],[[16,19]],[[16,19,21]],[[10,10,10],17],[16,4],[[],16],0,[[18,18],6],[[19,19],6],[[20,20],6],[16,10],[[18,7],8],[[19,7],8],[[20,7],8],[[]],[[]],[[]],[[]],[1,19],[[]],[18],[19],[20],[[]],[[]],[[]],[[]],[[]],[17,16],[10,[[11,[19,3]]]],[16,20],0,[16],[[16,13]],[[16,14]],[[16,4,14]],[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[[],12],0,0,0,0,0,0,0,0,[[16,1],5],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[22,22],[[]],0,[[23,6,6],[[11,[24,22]]]],[[],[[11,[[15,[14]],25]]]],[24,[[11,[[15,[14]],25]]]],[[],[[11,[[15,[14]],25]]]],[24,[[11,[[15,[14]],25]]]],[[22,22],6],[[22,7],8],[[25,7],8],[[25,7],8],[[]],[[]],[10,[[26,[22]]]],[22],[[]],[[]],0,0,0,[[]],[[],27],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],0,0,[28,[[26,[17]]]],[28,[[26,[17]]]],[[]],[[]],[[28,24,17]],[[],28],[[]],0,[28],[[]],[[],28],[[],11],[[],11],[[],12],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[29,28],[[],29],[[]],[[]],[[]],[[]],[[29,1],5],[[]],[[]],[[]],[[]],[29,22],[4,29],[4,[[30,[29]]]],[10,[[30,[29]]]],[29],[[31,29]],[[32,29]],[[33,29]],[[29,4]],[[29,34]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12]],"p":[[4,"MZFlush"],[4,"MZStatus"],[4,"MZError"],[4,"DataFormat"],[3,"StreamResult"],[15,"bool"],[3,"Formatter"],[6,"Result"],[6,"MZResult"],[15,"i32"],[4,"Result"],[3,"TypeId"],[4,"CompressionLevel"],[15,"u8"],[3,"Vec"],[3,"CompressorOxide"],[15,"u32"],[4,"CompressionStrategy"],[4,"TDEFLFlush"],[4,"TDEFLStatus"],[8,"FnMut"],[4,"TINFLStatus"],[8,"Iterator"],[15,"usize"],[3,"DecompressError"],[4,"Option"],[3,"String"],[3,"DecompressorOxide"],[3,"InflateState"],[3,"Box"],[3,"MinReset"],[3,"ZeroReset"],[3,"FullReset"],[8,"ResetPolicy"],[3,"CallbackFunc"]]},\
"num_integer":{"doc":"Integer trait and functions.","t":"IDIDIFKFKFLLLLFLLLLFLFKFLFKKLLLLLLFKMFLLLLKKKFKFKFLLLFKLFLLLLLLLLLMM","n":["Average","ExtendedGcd","Integer","IterBinomial","Roots","average_ceil","average_ceil","average_floor","average_floor","binomial","borrow","borrow","borrow_mut","borrow_mut","cbrt","cbrt","cbrt","clone","clone_into","div_ceil","div_ceil","div_floor","div_floor","div_mod_floor","div_mod_floor","div_rem","div_rem","divides","eq","extended_gcd","extended_gcd_lcm","fmt","from","from","gcd","gcd","gcd","gcd_lcm","gcd_lcm","into","into","into_iter","is_even","is_multiple_of","is_odd","lcm","lcm","mod_floor","mod_floor","multinomial","new","next","next_multiple_of","nth_root","nth_root","prev_multiple_of","sqrt","sqrt","sqrt","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","x","y"],"q":["num_integer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Provides methods to compute the average of two integers, …","Greatest common divisor and Bézout coefficients","","An iterator over binomial coefficients.","Provides methods to compute an integer’s square root, …","Returns the ceiling value of the average of <code>x</code> and <code>y</code> – …","Returns the ceiling value of the average of <code>self</code> and <code>other</code>.","Returns the floor value of the average of <code>x</code> and <code>y</code> – see …","Returns the floor value of the average of <code>self</code> and <code>other</code>. …","Calculate the binomial coefficient.","","","","","Returns the truncated principal cube root of an integer –","Returns the truncated principal cube root of an integer –","Returns the truncated principal cube root of an integer –","","","Ceiled integer division","Ceiled integer division.","Floored integer division","Floored integer division.","Simultaneous floored integer division and modulus","Simultaneous floored integer division and modulus. Returns …","Simultaneous integer division and modulus","Simultaneous truncated integer division and modulus. …","Deprecated, use <code>is_multiple_of</code> instead.","","Greatest common divisor and Bézout coefficients.","Greatest common divisor, least common multiple, and …","","Returns the argument unchanged.","Returns the argument unchanged.","Calculates the Greatest Common Divisor (GCD) of the number …","Greatest Common Divisor (GCD).","","Calculates the Greatest Common Divisor (GCD) and Lowest …","Greatest Common Divisor (GCD) and Lowest Common Multiple …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if the number is even.","Returns <code>true</code> if <code>self</code> is a multiple of <code>other</code>.","Returns <code>true</code> if the number is odd.","Calculates the Lowest Common Multiple (LCM) of the number …","Lowest Common Multiple (LCM).","Floored integer modulus","Floored integer modulo, satisfying:","Calculate the multinomial coefficient.","For a given n, iterate over all binomial coefficients …","","Rounds up to nearest multiple of argument.","Returns the truncated principal <code>n</code>th root of an integer – …","Returns the truncated principal <code>n</code>th root of an integer – …","Rounds down to nearest multiple of argument.","Returns the truncated principal square root of an integer …","Returns the truncated principal square root of an integer …","Returns the truncated principal square root of an integer …","","","","","","","","",""],"i":[0,0,0,0,0,0,1,0,1,0,11,5,11,5,0,4,4,5,5,0,2,0,2,0,2,0,2,2,5,2,2,5,11,5,0,2,5,0,2,11,5,11,2,2,2,0,2,0,2,0,11,11,2,0,4,2,0,4,4,5,11,5,11,5,11,5,5,5],"f":[0,0,0,0,0,[[1,1],1],[[]],[[1,1],1],[[]],[[[0,[2,3]],[0,[2,3]]],[[0,[2,3]]]],[[]],[[]],[[]],[[]],[4,4],[[]],[[]],[[[5,[3]]],[[5,[3]]]],[[]],[[2,2],2],[[]],[[2,2],2],[[]],[[2,2]],[[]],[[2,2]],[[]],[[],6],[[[5,[7]],5],6],[[],5],[[]],[[[5,[8]],9],10],[[]],[[]],[[2,2],2],[[]],0,[[2,2]],[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[2,2],2],[[]],[[2,2],2],[[]],[[]],[[],11],[11,12],[[]],[[4,13],4],[13],[[]],[4,4],[[]],[[]],[[]],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],0,0],"p":[[8,"Average"],[8,"Integer"],[8,"Clone"],[8,"Roots"],[3,"ExtendedGcd"],[15,"bool"],[8,"PartialEq"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[3,"IterBinomial"],[4,"Option"],[15,"u32"],[4,"Result"],[3,"TypeId"]]},\
"num_rational":{"doc":"Rational numbers","t":"DDGGGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["ParseRatioError","Ratio","Rational","Rational32","Rational64","abs","abs_sub","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","approximate_float","borrow","borrow","borrow_mut","borrow_mut","ceil","checked_add","checked_div","checked_mul","checked_sub","clone","clone","clone_into","clone_into","cmp","default","denom","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","eq","eq","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fract","from","from","from","from","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_integer","from_str","from_str_radix","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","hash","into","into","into","inv","inv","is_integer","is_negative","is_one","is_positive","is_zero","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","new","new_raw","numer","one","partial_cmp","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","product","product","recip","reduced","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","round","set_one","set_zero","signum","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","to_f64","to_f64","to_f64","to_f64","to_f64","to_f64","to_f64","to_f64","to_f64","to_f64","to_i128","to_i128","to_i128","to_i128","to_i128","to_i128","to_i128","to_i128","to_i128","to_i128","to_i64","to_i64","to_i64","to_i64","to_i64","to_i64","to_i64","to_i64","to_i64","to_i64","to_integer","to_owned","to_owned","to_string","to_string","to_u128","to_u128","to_u128","to_u128","to_u128","to_u128","to_u128","to_u128","to_u128","to_u128","to_u64","to_u64","to_u64","to_u64","to_u64","to_u64","to_u64","to_u64","to_u64","to_u64","trunc","try_from","try_from","try_into","try_into","type_id","type_id","zero"],"q":["num_rationald":["","Represents the ratio between two numbers.","Alias for a <code>Ratio</code> of machine-sized integers.","Alias for a <code>Ratio</code> of 32-bit-sized integers.","Alias for a <code>Ratio</code> of 64-bit-sized integers.","","","","","","","","","","","","","","","","","","","","Rounds towards plus infinity.","","","","","","","","","","Returns zero","Gets an immutable reference to the denominator.","","","","","","","","","","","","","","","Rounds towards minus infinity.","","","","","","","","","","","Returns the fractional part of a number, with division …","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a <code>Ratio</code> representing the integer <code>t</code>.","Parses <code>numer/denom</code> or just <code>numer</code>.","Parses <code>numer/denom</code> where the numbers are in base <code>radix</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns true if the rational number is an integer …","","","","","","","","","","","","","","","","","","","Creates a new <code>Ratio</code>.","Creates a <code>Ratio</code> without checking for <code>denom == 0</code> or …","Gets an immutable reference to the numerator.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Raises the <code>Ratio</code> to the power of an exponent.","","","","","","","","","","","","Returns the reciprocal.","Returns a reduced copy of self.","","","","","","","","","","","","","Rounds to the nearest integer. Rounds half-way cases away …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts to an integer, rounding towards zero.","","","","","","","","","","","","","","","","","","","","","","","","","Rounds towards zero.","","","","","","",""],"i":[0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,13,4,13,4,4,4,4,4,4,13,4,13,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,13,4,4,4,4,4,4,4,4,4,13,13,4,4,4,4,13,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,13,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,13,4,13,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,13,4,13,4,13,4],"f":[0,0,0,0,0,[[[4,[[0,[1,2,3]]]]],[[4,[[0,[1,2,3]]]]]],[[[4,[[0,[1,2,3]]]],4],[[4,[[0,[1,2,3]]]]]],[[[4,[[0,[1,2]]]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[4,4],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[4,4],4],[4,[[4,[[0,[1,2]]]]]],[4,4],[4,4],[[4,4],4],[[[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2,5]]]],[0,[1,2,5]]]],[[[4,[[0,[1,2,5]]]],[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2,5]]]],4]],[[[0,[6,7]]],[[9,[[4,[[0,[2,3,8,7,1]]]]]]]],[[]],[[]],[[]],[[]],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,10,11]]]],4],[[9,[[4,[[0,[1,2,10,11]]]]]]]],[[4,4],[[9,[4]]]],[[4,4],[[9,[4]]]],[[[4,[[0,[1,2,10,12]]]],4],[[9,[[4,[[0,[1,2,10,12]]]]]]]],[[[4,[1]]],[[4,[1]]]],[13,13],[[]],[[]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],14],[[],[[4,[[0,[1,2]]]]]],[4],[[4,4],4],[4,[[4,[[0,[1,2]]]]]],[[4,4],4],[4,4],[4,4],[4,4],[[4,4],4],[[4,4],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,5]]]],4]],[[[4,[[0,[1,2,5]]]],[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2,5]]]],[0,[1,2,5]]]],[[[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],15],[[13,13],15],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[16,1,2]]]],17],18],[[[4,[[0,[19,1,2]]]],17],18],[[[4,[[0,[20,1,2]]]],17],18],[[[4,[21]],17],18],[[[4,[[0,[22,1,2]]]],17],18],[[[4,[[0,[23,1,2]]]],17],18],[[[4,[[0,[24,1,2]]]],17],18],[[[4,[[0,[25,1,2]]]],17],18],[[13,17],18],[[13,17],18],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[],4],[[],4],[[]],[[]],[26,[[9,[[4,[27]]]]]],[26,[[9,[[4,[28]]]]]],[26,[[9,[[4,[29]]]]]],[26,[[9,[[4,[30]]]]]],[26,[[9,[[4,[31]]]]]],[26,[[9,[[4,[32]]]]]],[26,[[9,[[4,[33]]]]]],[26,[[9,[[4,[34]]]]]],[26,[[9,[[4,[35]]]]]],[26,[[9,[[4,[36]]]]]],[26,[[9,[[4,[37]]]]]],[26,[[9,[[4,[38]]]]]],[39,[[9,[[4,[35]]]]]],[39,[[9,[[4,[34]]]]]],[39,[[9,[[4,[38]]]]]],[39,[[9,[[4,[29]]]]]],[39,[[9,[[4,[30]]]]]],[39,[[9,[[4,[31]]]]]],[39,[[9,[[4,[37]]]]]],[39,[[9,[[4,[27]]]]]],[39,[[9,[[4,[33]]]]]],[39,[[9,[[4,[28]]]]]],[39,[[9,[[4,[36]]]]]],[39,[[9,[[4,[32]]]]]],[28,[[9,[[4,[31]]]]]],[28,[[9,[[4,[34]]]]]],[28,[[9,[[4,[37]]]]]],[28,[[9,[[4,[35]]]]]],[28,[[9,[[4,[33]]]]]],[28,[[9,[[4,[29]]]]]],[28,[[9,[[4,[30]]]]]],[28,[[9,[[4,[36]]]]]],[28,[[9,[[4,[28]]]]]],[28,[[9,[[4,[32]]]]]],[28,[[9,[[4,[27]]]]]],[28,[[9,[[4,[38]]]]]],[34,[[9,[[4,[38]]]]]],[34,[[9,[[4,[27]]]]]],[34,[[9,[[4,[33]]]]]],[34,[[9,[[4,[30]]]]]],[34,[[9,[[4,[31]]]]]],[34,[[9,[[4,[37]]]]]],[34,[[9,[[4,[29]]]]]],[34,[[9,[[4,[35]]]]]],[34,[[9,[[4,[32]]]]]],[34,[[9,[[4,[36]]]]]],[34,[[9,[[4,[34]]]]]],[34,[[9,[[4,[28]]]]]],[[[0,[1,2]]],[[4,[[0,[1,2]]]]]],[40,[[42,[[4,[[0,[41,1,2]]]],13]]]],[[40,38],[[42,[[4,[[0,[1,2]]]],13]]]],[35,[[9,[[4,[31]]]]]],[35,[[9,[[4,[30]]]]]],[35,[[9,[[4,[29]]]]]],[35,[[9,[[4,[27]]]]]],[35,[[9,[[4,[35]]]]]],[35,[[9,[[4,[37]]]]]],[35,[[9,[[4,[36]]]]]],[35,[[9,[[4,[33]]]]]],[35,[[9,[[4,[38]]]]]],[35,[[9,[[4,[32]]]]]],[35,[[9,[[4,[34]]]]]],[35,[[9,[[4,[28]]]]]],[30,[[9,[[4,[32]]]]]],[30,[[9,[[4,[31]]]]]],[30,[[9,[[4,[33]]]]]],[30,[[9,[[4,[34]]]]]],[30,[[9,[[4,[28]]]]]],[30,[[9,[[4,[38]]]]]],[30,[[9,[[4,[37]]]]]],[30,[[9,[[4,[36]]]]]],[30,[[9,[[4,[35]]]]]],[30,[[9,[[4,[27]]]]]],[30,[[9,[[4,[30]]]]]],[30,[[9,[[4,[29]]]]]],[[[4,[[0,[1,2,43]]]]]],[4],[[]],[[]],[4,4],[4,4],[[[4,[[0,[1,2]]]]],15],[[[4,[[0,[1,2,3]]]]],15],[[[4,[[0,[1,2]]]]],15],[[[4,[[0,[1,2,3]]]]],15],[[[4,[[0,[1,2]]]]],15],[4,4],[[4,4],4],[[4,4],4],[4,4],[4,[[4,[[0,[1,2]]]]]],[[4,4],4],[[4,4],[[4,[[0,[1,2]]]]]],[4,4],[[[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2,5]]]],4]],[[[4,[[0,[1,2,5]]]],[0,[1,2,5]]]],[[[4,[[0,[1,2,5]]]],[4,[[0,[1,2,5]]]]]],[4,4],[4,4],[[[0,[1,2]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[],4],[4],[[],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[9,[14]]]],[[4,33],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[44,[30]]]]]],34],[[4,[[0,[1,2,[44,[30]]]]]]]],[[[4,[[0,[1,2,[44,[35]]]]]],35],[[4,[[0,[1,2,[44,[35]]]]]]]],[[4,34],[[4,[[0,[1,2]]]]]],[[4,38],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[44,[27]]]]]],27],[[4,[[0,[1,2,[44,[27]]]]]]]],[[[4,[[0,[1,2,[44,[30]]]]]],30],[[4,[[0,[1,2,[44,[30]]]]]]]],[[4,29],[[4,[[0,[1,2]]]]]],[[4,32],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[44,[32]]]]]],36],[[4,[[0,[1,2,[44,[32]]]]]]]],[[4,32],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[44,[30]]]]]],30],[[4,[[0,[1,2,[44,[30]]]]]]]],[[[4,[[0,[1,2,[44,[30]]]]]],34],[[4,[[0,[1,2,[44,[30]]]]]]]],[[[4,[[0,[1,2,[44,[31]]]]]],33],[[4,[[0,[1,2,[44,[31]]]]]]]],[[[4,[[0,[1,2,[44,[27]]]]]],29],[[4,[[0,[1,2,[44,[27]]]]]]]],[[4,31],[[4,[[0,[1,2]]]]]],[[4,28],[[4,[[0,[1,2]]]]]],[[4,30],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[44,[38]]]]]],37],[[4,[[0,[1,2,[44,[38]]]]]]]],[[4,29],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[44,[32]]]]]],32],[[4,[[0,[1,2,[44,[32]]]]]]]],[[[4,[[0,[1,2,[44,[35]]]]]],28],[[4,[[0,[1,2,[44,[35]]]]]]]],[[4,34],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[44,[38]]]]]],37],[[4,[[0,[1,2,[44,[38]]]]]]]],[[4,27],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[44,[31]]]]]],31],[[4,[[0,[1,2,[44,[31]]]]]]]],[[4,31],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[44,[35]]]]]],28],[[4,[[0,[1,2,[44,[35]]]]]]]],[[[4,[[0,[1,2,[44,[35]]]]]],35],[[4,[[0,[1,2,[44,[35]]]]]]]],[[4,27],[[4,[[0,[1,2]]]]]],[[4,33],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[44,[27]]]]]],29],[[4,[[0,[1,2,[44,[27]]]]]]]],[[[4,[[0,[1,2,[44,[27]]]]]],27],[[4,[[0,[1,2,[44,[27]]]]]]]],[[4,38],[[4,[[0,[1,2]]]]]],[[4,37],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[44,[38]]]]]],38],[[4,[[0,[1,2,[44,[38]]]]]]]],[[[4,[[0,[1,2,[44,[32]]]]]],36],[[4,[[0,[1,2,[44,[32]]]]]]]],[[[4,[[0,[1,2,[44,[32]]]]]],32],[[4,[[0,[1,2,[44,[32]]]]]]]],[[4,37],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],37],[[4,[[0,[1,2]]]]]],[[4,36],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[44,[38]]]]]],38],[[4,[[0,[1,2,[44,[38]]]]]]]],[[[4,[[0,[1,2,[44,[31]]]]]],33],[[4,[[0,[1,2,[44,[31]]]]]]]],[[4,30],[[4,[[0,[1,2]]]]]],[[4,35],[[4,[[0,[1,2]]]]]],[[4,28],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[44,[31]]]]]],31],[[4,[[0,[1,2,[44,[31]]]]]]]],[[4,35],[[4,[[0,[1,2]]]]]],[[4,36],[[4,[[0,[1,2]]]]]],[[],[[4,[[0,[2,1]]]]]],[[],[[4,[[0,[2,1]]]]]],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[4,4],[[4,4],4],[[4,4],4],[4,[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[4,4],[[4,4],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,5]]]],4]],[[[4,[[0,[1,2,5]]]],[0,[1,2,5]]]],[[[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2,5]]]],[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,3]]]]],[[4,[[0,[1,2,3]]]]]],[[4,4],4],[4,4],[4,4],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[4,4],4],[4,[[4,[[0,[1,2]]]]]],[[4,4],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,5]]]],[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2,5]]]],[0,[1,2,5]]]],[[[4,[[0,[1,2,5]]]],4]],[[[4,[[0,[1,2,5]]]]]],[[],[[4,[[0,[2,1]]]]]],[[],[[4,[[0,[2,1]]]]]],[[[4,[32]]],[[9,[39]]]],[[[4,[27]]],[[9,[39]]]],[[[4,[37]]],[[9,[39]]]],[[[4,[31]]],[[9,[39]]]],[[[4,[29]]],[[9,[39]]]],[[[4,[38]]],[[9,[39]]]],[[[4,[34]]],[[9,[39]]]],[[[4,[33]]],[[9,[39]]]],[[[4,[30]]],[[9,[39]]]],[[[4,[36]]],[[9,[39]]]],[[[4,[32]]],[[9,[28]]]],[[[4,[31]]],[[9,[28]]]],[[[4,[34]]],[[9,[28]]]],[[[4,[27]]],[[9,[28]]]],[[[4,[37]]],[[9,[28]]]],[[[4,[38]]],[[9,[28]]]],[[[4,[33]]],[[9,[28]]]],[[[4,[36]]],[[9,[28]]]],[[[4,[30]]],[[9,[28]]]],[[[4,[29]]],[[9,[28]]]],[[[4,[29]]],[[9,[34]]]],[[[4,[36]]],[[9,[34]]]],[[[4,[30]]],[[9,[34]]]],[[[4,[32]]],[[9,[34]]]],[[[4,[37]]],[[9,[34]]]],[[[4,[31]]],[[9,[34]]]],[[[4,[38]]],[[9,[34]]]],[[[4,[34]]],[[9,[34]]]],[[[4,[27]]],[[9,[34]]]],[[[4,[33]]],[[9,[34]]]],[[[4,[[0,[1,2]]]]],[[0,[1,2]]]],[[]],[[]],[[],45],[[],45],[[[4,[38]]],[[9,[35]]]],[[[4,[27]]],[[9,[35]]]],[[[4,[31]]],[[9,[35]]]],[[[4,[37]]],[[9,[35]]]],[[[4,[36]]],[[9,[35]]]],[[[4,[29]]],[[9,[35]]]],[[[4,[33]]],[[9,[35]]]],[[[4,[30]]],[[9,[35]]]],[[[4,[32]]],[[9,[35]]]],[[[4,[34]]],[[9,[35]]]],[[[4,[38]]],[[9,[30]]]],[[[4,[30]]],[[9,[30]]]],[[[4,[36]]],[[9,[30]]]],[[[4,[34]]],[[9,[30]]]],[[[4,[37]]],[[9,[30]]]],[[[4,[32]]],[[9,[30]]]],[[[4,[27]]],[[9,[30]]]],[[[4,[33]]],[[9,[30]]]],[[[4,[29]]],[[9,[30]]]],[[[4,[31]]],[[9,[30]]]],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[],42],[[],42],[[],42],[[],42],[[],46],[[],46],[[],[[4,[[0,[1,2]]]]]]],"p":[[8,"Clone"],[8,"Integer"],[8,"Signed"],[3,"Ratio"],[8,"NumAssign"],[8,"FloatCore"],[8,"NumCast"],[8,"Bounded"],[4,"Option"],[8,"CheckedMul"],[8,"CheckedAdd"],[8,"CheckedSub"],[3,"ParseRatioError"],[4,"Ordering"],[15,"bool"],[8,"UpperExp"],[3,"Formatter"],[6,"Result"],[8,"LowerHex"],[8,"LowerExp"],[8,"Debug"],[8,"Display"],[8,"Octal"],[8,"UpperHex"],[8,"Binary"],[15,"f32"],[15,"usize"],[15,"i128"],[15,"isize"],[15,"u64"],[15,"u16"],[15,"u8"],[15,"i16"],[15,"i64"],[15,"u128"],[15,"i8"],[15,"i32"],[15,"u32"],[15,"f64"],[15,"str"],[8,"FromStr"],[4,"Result"],[8,"Hash"],[8,"Pow"],[3,"String"],[3,"TypeId"]]},\
"num_traits":{"doc":"Numeric traits for generic mathematics","t":"CCCCCCCCCCCNCCCECQCNCCIIIICIICDCCICCCCCCCCCCCCCCCCLLLLAACCFFFALLLLLKAALLMCAACAACLLLLLLLCIIIKKKKIIIIKFKLLLLLKLLLLLKLLLLLLLKLLLLLKLLKKKKKKKKKKIIIKKLKLKKKLKLKKKKKKKKKKLKKLKKKLKKKKLKLKKKKKKLKLKLKLKLKLKKKKKKLKKKLKKKKKKKKKKKKKLKLKLKLKKKKKKKLKLKLIILKFKLLFKIKKKKLKKLKKKKKKKLKKKAAAAAAAIIIIIIIIKKKKKKKKIIKKKKIQKIIQKKIIIKKKIIIIKKKKKIIIIIIKKKKKKQIFFKIKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKIIFKFKKKFK","n":["AsPrimitive","Bounded","CheckedAdd","CheckedDiv","CheckedEuclid","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","Empty","Euclid","Float","FloatConst","FloatErrorKind","FromPrimitive","FromStrRadixErr","Inv","Invalid","MulAdd","MulAddAssign","Num","NumAssign","NumAssignOps","NumAssignRef","NumCast","NumOps","NumRef","One","ParseFloatError","Pow","PrimInt","RefNum","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","Signed","ToPrimitive","Unsigned","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","Zero","abs","abs_sub","borrow","borrow","borrow_mut","borrow_mut","bounds","cast","cast","checked_pow","clamp","clamp_max","clamp_min","float","fmt","fmt","fmt","from","from","from_str_radix","identities","int","into","into","kind","one","ops","pow","pow","real","sign","signum","to_string","try_from","try_from","try_into","try_into","type_id","type_id","zero","Bounded","LowerBounded","UpperBounded","max_value","max_value","min_value","min_value","AsPrimitive","FromPrimitive","NumCast","ToPrimitive","as_","cast","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","E","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","Float","FloatConst","FloatCore","LN_10","LN_2","LOG10_2","LOG10_E","LOG2_10","LOG2_E","PI","SQRT_2","TAU","abs","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","ceil","classify","classify","copysign","cos","cosh","epsilon","epsilon","exp","exp2","exp_m1","floor","floor","fract","fract","hypot","infinity","infinity","integer_decode","integer_decode","is_finite","is_finite","is_infinite","is_infinite","is_nan","is_nan","is_normal","is_normal","is_sign_negative","is_sign_negative","is_sign_positive","is_sign_positive","ln","ln_1p","log","log10","log2","max","max","max_value","max_value","min","min","min_positive_value","min_positive_value","min_value","min_value","mul_add","nan","nan","neg_infinity","neg_infinity","neg_zero","neg_zero","powf","powi","powi","recip","recip","round","round","signum","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_degrees","to_radians","to_radians","trunc","trunc","One","Zero","is_one","is_zero","one","one","set_one","set_zero","zero","zero","PrimInt","count_ones","count_zeros","from_be","from_le","leading_ones","leading_zeros","pow","reverse_bits","rotate_left","rotate_right","signed_shl","signed_shr","swap_bytes","to_be","to_le","trailing_ones","trailing_zeros","unsigned_shl","unsigned_shr","checked","euclid","inv","mul_add","overflowing","saturating","wrapping","CheckedAdd","CheckedDiv","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","checked_add","checked_div","checked_mul","checked_neg","checked_rem","checked_shl","checked_shr","checked_sub","CheckedEuclid","Euclid","checked_div_euclid","checked_rem_euclid","div_euclid","rem_euclid","Inv","Output","inv","MulAdd","MulAddAssign","Output","mul_add","mul_add_assign","OverflowingAdd","OverflowingMul","OverflowingSub","overflowing_add","overflowing_mul","overflowing_sub","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","saturating_add","saturating_add","saturating_mul","saturating_sub","saturating_sub","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","wrapping_add","wrapping_mul","wrapping_neg","wrapping_shl","wrapping_shr","wrapping_sub","Output","Pow","checked_pow","pow","pow","Real","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","cos","cosh","epsilon","exp","exp2","exp_m1","floor","fract","hypot","is_sign_negative","is_sign_positive","ln","ln_1p","log","log10","log2","max","max_value","min","min_positive_value","min_value","mul_add","powf","powi","recip","round","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_radians","trunc","Signed","Unsigned","abs","abs","abs_sub","abs_sub","is_negative","is_positive","signum","signum"],"q":["num_traits","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits::bounds","","","","","","","num_traits::cast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits::float","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits::identities","","","","","","","","","","num_traits::int","","","","","","","","","","","","","","","","","","","","num_traits::ops","","","","","","","num_traits::ops::checked","","","","","","","","","","","","","","","","num_traits::ops::euclid","","","","","","num_traits::ops::inv","","","num_traits::ops::mul_add","","","","","num_traits::ops::overflowing","","","","","","num_traits::ops::saturating","","","","","","","","","num_traits::ops::wrapping","","","","","","","","","","","","num_traits::pow","","","","","num_traits::real","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits::sign","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","The base trait for numeric types, covering <code>0</code> and <code>1</code> values, …","The trait for <code>Num</code> types which also implement assignment …","Generic trait for types implementing numeric assignment …","The trait for <code>NumAssign</code> types which also implement …","","Generic trait for types implementing basic numeric …","The trait for <code>Num</code> types which also implement numeric …","","","","","The trait for <code>Num</code> references which implement numeric …","","","","","","","","","","","","","","","","","","","","","","","","","A value bounded by a minimum and a maximum","A value bounded by a maximum value","A value bounded by a minimum value","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a string and radix (typically <code>2..=36</code>).","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Numbers which have upper and lower bounds","Numbers which have lower bounds","Numbers which have upper bounds","Returns the largest finite number this type can represent","Returns the largest finite number this type can represent","Returns the smallest finite number this type can represent","Returns the smallest finite number this type can represent","A generic interface for casting between machine scalars …","A generic trait for converting a number to a value.","An interface for casting between machine scalars.","A generic trait for converting a value to a number.","Convert a value to another, using the <code>as</code> operator.","Cast from one machine scalar to another.","Creates a number from another value that can be converted …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","Converts an <code>i128</code> to return an optional value of this type. …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>isize</code> to return an optional value of this …","Converts an <code>u128</code> to return an optional value of this type. …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u8</code> to return an optional value of this type. …","Converts a <code>usize</code> to return an optional value of this type. …","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>i128</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot be","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be …","Converts the value of <code>self</code> to a <code>usize</code>. If the value cannot …","Return Euler’s number.","Return <code>1.0 / π</code>.","Return <code>1.0 / sqrt(2.0)</code>.","Return <code>2.0 / π</code>.","Return <code>2.0 / sqrt(π)</code>.","Return <code>π / 2.0</code>.","Return <code>π / 3.0</code>.","Return <code>π / 4.0</code>.","Return <code>π / 6.0</code>.","Return <code>π / 8.0</code>.","Generic trait for floating point numbers","","Generic trait for floating point numbers that works with …","Return <code>ln(10.0)</code>.","Return <code>ln(2.0)</code>.","Return <code>log10(2.0)</code>.","Return <code>log10(e)</code>.","Return <code>log2(10.0)</code>.","Return <code>log2(e)</code>.","Return Archimedes’ constant <code>π</code>.","Return <code>sqrt(2.0)</code>.","Return the full circle constant <code>τ</code>.","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","Computes the absolute value of <code>self</code>. Returns …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Returns the smallest integer greater than or equal to a …","Returns the floating point category of the number. If only …","Returns the floating point category of the number. If only …","Returns a number composed of the magnitude of <code>self</code> and the …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","Returns the largest integer less than or equal to a number.","Returns the largest integer less than or equal to a number.","Returns the fractional part of a number.","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns positive infinity.","Returns the infinite value.","Returns the mantissa, base 2 exponent, and sign as …","Returns the mantissa, base 2 exponent, and sign as …","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if the number is neither infinite or NaN.","Returns <code>true</code> if this value is positive infinity or …","Returns <code>true</code> if the number is infinite.","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Returns <code>true</code> if the number is NaN.","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code> and …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code> and …","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Returns NaN.","Returns the <code>NaN</code> value.","Returns negative infinity.","Returns the negative infinite value.","Returns <code>-0.0</code>.","Returns <code>-0.0</code>.","Raise a number to a floating point power.","Raise a number to an integer power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the reciprocal (multiplicative inverse) of the …","Returns the nearest integer to a number. Round half-way …","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts to degrees, assuming the number is in radians.","Converts radians to degrees.","Converts to radians, assuming the number is in degrees.","Converts degrees to radians.","Return the integer part of a number.","Return the integer part of a number.","Defines a multiplicative identity element for <code>Self</code>.","Defines an additive identity element for <code>Self</code>.","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","Returns the multiplicative identity, <code>1</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","Returns the additive identity, <code>0</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","Generic trait for primitive integers.","Returns the number of ones in the binary representation of …","Returns the number of zeros in the binary representation …","Convert an integer from big endian to the target’s …","Convert an integer from little endian to the target’s …","Returns the number of leading ones in the binary …","Returns the number of leading zeros in the binary …","Raises self to the power of <code>exp</code>, using exponentiation by …","Reverses the order of bits in the integer.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Reverses the byte order of the integer.","Convert <code>self</code> to big endian from the target’s endianness.","Convert <code>self</code> to little endian from the target’s …","Returns the number of trailing ones in the binary …","Returns the number of trailing zeros in the binary …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","","","","","","","","Performs addition that returns <code>None</code> instead of wrapping …","Performs division that returns <code>None</code> instead of panicking …","Performs multiplication that returns <code>None</code> instead of …","Performs negation that returns <code>None</code> if the result can’t …","Performs an integral remainder that returns <code>None</code> instead …","Performs a left shift that returns <code>None</code> on shifts larger …","Performs a right shift that returns <code>None</code> on shifts larger …","Performs subtraction that returns <code>None</code> instead of wrapping …","Adds two numbers, checking for overflow. If overflow …","Divides two numbers, checking for underflow, overflow and …","Multiplies two numbers, checking for underflow or …","Negates a number, returning <code>None</code> for results that can’t …","Finds the remainder of dividing two numbers, checking for …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Subtracts two numbers, checking for underflow. If …","","","Performs euclid division that returns <code>None</code> instead of …","Finds the euclid remainder of dividing two numbers, …","Calculates Euclidean division, the matching method for …","Calculates the least nonnegative remainder of <code>self (mod v)</code>.","Unary operator for retrieving the multiplicative inverse, …","The result after applying the operator.","Returns the multiplicative inverse of <code>self</code>.","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","The fused multiply-add assignment operation.","The resulting type after applying the fused multiply-add.","Performs the fused multiply-add operation.","Performs the fused multiply-add operation.","Performs addition with a flag for overflow.","Performs multiplication with a flag for overflow.","Performs substraction with a flag for overflow.","Returns a tuple of the sum along with a boolean indicating …","Returns a tuple of the product along with a boolean …","Returns a tuple of the difference along with a boolean …","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>, …","Performs addition that saturates at the numeric bounds …","Performs multiplication that saturates at the numeric …","Performs subtraction that saturates at the numeric bounds …","Saturating addition operator. Returns a+b, saturating at …","Saturating addition. Computes <code>self + other</code>, saturating at …","Saturating multiplication. Computes <code>self * other</code>, …","Saturating subtraction operator. Returns a-b, saturating …","Saturating subtraction. Computes <code>self - other</code>, saturating …","Performs addition that wraps around on overflow.","Performs multiplication that wraps around on overflow.","Performs a negation that does not panic.","Performs a left shift that does not panic.","Performs a right shift that does not panic.","Performs subtraction that wraps around on overflow.","Wrapping (modular) addition. Computes <code>self + other</code>, …","Wrapping (modular) multiplication. Computes <code>self * other</code>, …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …","Wrapping (modular) subtraction. Computes <code>self - other</code>, …","The result after applying the operator.","Binary operator for raising a value to a power.","Raises a value to the power of exp, returning <code>None</code> if an …","Raises a value to the power of exp, using exponentiation …","Returns <code>self</code> to the power <code>rhs</code>.","A trait for real number types that do not necessarily have …","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","Returns the largest integer less than or equal to a number.","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Raise a number to a real number power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts radians to degrees.","Converts degrees to radians.","Return the integer part of a number.","Useful functions for signed numbers (i.e. numbers that can …","A trait for values which cannot be negative","Computes the absolute value.","Computes the absolute value.","The positive difference of two numbers.","The positive difference of two numbers.","Returns true if the number is negative and false if the …","Returns true if the number is positive and false if the …","Returns the sign of the number.","Returns the sign of the number."],"i":[0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,35,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,5,2,5,0,0,0,0,0,0,0,0,2,5,5,2,5,35,0,0,2,5,5,0,0,0,0,0,0,0,5,2,5,2,5,2,5,0,0,0,0,36,37,36,38,0,0,0,0,39,0,11,40,40,40,40,40,40,40,40,40,40,40,40,40,40,13,13,13,13,13,13,13,13,13,13,13,13,13,13,41,41,41,41,41,41,41,41,41,41,0,0,0,41,41,41,41,41,41,41,41,41,42,43,42,42,42,42,42,42,42,42,42,42,43,43,42,42,42,42,43,42,42,42,42,42,43,42,43,42,43,42,43,42,42,43,42,43,42,43,42,43,42,43,42,43,42,42,42,42,42,42,43,43,42,42,43,43,42,43,42,42,43,42,43,42,43,42,42,42,43,42,43,42,43,42,43,42,42,42,42,42,42,43,42,43,42,42,43,0,0,29,30,0,29,29,30,0,30,0,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,46,32,47,48,49,50,51,0,0,52,52,53,53,0,54,54,0,0,55,55,56,0,0,0,57,58,59,0,0,0,0,60,61,62,60,63,0,0,0,0,0,0,64,65,66,67,68,69,70,0,0,0,70,0,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,0,0,0,34,0,34,34,34,0,34],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,0,0,0,[[1,1,1],1],[[1,1],1],[[1,1],1],0,[[2,3],4],[[5,3],4],[[5,3],4],[[]],[[]],[[6,7],8],0,0,[[]],[[]],0,0,0,0,0,0,0,0,[[],9],[[],8],[[],8],[[],8],[[],8],[[],10],[[],10],0,0,0,0,[[]],[[]],[[]],[[]],0,0,0,0,[[]],[11,[[12,[11]]]],[13,12],[14,12],[15,12],[16,12],[17,12],[18,12],[19,12],[20,12],[21,12],[22,12],[23,12],[7,12],[24,12],[25,12],[26,12],[[],[[12,[14]]]],[[],[[12,[15]]]],[[],[[12,[16]]]],[[],[[12,[17]]]],[[],[[12,[18]]]],[[],[[12,[19]]]],[[],[[12,[20]]]],[[],[[12,[21]]]],[[],[[12,[22]]]],[[],[[12,[23]]]],[[],[[12,[7]]]],[[],[[12,[24]]]],[[],[[12,[25]]]],[[],[[12,[26]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],27],[[],27],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[18],[18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[],28],[[],28],[[],29],[[]],[[]],[[]],[[],30],[[]],0,[[],7],[[],7],[[]],[[]],[[],7],[[],7],[7],[[]],[7],[7],[7],[7],[[]],[[]],[[]],[[],7],[[],7],[7],[7],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],12],[[],12],[[],12],[[],12],[[],12],[7,12],[7,12],[[],12],0,0,[[],12],[[],12],[[]],[[]],0,0,[[]],0,0,0,[[]],[[]],0,0,0,[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[]],[[]],[[]],[7],[7],[[]],0,0,[[[0,[31,29,32]],26],[[12,[[0,[31,29,32]]]]]],[[[0,[31,29,[33,[[0,[31,29,[33,[[0,[31,29,[33,[[0,[31,29,[33,[[0,[31,29,33]]]]]]]]]]]]]]]]]],26],[[0,[31,29,[33,[[0,[31,29,[33,[[0,[31,29,[33,[[0,[31,29,[33,[[0,[31,29,33]]]]]]]]]]]]]]]]]]]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],28],[[],28],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[34,34],[[]],[[34,34],34],[[]],[[],28],[[],28],[34,34],[[]]],"p":[[8,"PartialOrd"],[4,"FloatErrorKind"],[3,"Formatter"],[6,"Result"],[3,"ParseFloatError"],[15,"str"],[15,"u32"],[4,"Result"],[3,"String"],[3,"TypeId"],[8,"NumCast"],[4,"Option"],[8,"ToPrimitive"],[15,"f32"],[15,"f64"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"isize"],[15,"u128"],[15,"u16"],[15,"u64"],[15,"u8"],[15,"usize"],[4,"FpCategory"],[15,"bool"],[8,"One"],[8,"Zero"],[8,"Clone"],[8,"CheckedMul"],[8,"Mul"],[8,"Signed"],[8,"Num"],[8,"Bounded"],[8,"UpperBounded"],[8,"LowerBounded"],[8,"AsPrimitive"],[8,"FromPrimitive"],[8,"FloatConst"],[8,"Float"],[8,"FloatCore"],[8,"PrimInt"],[8,"CheckedAdd"],[8,"CheckedDiv"],[8,"CheckedNeg"],[8,"CheckedRem"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"CheckedSub"],[8,"CheckedEuclid"],[8,"Euclid"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"OverflowingAdd"],[8,"OverflowingMul"],[8,"OverflowingSub"],[8,"Saturating"],[8,"SaturatingAdd"],[8,"SaturatingMul"],[8,"SaturatingSub"],[8,"WrappingAdd"],[8,"WrappingMul"],[8,"WrappingNeg"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"WrappingSub"],[8,"Pow"],[8,"Real"]]},\
"once_cell":{"doc":"Overview","t":"AADDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["race","unsync","OnceBool","OnceBox","OnceNonZeroUsize","OnceRef","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","default","default","default","drop","fmt","fmt","fmt","fmt","from","from","from","from","get","get","get","get","get_or_init","get_or_init","get_or_init","get_or_init","get_or_try_init","get_or_try_init","get_or_try_init","get_or_try_init","into","into","into","into","new","new","new","new","set","set","set","set","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Lazy","OnceCell","borrow","borrow","borrow_mut","borrow_mut","clone","clone_from","clone_into","default","default","deref","deref_mut","eq","fmt","fmt","force","force_mut","from","from","from","from","get","get","get_mut","get_mut","get_or_init","get_or_try_init","into","into","into_inner","into_value","new","new","set","take","to_owned","try_from","try_from","try_insert","try_into","try_into","type_id","type_id","with_value"],"q":["once_cell","","once_cell::race","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","once_cell::unsync","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Thread-safe, non-blocking, “first one wins” flavor of …","Single-threaded version of <code>OnceCell</code>.","A thread-safe cell which can be written to only once.","A thread-safe cell which can be written to only once.","A thread-safe cell which can be written to only once.","A thread-safe cell which can be written to only once.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets a reference to the underlying value.","Gets a reference to the underlying value.","Gets the underlying value.","Gets the underlying value.","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new empty cell.","Creates a new empty cell.","Creates a new empty cell.","Creates a new empty cell.","Sets the contents of this cell to <code>value</code>.","Sets the contents of this cell to <code>value</code>.","Sets the contents of this cell to <code>value</code>.","Sets the contents of this cell to <code>value</code>.","","","","","","","","","","","","","A value which is initialized on the first access.","A cell which can be written to only once. It is not thread …","","","","","","","","","Creates a new lazy value using <code>Default</code> as the initializing …","","","","","","Forces the evaluation of this lazy value and returns a …","Forces the evaluation of this lazy value and returns a …","Returns the argument unchanged.","","","Returns the argument unchanged.","Gets a reference to the underlying value.","Gets the reference to the result of this lazy value if it …","Gets a mutable reference to the underlying value.","Gets the mutable reference to the result of this lazy …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes the <code>OnceCell</code>, returning the wrapped value.","Consumes this <code>Lazy</code> returning the stored value.","Creates a new empty cell.","Creates a new lazy value with the given initializing …","Sets the contents of this cell to <code>value</code>.","Takes the value out of this <code>OnceCell</code>, moving it back to an …","","","","Like <code>set</code>, but also returns a reference to the final cell …","","","","","Creates a new initialized cell."],"i":[0,0,0,0,0,0,1,2,3,4,1,2,3,4,1,2,3,4,2,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,0,0,14,16,14,16,14,14,14,14,16,16,16,14,14,16,16,16,14,14,14,16,14,16,14,16,14,14,14,16,14,16,14,16,14,14,14,14,16,14,14,16,14,16,14],"f":[0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[[],2],[[],3],[[],4],[2],[[1,5],6],[[2,5],6],[[3,5],6],[[4,5],6],[[]],[[]],[[]],[[]],[1,7],[2,7],[3,[[7,[8]]]],[4,[[7,[9]]]],[1],[2],[3,8],[4,9],[1,10],[2,10],[3,[[10,[8]]]],[4,[[10,[9]]]],[[]],[[]],[[]],[[]],[[],1],[[],2],[[],3],[[],4],[1,10],[[2,11],[[10,[11]]]],[[3,8],10],[[4,9],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],12],[[],12],[[],12],[[],12],0,0,[[]],[[]],[[]],[[]],[[[14,[13]]],[[14,[13]]]],[[[14,[13]],[14,[13]]]],[[]],[[],14],[[],[[16,[15]]]],[[[16,[17]]]],[[[16,[17]]]],[[[14,[18]],[14,[18]]],9],[[[14,[19]],5],6],[[[16,[19]],5],6],[16],[16],[[]],[[],14],[20],[[]],[14,7],[16,7],[14,7],[16,7],[14],[14,10],[[]],[[]],[14,7],[16,10],[[],14],[[],16],[14,10],[14,7],[[]],[[],10],[[],10],[14,10],[[],10],[[],10],[[],12],[[],12],[[],14]],"p":[[3,"OnceRef"],[3,"OnceBox"],[3,"OnceNonZeroUsize"],[3,"OnceBool"],[3,"Formatter"],[6,"Result"],[4,"Option"],[3,"NonZeroUsize"],[15,"bool"],[4,"Result"],[3,"Box"],[3,"TypeId"],[8,"Clone"],[3,"OnceCell"],[8,"Default"],[3,"Lazy"],[8,"FnOnce"],[8,"PartialEq"],[8,"Debug"],[15,"never"]]},\
"pathfinder_geometry":{"doc":"Basic geometry and linear algebra primitives, optimized …","t":"AAAAAAAAFDDDLLLLLLLLLLLLLLLLLLLLLLLLMLMLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLMLMLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLMDDLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLMDLLLLLLLLLLLLLLLRFFFFIDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFLLLLLLLLLLLLLL","n":["angle","line_segment","rect","transform2d","transform3d","unit_vector","util","vector","angle_from_degrees","LineSegment2F","LineSegmentU4","LineSegmentU8","add","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","default","default","eq","fmt","fmt","fmt","from","from","from","from","from","from_x","from_x","from_y","from_y","intersection_t","into","into","into","is_zero_length","max_x","max_y","midpoint","min_x","min_y","mul","mul","mul_assign","new","offset","orient","reversed","sample","set_from","set_from_x","set_from_y","set_to","set_to_x","set_to_y","solve_t_for_x","solve_t_for_y","solve_x_for_y","solve_y_for_x","split","split_at_x","split_at_y","square_length","sub","to","to","to_owned","to_owned","to_owned","to_x","to_x","to_y","to_y","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upper_point","vector","y_winding","RectF","RectI","add","add","borrow","borrow","borrow_mut","borrow_mut","center","clone","clone","clone_into","clone_into","contains_point","contains_point","contains_rect","contract","contract","default","default","dilate","eq","eq","fmt","fmt","from","from","from_points","from_points","height","height","intersection","intersection","intersects","intersects","into","into","is_empty","lower_left","lower_left","lower_right","lower_right","max_x","max_x","max_y","max_y","min_x","min_x","min_y","min_y","mul","mul","new","new","origin","origin","origin_x","origin_x","origin_y","origin_y","round","round_out","scale","scale_xy","set_origin_x","set_origin_y","size","size","sub","sub","to_f32","to_i32","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","union_point","union_rect","upper_right","upper_right","width","width","Matrix2x2F","Transform2F","add","adjugate","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","det","entrywise_mul","eq","eq","extract_scale","extract_scale","fmt","fmt","from","from","from_rotation","from_rotation","from_rotation_vector","from_rotation_vector","from_scale","from_scale","from_scale_rotation_translation","from_translation","into","into","inverse","inverse","is_identity","m11","m11","m12","m12","m21","m21","m22","m22","m31","m32","matrix","mul","mul","mul","mul","mul","mul","mul_assign","neg","rotate","rotation","row_major","row_major","scale","scale","scale_factor","sub","to_3d","to_owned","to_owned","translate","translation","try_from","try_from","try_into","try_into","type_id","type_id","vector","Perspective","Transform4F","approx_eq","as_ptr","borrow","borrow","borrow_mut","borrow_mut","c0","c1","c2","c3","clone","clone","clone_into","clone_into","default","eq","fmt","fmt","from","from","from_ortho","from_perspective","from_rotation","from_rotation_quaternion","from_scale","from_submatrices","from_translation","from_uniform_scale","into","into","inverse","lerp","looking_at","lower_left","lower_right","mul","mul","mul","mul","mul","mul_assign","new","rotate","row_major","scale","to_columns","to_owned","to_owned","transform","translate","try_from","try_from","try_into","try_into","type_id","type_id","uniform_scale","upper_left","upper_right","window_size","UnitVector","borrow","borrow_mut","clone","clone_into","fmt","from","from_angle","halve_angle","into","rev_rotate_by","rotate_by","to_owned","try_from","try_into","type_id","EPSILON","alignup_i32","approx_eq","clamp","lerp","IntoVector2F","Vector2F","Vector2I","Vector3F","Vector4F","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","approx_eq","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ceil","clamp","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cross","default","default","default","default","det","div","div","dot","eq","eq","eq","eq","floor","fmt","fmt","fmt","fmt","from","from","from","from","hash","into","into","into","into","into_vector_2f","into_vector_2f","is_zero","is_zero","length","length","lerp","lerp","max","max","min","min","mul","mul","mul","mul","mul","mul_assign","mul_assign","neg","neg","neg","neg","new","new","new","new","normalize","normalize","projection_coefficient","round","scale","scale","set_w","set_x","set_x","set_x","set_y","set_y","set_y","set_z","splat","splat","splat","splat","square_length","square_length","sub","sub","sub","sub","sub","sub","sub_assign","to_2d","to_2d","to_3d","to_3d","to_4d","to_4d","to_f32","to_i32","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vec2f","vec2i","w","x","x","x","x","y","y","y","y","yx","z","z","zero","zero"],"q":["pathfinder_geometry","","","","","","","","pathfinder_geometry::angle","pathfinder_geometry::line_segment","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pathfinder_geometry::rect","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pathfinder_geometry::transform2d","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pathfinder_geometry::transform3d","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pathfinder_geometry::unit_vector","","","","","","","","","","","","","","","","pathfinder_geometry::util","","","","","pathfinder_geometry::vector","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Angle utilities.","Line segment types, optimized with SIMD.","2D axis-aligned rectangles, optimized with SIMD.","2D affine transforms.","3D transforms that can be applied to paths.","A utility module that allows unit vectors to be treated …","Various utilities.","A SIMD-optimized point type.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","NB: The origin is inclusive, while the lower right point …","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Rounds all points to the nearest integer.","","","","","","","","","","","","","","","","","","","","","","","","","","A 2x2 matrix, optimized with SIMD, in column-major order.","An affine transform, optimized with SIMD.","","","","","","","","","","","","","","","","","Extracts the scale from this matrix.","Extracts the scale from this matrix.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the rotation angle of this matrix.","","","","","Returns the scale factor of this matrix.","","","","","","Returns the translation part of this matrix.","","","","","","","","","An transform, optimized with SIMD.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Just like <code>glOrtho()</code>.","Just like <code>gluPerspective()</code>.","","Creates a rotation matrix from the given quaternion.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Linearly interpolate between transforms","Just like <code>gluLookAt()</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Half angle formula.","Calls <code>U::from(self)</code>.","Angle subtraction formula.","Angle addition formula.","","","","","","Divides <code>a</code> by <code>b</code>, rounding up.","Approximate equality.","Clamping.","Linear interpolation.","Either a scalar or a <code>Vector2F</code>.","2D points with 32-bit floating point coordinates.","2D points with 32-bit signed integer coordinates.","3D points.","3D homogeneous points.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Checks to see whether this <em>homogeneous</em> coordinate equals …","Treats this point as a vector and calculates its length.","","","","","","","","","","","","","","","","","","NB: This does not negate w, because that is rarely what …","","","","","Treats this point as a vector and normalizes it.","","Returns the coefficient when the given vector <code>a</code> is …","Rounds both coordinates to the nearest integer.","","","","","","","","","","","","","","","Treats this point as a vector and calculates its squared …","","","","","","","","","Truncates this vector to 2D.","","","Performs perspective division to convert this vector to 3D.","","Converts this vector to an equivalent 3D homogeneous one …","","","","","","","","","","","","","","","","","","","A convenience alias for <code>Vector2F::new()</code>.","A convenience alias for <code>Vector2I::new()</code>.","","","","","","","","","","Swaps y and x.","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,2,2,4,5,2,4,5,2,4,5,2,4,5,2,4,5,2,2,4,5,2,2,4,5,4,2,5,2,5,2,2,4,5,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,4,2,4,5,2,5,2,5,2,4,5,2,4,5,2,4,5,2,2,2,0,0,13,13,13,14,13,14,13,13,14,13,14,13,14,13,13,14,13,14,13,13,14,13,14,13,14,13,14,13,14,13,14,13,14,13,14,13,13,14,13,14,13,14,13,14,13,14,13,14,13,13,13,14,13,14,13,14,13,14,13,13,14,14,13,13,13,14,13,13,14,13,13,14,13,14,13,14,13,14,13,13,13,14,13,14,0,0,16,16,16,17,16,17,16,17,16,17,16,17,16,16,16,17,16,17,16,17,16,17,16,17,16,17,16,17,17,17,16,17,16,17,17,16,17,16,17,16,17,16,17,17,17,17,16,16,17,17,17,17,17,16,17,17,16,17,16,17,17,16,17,16,17,17,17,16,17,16,17,16,17,17,0,0,19,19,19,20,19,20,19,19,19,19,19,20,19,20,19,19,19,20,19,20,19,19,19,19,19,19,19,19,19,20,19,19,19,19,19,19,19,20,20,20,19,20,19,19,19,19,19,20,20,19,19,20,19,20,19,20,19,19,19,20,0,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,0,0,0,0,0,0,0,0,0,0,3,3,15,15,23,22,3,15,23,22,22,3,15,23,22,3,15,23,22,3,3,3,15,23,22,3,15,23,22,23,3,15,23,22,3,3,3,3,3,15,23,22,3,3,15,23,22,3,15,23,22,15,3,15,23,22,24,3,3,22,3,23,3,22,3,15,3,15,3,3,15,15,22,3,3,3,15,23,22,3,15,23,22,3,23,3,3,23,22,22,3,15,22,3,15,22,22,3,15,23,22,3,23,3,3,15,15,23,22,3,23,22,3,22,3,23,15,3,3,15,23,22,3,15,23,22,3,15,23,22,3,15,23,22,0,0,22,3,15,23,22,3,15,23,22,3,23,22,3,15],"f":[0,0,0,0,0,0,0,0,[1,1],0,0,0,[[2,3],2],[[]],[[]],[[]],[[]],[[]],[[]],[2,2],[4,4],[5,5],[[]],[[]],[[]],[[],2],[[],4],[[],5],[[2,2],6],[[2,7],8],[[4,7],8],[[5,7],8],[[]],[2,3],[[]],[[]],0,[2,1],0,[2,1],0,[[2,2],[[9,[1]]]],[[]],[[]],[[]],[2,6],[2,1],[2,1],[2,3],[2,1],[2,1],[[2,1],2],[[2,3],2],[[2,3]],[[3,3],2],[[2,1],2],[[2,10],2],[2,2],[[2,1],3],[[2,3]],[[2,1]],[[2,1]],[[2,3]],[[2,1]],[[2,1]],[[2,1],1],[[2,1],1],[[2,1],1],[[2,1],1],[[2,1]],[[2,1]],[[2,1]],[2,1],[[2,3],2],[2,3],0,[[]],[[]],[[]],[2,1],0,[2,1],0,[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[2,3],[2,3],[2,10],0,0,[[13,3],13],[[13,1],13],[[]],[[]],[[]],[[]],[13,3],[13,13],[14,14],[[]],[[]],[[13,3],6],[[14,15],6],[[13,13],6],[13,13],[[14,15],14],[[],13],[[],14],[13,13],[[13,13],6],[[14,14],6],[[13,7],8],[[14,7],8],[[]],[[]],[[3,3],13],[[15,15],14],[13,1],[14,10],[[13,13],[[9,[13]]]],[[14,14],[[9,[14]]]],[[13,13],6],[[14,14],6],[[]],[[]],[13,6],[13,3],[14,15],[13,3],[14,15],[13,1],[14,10],[13,1],[14,10],[13,1],[14,10],[13,1],[14,10],[[13,1],13],[[13,3],13],[[3,3],13],[[15,15],14],[13,3],[14,15],[13,1],[14,10],[13,1],[14,10],[13,13],[13,13],[[14,10],14],[[14,15],14],[[13,1]],[[13,1]],[13,3],[14,15],[[13,3],13],[[13,1],13],[14,13],[13,14],[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[13,3],13],[[13,13],13],[13,3],[14,15],[13,1],[14,10],0,0,[[16,16],16],[16,16],[[]],[[]],[[]],[[]],[16,16],[17,17],[[]],[[]],[[],16],[[],17],[16,1],[[16,16],16],[[16,16],6],[[17,17],6],[16,3],[17,3],[[16,7],8],[[17,7],8],[[]],[[]],[1,16],[1,17],[18,16],[18,17],[[],16],[[],17],[[1,3],17],[3,17],[[]],[[]],[16,16],[17,17],[17,6],[16,1],[17,1],[16,1],[17,1],[16,1],[17,1],[16,1],[17,1],[17,1],[17,1],0,[[16,16],16],[[16,3],3],[[17,17],17],[[17,13],13],[[17,2],2],[[17,3],3],[[17,17]],[16,16],[[17,1],17],[17,1],[[1,1,1,1],16],[[1,1,1,1,1,1],17],[[16,1],16],[17,17],[17,1],[[16,16],16],[17,19],[[]],[[]],[[17,3],17],[17,3],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],0,0,0,[[19,19,1],6],[19,1],[[]],[[]],[[]],[[]],0,0,0,0,[19,19],[20,20],[[]],[[]],[[],19],[[19,19],6],[[19,7],8],[[20,7],8],[[]],[[]],[[1,1,1,1,1,1],19],[[1,1,1,1],19],[[1,1,1],19],[21,19],[22,19],[[16,16,16,16],19],[22,19],[1,19],[[]],[[]],[19,19],[[19,1,19],19],[[23,23,23],19],[19,16],[19,16],[[19,19],19],[[19,22],22],[[20,3],3],[[20,13],13],[[20,19],20],[[19,19]],[[19,15],20],[[19,1,1,1],19],[[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],19],[[19,22],19],[19],[[]],[[]],0,[[19,22],19],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[19,1],19],[19,16],[19,16],0,0,[[]],[[]],[18,18],[[]],[[18,7],8],[[]],[1,18],[18,18],[[]],[[18,18],18],[[18,18],18],[[]],[[],11],[[],11],[[],12],0,[[10,10],10],[[1,1],6],[[1,1,1],1],[[1,1,1],1],0,0,0,0,0,[[3,3],3],[[3,1],3],[[15,15],15],[[15,10],15],[[23,23],23],[[22,22],22],[[3,3]],[[15,15]],[[23,23]],[[22,22]],[[22,22,1],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[[3,3,3],3],[3,3],[15,15],[23,23],[22,22],[[]],[[]],[[]],[[]],[[23,23],23],[[],3],[[],15],[[],23],[[],22],[[3,3],1],[[3,1],3],[[3,3],3],[[3,3],1],[[3,3],6],[[15,15],6],[[23,23],6],[[22,22],6],[3,3],[[3,7],8],[[15,7],8],[[23,7],8],[[22,7],8],[[]],[[]],[[]],[[]],[15],[[]],[[]],[[]],[[]],[[],3],[3,3],[3,6],[22,6],[3,1],[23,1],[[3,3,1],3],[[22,22,1],22],[[3,3],3],[[15,15],15],[[3,3],3],[[15,15],15],[[3,1],3],[[3,3],3],[[15,15],15],[[15,10],15],[[22,22],22],[[3,3]],[[3,1]],[3,3],[15,15],[23,23],[22,22],[[1,1],3],[[10,10],15],[[1,1,1],23],[[1,1,1,1],22],[3,3],[23,23],[[3,3],1],[3,3],[[23,1],23],[[22,1],22],[[22,1]],[[3,1]],[[15,10]],[[22,1]],[[3,1]],[[15,10]],[[22,1]],[[22,1]],[1,3],[10,15],[1,23],[1,22],[3,1],[23,1],[[3,1],3],[[3,3],3],[[15,15],15],[[15,10],15],[[23,23],23],[[22,22],22],[[3,3]],[23,3],[22,3],[3,23],[22,23],[3,22],[23,22],[15,3],[3,15],[[]],[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[[1,1],3],[[10,10],15],[22,1],[3,1],[15,10],[23,1],[22,1],[3,1],[15,10],[23,1],[22,1],[3,3],[23,1],[22,1],[[],3],[[],15]],"p":[[15,"f32"],[3,"LineSegment2F"],[3,"Vector2F"],[3,"LineSegmentU4"],[3,"LineSegmentU8"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Option"],[15,"i32"],[4,"Result"],[3,"TypeId"],[3,"RectF"],[3,"RectI"],[3,"Vector2I"],[3,"Matrix2x2F"],[3,"Transform2F"],[3,"UnitVector"],[3,"Transform4F"],[3,"Perspective"],[3,"F32x4"],[3,"Vector4F"],[3,"Vector3F"],[8,"IntoVector2F"]]},\
"pathfinder_simd":{"doc":"A minimal SIMD abstraction, usable outside of Pathfinder.","tn":["default","scalar","F32x2","F32x4","I32x2","I32x4","U32x2","U32x4","abs","abs","add","add","add","add","add_assign","add_assign","add_assign","add_assign","all_false","all_false","all_true","all_true","approx_eq","approx_eq","approx_recip","approx_recip","bitand","bitand","bitor","bitor","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ceil","ceil","clamp","clamp","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","concat_wz_yx","concat_xy_xy","concat_xy_xy","concat_xy_xy","concat_xy_xy","concat_xy_zw","concat_zw_zw","concat_zw_zw","default","default","default","default","div","div","eq","eq","eq","eq","eq","floor","floor","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_slice","from_slice","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","into","into","into","into","into","into","max","max","max","max","min","min","min","min","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","neg","neg","new","new","new","new","new","new","not","packed_eq","packed_eq","packed_eq","packed_eq","packed_gt","packed_gt","packed_gt","packed_gt","packed_le","packed_le","packed_le","packed_le","packed_lt","packed_lt","packed_lt","packed_lt","set_w","set_x","set_x","set_y","set_y","set_z","shr","shr","splat","splat","splat","splat","splat","sqrt","sqrt","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","to_f32x2","to_f32x4","to_f32x4","to_i32x2","to_i32x2","to_i32x4","to_i32x4","to_i32x4","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_u32x4","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","w","w","wwww","wwww","wwwx","wwwx","wwwy","wwwy","wwwz","wwwz","wwxw","wwxw","wwxx","wwxx","wwxy","wwxy","wwxz","wwxz","wwyw","wwyw","wwyx","wwyx","wwyy","wwyy","wwyz","wwyz","wwzw","wwzw","wwzx","wwzx","wwzy","wwzy","wwzz","wwzz","wxww","wxww","wxwx","wxwx","wxwy","wxwy","wxwz","wxwz","wxxw","wxxw","wxxx","wxxx","wxxy","wxxy","wxxz","wxxz","wxyw","wxyw","wxyx","wxyx","wxyy","wxyy","wxyz","wxyz","wxzw","wxzw","wxzx","wxzx","wxzy","wxzy","wxzz","wxzz","wyww","wyww","wywx","wywx","wywy","wywy","wywz","wywz","wyxw","wyxw","wyxx","wyxx","wyxy","wyxy","wyxz","wyxz","wyyw","wyyw","wyyx","wyyx","wyyy","wyyy","wyyz","wyyz","wyzw","wyzw","wyzx","wyzx","wyzy","wyzy","wyzz","wyzz","wzww","wzww","wzwx","wzwx","wzwy","wzwy","wzwz","wzwz","wzxw","wzxw","wzxx","wzxx","wzxy","wzxy","wzxz","wzxz","wzyw","wzyw","wzyx","wzyx","wzyy","wzyy","wzyz","wzyz","wzzw","wzzw","wzzx","wzzx","wzzy","wzzy","wzzz","wzzz","x","x","x","x","xw","xw","xwww","xwww","xwwx","xwwx","xwwy","xwwy","xwwz","xwwz","xwxw","xwxw","xwxx","xwxx","xwxy","xwxy","xwxz","xwxz","xwyw","xwyw","xwyx","xwyx","xwyy","xwyy","xwyz","xwyz","xwzw","xwzw","xwzx","xwzx","xwzy","xwzy","xwzz","xwzz","xxww","xxww","xxwx","xxwx","xxwy","xxwy","xxwz","xxwz","xxxw","xxxw","xxxx","xxxx","xxxy","xxxy","xxxz","xxxz","xxyw","xxyw","xxyx","xxyx","xxyy","xxyy","xxyz","xxyz","xxzw","xxzw","xxzx","xxzx","xxzy","xxzy","xxzz","xxzz","xy","xy","xyww","xyww","xywx","xywx","xywy","xywy","xywz","xywz","xyxw","xyxw","xyxx","xyxx","xyxy","xyxy","xyxz","xyxz","xyyw","xyyw","xyyx","xyyx","xyyy","xyyy","xyyz","xyyz","xyzw","xyzw","xyzx","xyzx","xyzy","xyzy","xyzz","xyzz","xzww","xzww","xzwx","xzwx","xzwy","xzwy","xzwz","xzwz","xzxw","xzxw","xzxx","xzxx","xzxy","xzxy","xzxz","xzxz","xzyw","xzyw","xzyx","xzyx","xzyy","xzyy","xzyz","xzyz","xzzw","xzzw","xzzx","xzzx","xzzy","xzzy","xzzz","xzzz","y","y","y","y","ywww","ywww","ywwx","ywwx","ywwy","ywwy","ywwz","ywwz","ywxw","ywxw","ywxx","ywxx","ywxy","ywxy","ywxz","ywxz","ywyw","ywyw","ywyx","ywyx","ywyy","ywyy","ywyz","ywyz","ywzw","ywzw","ywzx","ywzx","ywzy","ywzy","ywzz","ywzz","yx","yx","yxww","yxww","yxwx","yxwx","yxwy","yxwy","yxwz","yxwz","yxxw","yxxw","yxxx","yxxx","yxxy","yxxy","yxxz","yxxz","yxyw","yxyw","yxyx","yxyx","yxyy","yxyy","yxyz","yxyz","yxzw","yxzw","yxzx","yxzx","yxzy","yxzy","yxzz","yxzz","yyww","yyww","yywx","yywx","yywy","yywy","yywz","yywz","yyxw","yyxw","yyxx","yyxx","yyxy","yyxy","yyxz","yyxz","yyyw","yyyw","yyyx","yyyx","yyyy","yyyy","yyyz","yyyz","yyzw","yyzw","yyzx","yyzx","yyzy","yyzy","yyzz","yyzz","yzww","yzww","yzwx","yzwx","yzwy","yzwy","yzwz","yzwz","yzxw","yzxw","yzxx","yzxx","yzxy","yzxy","yzxz","yzxz","yzyw","yzyw","yzyx","yzyx","yzyy","yzyy","yzyz","yzyz","yzzw","yzzw","yzzx","yzzx","yzzy","yzzy","yzzz","yzzz","z","z","zw","zw","zwww","zwww","zwwx","zwwx","zwwy","zwwy","zwwz","zwwz","zwxw","zwxw","zwxx","zwxx","zwxy","zwxy","zwxz","zwxz","zwyw","zwyw","zwyx","zwyx","zwyy","zwyy","zwyz","zwyz","zwzw","zwzw","zwzx","zwzx","zwzy","zwzy","zwzz","zwzz","zxww","zxww","zxwx","zxwx","zxwy","zxwy","zxwz","zxwz","zxxw","zxxw","zxxx","zxxx","zxxy","zxxy","zxxz","zxxz","zxyw","zxyw","zxyx","zxyx","zxyy","zxyy","zxyz","zxyz","zxzw","zxzw","zxzx","zxzx","zxzy","zxzy","zxzz","zxzz","zy","zy","zyww","zyww","zywx","zywx","zywy","zywy","zywz","zywz","zyxw","zyxw","zyxx","zyxx","zyxy","zyxy","zyxz","zyxz","zyyw","zyyw","zyyx","zyyx","zyyy","zyyy","zyyz","zyyz","zyzw","zyzw","zyzx","zyzx","zyzy","zyzy","zyzz","zyzz","zzww","zzww","zzwx","zzwx","zzwy","zzwy","zzwz","zzwz","zzxw","zzxw","zzxx","zzxx","zzxy","zzxy","zzxz","zzxz","zzyw","zzyw","zzyx","zzyx","zzyy","zzyy","zzyz","zzyz","zzzw","zzzw","zzzx","zzzx","zzzy","zzzy","zzzz","zzzz"],"q":["pathfinder_simd","","pathfinder_simd::scalard":["","","","","","","","","","","","","","","","","","","Returns true if both booleans in this vector are false.","Returns true if all four booleans in this vector are false.","Returns true if both booleans in this vector are true.","Returns true if all four booleans in this vector are true.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts these packed integers to floats.","","Converts these packed integers to floats.","Converts these packed floats to integers via rounding.","","Converts these packed floats to integers via rounding.","Converts these packed floats to integers via rounding.","Converts these packed unsigned integers to signed integers.","","","","","","","Converts these packed signed integers to unsigned integers.","","","","","","","","","","","","","","","","","","","","","Constructs a new vector from the fourth, fourth, fourth, …","Constructs a new vector from the fourth, fourth, fourth, …","Constructs a new vector from the fourth, fourth, fourth, …","Constructs a new vector from the fourth, fourth, fourth, …","Constructs a new vector from the fourth, fourth, fourth, …","Constructs a new vector from the fourth, fourth, fourth, …","Constructs a new vector from the fourth, fourth, fourth, …","Constructs a new vector from the fourth, fourth, fourth, …","Constructs a new vector from the fourth, fourth, first, …","Constructs a new vector from the fourth, fourth, first, …","Constructs a new vector from the fourth, fourth, first, …","Constructs a new vector from the fourth, fourth, first, …","Constructs a new vector from the fourth, fourth, first, …","Constructs a new vector from the fourth, fourth, first, …","Constructs a new vector from the fourth, fourth, first, …","Constructs a new vector from the fourth, fourth, first, …","Constructs a new vector from the fourth, fourth, second, …","Constructs a new vector from the fourth, fourth, second, …","Constructs a new vector from the fourth, fourth, second, …","Constructs a new vector from the fourth, fourth, second, …","Constructs a new vector from the fourth, fourth, second, …","Constructs a new vector from the fourth, fourth, second, …","Constructs a new vector from the fourth, fourth, second, …","Constructs a new vector from the fourth, fourth, second, …","Constructs a new vector from the fourth, fourth, third, …","Constructs a new vector from the fourth, fourth, third, …","Constructs a new vector from the fourth, fourth, third, …","Constructs a new vector from the fourth, fourth, third, …","Constructs a new vector from the fourth, fourth, third, …","Constructs a new vector from the fourth, fourth, third, …","Constructs a new vector from the fourth, fourth, third, …","Constructs a new vector from the fourth, fourth, third, …","Constructs a new vector from the fourth, first, fourth, …","Constructs a new vector from the fourth, first, fourth, …","Constructs a new vector from the fourth, first, fourth, …","Constructs a new vector from the fourth, first, fourth, …","Constructs a new vector from the fourth, first, fourth, …","Constructs a new vector from the fourth, first, fourth, …","Constructs a new vector from the fourth, first, fourth, …","Constructs a new vector from the fourth, first, fourth, …","Constructs a new vector from the fourth, first, first, and …","Constructs a new vector from the fourth, first, first, and …","Constructs a new vector from the fourth, first, first, and …","Constructs a new vector from the fourth, first, first, and …","Constructs a new vector from the fourth, first, first, and …","Constructs a new vector from the fourth, first, first, and …","Constructs a new vector from the fourth, first, first, and …","Constructs a new vector from the fourth, first, first, and …","Constructs a new vector from the fourth, first, second, …","Constructs a new vector from the fourth, first, second, …","Constructs a new vector from the fourth, first, second, …","Constructs a new vector from the fourth, first, second, …","Constructs a new vector from the fourth, first, second, …","Constructs a new vector from the fourth, first, second, …","Constructs a new vector from the fourth, first, second, …","Constructs a new vector from the fourth, first, second, …","Constructs a new vector from the fourth, first, third, and …","Constructs a new vector from the fourth, first, third, and …","Constructs a new vector from the fourth, first, third, and …","Constructs a new vector from the fourth, first, third, and …","Constructs a new vector from the fourth, first, third, and …","Constructs a new vector from the fourth, first, third, and …","Constructs a new vector from the fourth, first, third, and …","Constructs a new vector from the fourth, first, third, and …","Constructs a new vector from the fourth, second, fourth, …","Constructs a new vector from the fourth, second, fourth, …","Constructs a new vector from the fourth, second, fourth, …","Constructs a new vector from the fourth, second, fourth, …","Constructs a new vector from the fourth, second, fourth, …","Constructs a new vector from the fourth, second, fourth, …","Constructs a new vector from the fourth, second, fourth, …","Constructs a new vector from the fourth, second, fourth, …","Constructs a new vector from the fourth, second, first, …","Constructs a new vector from the fourth, second, first, …","Constructs a new vector from the fourth, second, first, …","Constructs a new vector from the fourth, second, first, …","Constructs a new vector from the fourth, second, first, …","Constructs a new vector from the fourth, second, first, …","Constructs a new vector from the fourth, second, first, …","Constructs a new vector from the fourth, second, first, …","Constructs a new vector from the fourth, second, second, …","Constructs a new vector from the fourth, second, second, …","Constructs a new vector from the fourth, second, second, …","Constructs a new vector from the fourth, second, second, …","Constructs a new vector from the fourth, second, second, …","Constructs a new vector from the fourth, second, second, …","Constructs a new vector from the fourth, second, second, …","Constructs a new vector from the fourth, second, second, …","Constructs a new vector from the fourth, second, third, …","Constructs a new vector from the fourth, second, third, …","Constructs a new vector from the fourth, second, third, …","Constructs a new vector from the fourth, second, third, …","Constructs a new vector from the fourth, second, third, …","Constructs a new vector from the fourth, second, third, …","Constructs a new vector from the fourth, second, third, …","Constructs a new vector from the fourth, second, third, …","Constructs a new vector from the fourth, third, fourth, …","Constructs a new vector from the fourth, third, fourth, …","Constructs a new vector from the fourth, third, fourth, …","Constructs a new vector from the fourth, third, fourth, …","Constructs a new vector from the fourth, third, fourth, …","Constructs a new vector from the fourth, third, fourth, …","Constructs a new vector from the fourth, third, fourth, …","Constructs a new vector from the fourth, third, fourth, …","Constructs a new vector from the fourth, third, first, and …","Constructs a new vector from the fourth, third, first, and …","Constructs a new vector from the fourth, third, first, and …","Constructs a new vector from the fourth, third, first, and …","Constructs a new vector from the fourth, third, first, and …","Constructs a new vector from the fourth, third, first, and …","Constructs a new vector from the fourth, third, first, and …","Constructs a new vector from the fourth, third, first, and …","Constructs a new vector from the fourth, third, second, …","Constructs a new vector from the fourth, third, second, …","Constructs a new vector from the fourth, third, second, …","Constructs a new vector from the fourth, third, second, …","Constructs a new vector from the fourth, third, second, …","Constructs a new vector from the fourth, third, second, …","Constructs a new vector from the fourth, third, second, …","Constructs a new vector from the fourth, third, second, …","Constructs a new vector from the fourth, third, third, and …","Constructs a new vector from the fourth, third, third, and …","Constructs a new vector from the fourth, third, third, and …","Constructs a new vector from the fourth, third, third, and …","Constructs a new vector from the fourth, third, third, and …","Constructs a new vector from the fourth, third, third, and …","Constructs a new vector from the fourth, third, third, and …","Constructs a new vector from the fourth, third, third, and …","","","","","","","Constructs a new vector from the first, fourth, fourth, …","Constructs a new vector from the first, fourth, fourth, …","Constructs a new vector from the first, fourth, fourth, …","Constructs a new vector from the first, fourth, fourth, …","Constructs a new vector from the first, fourth, fourth, …","Constructs a new vector from the first, fourth, fourth, …","Constructs a new vector from the first, fourth, fourth, …","Constructs a new vector from the first, fourth, fourth, …","Constructs a new vector from the first, fourth, first, and …","Constructs a new vector from the first, fourth, first, and …","Constructs a new vector from the first, fourth, first, and …","Constructs a new vector from the first, fourth, first, and …","Constructs a new vector from the first, fourth, first, and …","Constructs a new vector from the first, fourth, first, and …","Constructs a new vector from the first, fourth, first, and …","Constructs a new vector from the first, fourth, first, and …","Constructs a new vector from the first, fourth, second, …","Constructs a new vector from the first, fourth, second, …","Constructs a new vector from the first, fourth, second, …","Constructs a new vector from the first, fourth, second, …","Constructs a new vector from the first, fourth, second, …","Constructs a new vector from the first, fourth, second, …","Constructs a new vector from the first, fourth, second, …","Constructs a new vector from the first, fourth, second, …","Constructs a new vector from the first, fourth, third, and …","Constructs a new vector from the first, fourth, third, and …","Constructs a new vector from the first, fourth, third, and …","Constructs a new vector from the first, fourth, third, and …","Constructs a new vector from the first, fourth, third, and …","Constructs a new vector from the first, fourth, third, and …","Constructs a new vector from the first, fourth, third, and …","Constructs a new vector from the first, fourth, third, and …","Constructs a new vector from the first, first, fourth, and …","Constructs a new vector from the first, first, fourth, and …","Constructs a new vector from the first, first, fourth, and …","Constructs a new vector from the first, first, fourth, and …","Constructs a new vector from the first, first, fourth, and …","Constructs a new vector from the first, first, fourth, and …","Constructs a new vector from the first, first, fourth, and …","Constructs a new vector from the first, first, fourth, and …","Constructs a new vector from the first, first, first, and …","Constructs a new vector from the first, first, first, and …","Constructs a new vector from the first, first, first, and …","Constructs a new vector from the first, first, first, and …","Constructs a new vector from the first, first, first, and …","Constructs a new vector from the first, first, first, and …","Constructs a new vector from the first, first, first, and …","Constructs a new vector from the first, first, first, and …","Constructs a new vector from the first, first, second, and …","Constructs a new vector from the first, first, second, and …","Constructs a new vector from the first, first, second, and …","Constructs a new vector from the first, first, second, and …","Constructs a new vector from the first, first, second, and …","Constructs a new vector from the first, first, second, and …","Constructs a new vector from the first, first, second, and …","Constructs a new vector from the first, first, second, and …","Constructs a new vector from the first, first, third, and …","Constructs a new vector from the first, first, third, and …","Constructs a new vector from the first, first, third, and …","Constructs a new vector from the first, first, third, and …","Constructs a new vector from the first, first, third, and …","Constructs a new vector from the first, first, third, and …","Constructs a new vector from the first, first, third, and …","Constructs a new vector from the first, first, third, and …","","","Constructs a new vector from the first, second, fourth, …","Constructs a new vector from the first, second, fourth, …","Constructs a new vector from the first, second, fourth, …","Constructs a new vector from the first, second, fourth, …","Constructs a new vector from the first, second, fourth, …","Constructs a new vector from the first, second, fourth, …","Constructs a new vector from the first, second, fourth, …","Constructs a new vector from the first, second, fourth, …","Constructs a new vector from the first, second, first, and …","Constructs a new vector from the first, second, first, and …","Constructs a new vector from the first, second, first, and …","Constructs a new vector from the first, second, first, and …","Constructs a new vector from the first, second, first, and …","Constructs a new vector from the first, second, first, and …","Constructs a new vector from the first, second, first, and …","Constructs a new vector from the first, second, first, and …","Constructs a new vector from the first, second, second, …","Constructs a new vector from the first, second, second, …","Constructs a new vector from the first, second, second, …","Constructs a new vector from the first, second, second, …","Constructs a new vector from the first, second, second, …","Constructs a new vector from the first, second, second, …","Constructs a new vector from the first, second, second, …","Constructs a new vector from the first, second, second, …","Constructs a new vector from the first, second, third, and …","Constructs a new vector from the first, second, third, and …","Constructs a new vector from the first, second, third, and …","Constructs a new vector from the first, second, third, and …","Constructs a new vector from the first, second, third, and …","Constructs a new vector from the first, second, third, and …","Constructs a new vector from the first, second, third, and …","Constructs a new vector from the first, second, third, and …","Constructs a new vector from the first, third, fourth, and …","Constructs a new vector from the first, third, fourth, and …","Constructs a new vector from the first, third, fourth, and …","Constructs a new vector from the first, third, fourth, and …","Constructs a new vector from the first, third, fourth, and …","Constructs a new vector from the first, third, fourth, and …","Constructs a new vector from the first, third, fourth, and …","Constructs a new vector from the first, third, fourth, and …","Constructs a new vector from the first, third, first, and …","Constructs a new vector from the first, third, first, and …","Constructs a new vector from the first, third, first, and …","Constructs a new vector from the first, third, first, and …","Constructs a new vector from the first, third, first, and …","Constructs a new vector from the first, third, first, and …","Constructs a new vector from the first, third, first, and …","Constructs a new vector from the first, third, first, and …","Constructs a new vector from the first, third, second, and …","Constructs a new vector from the first, third, second, and …","Constructs a new vector from the first, third, second, and …","Constructs a new vector from the first, third, second, and …","Constructs a new vector from the first, third, second, and …","Constructs a new vector from the first, third, second, and …","Constructs a new vector from the first, third, second, and …","Constructs a new vector from the first, third, second, and …","Constructs a new vector from the first, third, third, and …","Constructs a new vector from the first, third, third, and …","Constructs a new vector from the first, third, third, and …","Constructs a new vector from the first, third, third, and …","Constructs a new vector from the first, third, third, and …","Constructs a new vector from the first, third, third, and …","Constructs a new vector from the first, third, third, and …","Constructs a new vector from the first, third, third, and …","","","","","Constructs a new vector from the second, fourth, fourth, …","Constructs a new vector from the second, fourth, fourth, …","Constructs a new vector from the second, fourth, fourth, …","Constructs a new vector from the second, fourth, fourth, …","Constructs a new vector from the second, fourth, fourth, …","Constructs a new vector from the second, fourth, fourth, …","Constructs a new vector from the second, fourth, fourth, …","Constructs a new vector from the second, fourth, fourth, …","Constructs a new vector from the second, fourth, first, …","Constructs a new vector from the second, fourth, first, …","Constructs a new vector from the second, fourth, first, …","Constructs a new vector from the second, fourth, first, …","Constructs a new vector from the second, fourth, first, …","Constructs a new vector from the second, fourth, first, …","Constructs a new vector from the second, fourth, first, …","Constructs a new vector from the second, fourth, first, …","Constructs a new vector from the second, fourth, second, …","Constructs a new vector from the second, fourth, second, …","Constructs a new vector from the second, fourth, second, …","Constructs a new vector from the second, fourth, second, …","Constructs a new vector from the second, fourth, second, …","Constructs a new vector from the second, fourth, second, …","Constructs a new vector from the second, fourth, second, …","Constructs a new vector from the second, fourth, second, …","Constructs a new vector from the second, fourth, third, …","Constructs a new vector from the second, fourth, third, …","Constructs a new vector from the second, fourth, third, …","Constructs a new vector from the second, fourth, third, …","Constructs a new vector from the second, fourth, third, …","Constructs a new vector from the second, fourth, third, …","Constructs a new vector from the second, fourth, third, …","Constructs a new vector from the second, fourth, third, …","","","Constructs a new vector from the second, first, fourth, …","Constructs a new vector from the second, first, fourth, …","Constructs a new vector from the second, first, fourth, …","Constructs a new vector from the second, first, fourth, …","Constructs a new vector from the second, first, fourth, …","Constructs a new vector from the second, first, fourth, …","Constructs a new vector from the second, first, fourth, …","Constructs a new vector from the second, first, fourth, …","Constructs a new vector from the second, first, first, and …","Constructs a new vector from the second, first, first, and …","Constructs a new vector from the second, first, first, and …","Constructs a new vector from the second, first, first, and …","Constructs a new vector from the second, first, first, and …","Constructs a new vector from the second, first, first, and …","Constructs a new vector from the second, first, first, and …","Constructs a new vector from the second, first, first, and …","Constructs a new vector from the second, first, second, …","Constructs a new vector from the second, first, second, …","Constructs a new vector from the second, first, second, …","Constructs a new vector from the second, first, second, …","Constructs a new vector from the second, first, second, …","Constructs a new vector from the second, first, second, …","Constructs a new vector from the second, first, second, …","Constructs a new vector from the second, first, second, …","Constructs a new vector from the second, first, third, and …","Constructs a new vector from the second, first, third, and …","Constructs a new vector from the second, first, third, and …","Constructs a new vector from the second, first, third, and …","Constructs a new vector from the second, first, third, and …","Constructs a new vector from the second, first, third, and …","Constructs a new vector from the second, first, third, and …","Constructs a new vector from the second, first, third, and …","Constructs a new vector from the second, second, fourth, …","Constructs a new vector from the second, second, fourth, …","Constructs a new vector from the second, second, fourth, …","Constructs a new vector from the second, second, fourth, …","Constructs a new vector from the second, second, fourth, …","Constructs a new vector from the second, second, fourth, …","Constructs a new vector from the second, second, fourth, …","Constructs a new vector from the second, second, fourth, …","Constructs a new vector from the second, second, first, …","Constructs a new vector from the second, second, first, …","Constructs a new vector from the second, second, first, …","Constructs a new vector from the second, second, first, …","Constructs a new vector from the second, second, first, …","Constructs a new vector from the second, second, first, …","Constructs a new vector from the second, second, first, …","Constructs a new vector from the second, second, first, …","Constructs a new vector from the second, second, second, …","Constructs a new vector from the second, second, second, …","Constructs a new vector from the second, second, second, …","Constructs a new vector from the second, second, second, …","Constructs a new vector from the second, second, second, …","Constructs a new vector from the second, second, second, …","Constructs a new vector from the second, second, second, …","Constructs a new vector from the second, second, second, …","Constructs a new vector from the second, second, third, …","Constructs a new vector from the second, second, third, …","Constructs a new vector from the second, second, third, …","Constructs a new vector from the second, second, third, …","Constructs a new vector from the second, second, third, …","Constructs a new vector from the second, second, third, …","Constructs a new vector from the second, second, third, …","Constructs a new vector from the second, second, third, …","Constructs a new vector from the second, third, fourth, …","Constructs a new vector from the second, third, fourth, …","Constructs a new vector from the second, third, fourth, …","Constructs a new vector from the second, third, fourth, …","Constructs a new vector from the second, third, fourth, …","Constructs a new vector from the second, third, fourth, …","Constructs a new vector from the second, third, fourth, …","Constructs a new vector from the second, third, fourth, …","Constructs a new vector from the second, third, first, and …","Constructs a new vector from the second, third, first, and …","Constructs a new vector from the second, third, first, and …","Constructs a new vector from the second, third, first, and …","Constructs a new vector from the second, third, first, and …","Constructs a new vector from the second, third, first, and …","Constructs a new vector from the second, third, first, and …","Constructs a new vector from the second, third, first, and …","Constructs a new vector from the second, third, second, …","Constructs a new vector from the second, third, second, …","Constructs a new vector from the second, third, second, …","Constructs a new vector from the second, third, second, …","Constructs a new vector from the second, third, second, …","Constructs a new vector from the second, third, second, …","Constructs a new vector from the second, third, second, …","Constructs a new vector from the second, third, second, …","Constructs a new vector from the second, third, third, and …","Constructs a new vector from the second, third, third, and …","Constructs a new vector from the second, third, third, and …","Constructs a new vector from the second, third, third, and …","Constructs a new vector from the second, third, third, and …","Constructs a new vector from the second, third, third, and …","Constructs a new vector from the second, third, third, and …","Constructs a new vector from the second, third, third, and …","","","","","Constructs a new vector from the third, fourth, fourth, …","Constructs a new vector from the third, fourth, fourth, …","Constructs a new vector from the third, fourth, fourth, …","Constructs a new vector from the third, fourth, fourth, …","Constructs a new vector from the third, fourth, fourth, …","Constructs a new vector from the third, fourth, fourth, …","Constructs a new vector from the third, fourth, fourth, …","Constructs a new vector from the third, fourth, fourth, …","Constructs a new vector from the third, fourth, first, and …","Constructs a new vector from the third, fourth, first, and …","Constructs a new vector from the third, fourth, first, and …","Constructs a new vector from the third, fourth, first, and …","Constructs a new vector from the third, fourth, first, and …","Constructs a new vector from the third, fourth, first, and …","Constructs a new vector from the third, fourth, first, and …","Constructs a new vector from the third, fourth, first, and …","Constructs a new vector from the third, fourth, second, …","Constructs a new vector from the third, fourth, second, …","Constructs a new vector from the third, fourth, second, …","Constructs a new vector from the third, fourth, second, …","Constructs a new vector from the third, fourth, second, …","Constructs a new vector from the third, fourth, second, …","Constructs a new vector from the third, fourth, second, …","Constructs a new vector from the third, fourth, second, …","Constructs a new vector from the third, fourth, third, and …","Constructs a new vector from the third, fourth, third, and …","Constructs a new vector from the third, fourth, third, and …","Constructs a new vector from the third, fourth, third, and …","Constructs a new vector from the third, fourth, third, and …","Constructs a new vector from the third, fourth, third, and …","Constructs a new vector from the third, fourth, third, and …","Constructs a new vector from the third, fourth, third, and …","Constructs a new vector from the third, first, fourth, and …","Constructs a new vector from the third, first, fourth, and …","Constructs a new vector from the third, first, fourth, and …","Constructs a new vector from the third, first, fourth, and …","Constructs a new vector from the third, first, fourth, and …","Constructs a new vector from the third, first, fourth, and …","Constructs a new vector from the third, first, fourth, and …","Constructs a new vector from the third, first, fourth, and …","Constructs a new vector from the third, first, first, and …","Constructs a new vector from the third, first, first, and …","Constructs a new vector from the third, first, first, and …","Constructs a new vector from the third, first, first, and …","Constructs a new vector from the third, first, first, and …","Constructs a new vector from the third, first, first, and …","Constructs a new vector from the third, first, first, and …","Constructs a new vector from the third, first, first, and …","Constructs a new vector from the third, first, second, and …","Constructs a new vector from the third, first, second, and …","Constructs a new vector from the third, first, second, and …","Constructs a new vector from the third, first, second, and …","Constructs a new vector from the third, first, second, and …","Constructs a new vector from the third, first, second, and …","Constructs a new vector from the third, first, second, and …","Constructs a new vector from the third, first, second, and …","Constructs a new vector from the third, first, third, and …","Constructs a new vector from the third, first, third, and …","Constructs a new vector from the third, first, third, and …","Constructs a new vector from the third, first, third, and …","Constructs a new vector from the third, first, third, and …","Constructs a new vector from the third, first, third, and …","Constructs a new vector from the third, first, third, and …","Constructs a new vector from the third, first, third, and …","","","Constructs a new vector from the third, second, fourth, …","Constructs a new vector from the third, second, fourth, …","Constructs a new vector from the third, second, fourth, …","Constructs a new vector from the third, second, fourth, …","Constructs a new vector from the third, second, fourth, …","Constructs a new vector from the third, second, fourth, …","Constructs a new vector from the third, second, fourth, …","Constructs a new vector from the third, second, fourth, …","Constructs a new vector from the third, second, first, and …","Constructs a new vector from the third, second, first, and …","Constructs a new vector from the third, second, first, and …","Constructs a new vector from the third, second, first, and …","Constructs a new vector from the third, second, first, and …","Constructs a new vector from the third, second, first, and …","Constructs a new vector from the third, second, first, and …","Constructs a new vector from the third, second, first, and …","Constructs a new vector from the third, second, second, …","Constructs a new vector from the third, second, second, …","Constructs a new vector from the third, second, second, …","Constructs a new vector from the third, second, second, …","Constructs a new vector from the third, second, second, …","Constructs a new vector from the third, second, second, …","Constructs a new vector from the third, second, second, …","Constructs a new vector from the third, second, second, …","Constructs a new vector from the third, second, third, and …","Constructs a new vector from the third, second, third, and …","Constructs a new vector from the third, second, third, and …","Constructs a new vector from the third, second, third, and …","Constructs a new vector from the third, second, third, and …","Constructs a new vector from the third, second, third, and …","Constructs a new vector from the third, second, third, and …","Constructs a new vector from the third, second, third, and …","Constructs a new vector from the third, third, fourth, and …","Constructs a new vector from the third, third, fourth, and …","Constructs a new vector from the third, third, fourth, and …","Constructs a new vector from the third, third, fourth, and …","Constructs a new vector from the third, third, fourth, and …","Constructs a new vector from the third, third, fourth, and …","Constructs a new vector from the third, third, fourth, and …","Constructs a new vector from the third, third, fourth, and …","Constructs a new vector from the third, third, first, and …","Constructs a new vector from the third, third, first, and …","Constructs a new vector from the third, third, first, and …","Constructs a new vector from the third, third, first, and …","Constructs a new vector from the third, third, first, and …","Constructs a new vector from the third, third, first, and …","Constructs a new vector from the third, third, first, and …","Constructs a new vector from the third, third, first, and …","Constructs a new vector from the third, third, second, and …","Constructs a new vector from the third, third, second, and …","Constructs a new vector from the third, third, second, and …","Constructs a new vector from the third, third, second, and …","Constructs a new vector from the third, third, second, and …","Constructs a new vector from the third, third, second, and …","Constructs a new vector from the third, third, second, and …","Constructs a new vector from the third, third, second, and …","Constructs a new vector from the third, third, third, and …","Constructs a new vector from the third, third, third, and …","Constructs a new vector from the third, third, third, and …","Constructs a new vector from the third, third, third, and …","Constructs a new vector from the third, third, third, and …","Constructs a new vector from the third, third, third, and …","Constructs a new vector from the third, third, third, and …","Constructs a new vector from the third, third, third, and …"],"i":[0,0,0,0,0,0,0,0,1,2,1,2,3,4,1,2,3,4,5,7,5,7,1,2,1,2,4,5,4,5,1,2,3,4,5,7,1,2,3,4,5,7,1,2,1,2,1,2,3,4,5,7,1,2,3,4,5,7,2,1,2,3,4,2,2,4,1,2,3,4,1,2,1,2,3,4,7,1,2,1,2,3,4,7,1,2,3,4,5,7,1,2,1,2,3,4,5,7,1,2,3,4,1,2,3,4,5,7,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,5,7,5,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,2,1,2,1,2,2,4,7,1,2,3,4,5,1,2,1,2,3,4,1,2,3,4,3,1,4,1,5,1,2,7,1,2,3,4,5,7,4,1,2,3,4,5,7,1,2,3,4,5,7,1,2,3,4,5,7,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,1,2,3,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,1,2,3,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,1,2,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4],"f":[0,0,0,0,0,0,0,0,[1,1],[2,2],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1]],[[2,2]],[[3,3]],[[4,4]],[5,6],[7,6],[5,6],[7,6],[[1,1,8],6],[[2,2,8],6],[1,1],[2,2],[[4,4],4],[[5,5],5],[[4,4],4],[[5,5],5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[[1,1,1],1],[[2,2,2],2],[1,1],[2,2],[3,3],[4,4],[5,5],[7,7],[[]],[[]],[[]],[[]],[[]],[[]],[[2,2],2],[[1,1],2],[[2,2],2],[[3,3],4],[[4,4],4],[[2,2],2],[[2,2],2],[[4,4],4],[[],1],[[],2],[[],3],[[],4],[[1,1],1],[[2,2],2],[[1,1],6],[[2,2],6],[[3,3],6],[[4,4],6],[[7,7],6],[1,1],[2,2],[[1,9],10],[[2,9],[[12,[11]]]],[[3,9],10],[[4,9],10],[[7,9],10],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[[],2],[[1,13],8],[[2,13],8],[[3,13],14],[[4,13],14],[[5,13],15],[[7,13],15],[[1,13],8],[[2,13],8],[[3,13],14],[[4,13],14],[[]],[[]],[[]],[[]],[[]],[[]],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1]],[[2,2]],[[3,3]],[[4,4]],[1,1],[2,2],[3,3],[4,4],[[8,8],1],[[8,8,8,8],2],[[14,14],3],[[14,14,14,14],4],[[15,15],5],[[15,15,15,15],7],[5,5],[[1,1],5],[[2,2],7],[[3,3],5],[[4,4],7],[[1,1],5],[[2,2],7],[[3,3],5],[[4,4],7],[[1,1],5],[[2,2],7],[[3,3],5],[[4,4],7],[[1,1],5],[[2,2],7],[[3,3],5],[[4,4],7],[[2,8]],[[1,8]],[[2,8]],[[1,8]],[[2,8]],[[2,8]],[[4,4],4],[[7,15],7],[8,1],[8,2],[14,3],[14,4],[15,5],[1,1],[2,2],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1]],[[2,2]],[[3,3]],[[4,4]],[3,1],[1,2],[4,2],[1,3],[5,3],[1,4],[2,4],[7,4],[[]],[[]],[[]],[[]],[[]],[[]],[4,7],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[2,8],[4,14],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[1,8],[2,8],[3,14],[4,14],[2,1],[4,3],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,1],[4,3],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[1,8],[2,8],[3,14],[4,14],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[1,1],[2,1],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,8],[4,14],[2,1],[4,3],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,1],[4,3],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4],[2,2],[4,4]],"p":[[3,"F32x2"],[3,"F32x4"],[3,"I32x2"],[3,"I32x4"],[3,"U32x2"],[15,"bool"],[3,"U32x4"],[15,"f32"],[3,"Formatter"],[6,"Result"],[3,"Error"],[4,"Result"],[15,"usize"],[15,"i32"],[15,"u32"],[3,"TypeId"]]},\
"pest":{"doc":"pest. The Elegant Parser","t":"NENNNDDEENNNGIDDNIDNENLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAOLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLKOLLLAALLLLFLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMNDEEENNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLMLMMMDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLENDDDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLENDDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Atomic","Atomicity","BottomToTop","CompoundAtomic","End","Lines","LinesSpan","Lookahead","MatchDir","Negative","NonAtomic","None","ParseResult","Parser","ParserState","Position","Positive","RuleType","Span","Start","Token","TopToBottom","as_str","atomic","atomicity","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","end","end_of_input","end_pos","eq","eq","eq","eq","eq","eq","error","fails_with","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_start","get","hash","hash","hash","into","into","into","into","into","into","into","into","into","into_iter","into_iter","iterators","line_col","line_of","lines","lines_span","lookahead","match_char_by","match_insensitive","match_range","match_string","new","new","new","next","next","optional","parse","parses_to","partial_cmp","pos","position","pratt_parser","prec_climber","repeat","restore_on_err","rule","sequence","set_call_limit","skip","skip_until","span","split","stack_drop","stack_match_peek","stack_match_peek_slice","stack_match_pop","stack_peek","stack_pop","stack_push","start","start_of_input","start_pos","state","tag_node","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","pos","pos","rule","rule","CustomError","Error","ErrorVariant","InputLocation","LineColLocation","ParsingError","Pos","Pos","Span","Span","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","hash","hash","hash","hash","into","into","into","into","line","line_col","location","message","new_from_pos","new_from_span","path","provide","provide","renamed_rules","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","variant","with_path","message","negatives","positives","FlatPairs","Pair","Pairs","Tokens","as_node_tag","as_rule","as_span","as_str","as_str","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","concat","eq","eq","find_first_tagged","find_tagged","flatten","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","hash","hash","into","into","into","into","into_inner","into_iter","into_iter","into_iter","into_span","len","len","len","line_col","next","next","next","next_back","next_back","next_back","peek","single","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_string","to_string","tokens","tokens","tokens","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Assoc","Left","Op","PrattParser","PrattParserMap","Right","bitor","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","default","eq","fmt","from","from","from","from","infix","into","into","into","into","map_infix","map_postfix","map_prefix","map_primary","new","op","parse","postfix","prefix","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Assoc","Left","Operator","PrecClimber","Right","bitor","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","climb","clone","clone_into","eq","fmt","fmt","fmt","from","from","from","into","into","into","new","new","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["pestpest::Token","","","","pest::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pest::error::ErrorVariant","","","pest::iterators","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pest::pratt_parser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pest::prec_climber","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["prevents implicit whitespace: inside an atomic rule, the …","The current atomicity of a <code>ParserState</code>.","from the bottom to the top of the stack","The same as atomic, but inner tokens are produced as …","The ending <code>Position</code> of a matched <code>Rule</code>","Line iterator for Spans, created by <code>Span::lines()</code>.","Line iterator for Spans, created by <code>Span::lines_span()</code>.","The current lookahead status of a <code>ParserState</code>.","Match direction for the stack. Used in <code>PEEK[a..b]</code>/…","The negative predicate, written as an exclamation mark !, …","implicit whitespace is enabled","No lookahead (i.e. it will consume input).","Type alias to simplify specifying the return value of …","A trait with a single method that parses strings.","The complete state of a <code>Parser</code>.","A cursor position in a <code>&amp;str</code> which provides useful methods …","The positive predicate, written as an ampersand &amp;, …","A trait which parser rules must implement.","A span over a <code>&amp;str</code>. It is created from either two <code>Position</code>s…","The starting <code>Position</code> of a matched <code>Rule</code>","A token generated by a <code>Parser</code>.","from the top to the bottom of the stack","Captures a slice from the <code>&amp;str</code> defined by the <code>Span</code>.","Transformation which stops <code>Token</code>s from being generated …","Returns the current atomicity of the <code>ParserState</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the <code>Span</code>’s end byte position as a <code>usize</code>.","Attempts to match the end of the input. Returns <code>Ok</code> with …","Returns the <code>Span</code>’s end <code>Position</code>.","","","","","","","Types for different kinds of parsing failures.","Testing tool that compares produced errors.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a <code>Position</code> at the start of a <code>&amp;str</code>.","Attempts to create a new span based on a sub-range.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Types and iterators for parser output.","Returns the line and column number of this <code>Position</code>.","Returns the entire line of the input that contains this …","Iterates over all lines (partially) covered by this span. …","Iterates over all lines (partially) covered by this span. …","Starts a lookahead transformation provided by <code>f</code> from the …","Attempts to match a single character based on a filter …","Attempts to case-insensitively match the given string. …","Attempts to match a single character from the given range. …","Attempts to match the given string. Returns <code>Ok</code> with the …","Allocates a fresh <code>ParserState</code> object to the heap and …","Attempts to create a new <code>Position</code> at the given position. …","Attempts to create a new span. Will return <code>None</code> if …","","","Optionally applies the transformation provided by <code>f</code> from …","Parses a <code>&amp;str</code> starting from <code>rule</code>.","Testing tool that compares produced tokens.","","Returns the byte position of this <code>Position</code> as a <code>usize</code>.","Returns a reference to the current <code>Position</code> of the …","Constructs useful in prefix, postfix, and infix operator …","Constructs useful in infix operator parsing with the …","Repeatedly applies the transformation provided by <code>f</code> from …","Restores the original state of the <code>ParserState</code> when <code>f</code> …","Wrapper needed to generate tokens. This will associate the …","Starts a sequence of transformations provided by <code>f</code> from …","Sets the maximum call limit for the parser state to …","Attempts to skip <code>n</code> characters forward. Returns <code>Ok</code> with the …","Attempts to skip forward until one of the given strings is …","Creates a <code>Span</code> from two <code>Position</code>s.","Splits the <code>Span</code> into a pair of <code>Position</code>s.","Drops the top of the stack. Returns <code>Ok(Box&lt;ParserState&gt;)</code> …","Matches the full state of the stack.","Matches part of the state of the stack.","Matches the full state of the stack. This method will …","Peeks the top of the stack and attempts to match the …","Pops the top of the stack and attempts to match the …","Evaluates the result of closure <code>f</code> and pushes the span of …","Returns the <code>Span</code>’s start byte position as a <code>usize</code>.","Attempts to match the start of the input. Returns <code>Ok</code> with …","Returns the <code>Span</code>’s start <code>Position</code>.","Creates a <code>ParserState</code> from a <code>&amp;str</code>, supplying it to a …","Tag current node","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","starting position","ending position","matched rule","matched rule","Custom error with a message","Parse-related error type.","Different kinds of parsing errors.","Where an <code>Error</code> has occurred.","Line/column where an <code>Error</code> has occurred.","Generated parsing error with expected and unexpected <code>Rule</code>s","<code>Error</code> was created by <code>Error::new_from_pos</code>","Line/column pair if <code>Error</code> was created by …","<code>Error</code> was created by <code>Error::new_from_span</code>","Line/column pairs if <code>Error</code> was created by …","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the line that the error is on.","Line/column within the input string","Location within the input string","Returns the error message for <code>ErrorVariant</code>","Creates <code>Error</code> from <code>ErrorVariant</code> and <code>Position</code>.","Creates <code>Error</code> from <code>ErrorVariant</code> and <code>Span</code>.","Returns the path set using <code>Error::with_path()</code>.","","","Renames all <code>Rule</code>s if this is a <code>ParsingError</code>. It does …","","","","","","","","","","","","","","","","","","","Variant of the error","Returns <code>Error</code> variant with <code>path</code> which is shown when …","Short explanation","Negative attempts","Positive attempts","An iterator over <code>Pair</code>s. It is created by <code>Pairs::flatten</code>.","A matching pair of <code>Token</code>s and everything between them.","An iterator over <code>Pair</code>s. It is created by <code>pest::state</code> and …","An iterator over <code>Token</code>s. It is created by <code>Pair::tokens</code> and …","Get current node tag","Returns the <code>Rule</code> of the <code>Pair</code>.","Returns the <code>Span</code> defined by the <code>Pair</code>, <strong>without</strong> consuming it.","Captures a slice from the <code>&amp;str</code> defined by the token <code>Pair</code>.","Captures a slice from the <code>&amp;str</code> defined by the starting …","","","","","","","","","","","","","","","","","Captures inner token <code>Pair</code>s and concatenates resulting <code>&amp;str</code>…","","","Finds the first pair that has its node or branch tagged …","Returns the iterator over pairs that have their node or …","Flattens the <code>Pairs</code>.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the inner <code>Pairs</code> between the <code>Pair</code>, consuming it.","","","","Returns the <code>Span</code> defined by the <code>Pair</code>, consuming it.","","","","Returns the <code>line</code>, <code>col</code> of this pair start.","","","","","","","Peek at the first inner <code>Pair</code> without changing the position …","Create a new <code>Pairs</code> iterator containing just the single <code>Pair</code>…","","","","","","","","","","Returns the <code>Tokens</code> for these pairs.","Returns the <code>Tokens</code> for the <code>Pair</code>.","Returns the <code>Tokens</code> for the <code>Pairs</code>.","","","","","","","","","","","","","Associativity of an infix binary operator, used by …","Left operator associativity. Evaluate expressions from …","An operator that corresponds to a rule.","Struct containing operators and precedences, which can …","Product of calling <code>map_primary</code> on <code>PrattParser</code>, defines how …","Right operator associativity. Evaluate expressions from …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Defines <code>rule</code> as an infix binary operator with …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Maps infix operators with a closure <code>infix</code>.","Maps postfix operators with closure <code>postfix</code>.","Maps prefix operators with closure <code>prefix</code>.","Maps primary expressions with a closure <code>primary</code>.","Instantiate a new <code>PrattParser</code>.","Add <code>op</code> to <code>PrattParser</code>.","The last method to call on the provided pairs to execute …","Defines <code>rule</code> as a postfix unary operator.","Defines <code>rule</code> as a prefix unary operator.","","","","","","","","","","","","","","Associativity of an <code>Operator</code>.","Left <code>Operator</code> associativity","Infix operator used in <code>PrecClimber</code>.","List of operators and precedences, which can perform …","Right <code>Operator</code> associativity","","","","","","","","Performs the precedence climbing algorithm on the <code>pairs</code> in …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new <code>Operator</code> from a <code>Rule</code> and <code>Assoc</code>.","Creates a new <code>PrecClimber</code> from the <code>Operator</code>s contained in …","","","","","","","","","",""],"i":[6,0,9,6,12,0,0,0,0,8,6,8,0,0,0,0,8,0,0,12,0,9,1,4,4,24,23,8,6,9,4,10,1,12,24,23,8,6,9,4,10,1,12,8,6,9,10,1,12,8,6,9,10,1,12,10,1,4,1,8,6,9,10,1,12,0,0,8,6,9,4,10,1,12,24,23,8,6,9,4,10,1,12,10,1,10,1,12,24,23,8,6,9,4,10,1,12,24,23,0,10,10,1,1,4,4,4,4,4,4,10,1,24,23,4,53,0,10,10,4,0,0,4,4,4,4,0,4,4,10,1,4,4,4,4,4,4,4,1,4,1,0,4,8,6,9,10,1,12,24,23,8,6,9,4,10,1,12,24,23,8,6,9,4,10,1,12,24,23,8,6,9,4,10,1,12,54,55,54,55,34,0,0,0,0,34,35,36,35,36,28,34,35,36,28,34,35,36,28,34,35,36,28,34,35,36,28,34,35,36,28,28,34,34,35,36,28,34,35,36,28,34,35,36,28,34,35,36,28,28,28,34,28,28,28,28,34,28,28,34,35,36,28,34,28,34,35,36,28,34,35,36,28,34,35,36,28,28,56,57,57,0,0,0,0,39,39,39,39,27,40,39,27,41,40,39,27,41,40,39,27,41,40,39,27,41,27,39,27,27,27,27,40,39,39,27,27,41,40,39,27,41,39,27,40,39,27,41,39,40,27,41,39,40,27,41,39,40,27,41,40,27,41,27,27,40,27,41,40,39,27,41,39,27,40,39,27,40,39,27,41,40,39,27,41,40,39,27,41,0,45,0,0,0,45,44,44,46,47,45,44,46,47,45,45,45,46,45,45,44,46,47,45,44,44,46,47,45,47,47,47,46,46,46,47,44,44,45,44,46,47,45,44,46,47,45,44,46,47,45,0,51,0,0,51,49,51,49,50,51,49,50,50,51,51,51,51,49,50,51,49,50,51,49,50,49,50,51,51,49,50,51,49,50,51,49,50],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[[[5,[[4,[3]]]],6],[[7,[[5,[[4,[3]]]]]]]],[[[4,[3]]],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[8,8],[6,6],[9,9],[10,10],[1,1],[[[12,[11]]],[[12,[11]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[10,10],13],[1,14],[[[5,[[4,[3]]]]],[[7,[[5,[[4,[3]]]]]]]],[1,10],[[8,8],15],[[6,6],15],[[9,9],15],[[10,10],15],[[1,1],15],[[[12,[16]],12],15],0,0,[[8,17],18],[[6,17],18],[[9,17],18],[[[4,[[0,[19,3]]]],17],18],[[10,17],18],[[1,17],18],[[[12,[19]],17],18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2,10],[[1,[20,[14]]],[[21,[1]]]],[10],[1],[[[12,[22]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[10],[10,2],[1,23],[1,24],[[[5,[[4,[3]]]],15],[[7,[[5,[[4,[3]]]]]]]],[[[5,[[4,[3]]]]],[[7,[[5,[[4,[3]]]]]]]],[[[5,[[4,[3]]]],2],[[7,[[5,[[4,[3]]]]]]]],[[[5,[[4,[3]]]],[26,[25]]],[[7,[[5,[[4,[3]]]]]]]],[[[5,[[4,[3]]]],2],[[7,[[5,[[4,[3]]]]]]]],[2,[[5,[[4,[3]]]]]],[[2,14],[[21,[10]]]],[[2,14,14],[[21,[1]]]],[24,21],[23,21],[[[5,[[4,[3]]]]],[[7,[[5,[[4,[3]]]]]]]],[2,[[29,[27,28]]]],0,[[10,10],[[21,[13]]]],[10,14],[[[4,[3]]],10],0,0,[[[5,[[4,[3]]]]],[[7,[[5,[[4,[3]]]]]]]],[[[5,[[4,[3]]]]],[[7,[[5,[[4,[3]]]]]]]],[[[5,[[4,[3]]]],3],[[7,[[5,[[4,[3]]]]]]]],[[[5,[[4,[3]]]]],[[7,[[5,[[4,[3]]]]]]]],[[[21,[30]]]],[[[5,[[4,[3]]]],14],[[7,[[5,[[4,[3]]]]]]]],[[[5,[[4,[3]]]]],[[7,[[5,[[4,[3]]]]]]]],[[10,10],1],[1],[[[5,[[4,[3]]]]],[[7,[[5,[[4,[3]]]]]]]],[[[5,[[4,[3]]]]],[[7,[[5,[[4,[3]]]]]]]],[[[5,[[4,[3]]]],31,[21,[31]],9],[[7,[[5,[[4,[3]]]]]]]],[[[5,[[4,[3]]]]],[[7,[[5,[[4,[3]]]]]]]],[[[5,[[4,[3]]]]],[[7,[[5,[[4,[3]]]]]]]],[[[5,[[4,[3]]]]],[[7,[[5,[[4,[3]]]]]]]],[[[5,[[4,[3]]]]],[[7,[[5,[[4,[3]]]]]]]],[1,14],[[[5,[[4,[3]]]]],[[7,[[5,[[4,[3]]]]]]]],[1,10],[2,[[29,[[27,[3]],[28,[3]]]]]],[[[5,[[4,[3]]]],[32,[2]]],[[7,[[5,[[4,[3]]]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[28,[11]]],[[28,[11]]]],[[[34,[11]]],[[34,[11]]]],[35,35],[36,36],[[]],[[]],[[]],[[]],[[[28,[16]],28],15],[[[34,[16]],34],15],[[35,35],15],[[36,36],15],[[[28,[3]],17],18],[[[28,[19]],17],18],[[[34,[19]],17],18],[[[34,[3]],17],18],[[35,17],18],[[36,17],18],[[]],[[]],[[]],[[]],[[[28,[22]]]],[[[34,[22]]]],[35],[36],[[]],[[]],[[]],[[]],[[[28,[3]]],2],0,0,[[[34,[3]]],[[32,[2]]]],[[[34,[3]],10],[[28,[3]]]],[[[34,[3]],1],[[28,[3]]]],[[[28,[3]]],[[21,[2]]]],[37],[37],[[[28,[3]]],[[28,[3]]]],[[]],[[]],[[]],[[]],[[],38],[[],38],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],33],[[],33],[[],33],[[],33],0,[[[28,[3]],2],[[28,[3]]]],0,0,0,0,0,0,0,[[[39,[3]]],[[21,[2]]]],[[[39,[3]]],3],[[[39,[3]]],1],[[[39,[3]]],2],[[[27,[3]]],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[40,[11]]],[[40,[11]]]],[[[39,[11]]],[[39,[11]]]],[[[27,[11]]],[[27,[11]]]],[[[41,[11]]],[[41,[11]]]],[[]],[[]],[[]],[[]],[[[27,[3]]],38],[[[39,[16]],39],15],[[[27,[16]],27],15],[[[27,[3]],2],[[21,[[39,[3]]]]]],[[[27,[3]],2],[[43,[[40,[3]],42]]]],[[[27,[3]]],[[40,[3]]]],[[[40,[3]],17],18],[[[39,[3]],17],18],[[[39,[3]],17],18],[[[27,[3]],17],18],[[[27,[3]],17],18],[[[41,[3]],17],18],[[]],[[]],[[]],[[]],[[[39,[22]]]],[[[27,[22]]]],[[]],[[]],[[]],[[]],[[[39,[3]]],[[27,[3]]]],[[]],[[]],[[]],[[[39,[3]]],1],[[[40,[3]]],14],[[[27,[3]]],14],[[[41,[3]]],14],[[[39,[3]]]],[[[40,[3]]],21],[[[27,[3]]],21],[[[41,[3]]],21],[[[40,[3]]],21],[[[27,[3]]],21],[[[41,[3]]],21],[[[27,[3]]],[[21,[[39,[3]]]]]],[[[39,[3]]],[[27,[3]]]],[[[40,[3]]]],[[[27,[3]]]],[[[41,[3]]]],[[]],[[]],[[]],[[]],[[],38],[[],38],[[[40,[3]]],[[41,[3]]]],[[[39,[3]]],[[41,[3]]]],[[[27,[3]]],[[41,[3]]]],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],33],[[],33],[[],33],[[],33],0,0,0,0,0,0,[[[44,[3]],[44,[3]]],[[44,[3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[45,45],[[]],[[],[[46,[3]]]],[[45,45],15],[[45,17],18],[[]],[[]],[[]],[[]],[[3,45],[[44,[3]]]],[[]],[[]],[[]],[[]],[47,47],[47,47],[47,47],[[[46,[3]]],[[47,[3]]]],[[],[[46,[3]]]],[[[46,[3]],[44,[3]]],[[46,[3]]]],[[47,48]],[3,[[44,[3]]]],[3,[[44,[3]]]],[[]],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],33],[[],33],[[],33],[[],33],0,0,0,0,0,[[[49,[3]],[49,[3]]],[[49,[3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[50,[3]]]],[51,51],[[]],[[51,51],15],[[51,17],18],[[[49,[[0,[19,3]]]],17],18],[[[50,[[0,[19,11]]]],17],18],[[]],[[]],[[]],[[]],[[]],[[]],[[3,51],[[49,[3]]]],[[[52,[[49,[3]]]]],[[50,[3]]]],[[]],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],33],[[],33],[[],33]],"p":[[3,"Span"],[15,"str"],[8,"RuleType"],[3,"ParserState"],[3,"Box"],[4,"Atomicity"],[6,"ParseResult"],[4,"Lookahead"],[4,"MatchDir"],[3,"Position"],[8,"Clone"],[4,"Token"],[4,"Ordering"],[15,"usize"],[15,"bool"],[8,"PartialEq"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[8,"RangeBounds"],[4,"Option"],[8,"Hash"],[3,"Lines"],[3,"LinesSpan"],[15,"char"],[3,"Range"],[3,"Pairs"],[3,"Error"],[4,"Result"],[3,"NonZeroUsize"],[15,"i32"],[4,"Cow"],[3,"TypeId"],[4,"ErrorVariant"],[4,"InputLocation"],[4,"LineColLocation"],[3,"Demand"],[3,"String"],[3,"Pair"],[3,"FlatPairs"],[3,"Tokens"],[8,"FnMut"],[3,"Filter"],[3,"Op"],[4,"Assoc"],[3,"PrattParser"],[3,"PrattParserMap"],[8,"Iterator"],[3,"Operator"],[3,"PrecClimber"],[4,"Assoc"],[3,"Vec"],[8,"Parser"],[13,"Start"],[13,"End"],[13,"CustomError"],[13,"ParsingError"]]},\
"pest_derive":{"doc":"pest. The Elegant Parser","t":"Y","n":["Parser"],"q":["pest_derive"],"d":["The main method that’s called by the proc macro (a …"],"i":[0],"f":[0],"p":[]},\
"pest_generator":{"doc":"pest generator","t":"F","n":["derive_parser"],"q":["pest_generator"],"d":["Processes the derive/proc macro input and generates the …"],"i":[0],"f":[[[1,2],1]],"p":[[3,"TokenStream"],[15,"bool"]]},\
"pest_meta":{"doc":"pest meta","t":"AAFAFANNNEDNNNNNNNNNNNNNNNNNDENNNNLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLMLLLLLLLLLLLLLMLLLLNNNNNNEDDNNNNNNNNNLLLLLLLLLLLLMLLLLLLLLLLLLMLLFLLLLLLLLMLLLNNNNNNNNEDDNDNNNNNNNNNENNNNNNNNNLLLLLLLLLLNNLLLLLLLLNNNLNNNFLLLLNMNLLLLLLLLLLNNNLNNNNNNNNLLLLLNNNMNNMNNNNNNNNFLLNNNNNNNFNNNNNNNNNNMMNNNNLLLLLLLLLLLLLLMLLLLLNFFFFFF","n":["ast","optimizer","parse_and_optimize","parser","unwrap_or_report","validator","Atomic","Choice","CompoundAtomic","Expr","ExprTopDownIterator","Ident","Insens","NegPred","NodeTag","NonAtomic","Normal","Opt","PeekSlice","PosPred","Push","Range","Rep","RepExact","RepMax","RepMin","RepMinMax","RepOnce","Rule","RuleType","Seq","Silent","Skip","Str","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","eq","eq","eq","expr","fmt","fmt","fmt","from","from","from","from","into","into","into","into","into_iter","iter_top_down","map_bottom_up","map_top_down","name","new","next","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","ty","type_id","type_id","type_id","type_id","Choice","Ident","Insens","NegPred","NodeTag","Opt","OptimizedExpr","OptimizedExprTopDownIterator","OptimizedRule","PeekSlice","PosPred","Push","Range","Rep","RestoreOnErr","Seq","Skip","Str","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","expr","fmt","fmt","from","from","from","into","into","into","into_iter","iter_top_down","map_bottom_up","map_top_down","name","new","next","optimize","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","ty","type_id","type_id","type_id","COMMENT","Choice","EOI","Ident","Insens","NegPred","NodeTag","Opt","ParserExpr","ParserNode","ParserRule","PeekSlice","PestParser","PosPred","Push","Range","Rep","RepExact","RepMax","RepMin","RepMinMax","RepOnce","Rule","Seq","Str","WHITESPACE","_push","alpha","alpha_num","assignment_operator","atomic_modifier","block_comment","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","character","choice_operator","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","closing_brace","closing_brack","closing_paren","cmp","code","comma","compound_atomic_modifier","consume_rules","eq","eq","eq","eq","escape","expr","expression","filter_map_top_down","fmt","fmt","fmt","fmt","from","from","from","from","from","grammar_doc","grammar_rule","grammar_rules","hash","hex_digit","identifier","infix_operator","inner_chr","inner_doc","inner_str","insensitive_string","integer","into","into","into","into","into","line_comment","line_doc","modifier","name","negative_predicate_operator","newline","node","node","node_tag","non_atomic_modifier","number","opening_brace","opening_brack","opening_paren","optional_operator","parse","parse","partial_cmp","peek_slice","positive_predicate_operator","postfix_operator","prefix_operator","quote","range","range_operator","rename_meta_rule","repeat_exact","repeat_max","repeat_min","repeat_min_max","repeat_once_operator","repeat_operator","sequence_operator","silent_modifier","single_quote","space","span","span","string","tag_id","term","terminal","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","ty","type_id","type_id","type_id","type_id","type_id","unicode","validate_already_defined","validate_ast","validate_pairs","validate_pest_keywords","validate_rust_keywords","validate_undefined"],"q":["pest_meta","","","","","","pest_meta::ast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pest_meta::optimizer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pest_meta::parser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pest_meta::validator","","","","",""],"d":["Types for the pest’s abstract syntax tree.","Different optimizations for pest’s ASTs.","Parses, validates, processes and optimizes the provided …","Types and helpers for the pest’s own grammar parser.","A helper that will unwrap the result or panic with the …","Helpers for validating pest grammars that could help with …","atomic rule prevent implicit whitespace: inside an atomic …","Matches either of two expressions, e.g. <code>e1 | e2</code>","Compound atomic rules are similar to atomic rules, but …","All possible rule expressions","The top down iterator for an expression.","Matches the rule with the given name, e.g. <code>a</code>","Matches an exact string, case insensitively (ASCII only), …","Negative lookahead; matches if expression doesn’t match, …","Matches an expression and assigns a label to it, e.g. …","Non-atomic rules cancel the effect of atomic rules. (their …","The normal rule type","Optionally matches an expression, e.g. <code>e?</code>","Matches a custom part of the stack, e.g. <code>PEEK[..]</code>","Positive lookahead; matches expression without making …","Matches an expression and pushes it to the stack, e.g. …","Matches one character in the range, e.g. <code>&#39;a&#39;..&#39;z&#39;</code>","Matches an expression zero or more times, e.g. <code>e*</code>","Matches an expression an exact number of times, e.g. <code>e{n}</code>","Matches an expression at most a number of times, e.g. <code>e{,n}</code>","Matches an expression at least a number of times, e.g. …","Matches an expression a number of times within a range, …","Matches an expression one or more times, e.g. <code>e+</code>","A grammar rule","All possible rule types","Matches a sequence of two expressions, e.g. <code>e1 ~ e2</code>","Silent rules are just like normal rules — when run, they …","Continues to match expressions until one of the strings in …","Matches an exact string, e.g. <code>&quot;a&quot;</code>","","","","","","","","","","","","","","","","","","The rule’s expression","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns the iterator that steps the expression from top to …","Applies <code>f</code> to the expression and all its children (bottom …","Applies <code>f</code> to the expression and all its children (top to …","The name of the rule","Constructs a top-down iterator from the expression.","","","","","","","","","","","","","The rule’s type (silent, atomic, …)","","","","","Matches either of two expressions, e.g. <code>e1 | e2</code>","Matches the rule with the given name, e.g. <code>a</code>","Matches an exact string, case insensitively (ASCII only), …","Negative lookahead; matches if expression doesn’t match, …","Matches an expression and assigns a label to it, e.g. …","Optionally matches an expression, e.g. <code>e?</code>","The optimized version of the pest AST’s <code>Expr</code>.","A top-down iterator over an <code>OptimizedExpr</code>.","The optimized version of the pest AST’s <code>Rule</code>.","Matches a custom part of the stack, e.g. <code>PEEK[..]</code>","Positive lookahead; matches expression without making …","Matches an expression and pushes it to the stack, e.g. …","Matches one character in the range, e.g. <code>&#39;a&#39;..&#39;z&#39;</code>","Matches an expression zero or more times, e.g. <code>e*</code>","Restores an expression’s checkpoint","Matches a sequence of two expressions, e.g. <code>e1 ~ e2</code>","Continues to match expressions until one of the strings in …","Matches an exact string, e.g. <code>&quot;a&quot;</code>","","","","","","","","","","","","","The optimized expression of the rule.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns a top-down iterator over the <code>OptimizedExpr</code>.","Applies <code>f</code> to the <code>OptimizedExpr</code> bottom-up.","Applies <code>f</code> to the <code>OptimizedExpr</code> top-down.","The name of the rule.","Creates a new top down iterator from an <code>OptimizedExpr</code>.","","Takes pest’s ASTs and optimizes them","","","","","","","","","The type of the rule.","","","","A grammar comment.","Matches either of two expressions, e.g. <code>e1 | e2</code>","","Matches the rule with the given name, e.g. <code>a</code>","Matches an exact string, case insensitively (ASCII only), …","Negative lookahead; matches if expression doesn’t match, …","Matches an expression and assigns a label to it, e.g. …","Optionally matches an expression, e.g. <code>e?</code>","All possible parser expressions","The pest grammar node","The pest grammar rule","Matches a custom part of the stack, e.g. <code>PEEK[..]</code>","","Positive lookahead; matches expression without making …","Matches an expression and pushes it to the stack, e.g. …","Matches one character in the range, e.g. <code>&#39;a&#39;..&#39;z&#39;</code>","Matches an expression zero or more times, e.g. <code>e*</code>","Matches an expression an exact number of times, e.g. <code>e{n}</code>","Matches an expression at most a number of times, e.g. <code>e{,n}</code>","Matches an expression at least a number of times, e.g. …","Matches an expression a number of times within a range, …","Matches an expression one or more times, e.g. <code>e+</code>","Pest meta-grammar","Matches a sequence of two expressions, e.g. <code>e1 ~ e2</code>","Matches an exact string, e.g. <code>&quot;a&quot;</code>","A whitespace character.","A PUSH expression.","An alpha character.","An alphanumeric character.","Assignment operator.","Atomic rule prefix.","A multi-line comment.","","","","","","","","","","","A single quoted character","A choice operator.","","","","","","","","","Closing brace for a rule.","Closing bracket for PEEK (slice inside).","Closing parenthesis for a branch, PUSH, etc.","","A hexadecimal code.","A comma terminal.","Compound atomic rule prefix.","Converts a parser’s result (<code>Pairs</code>) to an AST","","","","","An escape sequence.","The node’s expression","A rule expression.","will remove nodes that do not match <code>f</code>","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","A top-level comment.","A rule of a grammar.","The top-level rule of a grammar.","","A hexadecimal digit.","An identifier.","Branches or sequences.","An escaped or any character.","A comment content.","A quoted string.","An insensitive string.","An integer number (positive or negative).","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","A single line comment.","A rule comment.","A rule modifier.","The rule’s name","A negative predicate.","A newline character.","The rule’s parser node","A rule node (inside terms).","For assigning labels to nodes.","Non-atomic rule prefix.","A number.","Opening brace for a rule.","Opening bracket for PEEK (slice inside).","Opening parenthesis for a branch, PUSH, etc.","An optional operator.","A helper that will parse using the pest grammar","","","A PEEK expression.","A positive predicate.","Possible modifiers for a rule.","Possible predicates for a rule.","A double quote.","A character range.","A range operator.","A helper function to rename verbose rules for the sake of …","A repeat exact times.","A repeat at most times.","A repeat at least times.","A repeat in a range.","A repeat at least once operator.","A repeat operator.","A sequence operator.","Silent rule prefix.","A single quote.","A space character.","The rule’s span","The node’s span","A string.","A tag label.","A rule term.","A terminal expression.","","","","","","","","","","","","","","","The rule’s type","","","","","","A unicode code.","Validates that the given <code>definitions</code> do not contain any …","Validates the abstract syntax tree for common mistakes:","It checks the parsed grammar for common mistakes:","Validates that the given <code>definitions</code> do not contain any …","Validates that the given <code>definitions</code> do not contain any …","Validates that the given <code>definitions</code> do not contain any …"],"i":[0,0,0,0,0,0,7,8,7,0,0,8,8,8,8,7,7,8,8,8,8,8,8,8,8,8,8,8,0,0,8,7,8,8,12,6,7,8,12,6,7,8,6,7,8,6,7,8,6,7,8,6,6,7,8,12,6,7,8,12,6,7,8,12,8,8,8,6,12,12,6,7,8,12,6,7,8,12,6,7,8,6,12,6,7,8,16,16,16,16,16,16,0,0,0,16,16,16,16,16,16,16,16,16,17,15,16,17,15,16,15,16,15,16,15,16,15,15,16,17,15,16,17,15,16,17,16,16,16,15,17,17,0,15,16,17,15,16,17,15,16,15,17,15,16,2,20,2,20,20,20,20,20,0,0,0,20,0,20,20,20,20,20,20,20,20,20,0,20,20,2,2,2,2,2,2,2,24,2,18,19,20,24,2,18,19,20,2,2,2,18,19,20,2,18,19,20,2,2,2,2,2,2,2,0,2,18,19,20,2,19,2,19,2,18,19,20,24,2,18,19,20,2,2,2,2,2,2,2,2,2,2,2,2,24,2,18,19,20,2,2,2,18,2,2,18,2,2,2,2,2,2,2,2,0,24,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,18,19,2,2,2,2,2,18,19,20,24,2,18,19,20,24,2,18,19,20,18,24,2,18,19,20,2,0,0,0,0,0,0],"f":[0,0,[1,[[5,[[4,[[3,[2]]]]]]]],0,[5],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[6,6],[7,7],[8,8],[[]],[[]],[[]],[[6,6],9],[[7,7],9],[[8,8],9],0,[[6,10],11],[[7,10],11],[[8,10],11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[8,12],[8,8],[8,8],0,[8,12],[12,13],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],0,[[],14],[[],14],[[],14],[[],14],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[15,15],[16,16],[[]],[[]],[[15,15],9],[[16,16],9],0,[[15,10],11],[[16,10],11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[16,17],[16,16],[16,16],0,[16,17],[17,13],[[[4,[6]]],[[4,[15]]]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],0,[[],14],[[],14],[[],14],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[2,2],[18,18],[19,19],[20,20],[[]],[[]],[[]],[[]],0,0,0,[[2,2],21],0,0,0,[[[22,[2]]],[[5,[[4,[6]],[4,[[3,[2]]]]]]]],[[2,2],9],[[18,18],9],[[19,19],9],[[20,20],9],0,0,0,[19,4],[[2,10],11],[[18,10],11],[[19,10],11],[[20,10],11],[[]],[[]],[[]],[[]],[[]],0,0,0,[2],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[2,1],[[5,[[22,[2]],[3,[2]]]]]],[[2,1],[[5,[[22,[2]],[3,[2]]]]]],[[2,2],[[13,[21]]]],0,0,0,0,0,0,0,[2,23],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],0,[[],14],[[],14],[[],14],[[],14],[[],14],0,[4,[[4,[[3,[2]]]]]],[4,[[4,[[3,[2]]]]]],[[[22,[2]]],[[5,[[4,[1]],[4,[[3,[2]]]]]]]],[4,[[4,[[3,[2]]]]]],[4,[[4,[[3,[2]]]]]],[[4,4],[[4,[[3,[2]]]]]]],"p":[[15,"str"],[4,"Rule"],[3,"Error"],[3,"Vec"],[4,"Result"],[3,"Rule"],[4,"RuleType"],[4,"Expr"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"ExprTopDownIterator"],[4,"Option"],[3,"TypeId"],[3,"OptimizedRule"],[4,"OptimizedExpr"],[3,"OptimizedExprTopDownIterator"],[3,"ParserRule"],[3,"ParserNode"],[4,"ParserExpr"],[4,"Ordering"],[3,"Pairs"],[3,"String"],[3,"PestParser"]]},\
"petgraph":{"doc":"<code>petgraph</code> is a graph data structure library.","t":"EEICCNIQCNEAALLLLLLLLLLLLLAAALLLLLLLLAALLLLLKKLLAALLAALLLLLLLLLLLLAACDDDDCDDGDDDGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIDDICIDDDCACACLLLLLLLLLLLLLLLLLLFFLLACALLACACLLLLLLLLLLCCFKLLLLLLFFFCCCCAACFAKCKFLLLLLKLFACFLLLLFALLLLLLLLLLLLLLLKFDFLLLLMFLLLMLLLLFDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLFFFFFFFFDDDLLLLLLLLLLLLFLLLLLLLLLFLLLLLLLLLLLLFFFDCGDDDDCDDGDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIIIINEIDINLKLLLLLLLLKKLLLLLLLLLLLLKKLLLLLLLLLKKMMMMEDNNNNNLLLLLLLLLLLLLLLLLLLLLLLGGDDDDDDDDDDDIIDDDDDDGDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLDDGDDDDDDDIDDGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGDDIDDDGDDIGILLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLKKLLLLKLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKFCCCCCCCCCCCCCCCCCCCCCCDDDDDDCCDCDDGDGDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLQNDNNEINIDEDNIDDDDQQIIQQQQQQIINIIIIIIIIIIIQQQQIIDDDDDQQQQIIQQQNDDDDDDNIIIDQQKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLFMMMKLLLKLKLLLLLLKLLLKLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLLLLLKKLKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLLLKLLLKLLLLLLLLLLLLLLLLLLLLLKLLLKLLKLLLKLLLLLLLLLLKLLLKLKLLLLLLLLLLKLMMMKLKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLKLLLLKKL","n":["Directed","Direction","EdgeType","Graph","Incoming","Incoming","IntoWeightedEdge","NodeId","Outgoing","Outgoing","Undirected","adj","algo","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","csr","data","dot","eq","equivalent","fmt","fmt","fmt","from","from","from","graph","graphmap","hash","index","into","into","into","into_weighted_edge","is_directed","is_directed","is_directed","matrix_graph","operator","opposite","partial_cmp","prelude","stable_graph","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unionfind","visit","DefaultIx","EdgeIndex","EdgeIndices","EdgeReference","EdgeReferences","IndexType","List","Neighbors","NodeIndex","NodeIndices","OutgoingEdgeIndices","OutgoingEdgeReferences","UnweightedList","add_edge","add_edge","add_node","add_node","add_node_from_edges","add_node_with_capacity","adjacency_matrix","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","contains_edge","default","edge_count","edge_count","edge_endpoints","edge_indices","edge_indices_from","edge_references","edge_weight","edge_weight_mut","edges","eq","eq","equivalent","equivalent","find_edge","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_index","hash","id","id","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_adjacent","is_directed","len","len","neighbors","new","next","next","next","next","next","next","next_back","next_back","node_bound","node_count","node_identifiers","node_indices","node_references","node_weight","node_weight_mut","partial_cmp","partial_cmp","reset_map","rfind","rfind","rfold","rfold","size_hint","size_hint","size_hint","size_hint","size_hint","source","target","to_index","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update_edge","visit_map","weight","weight","with_capacity","BoundedMeasure","Cycle","DfsSpace","FloatMeasure","Matching","Measure","MinSpanningTree","NegativeCycle","TarjanScc","all_simple_paths","astar","astar","bellman_ford","bellman_ford","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","condensation","connected_components","default","default","dijkstra","dijkstra","dominators","eq","eq","feedback_arc_set","find_negative_cycle","floyd_warshall","floyd_warshall","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","greedy_feedback_arc_set","greedy_matching","has_path_connecting","infinite","into","into","into","into","into","into_iter","is_bipartite_undirected","is_cyclic_directed","is_cyclic_undirected","is_isomorphic","is_isomorphic_matching","is_isomorphic_subgraph","is_isomorphic_subgraph_matching","isomorphism","k_shortest_path","k_shortest_path","kosaraju_scc","matching","max","maximum_matching","min","min_spanning_tree","new","new","next","node_component_index","node_id","overflowing_add","run","scc","simple_paths","subgraph_isomorphisms_iter","tarjan_scc","to_owned","to_owned","to_owned","to_owned","toposort","tred","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","zero","astar","Paths","bellman_ford","borrow","borrow_mut","clone","clone_into","distances","find_negative_cycle","fmt","from","into","predecessors","to_owned","try_from","try_into","type_id","dijkstra","DominatedByIter","Dominators","DominatorsIter","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","dominators","fmt","fmt","fmt","from","from","from","immediate_dominator","immediately_dominated_by","into","into","into","into_iter","into_iter","next","next","root","simple_fast","size_hint","strict_dominators","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","greedy_feedback_arc_set","floyd_warshall","is_isomorphic","is_isomorphic_matching","is_isomorphic_subgraph","is_isomorphic_subgraph_matching","subgraph_isomorphisms_iter","k_shortest_path","MatchedEdges","MatchedNodes","Matching","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","contains_edge","contains_node","edges","from","from","from","greedy_matching","into","into","into","into_iter","into_iter","is_empty","is_perfect","len","mate","maximum_matching","next","next","nodes","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","all_simple_paths","dag_to_toposorted_adjacency_list","dag_transitive_reduction_closure","Csr","DefaultIx","EdgeIndex","EdgeReference","EdgeReferences","Edges","EdgesNotSorted","IndexType","Neighbors","NodeIdentifiers","NodeIndex","NodeReferences","add_edge","add_node","adjacency_matrix","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear_edges","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","contains_edge","default","edge_count","edge_count","edge_references","edges","edges","edges_slice","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_index","from_sorted_edges","id","index","index_mut","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","is_adjacent","is_directed","neighbors","neighbors_slice","new","next","next","next","next","next","next_back","node_bound","node_count","node_count","node_identifiers","node_references","out_degree","reset_map","size_hint","size_hint","size_hint","size_hint","source","target","to_index","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","visit_map","weight","weight","with_nodes","Build","Create","DataMap","DataMapMut","Edge","Element","ElementIterator","FilterElements","FromElements","Node","add_edge","add_node","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","edge_weight","edge_weight_mut","eq","equivalent","filter_elements","fmt","fmt","from","from","from_elements","into","into","into_iter","next","node_weight","node_weight_mut","size_hint","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update_edge","with_capacity","source","target","weight","weight","Config","Dot","EdgeIndexLabel","EdgeNoLabel","GraphContentOnly","NodeIndexLabel","NodeNoLabel","borrow","borrow","borrow_mut","borrow_mut","eq","equivalent","fmt","fmt","fmt","from","from","into","into","new","to_string","try_from","try_from","try_into","try_into","type_id","type_id","with_attr_getters","with_config","DefaultIx","DiGraph","Edge","EdgeIndex","EdgeIndices","EdgeReference","EdgeReferences","EdgeWeightsMut","Edges","EdgesConnecting","Externals","Frozen","Graph","GraphIndex","IndexType","Neighbors","Node","NodeIndex","NodeIndices","NodeReferences","NodeWeightsMut","UnGraph","WalkNeighbors","add_edge","add_edge","add_node","add_node","adjacency_matrix","adjacency_matrix","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clear_edges","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","contains_edge","default","default","default","deref","detach","edge_bound","edge_bound","edge_count","edge_count","edge_count","edge_endpoints","edge_index","edge_indices","edge_references","edge_references","edge_references","edge_weight","edge_weight","edge_weight","edge_weight_mut","edge_weight_mut","edge_weight_mut","edge_weights","edge_weights_mut","edges","edges","edges","edges_connecting","edges_directed","edges_directed","edges_directed","end","end","eq","eq","eq","equivalent","equivalent","extend_with_edges","externals","filter_map","find_edge","find_edge_undirected","first_edge","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_edges","from_elements","from_index","from_index","from_index","from_index","hash","hash","id","id","index","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_twice_mut","index_twice_mut","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_edge_type","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_nodes_edges","is_adjacent","is_adjacent","is_directed","map","max","max","neighbors","neighbors","neighbors","neighbors_directed","neighbors_directed","neighbors_directed","neighbors_undirected","new","new","new","new","new","new","new_undirected","next","next","next","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_edge","next_edge","next_edge","next_edge","next_node","node_bound","node_bound","node_count","node_count","node_count","node_identifiers","node_identifiers","node_index","node_indices","node_references","node_references","node_weight","node_weight","node_weight","node_weight_mut","node_weight_mut","node_weight_mut","node_weights","node_weights_mut","partial_cmp","partial_cmp","raw_edges","raw_nodes","remove_edge","remove_node","reserve_edges","reserve_exact_edges","reserve_exact_nodes","reserve_nodes","reset_map","reset_map","retain_edges","retain_nodes","reverse","shrink_to_fit","shrink_to_fit_edges","shrink_to_fit_nodes","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","source","source","target","target","to_index","to_index","to_index","to_index","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update_edge","update_edge","visit_map","visit_map","weight","weight","weight","weight","weight","with_capacity","with_capacity","AllEdges","AllEdgesMut","DiGraphMap","Edges","EdgesDirected","GraphMap","Neighbors","NeighborsDirected","NodeIdentifiers","NodeReferences","NodeTrait","Nodes","Ptr","UnGraphMap","add_edge","add_edge","add_node","add_node","adjacency_matrix","all_edges","all_edges_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","contains_edge","contains_node","count","count","default","deref","edge_bound","edge_count","edge_count","edge_references","edge_weight","edge_weight_mut","edges","edges","edges_directed","edges_directed","eq","equivalent","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from_edges","from_elements","from_graph","from_index","from_index","from_iter","hash","index","index_mut","into","into","into","into","into","into","into","into","into","into","into","into_graph","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_adjacent","is_directed","last","last","len","neighbors","neighbors","neighbors_directed","neighbors_directed","new","next","next","next","next","next","next","next","next","next","next_back","next_back","next_back","node_bound","node_count","node_count","node_identifiers","node_references","nodes","nth","nth","partial_cmp","remove_edge","remove_node","reset_map","rfind","rfold","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","to_index","to_index","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update_edge","visit_map","with_capacity","with_capacity","DiMatrix","EdgeReferences","Edges","IndexType","MatrixGraph","Neighbors","NodeIdentifiers","NodeIndex","NodeReferences","NotZero","Nullable","UnMatrix","Zero","add_edge","add_edge","add_node","add_node","adjacency_matrix","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","edge_count","edge_count","edge_references","edge_weight","edge_weight_mut","edges","edges","edges_directed","edges_directed","extend_with_edges","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_edges","from_index","has_edge","index","index","index","index_mut","index_mut","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","is_adjacent","is_directed","is_zero","max","neighbors","neighbors","neighbors_directed","neighbors_directed","new","new","new_undirected","next","next","next","next","next","node_bound","node_count","node_count","node_identifiers","node_index","node_references","node_weight","node_weight_mut","remove_edge","remove_node","reset_map","size_hint","size_hint","size_hint","to_index","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update_edge","update_edge","visit_map","with_capacity","zero","complement","Bfs","Dfs","DfsPostOrder","DiGraph","DiGraphMap","Directed","Direction","EdgeIndex","EdgeRef","Graph","GraphMap","Incoming","NodeIndex","Outgoing","StableDiGraph","StableGraph","StableUnGraph","UnGraph","UnGraphMap","Undirected","DefaultIx","EdgeIndex","EdgeIndices","EdgeReference","EdgeReferences","Edges","EdgesConnecting","Externals","GraphIndex","IndexType","Neighbors","NodeIndex","NodeIndices","NodeReferences","StableDiGraph","StableGraph","StableUnGraph","WalkNeighbors","add_edge","add_edge","add_node","add_node","adjacency_matrix","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clear_edges","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","contains_edge","contains_node","default","detach","edge_bound","edge_count","edge_count","edge_endpoints","edge_index","edge_indices","edge_references","edge_weight","edge_weight","edge_weight_mut","edge_weight_mut","edge_weights","edge_weights_mut","edges","edges","edges_connecting","edges_directed","edges_directed","eq","extend_with_edges","externals","filter_map","find_edge","find_edge_undirected","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_edges","from_elements","from_index","from_index","id","index","index","index_mut","index_mut","index_twice_mut","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_adjacent","is_directed","map","neighbors","neighbors","neighbors_directed","neighbors_directed","neighbors_undirected","new","next","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_edge","next_node","node_bound","node_count","node_count","node_identifiers","node_index","node_indices","node_references","node_weight","node_weight","node_weight_mut","node_weight_mut","node_weights","node_weights_mut","remove_edge","remove_node","reset_map","retain_edges","retain_nodes","reverse","size_hint","size_hint","size_hint","size_hint","size_hint","source","target","to_index","to_index","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update_edge","update_edge","visit_map","weight","weight","with_capacity","with_capacity","UnionFind","borrow","borrow_mut","clone","clone_into","equiv","find","find_mut","fmt","from","into","into_labeling","new","to_owned","try_from","try_into","type_id","union","AdjMatrix","BackEdge","Bfs","Break","Continue","Control","ControlFlow","CrossForwardEdge","Data","Dfs","DfsEvent","DfsPostOrder","Discover","EdgeCount","EdgeFiltered","EdgeFilteredEdges","EdgeFilteredNeighbors","EdgeFilteredNeighborsDirected","EdgeId","EdgeId","EdgeIndexable","EdgeRef","EdgeRef","EdgeReferences","EdgeType","EdgeWeight","Edges","EdgesDirected","FilterEdge","FilterNode","Finish","GetAdjacencyMatrix","GraphBase","GraphProp","GraphRef","IntoEdgeReferences","IntoEdges","IntoEdgesDirected","IntoNeighbors","IntoNeighborsDirected","IntoNodeIdentifiers","IntoNodeReferences","Item","Map","Neighbors","NeighborsDirected","NodeCompactIndexable","NodeCount","NodeFiltered","NodeFilteredEdgeReferences","NodeFilteredEdges","NodeFilteredNeighbors","NodeFilteredNodes","NodeId","NodeId","NodeId","NodeIdentifiers","NodeIndexable","NodeRef","NodeRef","NodeReferences","NodeWeight","Prune","Reversed","ReversedEdgeReference","ReversedEdgeReferences","ReversedEdges","Time","Topo","TreeEdge","VisitMap","Visitable","Walker","WalkerIter","Weight","Weight","adjacency_matrix","adjacency_matrix","as_unreversed","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","break_value","breaking","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","context","continuing","continuing","default","default","default","default","default","default","depth_first_search","discovered","discovered","discovered","edge_bound","edge_bound","edge_bound","edge_bound","edge_count","edge_count","edge_references","edge_references","edge_references","edge_references","edge_weight","edge_weight","edge_weight_mut","edges","edges","edges","edges","edges_directed","edges_directed","edges_directed","edges_directed","empty","empty","eq","equivalent","finished","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_fn","from_fn","from_index","from_index","from_index","from_index","from_index","from_index","from_index","from_index","from_parts","hash","id","id","id","include_edge","include_node","inner_mut","inner_ref","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_unreversed","is_adjacent","is_adjacent","is_directed","is_visited","iter","iter","move_to","move_to","neighbors","neighbors","neighbors","neighbors","neighbors_directed","neighbors_directed","neighbors_directed","neighbors_directed","new","new","new","new","next","next","next","next","next","next","next","next","next","next","next","next","next","next","node_bound","node_bound","node_bound","node_bound","node_count","node_count","node_count","node_identifiers","node_identifiers","node_identifiers","node_identifiers","node_references","node_references","node_references","node_references","node_weight","node_weight","node_weight_mut","partial_cmp","reset","reset","reset","reset_map","reset_map","reset_map","reset_map","should_break","should_break","should_prune","should_prune","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","source","source","stack","stack","stack","target","target","to_index","to_index","to_index","to_index","to_index","to_index","to_index","to_index","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","visit","visit_map","visit_map","visit_map","visit_map","walk_next","walk_next","walk_next","walk_next","walk_next","weight","weight","weight"],"q":["petgraph","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","petgraph::adjpetgraph::algo","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","petgraph::algo::astar","petgraph::algo::bellman_ford","","","","","","","","","","","","","","","","petgraph::algo::dijkstra","petgraph::algo::dominators","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","petgraph::algo::feedback_arc_set","petgraph::algo::floyd_warshall","petgraph::algo::isomorphism","","","","","petgraph::algo::k_shortest_path","petgraph::algo::matching","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","petgraph::algo::simple_paths","petgraph::algo::tred","","petgraph::csr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","petgraph::data","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","petgraph::data::Element","","","","petgraph::dot","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","petgraph::graphpetgraph::graphmappetgraph::matrix_graph","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","petgraph::operator","petgraph::prelude","","","","","","","","","","","","","","","","","","","","petgraph::stable_graphpetgraph::unionfind","","","","","","","","","","","","","","","","","","petgraph::visitd":["Marker type for a directed graph.","Edge direction.","A graph’s edge type determines whether it has directed …","","","An <code>Incoming</code> edge is an inbound edge <em>to</em> the current node.","Convert an element like <code>(i, j)</code> or <code>(i, j, w)</code> into a triple …","","","An <code>Outgoing</code> edge is an outward edge <em>from</em> the current node.","Marker type for an undirected graph.","Simple adjacency list.","Graph algorithms.","","","","","","","","","","","","","","Compressed Sparse Row (CSR) is a sparse adjacency matrix …","Graph traits for associated data and graph construction.","Simple graphviz dot file format output.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","<code>Graph&lt;N, E, Ty, Ix&gt;</code> is a graph datastructure using an …","<code>GraphMap&lt;N, E, Ty&gt;</code> is a graph datastructure where node …","","Return <code>0</code> for <code>Outgoing</code> and <code>1</code> for <code>Incoming</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","<code>MatrixGraph&lt;N, E, Ty, NullN, NullE, Ix&gt;</code> is a graph …","","Return the opposite <code>Direction</code>.","","Commonly used items.","<code>StableGraph</code> keeps indices stable across removals.","","","","","","","","","","","","","<code>UnionFind&lt;K&gt;</code> is a disjoint-set data structure.","Graph traits and graph traversals.","","Adjacency list edge index type, a pair of integers.","","A reference to an edge of the graph.","An iterator over the <code>EdgeReference</code> of all the edges of the …","","An adjacency list with labeled edges.","An iterator over the indices of the neighbors of a node.","Adjacency list node index type, a plain integer.","An iterator over all node indices in the graph.","An Iterator over the indices of the outgoing edges from a …","Iterator over the <code>EdgeReference</code> of the outgoing edges from …","A very simple adjacency list with no node or label weights.","Add an edge from <code>a</code> to <code>b</code> to the graph, with its associated …","Add an edge from <code>a</code> to <code>b</code> to the graph, with its associated …","Adds a new node to the list. This allocates a new <code>Vec</code> and …","Adds a new node to the list. This allocates a new <code>Vec</code> and …","Adds a new node to the list by giving its list of …","Adds a new node to the list. This allocates a new <code>Vec</code> and …","","","","","","","","","","","","","","","","","","","","Removes all nodes and edges from the list.","","","","","","","","","","","","","","","","","","","","","Lookups whether there is an edge from <code>a</code> to <code>b</code>.","","Returns the number of edges in the list","Returns the number of edges in the list","Accesses the source and target of edge <code>e</code>","Returns an iterator over all edge indices of the graph.","","","Accesses the weight of edge <code>e</code>","Accesses the weight of edge <code>e</code>","","","","","","Lookups whether there is an edge from <code>a</code> to <code>b</code>.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns an iterator of all nodes with an edge starting …","Creates a new, empty adjacency list.","","","","","","","","","","Returns the number of nodes in the list","","Returns an iterator over all node indices of the graph.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Updates or adds an edge from <code>a</code> to <code>b</code> to the graph, with its …","","","","Creates a new, empty adjacency list tailored for <code>nodes</code> …","","An algorithm error: a cycle was found in the graph.","Workspace for a graph traversal.","A floating-point measure.","","Associated data that can be used for measures (such as …","An iterator producing a minimum spanning forest of a graph.","An algorithm error: a cycle of negative weights was found …","A reusable state for computing the <em>strongly connected </em>…","","","","Bellman-Ford algorithms.","","","","","","","","","","","","","","","","","","","","Graph Condense every strongly connected component into a …","[Generic] Return the number of connected components of the …","","","","","Compute dominators of a control-flow graph.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","[Generic] Check if there exists a path starting at <code>from</code> …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Return <code>true</code> if the graph is bipartite. A graph is …","[Generic] Return <code>true</code> if the input directed graph contains …","[Generic] Return <code>true</code> if the input graph contains a cycle.","","","","","","","","[Generic] Compute the <em>strongly connected components</em> using …","","","","","[Generic] Compute a <em>minimum spanning tree</em> of a graph.","","Creates a new <code>TarjanScc</code>","","Returns the index of the component in which v has been …","Return a node id that participates in the cycle","","[Generic] Compute the <em>strongly connected components</em> using …","Renamed to <code>kosaraju_scc</code>.","","","[Generic] Compute the <em>strongly connected components</em> using …","","","","","[Generic] Perform a topological sort of a directed graph.","Compute the transitive reduction and closure of a directed …","","","","","","","","","","","","","","","","","[Generic] A* shortest path algorithm.","","[Generic] Compute shortest paths from node <code>source</code> to all …","","","","","","[Generic] Find the path of a negative cycle reachable from …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","[Generic] Dijkstra’s shortest path algorithm.","Iterator for nodes dominated by a given node.","The dominance relation for some graph and root.","Iterator for a node’s dominators.","","","","","","","","","","","","","Iterate over all of the given node’s dominators …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get the immediate dominator of the given node.","Iterate over all nodes immediately dominated by the given …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Get the root node used to construct these dominance …","This is an implementation of the engineered “Simple, …","","Iterate over the given node’s strict dominators.","","","","","","","","","","","","","[Generic] Finds a feedback arc set: a set of edges in the …","[Generic] Floyd–Warshall algorithm is an algorithm for …","[Generic] Return <code>true</code> if the graphs <code>g0</code> and <code>g1</code> are …","[Generic] Return <code>true</code> if the graphs <code>g0</code> and <code>g1</code> are …","[Generic] Return <code>true</code> if <code>g0</code> is isomorphic to a subgraph of …","[Generic] Return <code>true</code> if <code>g0</code> is isomorphic to a subgraph of …","Using the VF2 algorithm, examine both syntactic and …","[Generic] k’th shortest path algorithm.","","","Computed <em>matching</em> of the graph.","","","","","","","Returns <code>true</code> if given edge is in the matching, or <code>false</code> …","Returns <code>true</code> if given node is in the matching, or <code>false</code> …","Iterates over all edges from the matching.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","[Generic] Compute a <em>matching</em> using a greedy heuristic.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns <code>true</code> if the number of matched <strong>edges</strong> is 0.","Returns <code>true</code> if the matching is perfect.","Gets the number of matched <strong>edges</strong>.","Gets the matched counterpart of given node, if there is …","[Generic] Compute the <em>maximum matching</em> using Gabow’s …","","","Iterates over all nodes from the matching.","","","","","","","","","","Returns an iterator that produces all simple paths from …","Creates a representation of the same graph respecting …","Computes the transitive reduction and closure of a DAG.","Compressed Sparse Row (<code>CSR</code>) is a sparse adjacency matrix …","","Csr edge index type, a plain integer.","","","","Csr creation error: edges were not in sorted order.","","","","Csr node index type, a plain integer.","Iterator over all nodes of a graph.","Return <code>true</code> if the edge was added","Adds a new node with the given weight, returning the …","","","","","","","","","","","","","","","","","","Remove all edges","","","","","","","","","","","","","","","","","Computes in <strong>O(log |V|)</strong> time.","","","","","Return an iterator of all edges of <code>a</code>.","","Computes in <strong>O(1)</strong> time.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Create a new <code>Csr</code> from a sorted sequence of edges","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Return an iterator of all neighbors of <code>a</code>.","Computes in <strong>O(1)</strong> time.","Create an empty <code>Csr</code>.","","","","","","","","","","","","Computes in <strong>O(1)</strong> time.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Access the edge’s weight.","","Create a new <code>Csr</code> with <code>n</code> nodes. <code>N</code> must implement <code>Default</code> …","A graph that can be extended with further nodes and edges","A graph that can be created","Access node and edge weights (associated data).","Access node and edge weights mutably.","A graph edge.","A graph element.","Iterator adaptors for iterators of <code>Element</code>.","An iterator that filters graph elements.","Create a graph from an iterator of elements.","A graph node.","Add a new edge. If parallel edges (duplicate) are not …","","","","","","","","","","","","","","Create an iterator adaptor that filters graph elements.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Add or update the edge from <code>a</code> to <code>b</code>. Return the id of the …","","","","","","<code>Dot</code> configuration.","<code>Dot</code> implements output to graphviz .dot format for a graph.","Use indices for edge labels.","Use no edge labels.","Do not print the graph/digraph string.","Use indices for node labels.","Use no node labels.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a <code>Dot</code> formatting wrapper with default configuration.","","","","","","","","","Create a <code>Dot</code> formatting wrapper with custom configuration.","The default integer type for graph indices. <code>u32</code> is the …","A <code>Graph</code> with directed edges.","The graph’s edge type.","Edge identifier.","Iterator over the edge indices of a graph.","Reference to a <code>Graph</code> edge.","Iterator over all edges of a graph.","Iterator yielding mutable access to all edge weights.","Iterator over the edges of from or to a node","Iterator over the multiple directed edges connecting a …","An iterator over either the nodes without edges to them or …","<code>Frozen</code> is a graph wrapper.","<code>Graph&lt;N, E, Ty, Ix&gt;</code> is a graph datastructure using an …","A <code>GraphIndex</code> is a node or edge index.","Trait for the unsigned integer type used for node and edge …","Iterator over the neighbors of a node.","The graph’s node type.","Node identifier.","Iterator over the node indices of a graph.","Iterator over all nodes of a graph.","Iterator yielding mutable access to all node weights.","A <code>Graph</code> with undirected edges.","A “walker” object that can be used to step through the …","Add an edge from <code>a</code> to <code>b</code> to the graph, with its associated …","","","Add a node (also called vertex) with associated data <code>weight</code>…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return the current node and edge capacity of the graph.","Remove all nodes and edges","Remove all edges","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Lookup if there is an edge from <code>a</code> to <code>b</code>.","","","","","Return a “walker” object that can be used to step …","","","","Return the number of edges in the graph.","","Access the source and target nodes for <code>e</code>.","Short version of <code>EdgeIndex::new</code>","Return an iterator over the edge indices of the graph","Create an iterator over all edges, in indexed order.","","","Access the weight for edge <code>e</code>.","","","Access the weight for edge <code>e</code>, mutably.","","","Return an iterator yielding immutable access to all edge …","Return an iterator yielding mutable access to all edge …","","Return an iterator of all edges of <code>a</code>.","","Return an iterator over all the edges connecting <code>a</code> and <code>b</code>.","","Return an iterator of all edges of <code>a</code>, in the specified …","","","An invalid <code>EdgeIndex</code> used to denote absence of an edge, …","","","","","","Extend the graph from an iterable of edges.","Return an iterator over either the nodes without edges to …","Create a new <code>Graph</code> by mapping nodes and edges. A node or …","Lookup an edge from <code>a</code> to <code>b</code>.","Lookup an edge between <code>a</code> and <code>b</code>, in either direction.","Accessor for data structure internals: the first edge in …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create a new <code>Graph</code> from an iterable of edges.","","","","","","","","","","","","","","","","","","","","Index the <code>Graph</code> by two indices, any combination of node or …","Index the <code>Graph</code> by two indices, any combination of node or …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert the graph into either undirected or directed. No …","","","","","","","","","","","Convert the graph into a vector of Nodes and a vector of …","","","Whether the graph has directed edges or not.","Create a new <code>Graph</code> by mapping node and edge weights to new …","","","","Return an iterator of all nodes with an edge starting from …","","","Return an iterator of all neighbors that have an edge …","","Return an iterator of all neighbors that have an edge …","","Create a new <code>Graph</code> with directed edges.","Create a new <code>Frozen</code> from a mutable reference to a graph.","","","","Create a new <code>Graph</code> with undirected edges.","Step to the next edge and its endpoint node in the walk …","","","","","","","","","","","","","","","Accessor for data structure internals: the next edge for …","","Accessor for data structure internals: the first edge in …","Accessor for data structure internals: the next edge for …","","","","","Return the number of nodes (vertices) in the graph.","","","","Short version of <code>NodeIndex::new</code>","Return an iterator over the node indices of the graph.","","","","Access the weight for node <code>a</code>.","","","Access the weight for node <code>a</code>, mutably.","","Return an iterator yielding immutable access to all node …","Return an iterator yielding mutable access to all node …","","","Access the internal edge array.","Access the internal node array.","Remove an edge and return its edge weight, or <code>None</code> if it …","Remove <code>a</code> from the graph if it exists, and return its …","Reserves capacity for at least <code>additional</code> more edges to be …","Reserves the minimum capacity for exactly <code>additional</code> more …","Reserves the minimum capacity for exactly <code>additional</code> more …","Reserves capacity for at least <code>additional</code> more nodes to be …","","","Keep all edges that return <code>true</code> from the <code>visit</code> closure, …","Keep all nodes that return <code>true</code> from the <code>visit</code> closure, …","Reverse the direction of all edges","Shrinks the capacity of the graph as much as possible.","Shrinks the capacity of the underlying edges collection as …","Shrinks the capacity of the underlying nodes collection as …","","","","","","","","","Return the source node index.","","Return the target node index.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Add or update an edge from <code>a</code> to <code>b</code>. If the edge already …","","","","","","Access the edge’s weight.","Associated node data.","Associated edge data.","Create a new <code>Graph</code> with estimated capacity.","","","","A <code>GraphMap</code> with directed edges.","","","<code>GraphMap&lt;N, E, Ty&gt;</code> is a graph datastructure using an …","","","","","A trait group for <code>GraphMap</code>’s node identifier.","","A reference that is hashed and compared by its pointer …","A <code>GraphMap</code> with undirected edges.","","Add an edge connecting <code>a</code> and <code>b</code> to the graph, with …","Add node <code>n</code> to the graph.","","","Return an iterator over all edges of the graph with their …","Return an iterator over all edges of the graph in …","","","","","","","","","","","","","","","","","","","","","","","Return the current node and edge capacity of the graph.","Remove all nodes and edges","","","","","","","","","","","","","","","","","","","","","Ptr is ordered by pointer value, i.e. an arbitrary but …","Return <code>true</code> if the edge connecting <code>a</code> with <code>b</code> is contained …","Return <code>true</code> if the node is contained in the graph.","","","","","","","Return the number of edges in the graph.","","Return a reference to the edge weight connecting <code>a</code> with <code>b</code>, …","Return a mutable reference to the edge weight connecting <code>a</code> …","Return an iterator of target nodes with an edge starting …","","Return an iterator of target nodes with an edge starting …","","Ptr compares by pointer equality, i.e if they point to the …","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create a new <code>GraphMap</code> from an iterable of edges.","","Creates a <code>GraphMap</code> that corresponds to the given <code>Graph</code>.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return a <code>Graph</code> that corresponds to this <code>GraphMap</code>.","","","","","","","","","","","Whether the graph has directed edges.","","","","","Return an iterator of all nodes with an edge starting from …","Return an iterator of all neighbors that have an edge …","","Create a new <code>GraphMap</code>","","","","","","","","","","","","","","Return the number of nodes in the graph.","","","","Return an iterator over the nodes of the graph.","","","","Remove edge from <code>a</code> to <code>b</code> from the graph and return the edge …","Return <code>true</code> if node <code>n</code> was removed.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new <code>GraphMap</code> with estimated capacity.","A <code>MatrixGraph</code> with directed edges.","Iterator over all edges of a graph.","Iterator over the edges of from or to a node","Trait for the unsigned integer type used for node and edge …","<code>MatrixGraph&lt;N, E, Ty, Null&gt;</code> is a graph datastructure using …","Iterator over the neighbors of a node.","Iterator over the node identifiers of a graph.","Node identifier.","Iterator over all nodes of a graph.","<code>NotZero</code> is used to optimize the memory usage of edge …","Wrapper trait for an <code>Option</code>, allowing user-defined structs …","A <code>MatrixGraph</code> with undirected edges.","Base trait for types that can be wrapped in a <code>NotZero</code>.","Add an edge from <code>a</code> to <code>b</code> to the graph, with its associated …","","","Add a node (also called vertex) with associated data <code>weight</code>…","","","","","","","","","","","","","","","","Remove all nodes and edges.","","","","","","","","","","","","","","","","Return the number of edges in the graph.","","Access the weight for edge <code>e</code>.","Access the weight for edge <code>e</code>, mutably.","Return an iterator of all edges of <code>a</code>.","","","Return an iterator of all edges of <code>a</code>, in the specified …","Extend the graph from an iterable of edges.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create a new <code>MatrixGraph</code> from an iterable of edges.","","Return true if there is an edge between <code>a</code> and <code>b</code>.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Return whether the graph has directed edges or not.","Return true if <code>self</code> is equal to the sentinel value.","","","Return an iterator of all nodes with an edge starting from …","Return an iterator of all neighbors that have an edge …","","","Create a new <code>MatrixGraph</code> with directed edges.","Create a new <code>MatrixGraph</code> with undirected edges.","","","","","","","","Return the number of nodes (vertices) in the graph.","","Short version of <code>NodeIndex::new</code> (with Ix = <code>DefaultIx</code>)","","Access the weight for node <code>a</code>.","Access the weight for node <code>a</code>, mutably.","Remove the edge from <code>a</code> to <code>b</code> to the graph.","Remove <code>a</code> from the graph.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Update the edge from <code>a</code> to <code>b</code> to the graph, with its …","","","Create a new <code>MatrixGraph</code> with estimated capacity for nodes.","Return the singleton object which can be used as a …","[Generic] complement of the graph","","","","","","","","","","","","","","","","","","","","","","","Iterator over the edge indices of a graph.","Reference to a <code>StableGraph</code> edge.","Iterator over all edges of a graph.","Iterator over the edges of from or to a node","Iterator over the multiple directed edges connecting a …","An iterator over either the nodes without edges to them or …","","","Iterator over the neighbors of a node.","","Iterator over the node indices of a graph.","Iterator over all nodes of a graph.","A <code>StableGraph</code> with directed edges.","<code>StableGraph&lt;N, E, Ty, Ix&gt;</code> is a graph datastructure using …","A <code>StableGraph</code> with undirected edges.","A “walker” object that can be used to step through the …","","Add an edge from <code>a</code> to <code>b</code> to the graph, with its associated …","Add a node (also called vertex) with associated data <code>weight</code>…","","","","","","","","","","","","","","","","","","","","","","","","","Return the current node and edge capacity of the graph.","Remove all nodes and edges","Remove all edges","","","","","","","","","","","","","","","","","","","","","","","","Lookup if there is an edge from <code>a</code> to <code>b</code>.","","","Return a “walker” object that can be used to step …","","","Return the number of edges in the graph.","Access the source and target nodes for <code>e</code>.","","Return an iterator over the edge indices of the graph","Create an iterator over all edges in the graph, in indexed …","Access the weight for edge <code>e</code>.","","","Access the weight for edge <code>e</code>, mutably","Return an iterator yielding immutable access to all edge …","Return an iterator yielding mutable access to all edge …","","Return an iterator of all edges of <code>a</code>.","Return an iterator over all the edges connecting <code>a</code> and <code>b</code>.","Return an iterator of all edges of <code>a</code>, in the specified …","","","Extend the graph from an iterable of edges.","Return an iterator over either the nodes without edges to …","Create a new <code>StableGraph</code> by mapping nodes and edges. A …","Lookup an edge from <code>a</code> to <code>b</code>.","Lookup an edge between <code>a</code> and <code>b</code>, in either direction.","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create a new <code>StableGraph</code> from an iterable of edges.","","","","","","","","","Index the <code>StableGraph</code> by two indices, any combination of …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Whether the graph has directed edges or not.","Create a new <code>StableGraph</code> by mapping node and edge weights …","","Return an iterator of all nodes with an edge starting from …","Return an iterator of all neighbors that have an edge …","","Return an iterator of all neighbors that have an edge …","Create a new <code>StableGraph</code> with directed edges.","Step to the next edge and its endpoint node in the walk …","","","","","","","","","","","","","","","Return an upper bound of the node indices in the graph","","Return the number of nodes (vertices) in the graph.","","","Return an iterator over the node indices of the graph","","Access the weight for node <code>a</code>.","","Access the weight for node <code>a</code>, mutably.","","Return an iterator yielding immutable access to all node …","Return an iterator yielding mutable access to all node …","Remove an edge and return its edge weight, or <code>None</code> if it …","Remove <code>a</code> from the graph if it exists, and return its …","","Keep all edges that return <code>true</code> from the <code>visit</code> closure, …","Keep all nodes that return <code>true</code> from the <code>visit</code> closure, …","Reverse the direction of all edges","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Add or update an edge from <code>a</code> to <code>b</code>. If the edge already …","","","","Access the edge’s weight.","Create a new <code>StableGraph</code> with estimated capacity.","","<code>UnionFind&lt;K&gt;</code> is a disjoint-set data structure. It tracks …","","","","","Returns <code>true</code> if the given elements belong to the same set, …","Return the representative for <code>x</code>.","Return the representative for <code>x</code>.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Return a vector mapping each element to its representative.","Create a new <code>UnionFind</code> of <code>n</code> disjoint sets.","","","","","Unify the two sets containing <code>x</code> and <code>y</code>.","The associated adjacency matrix type","An edge to an already visited node.","A breadth first search (BFS) of a graph.","Stop the DFS traversal and return the provided value.","Continue the DFS traversal as normal.","Control flow for <code>depth_first_search</code> callbacks.","Control flow for callbacks.","A cross or forward edge.","Define associated data for nodes and edges","Visit nodes of a graph in a depth-first-search (DFS) …","A depth first search (DFS) visitor event.","Visit nodes in a depth-first-search (DFS) emitting nodes …","","A graph with a known edge count.","An edge-filtering graph adaptor.","A filtered edges iterator.","A filtered neighbors iterator.","A filtered neighbors-directed iterator.","","edge identifier","The graph’s <code>NodeId</code>s map to indices","An edge reference.","","","The kind edges in the graph.","","","","A graph filter for edges","A graph filter for nodes.","All edges from a node have been reported.","Create or access the adjacency matrix of a graph.","Base graph trait: defines the associated node identifier …","Edge kind property (directed or undirected edges)","A copyable reference to a graph.","Access to the sequence of the graph’s edges","Access to the edges of each node.","Access to all edges of each node, in the specified …","Access to the neighbors of each node","Access to the neighbors of each node, through incoming or …","Access to the sequence of the graph’s <code>NodeId</code>s.","Access to the sequence of the graph’s nodes","","The associated map type","","","The graph’s <code>NodeId</code>s map to indices, in a range without …","A graph with a known node count.","A node-filtering graph adaptor.","A filtered edges iterator.","A filtered edges iterator.","A filtered neighbors iterator.","A filtered node references iterator.","","","node identifier","","The graph’s <code>NodeId</code>s map to indices","A node reference.","","","","Prune the current node from the DFS traversal. No more …","An edge-reversing graph adaptor.","A reversed edge reference","A reversed edge references iterator.","A reversed edges iterator.","Strictly monotonically increasing event time for a depth …","A topological order traversal for a graph.","An edge of the tree formed by the traversal.","A mapping for storing the visited status for NodeId <code>N</code>.","A graph that can create a map that tracks the visited …","A walker is a traversal state, but where part of the …","A walker and its context wrapped into an iterator.","","","Create the adjacency matrix","","Return the original, unreversed edge reference.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the value in <code>Control::Break(_)</code>, if present.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A recursive depth first search.","The map of discovered nodes","The map of discovered nodes","The map of discovered nodes","Return an upper bound of the edge indices in the graph …","","","","Return the number of edges in the graph.","","","","","","","","","","","","","","","","","Create a new <strong>Dfs</strong> using the graph’s visitor map, and no …","Create a new <code>DfsPostOrder</code> using the graph’s visitor map, …","","","The map of finished nodes","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create an <code>NodeFiltered</code> adaptor from the closure <code>filter</code>.","Create an <code>EdgeFiltered</code> adaptor from the closure <code>filter</code>.","Convert <code>i</code> to a node index. <code>i</code> must be a valid value in the …","Convert <code>i</code> to an edge index. <code>i</code> must be a valid value in the …","","","","","","","Create a <code>Dfs</code> from a vector and a visit map","","The edge’s identifier.","","","Return true to have the edge be part of the graph","Return true to have the node be part of the graph","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Consume <code>self</code> and return the original, unreversed edge …","Return true if there is an edge from <code>a</code> to <code>b</code>, false …","","","Return whether <code>a</code> has been visited before.","Create an iterator out of the walker and given <code>context</code>.","Create an iterator out of the walker and given <code>context</code>.","Keep the discovered map, but clear the visit stack and …","Keep the discovered and finished map, but clear the visit …","Return an iterator of the neighbors of node <code>a</code>.","","","","","","","","Create a new <strong>Dfs</strong>, using the graph’s visitor map, and put …","Create a new <code>DfsPostOrder</code> using the graph’s visitor map, …","Create a new <strong>Bfs</strong>, using the graph’s visitor map, and put …","Create a new <code>Topo</code>, using the graph’s visitor map, and …","Return the next node in the dfs, or <strong>None</strong> if the traversal …","Return the next node in the traversal, or <code>None</code> if the …","Return the next node in the bfs, or <strong>None</strong> if the traversal …","Return the next node in the current topological order …","","","","","","","","","","","Return an upper bound of the node indices in the graph …","","","","","","","","","","","","","","","","","","","Clear the visit state","Clear the visit state","Clear visited state, and put all initial nodes in the to …","Reset the visitor map (and resize to new size of graph if …","","","","","","","","","","","","","","","","","The source node of the edge.","","The stack of nodes to visit","The stack of nodes to visit","The queue of nodes to visit","The target node of the edge.","","Convert <code>a</code> to an integer index.","Convert <code>a</code> to an integer index.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Mark <code>a</code> as visited.","Create a new visitor map","","","","Advance to the next item","","","","","A reference to the weight of the edge.","",""],"i":[0,0,0,0,0,1,0,138,0,1,0,0,0,1,2,3,1,2,3,1,2,3,1,2,3,1,0,0,0,1,1,1,2,3,1,2,3,0,0,1,1,1,2,3,138,93,2,3,0,0,1,1,0,0,1,2,3,1,2,3,1,2,3,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,13,13,13,13,13,13,15,18,20,21,22,23,13,24,25,15,18,20,21,22,23,13,24,25,13,15,18,20,21,22,23,13,24,25,15,18,20,21,22,23,13,24,25,15,21,13,13,13,13,13,13,13,13,13,13,13,15,21,15,21,13,15,18,20,21,22,23,13,24,25,15,18,20,21,22,23,13,24,25,13,15,14,21,15,18,20,21,22,23,13,24,25,18,20,22,23,24,25,13,13,20,23,13,13,18,20,22,23,24,25,20,23,13,13,13,13,13,13,13,15,21,13,20,23,20,23,18,20,23,24,25,21,21,13,15,18,20,21,22,23,13,24,25,15,18,20,21,22,23,13,24,25,15,18,20,21,22,23,13,24,25,15,18,20,21,22,23,13,24,25,13,13,14,21,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,37,32,33,34,31,37,32,33,34,31,32,33,34,31,32,33,34,0,0,31,37,0,0,0,33,34,0,0,0,0,31,37,32,33,34,31,37,32,33,34,0,0,0,139,31,37,32,33,34,32,0,0,0,0,0,0,0,0,0,0,0,0,140,0,140,0,31,37,32,37,33,140,37,0,0,0,0,31,32,33,34,0,0,31,37,32,33,34,31,37,32,33,34,31,37,32,33,34,139,0,0,0,38,38,38,38,38,0,38,38,38,38,38,38,38,38,0,0,0,0,40,41,42,40,41,42,40,41,42,40,41,42,40,40,41,42,40,41,42,40,40,40,41,42,41,42,41,42,40,0,42,40,40,41,42,40,41,42,40,41,42,40,41,42,0,0,0,0,0,0,0,0,0,0,0,43,45,44,43,45,44,43,43,43,43,45,44,0,43,45,44,45,44,43,43,43,43,0,45,44,43,43,45,44,43,45,44,43,45,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,46,46,46,48,49,51,52,53,54,55,46,48,49,51,52,53,54,55,46,46,48,49,51,52,53,54,55,46,48,49,51,52,53,54,55,46,46,46,46,46,46,46,46,46,48,49,51,52,53,54,55,46,48,49,51,52,53,54,55,46,46,51,46,46,46,48,49,51,52,53,54,55,49,52,53,54,55,46,46,46,46,46,49,52,53,54,55,55,46,46,46,46,46,46,46,49,53,54,55,51,51,46,46,48,49,51,52,53,54,55,46,48,49,51,52,53,54,55,46,48,49,51,52,53,54,55,46,48,49,51,52,53,54,55,46,51,51,46,0,0,0,0,56,0,0,0,0,56,141,141,56,57,56,57,56,57,56,57,142,143,56,56,144,56,57,56,57,145,56,57,57,57,142,143,57,56,57,56,57,56,57,56,57,141,146,147,147,148,147,0,0,58,58,58,58,58,59,58,59,58,58,58,59,59,58,59,58,59,58,59,59,59,58,59,58,59,58,59,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,35,35,35,35,64,35,65,64,62,63,66,67,68,69,70,71,78,77,72,73,74,75,76,35,65,64,62,63,66,67,68,69,70,71,78,77,72,73,74,75,76,35,35,35,35,65,62,63,66,67,68,69,70,71,72,73,74,75,76,35,35,65,62,63,66,67,68,69,70,71,72,73,74,75,76,62,63,35,35,62,63,64,69,35,64,35,35,64,35,0,35,35,35,64,35,35,64,35,35,64,35,35,35,35,64,35,35,35,64,62,63,62,63,74,62,63,35,35,35,35,35,35,35,62,63,66,67,68,69,70,71,78,77,72,73,74,75,76,35,35,65,64,62,62,63,63,66,67,68,69,70,71,78,77,72,73,74,75,76,35,35,35,35,64,64,62,63,62,74,12,35,35,64,62,62,63,35,35,64,35,64,35,65,64,62,63,66,67,68,69,70,71,78,77,72,73,74,75,76,35,68,69,70,71,78,77,72,73,75,76,35,35,64,35,35,12,62,35,35,64,35,35,64,35,12,35,64,62,62,63,35,65,68,69,70,71,78,77,72,73,75,76,72,73,75,76,35,65,66,67,65,35,64,35,35,64,35,64,0,35,35,64,35,35,64,35,35,64,35,35,62,63,35,35,35,35,35,35,35,35,35,64,35,35,35,35,35,35,68,71,78,77,72,73,75,76,67,74,67,74,35,35,64,64,35,65,62,63,66,67,68,69,70,71,72,73,74,75,76,35,65,64,62,63,66,67,68,69,70,71,78,77,72,73,74,75,76,35,65,64,62,63,66,67,68,69,70,71,78,77,72,73,74,75,76,35,65,64,62,63,66,67,68,69,70,71,78,77,72,73,74,75,76,35,35,35,64,62,74,74,66,67,35,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,81,81,81,81,81,81,81,83,84,81,85,86,87,88,89,82,90,91,83,84,81,85,86,87,88,89,82,90,91,81,81,84,81,85,86,87,88,89,82,90,91,84,81,85,86,87,88,89,82,90,91,84,81,81,83,82,81,84,81,81,81,81,81,81,81,81,81,81,84,84,81,84,81,85,86,87,88,89,82,90,91,83,84,81,85,86,87,88,89,82,90,91,81,81,81,81,81,81,84,81,81,83,84,81,85,86,87,88,89,82,90,91,81,83,85,86,87,88,89,82,90,91,81,81,83,82,85,81,81,81,81,81,83,85,86,87,88,89,82,90,91,83,85,82,81,81,81,81,81,81,83,82,84,81,81,81,85,85,83,85,86,87,88,89,82,90,91,81,81,84,81,85,86,87,88,89,82,90,91,83,84,81,85,86,87,88,89,82,90,91,83,84,81,85,86,87,88,89,82,90,91,83,84,81,85,86,87,88,89,82,90,91,81,81,81,81,0,0,0,0,0,0,0,0,0,0,0,0,0,96,96,96,96,96,104,96,98,99,100,101,102,104,96,98,99,100,101,102,96,96,98,99,100,101,102,96,98,99,100,101,102,104,96,96,96,96,96,96,96,96,96,96,96,98,99,100,101,102,104,96,98,99,100,101,102,96,96,96,12,96,96,96,96,104,96,98,99,100,101,102,98,99,100,101,102,96,96,103,12,96,96,96,96,12,96,96,98,99,100,101,102,96,96,96,96,0,96,96,96,96,96,96,98,99,101,96,96,98,99,100,101,102,104,96,98,99,100,101,102,104,96,98,99,100,101,102,104,96,98,99,100,101,102,96,96,96,96,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,79,79,79,79,79,79,105,106,107,108,109,110,111,112,113,114,79,105,106,107,108,109,110,111,112,113,114,79,79,79,79,105,106,107,108,109,110,111,112,113,114,79,79,105,106,107,108,109,110,111,112,113,114,79,79,79,112,79,79,79,79,0,79,79,79,79,79,79,79,79,79,79,79,79,79,107,79,79,79,79,79,79,106,107,108,109,110,111,112,113,114,79,79,105,106,107,108,109,110,111,112,113,114,79,79,79,79,107,79,79,79,79,79,79,105,106,107,108,109,110,111,112,113,114,106,108,109,110,111,112,113,114,79,79,79,79,79,79,79,79,79,105,106,108,109,110,111,112,113,114,106,110,113,114,105,105,79,79,79,79,0,79,79,79,79,79,79,79,79,79,79,79,79,79,79,106,109,111,113,114,107,107,79,79,79,105,106,107,108,109,110,111,112,113,114,79,105,106,107,108,109,110,111,112,113,114,79,105,106,107,108,109,110,111,112,113,114,79,105,106,107,108,109,110,111,112,113,114,79,79,79,107,107,79,79,0,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,149,120,0,118,118,0,0,120,0,0,0,0,120,0,0,0,0,0,150,151,0,0,152,152,153,154,155,156,0,0,120,0,0,0,0,0,0,0,0,0,0,0,157,137,158,159,0,0,0,0,0,0,0,150,160,151,161,0,0,162,162,154,118,0,0,0,0,0,0,120,0,0,0,0,150,160,149,116,117,119,120,118,121,122,123,124,125,126,127,128,129,130,131,132,133,134,116,135,117,136,119,120,118,121,122,123,124,125,126,127,128,129,130,131,132,133,134,116,135,117,136,118,118,119,120,118,121,122,123,124,125,126,127,128,129,130,131,132,133,134,116,135,117,136,119,120,118,121,122,123,124,125,126,127,128,129,130,131,132,133,134,116,135,117,136,119,125,163,118,119,118,121,122,123,124,0,121,122,123,164,126,131,116,165,116,152,126,131,116,126,116,116,155,126,131,116,156,126,131,116,121,122,119,119,122,119,120,118,121,122,125,126,127,128,129,130,131,132,133,134,116,135,117,136,119,120,118,121,122,123,124,125,126,127,128,129,130,131,132,133,134,116,135,117,136,126,131,166,164,126,126,131,131,116,116,121,119,150,160,117,167,168,125,125,119,120,118,121,122,123,124,125,126,127,128,129,130,131,132,133,134,116,135,117,136,125,127,128,129,130,132,133,134,135,136,117,149,116,153,169,157,157,121,122,158,126,131,116,159,126,131,116,121,122,123,124,121,122,123,124,125,127,128,129,130,132,133,134,135,136,166,126,131,116,170,131,116,161,126,131,116,162,126,131,116,126,116,116,119,121,122,124,137,126,131,116,163,118,163,118,127,128,129,130,132,133,134,135,136,150,117,121,122,123,150,117,166,164,126,126,131,131,116,116,119,120,118,121,122,123,124,125,126,127,128,129,130,131,132,133,134,116,135,117,136,119,120,118,121,122,123,124,125,126,127,128,129,130,131,132,133,134,116,135,117,136,119,120,118,121,122,123,124,125,126,127,128,129,130,131,132,133,134,116,135,117,136,119,120,118,121,122,123,124,125,126,127,128,129,130,131,132,133,134,116,135,117,136,169,137,126,131,116,157,121,122,123,124,150,160,117],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[3,3],[[]],[[]],[[]],[[1,1],4],0,0,0,[[1,1],5],[[],5],[[1,6],7],[[2,6],7],[[3,6],7],[[]],[[]],[[]],0,0,[1],[1,8],[[]],[[]],[[]],[[]],[[],5],[[],5],[[],5],0,0,[1,1],[[1,1],[[9,[4]]]],0,0,[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[13,[12]],[14,[12]],[14,[12]]],[[15,[12]]]],[[[13,[12]],[14,[12]],[14,[12]]],[[9,[[15,[12]]]]]],[[[13,[12]]],[[14,[12]]]],[[[13,[12]]],[[14,[12]]]],[[[13,[12]],16],[[14,[12]]]],[[[13,[12]],8],[[14,[12]]]],[13,17],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[13,[12]]]],[15,15],[18,18],[[[20,[19]]],[[20,[19]]]],[[[21,[12]]],[[21,[12]]]],[[[22,[19,[0,[19,12]]]]],[[22,[19,[0,[19,12]]]]]],[[[23,[19]]],[[23,[19]]]],[[[13,[19]]],[[13,[19]]]],[[[24,[12]]],[[24,[12]]]],[[[25,[19]]],[[25,[19]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[15,15],4],[[[21,[26,[0,[26,12]]]],21],4],[[[13,[12]],[14,[12]],[14,[12]]],5],[[],[[13,[27]]]],[[[13,[12]]],8],[[[13,[12]]],8],[[[13,[12]],[15,[12]]],9],[[[13,[12]]],[[22,[12]]]],[[[13,[12]],[14,[12]]],[[18,[12]]]],[13],[[[13,[12]],[15,[12]]],9],[[[13,[12]],[15,[12]]],9],[13],[[15,15],5],[[[21,[28,[0,[28,12]]]],21],5],[[],5],[[],5],[[[13,[12]],[14,[12]],[14,[12]]],[[9,[[15,[12]]]]]],[[15,6],7],[[18,6],7],[[[20,[29]],6],7],[[[21,[29,[0,[29,12]]]],6],7],[[[22,[29,[0,[29,12]]]],6],7],[[[23,[29]],6],7],[[13,6],7],[[24,6],7],[[[25,[29]],6],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[13,[12]],8]],[15],[[[14,[12]]]],[[[21,[12]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[13,17,14,14],5],[[[13,[12]]],5],[20,8],[23,8],[[13,[14,[12]]]],[[],[[13,[12]]]],[18,9],[20,9],[[[22,[12]]],[[9,[[15,[12]]]]]],[23,9],[24,9],[25,9],[20,9],[23,9],[[[13,[12]]],8],[[[13,[12]]],8],[13,[[23,[12]]]],[[[13,[12]]],[[23,[12]]]],[13],[[[13,[12]]],9],[[[13,[12]]],9],[[15,15],[[9,[4]]]],[[[21,[30,[0,[30,12]]]],21],[[9,[4]]]],[13],[20,9],[23,9],[20],[23],[18],[20],[23],[24],[25],[[[21,[12]]]],[[[21,[12]]]],[[[13,[12]]],8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[[13,[12]],[14,[12]],[14,[12]]],[[15,[12]]]],[13,17],[[[14,[12]]]],[[[21,[12]]]],[8,[[13,[12]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[31,[19,19]]],[[31,[19,19]]]],[32,32],[[[33,[19]]],[[33,[19]]]],[34,34],[[]],[[]],[[]],[[]],[[35,5],[[35,[36]]]],[[],8],[[],31],[[],37],0,0,0,[[[33,[28]],33],5],[[34,34],5],0,0,0,0,[[[31,[29,29]],6],7],[[[37,[29]],6],7],[[32,6],7],[[[33,[29]],6],7],[[34,6],7],[[]],[[]],[[]],[[]],[[]],0,0,[[[9,[31]]],5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],5],[[],5],[[],5],0,0,0,0,0,0,0,[[],[[36,[36]]]],0,[[]],0,[[]],[[],32],[[],31],[[],37],[32,9],[37,8],[33],[[]],[37],[[],[[36,[36]]]],0,0,[[],[[36,[36]]]],[[]],[[]],[[]],[[]],[[[9,[31]]],[[10,[36,33]]]],0,[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[]],[[],9],0,[[],[[10,[38,34]]]],[[]],[[]],[[[38,[19,19]]],[[38,[19,19]]]],[[]],0,[[],[[9,[36]]]],[[[38,[29,29]],6],7],[[]],[[]],0,[[]],[[],10],[[],10],[[],11],[9,39],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[40,40],[41,41],[42,42],[[]],[[]],[[]],[40,[[9,[41]]]],[[40,6],7],[[41,6],7],[[42,6],7],[[]],[[]],[[]],[40,9],[40,42],[[]],[[]],[[]],[[]],[[]],[41,9],[42,9],[40],[[],40],[42],[40,[[9,[41]]]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],16],[[],[[10,[39,34]]]],[[],5],[[],5],[[],5],[[],5],[[],[[9,[16]]]],[[9,8],39],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[43,5],[43,5],[43,44],[[]],[[]],[[]],[[],43],[[]],[[]],[[]],[[]],[[]],[43,5],[43,5],[43,8],[43,9],[[],43],[45,9],[44,9],[43,45],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[8,[9,[8]]],16],[[]],[13],0,0,0,0,0,0,0,0,0,0,0,0,[[46,47,47],5],[46,47],[46,17],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[46],[[[46,[19,19,19]]],[[46,[19,19,19]]]],[48,48],[[[49,[19,19,19]]],[[49,[19,19,19]]]],[[[51,[50]]],[[51,[50]]]],[[[52,[19,19,19]]],[[52,[19,19,19]]]],[[[53,[19]]],[[53,[19]]]],[[[54,[19]]],[[54,[19]]]],[[[55,[19,[0,[19,12]]]]],[[55,[19,[0,[19,12]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[46,47,47],5],[[],46],[46,8],[46,8],[46],[[46,47],49],[46],[[46,47]],[[[46,[29,29,29,29]],6],7],[[48,6],7],[[[49,[29,29,29]],6],7],[[[51,[29,29,29]],6],7],[[[52,[29,29,29]],6],7],[[[53,[29]],6],7],[[[54,[29]],6],7],[[[55,[29,[0,[29,12]]]],6],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[46,8]],[[],[[10,[[46,[2]],48]]]],[51],[[46,47]],[[46,47]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[46,17,47,47],5],[46,5],[46],[[46,47]],[[],46],[49,9],[52,9],[53,9],[54,9],[55,9],[55,9],[46,8],[46,8],[46,8],[46],[46],[[46,47],8],[46],[49],[53],[54],[55],[51],[51],[46,8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[46,17],[51],[51],[8,46],0,0,0,0,0,0,0,0,0,0,[[],9],[[]],[[]],[[]],[[]],[[]],[[[56,[19,19]]],[[56,[19,19]]]],[[[57,[19,19]]],[[57,[19,19]]]],[[]],[[]],[[],9],[[],9],[[[56,[28,28]],56],5],[[],5],[[],57],[[[56,[29,29]],6],7],[[[57,[29,29]],6],7],[[]],[[]],[[]],[[]],[[]],[[]],[57,9],[[],9],[[],9],[57],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[]],[[8,8]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[58,58],5],[[],5],[[59,6],7],[[59,6],7],[[58,6],7],[[]],[[]],[[]],[[]],[[],59],[[],60],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[61,61],59],[[],59],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[35,62,62],63],[35,9],[35],[35,62],[35,17],[64],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[35],[35],[35],[[[35,[12]]],[[35,[12]]]],[65,65],[[[62,[19]]],[[62,[19]]]],[[[63,[19]]],[[63,[19]]]],[66,66],[67,67],[[[68,[19,19,[0,[19,12]]]]],[[68,[19,19,[0,[19,12]]]]]],[69,69],[70,70],[[[71,[19]]],[[71,[19]]]],[[[72,[19]]],[[72,[19]]]],[[[73,[19]]],[[73,[19]]]],[[[74,[12]]],[[74,[12]]]],[[[75,[19,[0,[19,12]]]]],[[75,[19,[0,[19,12]]]]]],[[[76,[19,[0,[19,12]]]]],[[76,[19,[0,[19,12]]]]]],[[[35,[12]],[35,[12]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[62,[26]],62],4],[[[63,[26]],63],4],[[35,62,62],5],[[],35],[[],[[62,[27]]]],[[],[[63,[27]]]],[64],[69,65],[35,8],[64,8],[35,8],[35,8],[64,8],[[35,63],9],[8,[[63,[12]]]],[35,73],[35,76],[35],[64],[[35,63],9],[35,9],[64,9],[[35,63],9],[35,9],[64,9],0,[35,77],[35],[[35,62],70],[64],[[35,62,62],71],[[35,1]],[[35,62,1],70],[[64,1]],[[],[[62,[12]]]],[[],[[63,[12]]]],[[[62,[28]],62],5],[[[63,[28]],63],5],[[[74,[12]],[74,[12]]],5],[[],5],[[],5],[35],[[35,1],68],[35,35],[[35,62,62],[[9,[63]]]],[[35,62,62],9],[[35,62,1],[[9,[63]]]],[[35,6],7],[[[62,[29]],6],7],[[[63,[29]],6],7],[[[66,[29,29]],6],7],[[[67,[29,29]],6],7],[[[68,[29,29,[0,[29,12]]]],6],7],[[[69,[29,29]],6],7],[[[70,[29]],6],7],[[[71,[29]],6],7],[[[78,[29,[0,[29,12]]]],6],7],[[[77,[29,[0,[29,12]]]],6],7],[[[72,[29]],6],7],[[[73,[29]],6],7],[[[74,[29,29]],6],7],[[[75,[29,[0,[29,12]]]],6],7],[[[76,[29,[0,[29,12]]]],6],7],[79,35],[[]],[[]],[[]],[12,[[62,[12]]]],[[]],[12,[[63,[12]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],35],[[],35],[[35,8]],[[35,8]],[[64,8]],[[64,8]],[[[62,[80]]]],[[[63,[80]]]],[[]],[74],[[],8],[[35,63]],[[35,62]],[64],[[[62,[12]]],8],[[[62,[12]]],8],[[[63,[12]]],8],[[35,63]],[[35,62]],[64],[35],[[[64,[35]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[35,35],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[35],[[35,17,62,62],5],[64,5],[35,5],[35,35],[[]],[[],[[62,[12]]]],[[35,62],69],[[35,62],69],[64],[[35,62,1],69],[[35,62,1],69],[[64,1]],[[35,62],69],[8],[[],[[35,[2]]]],[[],64],[8,[[62,[12]]]],[8,[[62,[12]]]],[8,[[63,[12]]]],[[],[[35,[3]]]],[[[65,[12]],35],9],[68,[[9,[62]]]],[69,[[9,[62]]]],[70,9],[71,[[9,[74]]]],[78,9],[77,9],[[[72,[12]]],9],[[[73,[12]]],9],[75,9],[76,9],[[[72,[12]]],9],[[[73,[12]]],9],[75,9],[76,9],[[35,63,1],[[9,[63]]]],[[[65,[12]],35],[[9,[[63,[12]]]]]],[[[66,[12]],1],[[63,[12]]]],[[[67,[12]],1],[[63,[12]]]],[[[65,[12]],35],[[9,[[62,[12]]]]]],[35,8],[64,8],[35,8],[35,8],[64,8],[35,72],[64],[8,[[62,[12]]]],[35,72],[35],[64],[35,9],[[35,62],9],[64,9],[35,9],[[35,62],9],[64,9],0,[35,78],[[[62,[30]],62],[[9,[4]]]],[[[63,[30]],63],[[9,[4]]]],[35],[35],[[35,63],9],[[35,62],9],[[35,8]],[[35,8]],[[35,8]],[[35,8]],[35],[64],[35],[35],[35],[35],[35],[35],[68],[71],[78],[77],[[[72,[12]]]],[[[73,[12]]]],[75],[76],[[[67,[12]]],[[62,[12]]]],[74],[[[67,[12]]],[[62,[12]]]],[74],[[35,62],8],[[35,63],8],[64,8],[64,8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[35,62,62],63],[35],[35,17],[64],[[]],[74],[74],0,0,[[8,8],35],[[8,8],35],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[81,9],[81,9],[81],[81],[81],[81,82],[81,83],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[81],[81],[84,84],[[[81,[19,19,19]]],[[81,[19,19,19]]]],[85,85],[86,86],[87,87],[[[88,[19]]],[[88,[19]]]],[[[89,[19]]],[[89,[19]]]],[[[82,[19,19]]],[[82,[19,19]]]],[[[90,[19,19]]],[[90,[19,19]]]],[[[91,[19,19]]],[[91,[19,19]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[84,84],4],[81,5],[81,5],[83,8],[82,8],[[],81],[84],[81,8],[81,8],[81,8],[81],[81,9],[81,9],[81,88],[81],[[81,1],89],[[81,1]],[[84,84],5],[[],5],[81],[[[84,[29]],6],7],[[[81,[[0,[92,80,29]],29,93]],6],7],[[85,6],7],[[86,6],7],[[87,6],7],[[[88,[29]],6],7],[[[89,[29]],6],7],[[[82,[29,29]],6],7],[[[90,[29,29]],6],7],[[[91,[29,29]],6],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],81],[[],81],[35,81],[[81,8]],[[81,8]],[[],81],[84],[81],[81],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[81,35],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[81,5],[81,5],[83,9],[82,9],[85,8],[81],[81,86],[[81,1],87],[[81,1]],[[],81],[83,9],[85,9],[86,9],[87,9],[88,9],[89,9],[82,9],[90,9],[91,9],[83,9],[85,9],[82,9],[81,8],[81,8],[81,8],[81],[81],[81,85],[[83,8],9],[[82,8],9],[[84,84],[[9,[4]]]],[81,9],[81,5],[81],[85,9],[85],[83],[85],[86],[87],[88],[89],[82],[90],[91],[81,8],[81,8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[81],[81,94],[[8,8],81],[[8,8],81],0,0,0,0,0,0,0,0,0,0,0,0,0,[[[96,[93,95,12]],[97,[12]],[97,[12]]]],[[[96,[93,95,12]]],9],[[[96,[93,95,12]]]],[[[96,[93,95,12]]],[[97,[12]]]],[[[96,[93,95,12]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[96,[93,95,12]]]],[[[96,[19,19,19,[0,[19,95]],19]]],[[96,[19,19,19,[0,[19,95]],19]]]],[[[98,[19]]],[[98,[19]]]],[[[99,[19,19]]],[[99,[19,19]]]],[[[100,[[0,[19,93]],[0,[19,95]],19]]],[[100,[[0,[19,93]],[0,[19,95]],19]]]],[[[101,[[0,[19,93]],[0,[19,95]],19]]],[[101,[[0,[19,93]],[0,[19,95]],19]]]],[[[102,[[0,[19,93]],[0,[19,95]],19]]],[[102,[[0,[19,93]],[0,[19,95]],19]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[104,[103]]]],[[],[[96,[93,95,12]]]],[[[96,[93,95,12]]],8],[[[96,[93,95,12]]],8],[96],[[[96,[93,95,12]],[97,[12]],[97,[12]]]],[[[96,[93,95,12]],[97,[12]],[97,[12]]]],[[[96,[93,95,12]],[97,[12]]],[[102,[93,95,12]]]],[96],[[96,1]],[[[96,[2,95,12]],[97,[12]],1],[[102,[2,95,12]]]],[[[96,[93,95,12]]]],[[[98,[29]],6],7],[[[99,[29,29]],6],7],[[[100,[[0,[29,93]],[0,[29,95]],29]],6],7],[[[101,[[0,[29,93]],[0,[29,95]],29]],6],7],[[[102,[[0,[29,93]],[0,[29,95]],29]],6],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[96,[93,95,12]]]],[[[96,[93,95,12]],8]],[[[96,[93,95,12]],[97,[12]],[97,[12]]],5],[[],8],[[[96,[93,95,12]],[97,[12]]]],[[[96,[93,95,12]]]],[[[96,[93,95,12]],[97,[12]]]],[[[96,[93,95,12]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[96,[93,95,12]],[97,[12]],[97,[12]]],5],[[[96,[93,95,12]]],5],[[],5],[[]],[[96,[97,[12]]]],[[[96,[93,95,12]],[97,[12]]],[[101,[93,95,12]]]],[[[96,[2,95,12]],[97,[12]],1],[[101,[2,95,12]]]],[[96,[97,[12]],1]],[8],[[],[[96,[2]]]],[[],[[96,[3]]]],[[[98,[12]]],9],[[[99,[12]]],9],[[[100,[93,95,12]]],9],[[[101,[93,95,12]]],9],[[[102,[93,95,12]]],9],[[[96,[93,95,12]]],8],[[[96,[93,95,12]]],8],[[[96,[93,95,12]]],8],[96],[8,97],[96],[[[96,[93,95,12]],[97,[12]]]],[[[96,[93,95,12]],[97,[12]]]],[[[96,[93,95,12]],[97,[12]],[97,[12]]]],[[[96,[93,95,12]],[97,[12]]]],[[[96,[93,95,12]]]],[[[98,[12]]]],[[[99,[12]]]],[[[101,[93,95,12]]]],[[[96,[93,95,12]],[97,[12]]],8],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[[96,[93,95,12]],[97,[12]],[97,[12]]],9],[[[96,[93,95,12]]]],[[[96,[93,95,12]]],17],[8,[[96,[93,95,12]]]],[[]],[[35,35]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[79,9],[[79,62,62],63],[79,62],[79],[79,17],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[79],[79],[79],[[[79,[12]]],[[79,[12]]]],[[[105,[12]]],[[105,[12]]]],[[[106,[19,[0,[19,12]]]]],[[106,[19,[0,[19,12]]]]]],[[[107,[12]]],[[107,[12]]]],[[[108,[19]]],[[108,[19]]]],[[[109,[19]]],[[109,[19]]]],[[[110,[19,19]]],[[110,[19,19]]]],[[[111,[19,19,[0,[19,12]]]]],[[111,[19,19,[0,[19,12]]]]]],[[[112,[19,19]]],[[112,[19,19]]]],[[[113,[19,19]]],[[113,[19,19]]]],[[[114,[19,19]]],[[114,[19,19]]]],[[[79,[12]],[79,[12]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[79,62,62],5],[[79,62],5],[[],79],[112,105],[79,8],[79,8],[79,8],[[79,63],9],0,[79,114],[79],[[79,63],9],[79,9],[79,9],[[79,63],9],[79,16],[79,16],[79],[[79,62],108],[[79,62,62],109],[[79,62,1],108],[[79,1]],[[[107,[12]],[107,[12]]],5],[79],[[79,1],111],[79,79],[[79,62,62],[[9,[63]]]],[[79,62,62],9],[[79,6],7],[[[106,[29,[0,[29,12]]]],6],7],[[[107,[29,29]],6],7],[[[108,[29]],6],7],[[[109,[29]],6],7],[[[110,[29,29]],6],7],[[[111,[29,29,[0,[29,12]]]],6],7],[[[112,[29,29]],6],7],[[[113,[29,29]],6],7],[[[114,[29,29]],6],7],[[]],[35,79],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],79],[[],79],[[79,8]],[[79,8]],[107],[[79,62]],[[79,63]],[[79,63]],[[79,62]],[79],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[79,17,62,62],5],[79,5],[79,79],[79],[[79,62],112],[[79,62,1],112],[[79,62,1]],[[79,62],112],[[],[[79,[2]]]],[[[105,[12]],79],9],[106,9],[108,9],[109,[[9,[107]]]],[110,9],[111,[[9,[62]]]],[112,[[9,[62]]]],[[[113,[12]]],9],[[[114,[12]]],9],[106,9],[110,9],[[[113,[12]]],9],[[[114,[12]]],9],[[[105,[12]],79],[[9,[[63,[12]]]]]],[[[105,[12]],79],[[9,[[62,[12]]]]]],[79,8],[79,8],[79,8],[79],0,[79,113],[79],[[79,62],9],[79,9],[[79,62],9],[79,9],[79,16],[79,16],[[79,63],9],[[79,62],9],[79],[79],[79],[79],[106],[109],[111],[[[113,[12]]]],[[[114,[12]]]],[107],[107],[[79,62],8],[[79,63],8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[79,62,62],63],[79],[79,17],[107],[107],[[8,8],79],[[8,8],79],0,[[]],[[]],[[[115,[19]]],[[115,[19]]]],[[]],[115,5],[115],[115],[[[115,[29]],6],7],[[]],[[]],[115,36],[8,115],[[]],[[],10],[[],10],[[],11],[115,5],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[116],[117],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[118,9],[[],118],[119,119],[[[120,[19]]],[[120,[19]]]],[[[118,[19]]],[[118,[19]]]],[[[121,[19,19]]],[[121,[19,19]]]],[[[122,[19,19]]],[[122,[19,19]]]],[[[123,[19,19]]],[[123,[19,19]]]],[[[124,[19,19]]],[[124,[19,19]]]],[[[125,[19,19]]],[[125,[19,19]]]],[[[126,[19,19]]],[[126,[19,19]]]],[[[127,[19,19]]],[[127,[19,19]]]],[[[128,[19,19]]],[[128,[19,19]]]],[[[129,[19,19,19]]],[[129,[19,19,19]]]],[[[130,[19,19,19]]],[[130,[19,19,19]]]],[[[131,[19,19]]],[[131,[19,19]]]],[[[132,[19]]],[[132,[19]]]],[[[133,[19,19,19]]],[[133,[19,19,19]]]],[[[134,[19]]],[[134,[19]]]],[[[116,[19]]],[[116,[19]]]],[[[135,[19]]],[[135,[19]]]],[[[117,[19]]],[[117,[19]]]],[[[136,[19]]],[[136,[19]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[119,119],4],[125],[[]],[[],118],[[],119],[[],118],[[],121],[[],122],[[],123],[[],124],[[]],0,0,0,[[],8],[126,8],[131,8],[116,8],[[],8],[116,8],[[]],[126],[131],[116],[126,9],[116,9],[116,9],[[]],[126],[131],[116],[1],[[126,1]],[[131,1]],[[116,1]],[[],121],[[],122],[[119,119],5],[[],5],0,[[119,6],7],[[[120,[29]],6],7],[[[118,[29]],6],7],[[[121,[29,29]],6],7],[[[122,[29,29]],6],7],[[[125,[29,29]],6],7],[[[126,[29,29]],6],7],[[[127,[29,29]],6],7],[[[128,[29,29]],6],7],[[[129,[29,29,29]],6],7],[[[130,[29,29,29]],6],7],[[[131,[29,29]],6],7],[[[132,[29]],6],7],[[[133,[29,29,29]],6],7],[[[134,[29]],6],7],[[[116,[29]],6],7],[[[135,[29]],6],7],[[[117,[29]],6],7],[[[136,[29]],6],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],126],[[],131],[8],[8],[[126,8]],[[126,8]],[[131,8]],[[131,8]],[[116,8]],[[116,8]],[36,121],[119],[[]],[[]],[117],[[],5],[[],5],[125],[125],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[117],[[],5],[116,5],[[],5],[[],5],[[],125],[[],125],[121],[122],[[]],[126],[131],[116],[1],[[126,1]],[[131,1]],[[116,1]],[[],121],[[],122],[[],123],[[],124],[121,9],[122,9],[123,9],[124,9],[125,9],[127,9],[128,9],[129,9],[130,9],[132,9],[133,9],[134,9],[135,9],[136,9],[[],8],[126,8],[131,8],[116,8],[[],8],[131,8],[116,8],[[]],[126],[131],[116],[[]],[126],[131],[116],[126,9],[116,9],[116,9],[[119,119],[[9,[4]]]],[121],[122],[124],[[]],[126],[131],[[[116,[137]]]],[[],5],[118,5],[[],5],[118,5],[127],[128],[129],[130],[132],[133],[134],[135],[136],[[]],[117],0,0,0,[[]],[117],[[],8],[[],8],[126,8],[126,8],[131,8],[131,8],[116,8],[116,8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],5],[[]],[126],[131],[[[116,[137]]]],[[],9],[121,9],[122,9],[123,9],[124,9],[[]],[[]],[117]],"p":[[4,"Direction"],[4,"Directed"],[4,"Undirected"],[4,"Ordering"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"usize"],[4,"Option"],[4,"Result"],[3,"TypeId"],[8,"IndexType"],[3,"List"],[6,"NodeIndex"],[3,"EdgeIndex"],[8,"Iterator"],[3,"FixedBitSet"],[3,"OutgoingEdgeIndices"],[8,"Clone"],[3,"Neighbors"],[3,"EdgeReference"],[3,"EdgeIndices"],[3,"NodeIndices"],[3,"EdgeReferences"],[3,"OutgoingEdgeReferences"],[8,"Ord"],[8,"Default"],[8,"PartialEq"],[8,"Debug"],[8,"PartialOrd"],[3,"DfsSpace"],[3,"MinSpanningTree"],[3,"Cycle"],[3,"NegativeCycle"],[3,"Graph"],[3,"Vec"],[3,"TarjanScc"],[3,"Paths"],[3,"HashMap"],[3,"Dominators"],[3,"DominatorsIter"],[3,"DominatedByIter"],[3,"Matching"],[3,"MatchedEdges"],[3,"MatchedNodes"],[3,"Csr"],[6,"NodeIndex"],[3,"EdgesNotSorted"],[3,"Edges"],[8,"Copy"],[3,"EdgeReference"],[3,"EdgeReferences"],[3,"Neighbors"],[3,"NodeIdentifiers"],[3,"NodeReferences"],[4,"Element"],[3,"FilterElements"],[4,"Config"],[3,"Dot"],[3,"String"],[8,"Fn"],[3,"NodeIndex"],[3,"EdgeIndex"],[3,"Frozen"],[3,"WalkNeighbors"],[3,"Node"],[3,"Edge"],[3,"Externals"],[3,"Neighbors"],[3,"Edges"],[3,"EdgesConnecting"],[3,"NodeIndices"],[3,"EdgeIndices"],[3,"EdgeReference"],[3,"NodeReferences"],[3,"EdgeReferences"],[3,"EdgeWeightsMut"],[3,"NodeWeightsMut"],[3,"StableGraph"],[8,"Hash"],[3,"GraphMap"],[3,"AllEdges"],[3,"AllEdgesMut"],[3,"Ptr"],[3,"Nodes"],[3,"Neighbors"],[3,"NeighborsDirected"],[3,"Edges"],[3,"EdgesDirected"],[3,"NodeIdentifiers"],[3,"NodeReferences"],[8,"Eq"],[8,"EdgeType"],[3,"HashSet"],[8,"Nullable"],[3,"MatrixGraph"],[6,"NodeIndex"],[3,"NodeIdentifiers"],[3,"NodeReferences"],[3,"EdgeReferences"],[3,"Neighbors"],[3,"Edges"],[8,"Zero"],[3,"NotZero"],[3,"WalkNeighbors"],[3,"NodeReferences"],[3,"EdgeReference"],[3,"Edges"],[3,"EdgesConnecting"],[3,"EdgeReferences"],[3,"Externals"],[3,"Neighbors"],[3,"NodeIndices"],[3,"EdgeIndices"],[3,"UnionFind"],[3,"Reversed"],[3,"ReversedEdgeReference"],[4,"Control"],[3,"Time"],[4,"DfsEvent"],[3,"Dfs"],[3,"DfsPostOrder"],[3,"Bfs"],[3,"Topo"],[3,"WalkerIter"],[3,"NodeFiltered"],[3,"NodeFilteredNeighbors"],[3,"NodeFilteredNodes"],[3,"NodeFilteredEdgeReferences"],[3,"NodeFilteredEdges"],[3,"EdgeFiltered"],[3,"EdgeFilteredNeighbors"],[3,"EdgeFilteredEdges"],[3,"EdgeFilteredNeighborsDirected"],[3,"ReversedEdges"],[3,"ReversedEdgeReferences"],[8,"Visitable"],[8,"IntoWeightedEdge"],[8,"FloatMeasure"],[8,"BoundedMeasure"],[8,"Build"],[8,"DataMap"],[8,"DataMapMut"],[8,"ElementIterator"],[8,"FromElements"],[8,"Create"],[13,"Edge"],[13,"Node"],[8,"GetAdjacencyMatrix"],[8,"EdgeRef"],[8,"GraphBase"],[8,"IntoEdgeReferences"],[8,"GraphProp"],[8,"Data"],[8,"IntoEdges"],[8,"IntoEdgesDirected"],[8,"Walker"],[8,"IntoNeighbors"],[8,"IntoNeighborsDirected"],[8,"NodeRef"],[8,"IntoNodeIdentifiers"],[8,"IntoNodeReferences"],[8,"ControlFlow"],[8,"EdgeIndexable"],[8,"EdgeCount"],[8,"NodeIndexable"],[8,"FilterEdge"],[8,"FilterNode"],[8,"VisitMap"],[8,"NodeCount"]]},\
"plotters":{"doc":"Plotters - A Rust drawing library focus on data plotting …","t":"AAAAOAAAAADDISQSIDDKLLLLLLLLLLLLKLLLLKLLLLLLLLLKLLLLLLLLLLKLLLLLKLLLLLLLKLLLLLLLLLKLLLLLLLLLLLLLLLLLLNDDDNDDENNNNDNNNNDDEDNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIQIDLLALLALLLLLLAAKLLKLLLLADDENNLLLLLLLLLLLLLLLLLLLLLLLLLLLLIIINDIIIDDDIDEINQDDKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNINDNQDIINQIIENDDIIEDQIQLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLKLLLLLLLLLLLKLKLKLLLLLLLLLKLKLLLLLLLLLLLLLLLLLLLLLLLLKLLLLKLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLMLLLLLLLLLLLLLLLLLLMLIIDDDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKDLLLLFALLLLLLLLLLDMLLLLMMFLLLLNDEDINDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDDIDDIDDDDDIQDQGDDDQIIDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLLLKLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDICCIIDDNNDISCDDNNDDDIINDDIGIDDDQNDEEEQCDDDIIIIIIIIINENNDDDDINNNCNNNNDNDENNNIDDDDGDDDDDDCDDCDDDDNNNNDNEENDDCDDINDNNNNQCCKLLLLLLLLLLLLLLLMMLLLKLLKLLMMLLLLLKKCKKLLLKKKLKFKMKKMKLLLLKLLLLLLLLLKDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLICCNSCIDGEGEECDNIINGCNNNNNIDDDDCDDENNNNNDINCDCNCLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMALLLLLLLLLLLLLLLMLLLLMLLLLLLLLLLLLLLLLLLLLLCLLLLLLLKLLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLMLLAKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLRRRRRRRRRARRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRNNNENDNNELLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLM","n":["backend","chart","coord","data","define_color","drawing","element","prelude","series","style","BGRXPixel","BitMapBackend","DrawingBackend","EFFECTIVE_PIXEL_SIZE","ErrorType","PIXEL_SIZE","PixelFormat","RGBPixel","SVGBackend","blend_rect_fast","blend_rect_fast","blend_rect_fast","blit_bitmap","blit_bitmap","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_at","byte_at","byte_at","can_be_saved","can_be_saved","decode_pixel","decode_pixel","decode_pixel","draw_circle","draw_circle","draw_line","draw_line","draw_line","draw_path","draw_path","draw_pixel","draw_pixel","draw_pixel","draw_pixel","draw_rect","draw_rect","draw_rect","draw_text","draw_text","drop","drop","ensure_prepared","ensure_prepared","ensure_prepared","estimate_text_size","fill_polygon","fill_polygon","fill_rect_fast","fill_rect_fast","fill_rect_fast","fill_vertical_line_fast","from","from","from","from","get_size","get_size","get_size","gif","into","into","into","into","new","new","present","present","present","split","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","with_buffer","with_buffer_and_format","with_string","Bottom","ChartBuilder","ChartContext","ChartState","Coordinate","DualCoordChartContext","DualCoordChartState","LabelAreaPosition","Left","LowerLeft","LowerMiddle","LowerRight","MeshStyle","MiddleLeft","MiddleMiddle","MiddleRight","Right","SecondaryMeshStyle","SeriesAnno","SeriesLabelPosition","SeriesLabelStyle","Top","UpperLeft","UpperMiddle","UpperRight","as_coord_spec","axis_desc_style","axis_desc_style","axis_style","axis_style","backend_coord","background_style","bold_line_style","border_style","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_secondary","build_cartesian_2d","build_cartesian_3d","build_ranged","caption","clone","clone","clone","clone_into","clone_into","clone_into","configure_axes","configure_mesh","configure_secondary_axes","configure_series_labels","deref","deref_mut","disable_axes","disable_mesh","disable_x_axis","disable_x_mesh","disable_y_axis","disable_y_mesh","draw","draw","draw","draw_secondary_series","draw_series","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into_chart_state","into_chart_state","into_coord_trans","into_coord_trans_pair","into_secondary_coord_trans","into_shared_chart_state","into_shared_chart_state","label","label_font","label_style","label_style","legend","legend_area_size","light_line_style","margin","margin","margin_bottom","margin_left","margin_right","margin_top","max_light_lines","on","plotting_area","position","restore","restore","right_y_label_area_size","secondary_plotting_area","set_3d_pixel_range","set_all_label_area_size","set_all_tick_mark_size","set_all_tick_mark_size","set_label_area_size","set_left_and_bottom_label_area_size","set_secondary_coord","set_tick_mark_size","set_tick_mark_size","to_chart_state","to_chart_state","to_owned","to_owned","to_owned","top_x_label_area_size","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_projection","x_desc","x_desc","x_label_area_size","x_label_formatter","x_label_formatter","x_label_offset","x_label_offset","x_label_style","x_labels","x_labels","x_max_light_lines","x_range","y_desc","y_desc","y_label_area_size","y_label_formatter","y_label_formatter","y_label_offset","y_label_offset","y_label_style","y_labels","y_labels","y_max_light_lines","y_range","CoordTranslate","From","ReverseCoordTranslate","Shift","borrow","borrow_mut","cartesian","clone","clone_into","combinators","depth","depth","depth","fmt","from","into","ranged1d","ranged3d","reverse_translate","reverse_translate","to_owned","translate","translate","try_from","try_into","type_id","types","Cartesian2d","Cartesian3d","MeshLine","XMesh","YMesh","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","draw","draw_mesh","from","from","get_x_axis_pixel_range","get_x_range","get_y_axis_pixel_range","get_y_range","into","into","new","reverse_translate","to_owned","translate","try_from","try_from","try_into","try_into","type_id","type_id","x_spec","y_spec","BindKeyPointMethod","BindKeyPoints","BuildNestedCoord","Category","GroupBy","IntoLinspace","IntoLogRange","IntoPartialAxis","Linspace","LogCoord","LogRange","LogScalable","NestedRange","NestedValue","ToGroupByRange","Value","ValueType","WithKeyPointMethod","WithKeyPoints","as_f64","axis_pixel_range","axis_pixel_range","bold_points","bold_points_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","category","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","eq","fmt","format","format","format","from","from","from","from","from","from","from","from","from","from","from","from","from_f64","from_index","from_index","from_index","from_index","from_index","group_by","group_by","group_by","index_of","index_of","index_of","index_of","index_of","into","into","into","into","into","into","into","into","key_points","key_points","key_points","key_points","key_points","key_points","light_points","light_points_mut","log_scale","make_partial_axis","map","map","map","map","map","map","nested_coord","nested_coord","nested_coord","nested_value","partial_axis","partial_axis","partial_axis","range","range","range","range","range","range","size","size","size","size","size","step","step","step","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unmap","unmap","unmap","unmap","unmap","use_ceil","use_exact","use_floor","use_round","with_key_point_func","with_key_point_func","with_key_point_func","with_key_points","with_key_points","with_key_points","with_light_point_func","with_light_points","Any","AsRangedCoord","Bold","BoldPoints","CenterOf","CoordDescType","DefaultFormatting","DefaultValueFormatOption","DiscreteRanged","Exact","FormatOption","IntoSegmentedCoord","KeyPointHint","KeyPointWeight","Last","LightPoints","NoDefaultFormatting","Ranged","ReversibleRanged","SegmentValue","SegmentedCoord","Value","ValueFormatter","ValueType","allow_light_points","axis_pixel_range","bold_points","bold_points","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","fmt","format","format","format_ext","from","from","from","from","from","from","from","from","from","from_index","from_index","index_of","index_of","into","into","into","into","into","into","into","into_segmented","into_segmented","into_segmented","key_points","key_points","map","map","max_num_points","max_num_points","max_num_points","new","next","next","next","previous","previous","previous","range","range","size","size","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unmap","unmap","values","values","values","weight","weight","weight","Cartesian3d","ProjectionMatrix","ProjectionMatrixBuilder","as_mut","as_ref","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","default","depth","fmt","from","from","from","from","into","into","into","into_matrix","map_3d","mul","mul","mul","new","new","normalize","one","pitch","projected_depth","projected_depth","projection","rotate","scale","scale","set_coord_pixel_range","set_pivot","set_projection","shift","to_owned","to_owned","to_owned","translate","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_projection","yaw","zero","IntoMonthly","IntoYearly","Monthly","RangedCoordf32","RangedCoordf64","RangedCoordi128","RangedCoordi32","RangedCoordi64","RangedCoordu128","RangedCoordu32","RangedCoordu64","RangedCoordusize","RangedDate","RangedDateTime","RangedDuration","RangedSlice","Yearly","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","format","format","format","format","format","format","format","format","format","format","format","format","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_index","from_index","from_index","from_index","from_index","from_index","from_index","from_index","from_index","from_index","from_index","index_of","index_of","index_of","index_of","index_of","index_of","index_of","index_of","index_of","index_of","index_of","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","key_points","key_points","key_points","key_points","key_points","key_points","key_points","key_points","key_points","key_points","key_points","key_points","key_points","key_points","key_points","map","map","map","map","map","map","map","map","map","map","map","map","map","map","map","monthly","range","range","range","range","range","range","range","range","range","range","range","range","range","range","range","size","size","size","size","size","size","size","size","size","size","size","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unmap","unmap","unmap","unmap","unmap","unmap","unmap","unmap","unmap","unmap","unmap","unmap","unmap","yearly","Quartiles","borrow","borrow_mut","clone","clone_into","fitting_range","float","fmt","from","into","median","new","to_owned","try_from","try_into","type_id","values","FloatPrettyPrinter","allow_scientific","borrow","borrow_mut","from","into","max_decimal","min_decimal","pretty_print_float","print","try_from","try_into","type_id","BackendError","DrawingArea","DrawingAreaErrorKind","DummyBackendError","IntoDrawingArea","LayoutError","Rect","SharingError","apply_coord_spec","as_coord_spec","as_coord_spec_mut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","dim_in_pixel","draw","draw_mesh","draw_pixel","draw_text","estimate_text_size","fill","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","get_base_pixel","get_pixel_range","get_x_axis_pixel_range","get_x_range","get_y_axis_pixel_range","get_y_range","into","into","into","into","into_coord_spec","into_drawing_area","map_coordinate","margin","present","provide","provide","relative_to_height","relative_to_width","shrink","split_by_breakpoints","split_evenly","split_horizontally","split_vertically","strip_coord_spec","titled","to_owned","to_owned","to_string","to_string","truncate","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","use_screen_coord","BackendCoordAndZ","BackendCoordOnly","BitMapElement","Boxplot","CandleStick","Circle","ComposedElement","CoordMapper","Cross","Cubiod","Drawable","DynElement","EmptyElement","ErrorBar","ErrorBarOrientH","ErrorBarOrientV","IntoDynElement","IntoIter","MultiLineText","Output","Path","PathElement","Pie","Pixel","Point","PointCollection","PointElement","Polygon","Rectangle","Text","TriangleMarker","add","add","as_bitmap_backend","at","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","compute_line_layout","copy_to","draw","draw","draw","draw","draw","draw","draw","draw","draw","draw","draw","draw","draw","draw","draw","draw","draw","draw","draw","estimate_dimension","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","from_string","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_dyn","label_offset","label_style","make_point","make_point","make_point","make_point","make_point","map","map","map","move_to","new","new","new","new","new","new","new","new","new","new","new","new","new","new_horizontal","new_horizontal","new_vertical","new_vertical","offset","percentages","point_iter","point_iter","point_iter","point_iter","point_iter","point_iter","point_iter","point_iter","point_iter","point_iter","point_iter","point_iter","point_iter","point_iter","point_iter","point_iter","point_iter","point_iter","point_iter","push_line","relocate","set_line_height","set_margin","start_angle","style","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","whisker_width","width","with_mut","with_owned_buffer","with_ref","AreaSeries","AsRelative","BLACK","BLUE","BindKeyPointMethod","BindKeyPoints","BitMapBackend","BitMapElement","Bold","Bottom","Boxplot","BuildNestedCoord","COLORS","CYAN","CandleStick","Cartesian2d","Category","CenterOf","ChartBuilder","ChartContext","Circle","Color","CoordTranslate","Coordinate","Cross","Cubiod","DiscreteRanged","DrawResult","DrawingBackend","DynElement","EmptyElement","ErrorBar","ErrorType","Exact","FontDesc","FontFamily","FontStyle","FontTransform","From","GREEN","GroupBy","HSLColor","Histogram","IntoDynElement","IntoFont","IntoLinspace","IntoLogRange","IntoMonthly","IntoPartialAxis","IntoSegmentedCoord","IntoTextStyle","IntoYearly","Italic","LabelAreaPosition","Last","Left","LineSeries","Linspace","LogCoord","LogRange","LogScalable","LowerLeft","LowerMiddle","LowerRight","MAGENTA","MiddleLeft","MiddleMiddle","MiddleRight","Monospace","MultiLineText","Name","NestedRange","NestedValue","None","Normal","Oblique","Palette","Palette100","Palette99","Palette9999","PaletteColor","Path","PathElement","Pie","Pixel","PointSeries","Polygon","Quartiles","RED","RGBAColor","RGBColor","Ranged","RangedDate","RangedDateTime","RangedDuration","Rectangle","Right","Rotate180","Rotate270","Rotate90","SVGBackend","SansSerif","SegmentValue","SeriesLabelPosition","Serif","ShapeStyle","SurfaceSeries","TRANSPARENT","Text","TextStyle","ToGroupByRange","Top","TriangleMarker","UpperLeft","UpperMiddle","UpperRight","Value","ValueType","WHITE","YELLOW","as_f64","as_str","as_str","blit_bitmap","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","color","color","draw_circle","draw_line","draw_path","draw_pixel","draw_rect","draw_text","ensure_prepared","estimate_text_size","fill_polygon","filled","font","from","from","from","from","from","from_f64","from_index","full_palette","get_size","index_of","into","into","into","into_dyn","into_font","into_text_style","into_text_style","log_scale","make_partial_axis","monthly","pos","present","size","stroke_width","to_backend_color","to_owned","to_owned","to_owned","transform","translate","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","yearly","AreaSeries","Histogram","LineSeries","PointSeries","SurfaceSeries","baseline","baseline_func","border_style","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","data","from","from","from","from","from","horizontal","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","margin","new","new","new","new","next","next","next","next","next","next","of_element","point_size","style","style","style_func","style_func","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vertical","xoy","xoz","yoz","AsRelative","BLACK","BLUE","Bold","COLORS","CYAN","Color","FontDesc","FontError","FontFamily","FontResult","FontStyle","FontTransform","GREEN","HSLColor","Height","IntoFont","IntoTextStyle","Italic","LayoutBox","MAGENTA","Monospace","Name","None","Normal","Oblique","Palette","Palette100","Palette99","Palette9999","PaletteColor","RED","RGBAColor","RGBColor","RelativeSize","Rotate180","Rotate270","Rotate90","SansSerif","Serif","ShapeStyle","SizeDesc","Smaller","TRANSPARENT","TextStyle","WHITE","Width","YELLOW","alpha","alpha","alpha","anchor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","box_size","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","color","color","color","color","color","color","color","color","colors","default","default","default","default","draw","draw","eq","eq","eq","eq","family","filled","filled","filled","filled","filled","fmt","fmt","fmt","fmt","font","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","full_palette","get_family","get_name","get_size","get_style","get_transform","hash","hash","in_pixels","in_pixels","into","into","into","into","into","into","into","into","into","into","into","into_font","into_text_style","into_text_style","into_text_style","layout_box","layout_box","max","min","mix","mix","mix","new","percent","percent","percent","percent_height","percent_height","percent_height","percent_width","percent_width","percent_width","pick","pick","pick","pick","pos","pos","resize","rgb","rgb","rgb","size","stroke_width","stroke_width","stroke_width","stroke_width","stroke_width","stroke_width","style","style","text_anchor","to_backend_color","to_backend_color","to_backend_color","to_backend_color","to_backend_color","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_rgba","to_rgba","to_rgba","transform","transform","transform","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_anchor","with_anchor","with_anchor","with_color","with_color","with_color","BLACK","BLUE","CYAN","GREEN","MAGENTA","RED","TRANSPARENT","WHITE","YELLOW","full_palette","AMBER","AMBER_100","AMBER_200","AMBER_300","AMBER_400","AMBER_50","AMBER_500","AMBER_600","AMBER_700","AMBER_800","AMBER_900","AMBER_A100","AMBER_A200","AMBER_A400","AMBER_A700","BLACK","BLUE","BLUEGREY","BLUEGREY_100","BLUEGREY_200","BLUEGREY_300","BLUEGREY_400","BLUEGREY_50","BLUEGREY_500","BLUEGREY_600","BLUEGREY_700","BLUEGREY_800","BLUEGREY_900","BLUEGREY_A100","BLUEGREY_A200","BLUEGREY_A400","BLUEGREY_A700","BLUE_100","BLUE_200","BLUE_300","BLUE_400","BLUE_50","BLUE_500","BLUE_600","BLUE_700","BLUE_800","BLUE_900","BLUE_A100","BLUE_A200","BLUE_A400","BLUE_A700","BROWN","BROWN_100","BROWN_200","BROWN_300","BROWN_400","BROWN_50","BROWN_500","BROWN_600","BROWN_700","BROWN_800","BROWN_900","BROWN_A100","BROWN_A200","BROWN_A400","BROWN_A700","CYAN","CYAN_100","CYAN_200","CYAN_300","CYAN_400","CYAN_50","CYAN_500","CYAN_600","CYAN_700","CYAN_800","CYAN_900","CYAN_A100","CYAN_A200","CYAN_A400","CYAN_A700","DEEPORANGE","DEEPORANGE_100","DEEPORANGE_200","DEEPORANGE_300","DEEPORANGE_400","DEEPORANGE_50","DEEPORANGE_500","DEEPORANGE_600","DEEPORANGE_700","DEEPORANGE_800","DEEPORANGE_900","DEEPORANGE_A100","DEEPORANGE_A200","DEEPORANGE_A400","DEEPORANGE_A700","DEEPPURPLE","DEEPPURPLE_100","DEEPPURPLE_200","DEEPPURPLE_300","DEEPPURPLE_400","DEEPPURPLE_50","DEEPPURPLE_500","DEEPPURPLE_600","DEEPPURPLE_700","DEEPPURPLE_800","DEEPPURPLE_900","DEEPPURPLE_A100","DEEPPURPLE_A200","DEEPPURPLE_A400","DEEPPURPLE_A700","GREEN","GREEN_100","GREEN_200","GREEN_300","GREEN_400","GREEN_50","GREEN_500","GREEN_600","GREEN_700","GREEN_800","GREEN_900","GREEN_A100","GREEN_A200","GREEN_A400","GREEN_A700","GREY","GREY_100","GREY_200","GREY_300","GREY_400","GREY_50","GREY_500","GREY_600","GREY_700","GREY_800","GREY_900","GREY_A100","GREY_A200","GREY_A400","GREY_A700","INDIGO","INDIGO_100","INDIGO_200","INDIGO_300","INDIGO_400","INDIGO_50","INDIGO_500","INDIGO_600","INDIGO_700","INDIGO_800","INDIGO_900","INDIGO_A100","INDIGO_A200","INDIGO_A400","INDIGO_A700","LIGHTBLUE","LIGHTBLUE_100","LIGHTBLUE_200","LIGHTBLUE_300","LIGHTBLUE_400","LIGHTBLUE_50","LIGHTBLUE_500","LIGHTBLUE_600","LIGHTBLUE_700","LIGHTBLUE_800","LIGHTBLUE_900","LIGHTBLUE_A100","LIGHTBLUE_A200","LIGHTBLUE_A400","LIGHTBLUE_A700","LIGHTGREEN","LIGHTGREEN_100","LIGHTGREEN_200","LIGHTGREEN_300","LIGHTGREEN_400","LIGHTGREEN_50","LIGHTGREEN_500","LIGHTGREEN_600","LIGHTGREEN_700","LIGHTGREEN_800","LIGHTGREEN_900","LIGHTGREEN_A100","LIGHTGREEN_A200","LIGHTGREEN_A400","LIGHTGREEN_A700","LIME","LIME_100","LIME_200","LIME_300","LIME_400","LIME_50","LIME_500","LIME_600","LIME_700","LIME_800","LIME_900","LIME_A100","LIME_A200","LIME_A400","LIME_A700","ORANGE","ORANGE_100","ORANGE_200","ORANGE_300","ORANGE_400","ORANGE_50","ORANGE_500","ORANGE_600","ORANGE_700","ORANGE_800","ORANGE_900","ORANGE_A100","ORANGE_A200","ORANGE_A400","ORANGE_A700","PINK","PINK_100","PINK_200","PINK_300","PINK_400","PINK_50","PINK_500","PINK_600","PINK_700","PINK_800","PINK_900","PINK_A100","PINK_A200","PINK_A400","PINK_A700","PURPLE","PURPLE_100","PURPLE_200","PURPLE_300","PURPLE_400","PURPLE_50","PURPLE_500","PURPLE_600","PURPLE_700","PURPLE_800","PURPLE_900","PURPLE_A100","PURPLE_A200","PURPLE_A400","PURPLE_A700","RED","RED_100","RED_200","RED_300","RED_400","RED_50","RED_500","RED_600","RED_700","RED_800","RED_900","RED_A100","RED_A200","RED_A400","RED_A700","TEAL","TEAL_100","TEAL_200","TEAL_300","TEAL_400","TEAL_50","TEAL_500","TEAL_600","TEAL_700","TEAL_800","TEAL_900","TEAL_A100","TEAL_A200","TEAL_A400","TEAL_A700","WHITE","YELLOW","YELLOW_100","YELLOW_200","YELLOW_300","YELLOW_400","YELLOW_50","YELLOW_500","YELLOW_600","YELLOW_700","YELLOW_800","YELLOW_900","YELLOW_A100","YELLOW_A200","YELLOW_A400","YELLOW_A700","Bottom","Center","Center","HPos","Left","Pos","Right","Top","VPos","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","from","from","from","h_pos","into","into","into","new","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","v_pos"],"q":["plotters","","","","","","","","","","plotters::backend","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","plotters::chartplotters::coord","","","","","","","","","","","","","","","","","","","","","","","","","","","plotters::coord::cartesian","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","plotters::coord::combinators","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","plotters::coord::ranged1d","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","plotters::coord::ranged3d","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","plotters::coord::types","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","plotters::data","","","","","","","","","","","","","","","","","plotters::data::float","","","","","","","","","","","","","plotters::drawing","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","plotters::elementplotters::preludeplotters::series","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","plotters::styleplotters::style::colors","","","","","","","","","","plotters::style::colors::full_paletteplotters::style::text_anchor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["This module contains some useful re-export of backend …","The high-level plotting abstractions.","One of the key features of Plotters is flexible coordinate …","The data processing module, which implements algorithms …","Defines and names a color based on its R, G, B, A values.","The drawing utils for Plotters. In Plotters, we have two …","Defines the drawing elements, the high-level drawing unit …","The module imports the most commonly used types and …","This module contains predefined types of series. The …","The style for shapes and text, font, color, etc.","The marker type that indicates we are currently using a …","The backend that drawing a bitmap","The drawing backend trait, which implements the low-level …","Number of effective bytes per pixel, e.g. for BGRX pixel …","The error type reported by the backend","Number of bytes per pixel","The trait that describes some details about a particular …","The marker type that indicates we are currently using a …","The SVG image drawing backend","The fast alpha blending algorithm for this pixel format","","","","Blit a bitmap on to the backend.","","","","","","","","","Encoding a pixel and returns the idx-th byte for the pixel","","","Indicates if this pixel format can be saved as image. …","","Decode a pixel at the given location","","","","Draw a circle on the drawing backend","","","Draw a line on the drawing backend","","Draw a path on the drawing backend","Draw a pixel on the drawing backend","Drawing a single pixel in this format","","","","","Draw a rectangle on the drawing backend","","Draw a text on the drawing backend","","","Ensure the backend is ready to draw","","","Estimate the size of the horizontal text if rendered on …","","","The fast rectangle filling algorithm","","","The fast vertical line filling algorithm","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get the dimension of the drawing backend in pixels","","","Create a new bitmap backend that generate GIF animation","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new SVG drawing backend","Create a new bitmap backend","Finalize the drawing step and present all the changes. …","","","Split a bitmap backend vertically into several sub drawing …","","","","","","","","","","","","","Create a new bitmap backend which only lives in-memory","Create a new bitmap backend with a in-memory buffer with …","Create a new SVG drawing backend and store the document …","Bottom of the figure","The helper object to create a chart context, which is used …","The context of the chart. This is the core object of …","A chart context state - This is the data that is needed to …","Places the series label at the specific location in …","The chart context that has two coordinate system attached. …","The chart state for a dual coord chart, see the detailed …","Specifies one of the four label positions around the …","Left side of the figure","Places the series label at the lower left","Places the series label at the lower middle","Places the series label at the lower right","The struct that is used for tracking the configuration of …","Places the series label at the middle left","Places the series label at the middle middle","Places the series label at the middle right","Right side of the figure","The style used to describe the mesh and axis for a …","The annotations (such as the label of the series, the …","Useful to specify the position of the series label.","The struct to specify the series label of a target chart …","Top of the figure","Places the series label at the upper left","Places the series label at the upper middle","Places the series label at the upper right","Cast the reference to a chart context to a reference to …","Set the axis description’s style. If not given, use …","Set the axis description’s style. If not given, use …","Set the style definition for the axis","Set the style definition for the axis","Maps the coordinate to the backend coordinate. This is …","Sets the background style of the label series area.","Set the style for the coarse grind grid","Sets the style of the label series area.","","","","","","","","","","","","","","","","","","","","","","","","","Borrow a mutable reference to the chart context that uses …","Builds a chart with a 2D Cartesian coordinate system.","Builds a chart with a 3D Cartesian coordinate system.","This function has been renamed to …","Sets the title or caption of the chart.","","","","","","","Create an axis configuration object, to set line styles, …","Initialize a mesh configuration object and mesh drawing …","Start configure the style for the secondary axes","Configure the styles for drawing series labels in the chart","","","Disable drawing all axes","Disable drawing all meshes","Disable drawing the X axis","Disable the mesh for the x axis.","Disable drawing the Y axis","Disable the mesh for the y axis","Draw the axes for the secondary coordinate system","Draw the configured mesh on the target plot","Draws the series label area.","Draw a series use the secondary coordinate system.","Draws a data series. A data series in Plotters is …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert a chart context into a chart state, by doing so, …","Convert the chart context into a chart state, similar to …","Convert the chart context into an closure that can be used …","Convert the chart context into a pair of closures that …","Convert the chart context into the secondary coordinate …","Convert the chart context into a sharable chart state. …","Convert the chart context into a sharable chart state.","Sets the series label for the current series.","Sets the font for series labels.","Set the label style for the secondary axis","Set the style of the label text","Sets the legend element creator function.","Sets the size of the legend area.","Set the style for the fine grind grid","Sets the size of the four margins of the chart.","Sets the margin of the series label drawing area.","Sets the size of the bottom margin of the chart.","Sets the size of the left margin of the chart.","Sets the size of the right margin of the chart.","Sets the size of the top margin of the chart.","Set the maximum number of divisions for the minor grid","Create a chart builder on the given drawing area","Get a reference of underlying plotting area","Sets the series label positioning style","Restore the chart state on the given drawing area","Restore the chart context on the given drawing area","Sets the size of the Y label area to the right of the …","Get a reference to the drawing area that uses the …","Sets the 3d coordinate pixel range.","Sets the size of the four label areas of the chart.","Set all the tick marks to the same size <code>value</code>: The new size","Set all the tick mark to the same size <code>value</code>: The new size","Sets the size of a chart label area.","Sets the size of the left and bottom label areas of the …","Convert this chart context into a dual axis chart context …","Sets the tick mark size for a given label area position. …","Set the tick mark size on the axes. When this is set to …","Make the chart context, do not consume the chart context …","Copy the coordinate specs and make a chart state","","","","Sets the size of the X label area at the top of the chart.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Override the 3D projection matrix. This function allows to …","Set the X axis’s description","Set the X axis’s description","Sets the size of the X label area at the bottom of the …","Set the formatter function for the X label text","Set the formatter function for the X label text","The offset of x labels. This is used when we want to place …","The offset of x labels. This is used when we want to place …","Set the style of the label X axis text","Set how many labels for the X axis at most","Set how many labels for the X axis at most","Set the maximum number of divisions for the minor grid","Get the range of X axis","Set the Y axis’s description","Set the Y axis’s description","Sets the size of the Y label area to the left of the chart.","Set the formatter function for the Y label text","Set the formatter function for the Y label text","The offset of y labels. This is used when we want to place …","The offset of y labels. This is used when we want to place …","Set the style of the label Y axis text","Set how many label for the Y axis at most","Set how many label for the Y axis at most","Set the maximum number of divisions for the minor grid","Get range of the Y axis","The trait that translates some customized object to the …","Specifies the object to be translated from","The trait indicates that the coordinate system supports …","The coordinate translation that only impose shift","","","Groups Cartesian ranged coordinates in 2d and 3d.","","","The coordinate combinators","Get the Z-value of current coordinate","Get the Z-value of current coordinate","Get the Z-value of current coordinate","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","The one-dimensional coordinate system abstraction.","Ranged coordinates in 3d.","Reverse translate the coordinate from the drawing …","","","Translate the guest coordinate to the guest coordinate","","","","","The primitive types supported by Plotters coordinate system","A 2D Cartesian coordinate system described by two 1D …","A 3D cartesian coordinate system","Represent a coordinate mesh for the two ranged value …","Used to plot the horizontal lines of the mesh","Used to plot the vertical lines of the mesh","","","","","","","Draw a single mesh line onto the backend","Draw the mesh for the coordinate system","Returns the argument unchanged.","Returns the argument unchanged.","Get the horizental backend coordinate range where X axis …","Get the range of X axis","Get the vertical backend coordinate range where Y axis …","Get the range of Y axis","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new 2D cartesian coordinate system","","","","","","","","","","Get the 1D coordinate spec for X axis","Get the 1D coordinate spec for Y axis","Bind an existing coordinate spec with a given key points …","Bind a existing coordinate spec with a given key points …","Used to build a nested coordinate system.","Category value","Grouping the value in the coordinate specification.","Makes a linspace coordinate from the ranged coordinates.","Convert a range to a log scale coordinate spec","The trait for the types that can be converted into a …","The coordinate combinator that transform a continous …","A log scaled coordinate axis","The logarithmic coodinate decorator. This decorator is …","The trait for the type that is able to be presented in the …","A nested coordinate spec which is a discrete coordinate on …","Describe a value for a nested coordinate","The trait that provides method <code>Self::group_by</code> function …","One exact nested value","The type of the value","The coordinate decorator that allows customized keypoint …","The coordinate decorator that binds a key point vector. …","Make the conversion from the type to the floating point …","","","Get a reference to the bold points","Get a mut reference to the bold points","","","","","","","","","","","","","","","","","Get the category of current nest value","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Convert a floating point number to the scale","","","","","","Make a grouping ranged value, see the documentation for …","Make a grouping ranged value, see the documentation for …","Make a grouping ranged value, see the documentation for …","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Get a reference to light key points","Get a mut reference to the light key points","Make the log scale coordinate","Make a partial axis based on the percentage of visible …","","","","","","","Builds a nested coordinate system.","Builds a nested coordinate system.","Builds a nested coordinate system.","Get the nested value from this value","Make the partial axis","Make the partial axis","Make the partial axis","","","","","","","","","","","","Set the step value, make a linspace coordinate from the …","Set the step value, make a linspace coordinate from the …","Set the step value, make a linspace coordinate from the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Set the linspace use the round up method for value matching","Set the linspace use the exact match method for value …","Set the linspace use the round down method for value …","Set the linspace use the best match method for value …","Bind a existing coordinate spec with a given key points …","Bind a existing coordinate spec with a given key points …","Bind a existing coordinate spec with a given key points …","Bind a existing coordinate spec with a given key points …","Bind a existing coordinate spec with a given key points …","Bind a existing coordinate spec with a given key points …","Define the light key point algorithm, by default this …","Specify the light key points, which is used to render the …","Allows any key points","The trait for the type that can be converted into a ranged …","Allows only bold key points","The key point hint indicates we only need key point for …","Means we are referring the center of position <code>T</code> and the …","Type to describe a coordinate system","This makes the ranged coord uses the default <code>Debug</code> based …","Since stable Rust doesn’t have specialization, it’s …","The trait indicates the coordinate is discrete This means …","Means we are referring the exact position of value <code>T</code>","This marker decides if Plotters default ValueFormatter …","The trait for types that can decorated by SegmentedCoord …","The trait for a hint provided to the key point algorithm …","Specify the weight of key points.","Referring the last dummy element","The key point hint indicates that we are using the key …","This markers prevent Plotters to implement the default …","The trait that indicates we have a ordered and ranged value","The trait indicates the ranged value can be map reversely, …","The value that used by the segmented coordinate.","A <code>SegmentedCoord</code> is a decorator on any discrete coordinate …","Type for values in the given coordinate system","Determine how we can format a value in a coordinate system …","The type of this value in this range specification","Check if this key point weight setting allows light point","This function provides the on-axis part of its range","Returns the point number constraint for the bold points","","","","","","","","","","","","","","","","","","","","","Format the value","","Determine how we can format a value in a coordinate system …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Reverse map the index to the value","","Map a value to the index","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert current ranged value into a segmented coordinate","Convert current ranged value into a segmented coordinate","Convert current ranged value into a segmented coordinate","This function gives the key points that we can draw a grid …","","This function maps the value to i32, which is the drawing …","","Returns the max number of key points","","","Create a new light key point hind","Returns the next value in this range","Returns the next value in this range","Returns the next value in this range","Returns the previous value in this range","Returns the previous value in this range","Returns the previous value in this range","Get the range of this value","","Get the number of element in the range Note: we assume …","","","","","","","","","","","","","","","","","","","","","","","","","Perform the reverse mapping","","Return a iterator that iterates over the all possible …","Return a iterator that iterates over the all possible …","Return a iterator that iterates over the all possible …","Returns the weight for this hint","","","A 3D cartesian coordinate system","The projection matrix which is used to project the 3D …","The helper struct to build a projection matrix","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Build the matrix based on the configuration","Do not project, only transform the guest coordinate system","","","","Creates a new, default projection matrix builder object.","Create a new coordinate","Normalize the matrix, this will make the metric unit to 1","Returns the identity matrix","Specifies the pitch of the 3D coordinate system","Get the distance of the point in guest coordinate from the …","Get the depth of the projection","Get the projection matrix","Returns the matrix which rotates the coordinate","Returns the matrix that applies a scale factor","Specifies the scale of the 3D coordinate system","Sets the pixel sizes and projections according to the …","Set the pivot point, which means the 3D coordinate “…","Set the projection matrix","Returns the matrix which shift the coordinate","","","","","","","","","","","","","","Creates a Cartesian3d object with the given projection.","Specifies the yaw of the 3D coordinate system","Returns the zero maxtrix","The trait that converts a normal date coord into a monthly …","The trait that converts a normal date coord into a yearly …","Indicates the coord has a monthly resolution","The ranged coordinate for type f32","The ranged coordinate for type f64","The ranged coordinate for type i128","The ranged coordinate for type i32","The ranged coordinate for type i64","The ranged coordinate for type u128","The ranged coordinate for type u32","The ranged coordinate for type u64","The ranged coordinate for type usize","The ranged coordinate for date","The ranged coordinate for the date and time","The coordinate that for duration of time","A range that is defined by a slice of values.","Indicate the coord has a yearly granularity.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts a normal date coord into a monthly one","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts a normal date coord into a yearly one","The quartiles","","","","","Build a range that fits the data","Handles the printing of floating-point numbers.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Get the quartiles median.","Create a new quartiles struct with the values calculated …","","","","","Get the quartiles values.","Handles printing of floating point numbers","Whether scientific notation is allowed","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Maximum allowed number of decimal digits","Minimum allowed number of decimal digits","The function that pretty prints the floating number Since …","Handles printing of floating point numbers","","","","The error is due to drawing backend failure","The abstraction of a drawing area. Plotters uses drawing …","The error description of any drawing area API","This is the dummy backend placeholder for the backend that …","A type which can be converted into a root drawing area","The error caused by invalid layout","The representation of the rectangle in backend canvas","We are not able to get the mutable reference of the …","Apply a new coord transformation object and returns a new …","Returns the coordinates by reference","Returns the coordinates by mutable reference","","","","","","","","","","","","","Get the area dimension in pixel","Draw an high-level element","Draw the mesh on a area","Draw a single pixel","Draw text on the drawing area","Estimate the dimension of the text if drawn on this …","Fill the entire drawing area with a color","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get the left upper conner of this area in the drawing …","Get the pixel range of this area","Get the range of X of the backend coordinate for current …","Get the range of X of the guest coordinate for current …","Get the range of Y of the backend coordinate for current …","Get the range of Y of the guest coordinate for current …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the coordinates by value","Convert the type into a root drawing area","Map coordinate to the backend coordinate","Create a margin for the given drawing area and returns the …","Present all the pending changes to the backend","","","Compute the relative size based on the drawing area’s …","Compute the relative size based on the drawing area’s …","Shrink the region, note all the locations are in guest …","Split the drawing area into a grid with specified …","Split the drawing area evenly","Split the drawing area horizontally","Split the drawing area vertically","Strip the applied coordinate specification and returns a …","Draw a title of the drawing area and return the remaining …","","","","","Make the coordinate in the range of the rectangle","","","","","","","","","","","","","Strip the applied coordinate specification and returns a …","Used for 3d coordinate transformations.","Used for 2d coordinate transformations.","The element that contains a bitmap on it","The boxplot element","The candlestick data point element","A circle element","A container for two drawable elements, used for …","Useful to translate from guest coordinates to backend …","A cross marker for visualizing data series.","Represents a cuboid, a six-faced solid.","The trait indicates we are able to draw it on a drawing …","The container for a dynamically dispatched element","An empty composable element. This is the starting point of …","An error bar, which visualizes the minimum, average, and …","Used for the production of horizontal error bars.","Used for the production of vertical error bars.","The trait that makes the conversion from the statically …","The point iterator","An multi-line text element. The <code>Text</code> element allows only …","Specifies the output data from the translation","This is a deprecated type. Please use new name <code>PathElement</code> …","An element of a series of connected lines","A Pie Graph","An element representing a single pixel.","The item in point iterator","A type which is logically a collection of points, under …","A common trait for elements that can be interpreted as …","An element of a filled polygon","A rectangle element","A single line text element. This can be owned or borrowed …","A triangle marker for visualizing data series.","","","Make the bitmap element as a bitmap backend, so that we …","An empty composable element. This is the starting point of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Compute the line layout","Copy the existing bitmap element to another location","Actually draws the element. The key points is already …","","","","","","","","","","","","","","","","","","","Estimate the multi-line text element’s dimension","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Parse a multi-line text into an multi-line element.","Parse a multi-line text into an multi-line element.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Make the conversion","Sets the offset to labels, to distanciate them …","","Point creator.","","","","","Performs the translation from guest coordinates to backend …","","","Move the existing bitmap element to a new position","Creates a new pixel.","Create a new path","Create a new path","Create a new circle element","Create a new polygon","Creates a cuboid.","Create a new text element","Create an empty multi-line text element. Lines can be …","Creates a cross marker.","Creates a triangle marker.","Create a new candlestick element, which requires the Y …","Create a new empty bitmap element. This can be use as the …","Build a Pie object. Assumes a start angle at 0.0, which is …","Creates a horizontal error bar.","Create a new horizontal boxplot element.","Creates a vertical error bar. `","Create a new vertical boxplot element.","Set the element offset on the key axis.","enables drawing the wedge’s percentage in the middle of …","framework to do the coordinate mapping","","","","","","","","","","","","","","","","","","","Push a new line into the given multi-line text <code>line</code>: The …","Move the location to the specified location","Set the line height of the multi-line text element","Set the margin of the rectangle","Pass an angle in degrees to change the default. Default is …","Set the style of the boxplot.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Set the width of the whiskers as a fraction of the bar …","Set the bar width.","Create a new bitmap element with a mut borrow to an …","Create a new bitmap element with an pre-allocated owned …","Create a new bitmap element with a shared borrowed buffer. …","An area series is similar to a line series but uses a …","Allows a value turns into a relative size","","","Bind an existing coordinate spec with a given key points …","Bind a existing coordinate spec with a given key points …","The backend that drawing a bitmap","The element that contains a bitmap on it","The bold style","Bottom of the figure","The boxplot element","Used to build a nested coordinate system.","Array of colors","","The candlestick data point element","A 2D Cartesian coordinate system described by two 1D …","Category value","Means we are referring the center of position <code>T</code> and the …","The helper object to create a chart context, which is used …","The context of the chart. This is the core object of …","A circle element","Any color representation","The trait that translates some customized object to the …","Places the series label at the specific location in …","A cross marker for visualizing data series.","Represents a cuboid, a six-faced solid.","The trait indicates the coordinate is discrete This means …","The type used to returns a drawing operation that can be …","The drawing backend trait, which implements the low-level …","The container for a dynamically dispatched element","An empty composable element. This is the starting point of …","An error bar, which visualizes the minimum, average, and …","The error type reported by the backend","Means we are referring the exact position of value <code>T</code>","Describes a font","Describes font family. This can be either a specific font …","Describes the font style. Such as Italic, Oblique, etc.","Specifying text transformations","Specifies the object to be translated from","","Grouping the value in the coordinate specification.","The color described by HSL color space","Presents data in a histogram. Input data can be raw or …","The trait that makes the conversion from the statically …","The trait that allows some type turns into a font …","Makes a linspace coordinate from the ranged coordinates.","Convert a range to a log scale coordinate spec","The trait that converts a normal date coord into a monthly …","The trait for the types that can be converted into a …","The trait for types that can decorated by SegmentedCoord …","Trait for values that can be converted into <code>TextStyle</code> …","The trait that converts a normal date coord into a yearly …","The italic style","Specifies one of the four label positions around the …","Referring the last dummy element","Left side of the figure","The line series object, which takes an iterator of data …","The coordinate combinator that transform a continous …","A log scaled coordinate axis","The logarithmic coodinate decorator. This decorator is …","The trait for the type that is able to be presented in the …","Places the series label at the lower left","Places the series label at the lower middle","Places the series label at the lower right","","Places the series label at the middle left","Places the series label at the middle middle","Places the series label at the middle right","The system default monospace font","An multi-line text element. The <code>Text</code> element allows only …","A specific font family name","A nested coordinate spec which is a discrete coordinate on …","Describe a value for a nested coordinate","Nothing to transform","The normal style","The oblique style","Represents a color palette","The palette of 100% accessibility","The palette of 99% accessibility","The palette of 99.99% accessibility","A color in the given palette","This is a deprecated type. Please use new name <code>PathElement</code> …","An element of a series of connected lines","A Pie Graph","An element representing a single pixel.","The point plot object, which takes an iterator of points …","An element of a filled polygon","The quartiles","","The RGBA representation of the color, Plotters use RGBA as …","The color described by its RGB value","","The ranged coordinate for date","The ranged coordinate for the date and time","The coordinate that for duration of time","A rectangle element","Right side of the figure","Rotating the text 180 degree clockwise","Rotating the text 270 degree clockwise","Rotating the text 90 degree clockwise","The SVG image drawing backend","The system default sans-serif font family","The value that used by the segmented coordinate.","Useful to specify the position of the series label.","The system default serif font family","Style for any shape","Represents functions of two variables.","","A single line text element. This can be owned or borrowed …","Style of a text","The trait that provides method <code>Self::group_by</code> function …","Top of the figure","A triangle marker for visualizing data series.","Places the series label at the upper left","Places the series label at the upper middle","Places the series label at the upper right","One exact nested value","The type of the value","","","Make the conversion from the type to the floating point …","Make a CSS compatible string for the font family name. …","Convert the font style into a CSS compatible string which …","Blit a bitmap on to the backend.","","","","","","","","","","","","","Specification of the color.","The text color","Draw a circle on the drawing backend","Draw a line on the drawing backend","Draw a path on the drawing backend","Draw a pixel on the drawing backend","Draw a rectangle on the drawing backend","Draw a text on the drawing backend","Ensure the backend is ready to draw","Estimate the size of the horizontal text if rendered on …","","Whether the style is filled with color.","The font description","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Convert a floating point number to the scale","Reverse map the index to the value","","Get the dimension of the drawing backend in pixels","Map a value to the index","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Make the conversion","Make the font description from the source type","Converts the value into a TextStyle value.","","Make the log scale coordinate","Make a partial axis based on the percentage of visible …","Converts a normal date coord into a monthly one","The anchor point position","Finalize the drawing step and present all the changes. …","Get the number of element in the range Note: we assume …","Stroke width.","Normalize this color representation to the backend color","","","","Transform the coordinate to perform the rotation","Translate the guest coordinate to the guest coordinate","","","","","","","","","","Converts a normal date coord into a yearly one","An area series is similar to a line series but uses a …","Presents data in a histogram. Input data can be raw or …","The line series object, which takes an iterator of data …","The point plot object, which takes an iterator of points …","Represents functions of two variables.","Sets the baseline of the histogram.","Sets the histogram bar baselines using a closure.","Sets the border style of the area series.","","","","","","","","","","","Specifies the input data for the histogram through an …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a horizontal histogram.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Sets the margin for each bar, in backend pixels.","Creates an area series with transparent border.","Creates a new line series based on a data iterator and a …","Create a new point series with the element that implements …","Create a new surface series, the surface orientation is …","","","","","","","Create a new point series. Similar to <code>PointSeries::new</code> but …","Sets the size of the points in the series, in pixels.","Sets the style of the histogram bars.","Sets the style of the plot. See <code>SurfaceSeries</code> for more …","Sets the style of histogram using a closure.","Sets the style as a function of the value of the dependent …","","","","","","","","","","","","","","","","Creates a vertical histogram.","Implements the constructor. See <code>SurfaceSeries</code> for more …","Implements the constructor. See <code>SurfaceSeries</code> for more …","Implements the constructor. See <code>SurfaceSeries</code> for more …","Allows a value turns into a relative size","","","The bold style","Array of colors","","Any color representation","Describes a font","The error type for the font implementation","Describes font family. This can be either a specific font …","The type we used to represent a result of any font …","Describes the font style. Such as Italic, Oblique, etc.","Specifying text transformations","","The color described by HSL color space","Percentage height","The trait that allows some type turns into a font …","Trait for values that can be converted into <code>TextStyle</code> …","The italic style","Represents a box where a text label can be fit","","The system default monospace font","A specific font family name","Nothing to transform","The normal style","The oblique style","Definitions of palettes of accessibility Represents a …","Definitions of palettes of accessibility The palette of …","Definitions of palettes of accessibility The palette of …","Definitions of palettes of accessibility The palette of …","A color in the given palette","","The RGBA representation of the color, Plotters use RGBA as …","The color described by its RGB value","Describes a relative size, might be 1. portion of height …","Rotating the text 180 degree clockwise","Rotating the text 270 degree clockwise","Rotating the text 90 degree clockwise","The system default sans-serif font family","The system default serif font family","Style for any shape","The trait that describes a size, it may be a relative size …","Percentage of either height or width, which is smaller","","Style of a text","","Percentage width","","Get the alpha channel of the color","Get the alpha channel of the color","Get the alpha channel of the color","","","","","","","","","","","","","","","","","","","","","","","","Get the size of the text if rendered in this font. This is …","","","","","","","","","","","","","","","","","Returns a new text style object with the specified <code>color</code>.","Returns the color as interpreted by the backend.","Sets the color of the style.","","Specification of the color.","The text color","Basic predefined colors.","","","","","Actually draws a font with a drawing function","","","","","","","Make a filled style form the color","Make a filled style form the color","Make a filled style form the color","Returns a filled style with the same color and stroke …","Whether the style is filled with color.","","","","","The font description","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the font family","Get the name of the font","Get the size of font","Get the name of the style","Get the font transformation description","","","Convert the size into the number of pixels","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Make the font description from the source type","Converts the value into a TextStyle value.","","","Get the size of the text if rendered in this font","","Set the upper bound of the relative size","Set the lower bound of the relative size.","Mix the color with given opacity","Mix the color with given opacity","Mix the color with given opacity","Create a new font","Make the value a relative size of percentage of minimal of …","Make the value a relative size of percentage of minimal of …","Make the value a relative size of percentage of minimal of …","Make the value a relative size of percentage of height","Make the value a relative size of percentage of height","Make the value a relative size of percentage of height","Make the value a relative size of percentage of width","Make the value a relative size of percentage of width","Make the value a relative size of percentage of width","Returns a color from the palette","Returns a color from the palette","Returns a color from the palette","Pick a color from the palette","Sets the anchor position.","The anchor point position","Create a new font desc with the same font but different …","Convert the RGB representation to the standard RGB tuple","Convert the RGB representation to the standard RGB tuple","Convert the RGB representation to the standard RGB tuple","","Make a shape style with stroke width from a color","Make a shape style with stroke width from a color","Make a shape style with stroke width from a color","Returns the stroke width.","Returns a new style with the same color and the specified …","Stroke width.","Set the style of the font","","Text anchor attributes are used to properly position the …","Normalize this color representation to the backend color","","","","","","","","","","","","Convert the color into the RGBA color which is internally …","Convert the color into the RGBA color which is internally …","Convert the color into the RGBA color which is internally …","Set the font transformation","Sets the font transformation of the style.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Specifies the position of the text anchor relative to the …","Specifies the position of the text anchor relative to the …","Specifies the position of the text anchor relative to the …","Specifies the color of the text element","Specifies the color of the text element","Specifies the color of the text element","Black (■ <em>rgb = (0, 0, 0)</em>)","Blue (■ <em>rgb = (0, 0, 255)</em>)","Cyan (■ <em>rgb = (0, 255, 255)</em>)","Green (■ <em>rgb = (0, 255, 0)</em>)","Magenta (■ <em>rgb = (255, 0, 255)</em>)","Red (■ <em>rgb = (255, 0, 0)</em>)","Transparent (■ <em>rgba = (0, 0, 0, 0.0)</em>)","White (■ <em>rgb = (255, 255, 255)</em>)","Yellow (■ <em>rgb = (255, 255, 0)</em>)","A full color palette derived from the Material Design 2014 …","<em>Amber</em>; same as <code>AMBER_500</code> (■ <em>rgb = (255, 193, 7)</em>)","Light <em>amber</em> with a tint of 100 (■ <em>rgb = (255, 236, 179)</em>)","Lighter <em>amber</em> with a tint of 200 (■ <em>rgb = (255, 224, 130)</em>…","Lighter <em>amber</em> with a tint of 300 (■ <em>rgb = (255, 213, 79)</em>)","Lighter <em>amber</em> with a tint of 400 (■ <em>rgb = (255, 202, 40)</em>)","Light <em>amber</em> with a tint of 50 (■ <em>rgb = (255, 248, 225)</em>)","<em>Amber</em> with a tint of 500 (■ <em>rgb = (255, 193, 7)</em>)","Darker <em>amber</em> with a tint of 600 (■ <em>rgb = (255, 179, 0)</em>)","Darker <em>amber</em> with a tint of 700 (■ <em>rgb = (255, 160, 0)</em>)","Dark <em>amber</em> with a tint of 800 (■ <em>rgb = (255, 143, 0)</em>)","Dark <em>amber</em> with a tint of 900 (■ <em>rgb = (255, 111, 0)</em>)","Accent <em>amber</em> with a tint of A100 (■ <em>rgb = (255, 229, 127)</em>…","Accent <em>amber</em> with a tint of A200 (■ <em>rgb = (255, 215, 64)</em>)","Accent <em>amber</em> with a tint of A400 (■ <em>rgb = (255, 196, 0)</em>)","Accent <em>amber</em> with a tint of A700 (■ <em>rgb = (255, 171, 0)</em>)","<em>Black</em> (■ <em>rgb = (0, 0, 0)</em>)","<em>Blue</em>; same as <code>BLUE_500</code> (■ <em>rgb = (33, 150, 243)</em>)","<em>Blue grey</em>; same as <code>BLUEGREY_500</code> (■ <em>rgb = (96, 125, 139)</em>)","Light <em>blue grey</em> with a tint of 100 (■ <em>rgb = (207, 216, </em>…","Lighter <em>blue grey</em> with a tint of 200 (■ <em>rgb = (176, 190, </em>…","Lighter <em>blue grey</em> with a tint of 300 (■ <em>rgb = (144, 164, </em>…","Lighter <em>blue grey</em> with a tint of 400 (■ <em>rgb = (120, 144, </em>…","Light <em>blue grey</em> with a tint of 50 (■ <em>rgb = (236, 239, </em>…","<em>Blue grey</em> with a tint of 500 (■ <em>rgb = (96, 125, 139)</em>)","Darker <em>blue grey</em> with a tint of 600 (■ <em>rgb = (84, 110, </em>…","Darker <em>blue grey</em> with a tint of 700 (■ <em>rgb = (69, 90, </em>…","Dark <em>blue grey</em> with a tint of 800 (■ <em>rgb = (55, 71, 79)</em>)","Dark <em>blue grey</em> with a tint of 900 (■ <em>rgb = (38, 50, 56)</em>)","Accent <em>blue grey</em> with a tint of A100 (■ <em>rgb = (207, 216, </em>…","Accent <em>blue grey</em> with a tint of A200 (■ <em>rgb = (176, 190, </em>…","Accent <em>blue grey</em> with a tint of A400 (■ <em>rgb = (120, 144, </em>…","Accent <em>blue grey</em> with a tint of A700 (■ <em>rgb = (69, 90, </em>…","Light <em>blue</em> with a tint of 100 (■ <em>rgb = (187, 222, 251)</em>)","Lighter <em>blue</em> with a tint of 200 (■ <em>rgb = (144, 202, 249)</em>)","Lighter <em>blue</em> with a tint of 300 (■ <em>rgb = (100, 181, 246)</em>)","Lighter <em>blue</em> with a tint of 400 (■ <em>rgb = (66, 165, 245)</em>)","Light <em>blue</em> with a tint of 50 (■ <em>rgb = (227, 242, 253)</em>)","<em>Blue</em> with a tint of 500 (■ <em>rgb = (33, 150, 243)</em>)","Darker <em>blue</em> with a tint of 600 (■ <em>rgb = (30, 136, 229)</em>)","Darker <em>blue</em> with a tint of 700 (■ <em>rgb = (25, 118, 210)</em>)","Dark <em>blue</em> with a tint of 800 (■ <em>rgb = (21, 101, 192)</em>)","Dark <em>blue</em> with a tint of 900 (■ <em>rgb = (13, 71, 161)</em>)","Accent <em>blue</em> with a tint of A100 (■ <em>rgb = (130, 177, 255)</em>)","Accent <em>blue</em> with a tint of A200 (■ <em>rgb = (68, 138, 255)</em>)","Accent <em>blue</em> with a tint of A400 (■ <em>rgb = (41, 121, 255)</em>)","Accent <em>blue</em> with a tint of A700 (■ <em>rgb = (41, 98, 255)</em>)","<em>Brown</em>; same as <code>BROWN_500</code> (■ <em>rgb = (121, 85, 72)</em>)","Light <em>brown</em> with a tint of 100 (■ <em>rgb = (215, 204, 200)</em>)","Lighter <em>brown</em> with a tint of 200 (■ <em>rgb = (188, 170, 164)</em>…","Lighter <em>brown</em> with a tint of 300 (■ <em>rgb = (161, 136, 127)</em>…","Lighter <em>brown</em> with a tint of 400 (■ <em>rgb = (141, 110, 99)</em>)","Light <em>brown</em> with a tint of 50 (■ <em>rgb = (239, 235, 233)</em>)","<em>Brown</em> with a tint of 500 (■ <em>rgb = (121, 85, 72)</em>)","Darker <em>brown</em> with a tint of 600 (■ <em>rgb = (109, 76, 65)</em>)","Darker <em>brown</em> with a tint of 700 (■ <em>rgb = (93, 64, 55)</em>)","Dark <em>brown</em> with a tint of 800 (■ <em>rgb = (78, 52, 46)</em>)","Dark <em>brown</em> with a tint of 900 (■ <em>rgb = (62, 39, 35)</em>)","Accent <em>brown</em> with a tint of A100 (■ <em>rgb = (215, 204, 200)</em>…","Accent <em>brown</em> with a tint of A200 (■ <em>rgb = (188, 170, 164)</em>…","Accent <em>brown</em> with a tint of A400 (■ <em>rgb = (141, 110, 99)</em>)","Accent <em>brown</em> with a tint of A700 (■ <em>rgb = (93, 64, 55)</em>)","<em>Cyan</em>; same as <code>CYAN_500</code> (■ <em>rgb = (0, 188, 212)</em>)","Light <em>cyan</em> with a tint of 100 (■ <em>rgb = (178, 235, 242)</em>)","Lighter <em>cyan</em> with a tint of 200 (■ <em>rgb = (128, 222, 234)</em>)","Lighter <em>cyan</em> with a tint of 300 (■ <em>rgb = (77, 208, 225)</em>)","Lighter <em>cyan</em> with a tint of 400 (■ <em>rgb = (38, 198, 218)</em>)","Light <em>cyan</em> with a tint of 50 (■ <em>rgb = (224, 247, 250)</em>)","<em>Cyan</em> with a tint of 500 (■ <em>rgb = (0, 188, 212)</em>)","Darker <em>cyan</em> with a tint of 600 (■ <em>rgb = (0, 172, 193)</em>)","Darker <em>cyan</em> with a tint of 700 (■ <em>rgb = (0, 151, 167)</em>)","Dark <em>cyan</em> with a tint of 800 (■ <em>rgb = (0, 131, 143)</em>)","Dark <em>cyan</em> with a tint of 900 (■ <em>rgb = (0, 96, 100)</em>)","Accent <em>cyan</em> with a tint of A100 (■ <em>rgb = (132, 255, 255)</em>)","Accent <em>cyan</em> with a tint of A200 (■ <em>rgb = (24, 255, 255)</em>)","Accent <em>cyan</em> with a tint of A400 (■ <em>rgb = (0, 229, 255)</em>)","Accent <em>cyan</em> with a tint of A700 (■ <em>rgb = (0, 184, 212)</em>)","<em>Deep orange</em>; same as <code>DEEPORANGE_500</code> (■ <em>rgb = (255, 87, </em>…","Light <em>deep orange</em> with a tint of 100 (■ <em>rgb = (255, 204, </em>…","Lighter <em>deep orange</em> with a tint of 200 (■ <em>rgb = (255, </em>…","Lighter <em>deep orange</em> with a tint of 300 (■ <em>rgb = (255, </em>…","Lighter <em>deep orange</em> with a tint of 400 (■ <em>rgb = (255, </em>…","Light <em>deep orange</em> with a tint of 50 (■ <em>rgb = (251, 233, </em>…","<em>Deep orange</em> with a tint of 500 (■ <em>rgb = (255, 87, 34)</em>)","Darker <em>deep orange</em> with a tint of 600 (■ <em>rgb = (244, 81, </em>…","Darker <em>deep orange</em> with a tint of 700 (■ <em>rgb = (230, 74, </em>…","Dark <em>deep orange</em> with a tint of 800 (■ <em>rgb = (216, 67, </em>…","Dark <em>deep orange</em> with a tint of 900 (■ <em>rgb = (191, 54, </em>…","Accent <em>deep orange</em> with a tint of A100 (■ <em>rgb = (255, </em>…","Accent <em>deep orange</em> with a tint of A200 (■ <em>rgb = (255, </em>…","Accent <em>deep orange</em> with a tint of A400 (■ <em>rgb = (255, </em>…","Accent <em>deep orange</em> with a tint of A700 (■ <em>rgb = (221, </em>…","<em>Deep purple</em>; same as <code>DEEPPURPLE_500</code> (■ <em>rgb = (103, 58, </em>…","Light <em>deep purple</em> with a tint of 100 (■ <em>rgb = (209, 196, </em>…","Lighter <em>deep purple</em> with a tint of 200 (■ <em>rgb = (179, </em>…","Lighter <em>deep purple</em> with a tint of 300 (■ <em>rgb = (149, </em>…","Lighter <em>deep purple</em> with a tint of 400 (■ <em>rgb = (126, </em>…","Light <em>deep purple</em> with a tint of 50 (■ <em>rgb = (237, 231, </em>…","<em>Deep purple</em> with a tint of 500 (■ <em>rgb = (103, 58, 183)</em>)","Darker <em>deep purple</em> with a tint of 600 (■ <em>rgb = (94, 53, </em>…","Darker <em>deep purple</em> with a tint of 700 (■ <em>rgb = (81, 45, </em>…","Dark <em>deep purple</em> with a tint of 800 (■ <em>rgb = (69, 39, </em>…","Dark <em>deep purple</em> with a tint of 900 (■ <em>rgb = (49, 27, </em>…","Accent <em>deep purple</em> with a tint of A100 (■ <em>rgb = (179, </em>…","Accent <em>deep purple</em> with a tint of A200 (■ <em>rgb = (124, </em>…","Accent <em>deep purple</em> with a tint of A400 (■ <em>rgb = (101, </em>…","Accent <em>deep purple</em> with a tint of A700 (■ <em>rgb = (98, 0, </em>…","<em>Green</em>; same as <code>GREEN_500</code> (■ <em>rgb = (76, 175, 80)</em>)","Light <em>green</em> with a tint of 100 (■ <em>rgb = (200, 230, 201)</em>)","Lighter <em>green</em> with a tint of 200 (■ <em>rgb = (165, 214, 167)</em>…","Lighter <em>green</em> with a tint of 300 (■ <em>rgb = (129, 199, 132)</em>…","Lighter <em>green</em> with a tint of 400 (■ <em>rgb = (102, 187, 106)</em>…","Light <em>green</em> with a tint of 50 (■ <em>rgb = (232, 245, 233)</em>)","<em>Green</em> with a tint of 500 (■ <em>rgb = (76, 175, 80)</em>)","Darker <em>green</em> with a tint of 600 (■ <em>rgb = (67, 160, 71)</em>)","Darker <em>green</em> with a tint of 700 (■ <em>rgb = (56, 142, 60)</em>)","Dark <em>green</em> with a tint of 800 (■ <em>rgb = (46, 125, 50)</em>)","Dark <em>green</em> with a tint of 900 (■ <em>rgb = (27, 94, 32)</em>)","Accent <em>green</em> with a tint of A100 (■ <em>rgb = (185, 246, 202)</em>…","Accent <em>green</em> with a tint of A200 (■ <em>rgb = (105, 240, 174)</em>…","Accent <em>green</em> with a tint of A400 (■ <em>rgb = (0, 230, 118)</em>)","Accent <em>green</em> with a tint of A700 (■ <em>rgb = (0, 200, 83)</em>)","<em>Grey</em>; same as <code>GREY_500</code> (■ <em>rgb = (158, 158, 158)</em>)","Light <em>grey</em> with a tint of 100 (■ <em>rgb = (245, 245, 245)</em>)","Lighter <em>grey</em> with a tint of 200 (■ <em>rgb = (238, 238, 238)</em>)","Lighter <em>grey</em> with a tint of 300 (■ <em>rgb = (224, 224, 224)</em>)","Lighter <em>grey</em> with a tint of 400 (■ <em>rgb = (189, 189, 189)</em>)","Light <em>grey</em> with a tint of 50 (■ <em>rgb = (250, 250, 250)</em>)","<em>Grey</em> with a tint of 500 (■ <em>rgb = (158, 158, 158)</em>)","Darker <em>grey</em> with a tint of 600 (■ <em>rgb = (117, 117, 117)</em>)","Darker <em>grey</em> with a tint of 700 (■ <em>rgb = (97, 97, 97)</em>)","Dark <em>grey</em> with a tint of 800 (■ <em>rgb = (66, 66, 66)</em>)","Dark <em>grey</em> with a tint of 900 (■ <em>rgb = (33, 33, 33)</em>)","Accent <em>grey</em> with a tint of A100 (■ <em>rgb = (213, 213, 213)</em>)","Accent <em>grey</em> with a tint of A200 (■ <em>rgb = (170, 170, 170)</em>)","Accent <em>grey</em> with a tint of A400 (■ <em>rgb = (48, 48, 48)</em>)","Accent <em>grey</em> with a tint of A700 (■ <em>rgb = (97, 97, 97)</em>)","<em>Indigo</em>; same as <code>INDIGO_500</code> (■ <em>rgb = (63, 81, 181)</em>)","Light <em>indigo</em> with a tint of 100 (■ <em>rgb = (197, 202, 233)</em>)","Lighter <em>indigo</em> with a tint of 200 (■ <em>rgb = (159, 168, </em>…","Lighter <em>indigo</em> with a tint of 300 (■ <em>rgb = (121, 134, </em>…","Lighter <em>indigo</em> with a tint of 400 (■ <em>rgb = (92, 107, 192)</em>…","Light <em>indigo</em> with a tint of 50 (■ <em>rgb = (232, 234, 246)</em>)","<em>Indigo</em> with a tint of 500 (■ <em>rgb = (63, 81, 181)</em>)","Darker <em>indigo</em> with a tint of 600 (■ <em>rgb = (57, 73, 171)</em>)","Darker <em>indigo</em> with a tint of 700 (■ <em>rgb = (48, 63, 159)</em>)","Dark <em>indigo</em> with a tint of 800 (■ <em>rgb = (40, 53, 147)</em>)","Dark <em>indigo</em> with a tint of 900 (■ <em>rgb = (26, 35, 126)</em>)","Accent <em>indigo</em> with a tint of A100 (■ <em>rgb = (140, 158, </em>…","Accent <em>indigo</em> with a tint of A200 (■ <em>rgb = (83, 109, 254)</em>…","Accent <em>indigo</em> with a tint of A400 (■ <em>rgb = (61, 90, 254)</em>)","Accent <em>indigo</em> with a tint of A700 (■ <em>rgb = (48, 79, 254)</em>)","<em>Light blue</em>; same as <code>LIGHTBLUE_500</code> (■ <em>rgb = (3, 169, 244)</em>)","Light <em>light blue</em> with a tint of 100 (■ <em>rgb = (179, 229, </em>…","Lighter <em>light blue</em> with a tint of 200 (■ <em>rgb = (129, </em>…","Lighter <em>light blue</em> with a tint of 300 (■ <em>rgb = (79, 195, </em>…","Lighter <em>light blue</em> with a tint of 400 (■ <em>rgb = (41, 182, </em>…","Light <em>light blue</em> with a tint of 50 (■ <em>rgb = (225, 245, </em>…","<em>Light blue</em> with a tint of 500 (■ <em>rgb = (3, 169, 244)</em>)","Darker <em>light blue</em> with a tint of 600 (■ <em>rgb = (3, 155, </em>…","Darker <em>light blue</em> with a tint of 700 (■ <em>rgb = (2, 136, </em>…","Dark <em>light blue</em> with a tint of 800 (■ <em>rgb = (2, 119, 189)</em>…","Dark <em>light blue</em> with a tint of 900 (■ <em>rgb = (1, 87, 155)</em>)","Accent <em>light blue</em> with a tint of A100 (■ <em>rgb = (128, </em>…","Accent <em>light blue</em> with a tint of A200 (■ <em>rgb = (64, 196, </em>…","Accent <em>light blue</em> with a tint of A400 (■ <em>rgb = (0, 176, </em>…","Accent <em>light blue</em> with a tint of A700 (■ <em>rgb = (0, 145, </em>…","<em>Light green</em>; same as <code>LIGHTGREEN_500</code> (■ <em>rgb = (139, 195, </em>…","Light <em>light green</em> with a tint of 100 (■ <em>rgb = (220, 237, </em>…","Lighter <em>light green</em> with a tint of 200 (■ <em>rgb = (197, </em>…","Lighter <em>light green</em> with a tint of 300 (■ <em>rgb = (174, </em>…","Lighter <em>light green</em> with a tint of 400 (■ <em>rgb = (156, </em>…","Light <em>light green</em> with a tint of 50 (■ <em>rgb = (241, 248, </em>…","<em>Light green</em> with a tint of 500 (■ <em>rgb = (139, 195, 74)</em>)","Darker <em>light green</em> with a tint of 600 (■ <em>rgb = (124, </em>…","Darker <em>light green</em> with a tint of 700 (■ <em>rgb = (104, </em>…","Dark <em>light green</em> with a tint of 800 (■ <em>rgb = (85, 139, </em>…","Dark <em>light green</em> with a tint of 900 (■ <em>rgb = (51, 105, </em>…","Accent <em>light green</em> with a tint of A100 (■ <em>rgb = (204, </em>…","Accent <em>light green</em> with a tint of A200 (■ <em>rgb = (178, </em>…","Accent <em>light green</em> with a tint of A400 (■ <em>rgb = (118, </em>…","Accent <em>light green</em> with a tint of A700 (■ <em>rgb = (100, </em>…","<em>Lime</em>; same as <code>LIME_500</code> (■ <em>rgb = (205, 220, 57)</em>)","Light <em>lime</em> with a tint of 100 (■ <em>rgb = (240, 244, 195)</em>)","Lighter <em>lime</em> with a tint of 200 (■ <em>rgb = (230, 238, 156)</em>)","Lighter <em>lime</em> with a tint of 300 (■ <em>rgb = (220, 231, 117)</em>)","Lighter <em>lime</em> with a tint of 400 (■ <em>rgb = (212, 225, 87)</em>)","Light <em>lime</em> with a tint of 50 (■ <em>rgb = (249, 251, 231)</em>)","<em>Lime</em> with a tint of 500 (■ <em>rgb = (205, 220, 57)</em>)","Darker <em>lime</em> with a tint of 600 (■ <em>rgb = (192, 202, 51)</em>)","Darker <em>lime</em> with a tint of 700 (■ <em>rgb = (175, 180, 43)</em>)","Dark <em>lime</em> with a tint of 800 (■ <em>rgb = (158, 157, 36)</em>)","Dark <em>lime</em> with a tint of 900 (■ <em>rgb = (130, 119, 23)</em>)","Accent <em>lime</em> with a tint of A100 (■ <em>rgb = (244, 255, 129)</em>)","Accent <em>lime</em> with a tint of A200 (■ <em>rgb = (238, 255, 65)</em>)","Accent <em>lime</em> with a tint of A400 (■ <em>rgb = (198, 255, 0)</em>)","Accent <em>lime</em> with a tint of A700 (■ <em>rgb = (174, 234, 0)</em>)","<em>Orange</em>; same as <code>ORANGE_500</code> (■ <em>rgb = (255, 152, 0)</em>)","Light <em>orange</em> with a tint of 100 (■ <em>rgb = (255, 224, 178)</em>)","Lighter <em>orange</em> with a tint of 200 (■ <em>rgb = (255, 204, </em>…","Lighter <em>orange</em> with a tint of 300 (■ <em>rgb = (255, 183, 77)</em>…","Lighter <em>orange</em> with a tint of 400 (■ <em>rgb = (255, 167, 38)</em>…","Light <em>orange</em> with a tint of 50 (■ <em>rgb = (255, 243, 224)</em>)","<em>Orange</em> with a tint of 500 (■ <em>rgb = (255, 152, 0)</em>)","Darker <em>orange</em> with a tint of 600 (■ <em>rgb = (251, 140, 0)</em>)","Darker <em>orange</em> with a tint of 700 (■ <em>rgb = (245, 124, 0)</em>)","Dark <em>orange</em> with a tint of 800 (■ <em>rgb = (239, 108, 0)</em>)","Dark <em>orange</em> with a tint of 900 (■ <em>rgb = (230, 81, 0)</em>)","Accent <em>orange</em> with a tint of A100 (■ <em>rgb = (255, 209, </em>…","Accent <em>orange</em> with a tint of A200 (■ <em>rgb = (255, 171, 64)</em>…","Accent <em>orange</em> with a tint of A400 (■ <em>rgb = (255, 145, 0)</em>)","Accent <em>orange</em> with a tint of A700 (■ <em>rgb = (255, 109, 0)</em>)","<em>Pink</em>; same as <code>PINK_500</code> (■ <em>rgb = (233, 30, 99)</em>)","Light <em>pink</em> with a tint of 100 (■ <em>rgb = (248, 187, 208)</em>)","Lighter <em>pink</em> with a tint of 200 (■ <em>rgb = (244, 143, 177)</em>)","Lighter <em>pink</em> with a tint of 300 (■ <em>rgb = (240, 98, 146)</em>)","Lighter <em>pink</em> with a tint of 400 (■ <em>rgb = (236, 64, 122)</em>)","Light <em>pink</em> with a tint of 50 (■ <em>rgb = (252, 228, 236)</em>)","<em>Pink</em> with a tint of 500 (■ <em>rgb = (233, 30, 99)</em>)","Darker <em>pink</em> with a tint of 600 (■ <em>rgb = (216, 27, 96)</em>)","Darker <em>pink</em> with a tint of 700 (■ <em>rgb = (194, 24, 91)</em>)","Dark <em>pink</em> with a tint of 800 (■ <em>rgb = (173, 20, 87)</em>)","Dark <em>pink</em> with a tint of 900 (■ <em>rgb = (136, 14, 79)</em>)","Accent <em>pink</em> with a tint of A100 (■ <em>rgb = (255, 128, 171)</em>)","Accent <em>pink</em> with a tint of A200 (■ <em>rgb = (255, 64, 129)</em>)","Accent <em>pink</em> with a tint of A400 (■ <em>rgb = (245, 0, 87)</em>)","Accent <em>pink</em> with a tint of A700 (■ <em>rgb = (197, 17, 98)</em>)","<em>Purple</em>; same as <code>PURPLE_500</code> (■ <em>rgb = (156, 39, 176)</em>)","Light <em>purple</em> with a tint of 100 (■ <em>rgb = (225, 190, 231)</em>)","Lighter <em>purple</em> with a tint of 200 (■ <em>rgb = (206, 147, </em>…","Lighter <em>purple</em> with a tint of 300 (■ <em>rgb = (186, 104, </em>…","Lighter <em>purple</em> with a tint of 400 (■ <em>rgb = (171, 71, 188)</em>…","Light <em>purple</em> with a tint of 50 (■ <em>rgb = (243, 229, 245)</em>)","<em>Purple</em> with a tint of 500 (■ <em>rgb = (156, 39, 176)</em>)","Darker <em>purple</em> with a tint of 600 (■ <em>rgb = (142, 36, 170)</em>)","Darker <em>purple</em> with a tint of 700 (■ <em>rgb = (123, 31, 162)</em>)","Dark <em>purple</em> with a tint of 800 (■ <em>rgb = (106, 27, 154)</em>)","Dark <em>purple</em> with a tint of 900 (■ <em>rgb = (74, 20, 140)</em>)","Accent <em>purple</em> with a tint of A100 (■ <em>rgb = (234, 128, </em>…","Accent <em>purple</em> with a tint of A200 (■ <em>rgb = (224, 64, 251)</em>…","Accent <em>purple</em> with a tint of A400 (■ <em>rgb = (213, 0, 249)</em>)","Accent <em>purple</em> with a tint of A700 (■ <em>rgb = (170, 0, 255)</em>)","<em>Red</em>; same as <code>RED_500</code> (■ <em>rgb = (244, 67, 54)</em>)","Light <em>red</em> with a tint of 100 (■ <em>rgb = (255, 205, 210)</em>)","Lighter <em>red</em> with a tint of 200 (■ <em>rgb = (239, 154, 154)</em>)","Lighter <em>red</em> with a tint of 300 (■ <em>rgb = (229, 115, 115)</em>)","Lighter <em>red</em> with a tint of 400 (■ <em>rgb = (239, 83, 80)</em>)","Light <em>red</em> with a tint of 50 (■ <em>rgb = (255, 235, 238)</em>)","<em>Red</em> with a tint of 500 (■ <em>rgb = (244, 67, 54)</em>)","Darker <em>red</em> with a tint of 600 (■ <em>rgb = (229, 57, 53)</em>)","Darker <em>red</em> with a tint of 700 (■ <em>rgb = (211, 47, 47)</em>)","Dark <em>red</em> with a tint of 800 (■ <em>rgb = (198, 40, 40)</em>)","Dark <em>red</em> with a tint of 900 (■ <em>rgb = (183, 28, 28)</em>)","Accent <em>red</em> with a tint of A100 (■ <em>rgb = (255, 138, 128)</em>)","Accent <em>red</em> with a tint of A200 (■ <em>rgb = (255, 82, 82)</em>)","Accent <em>red</em> with a tint of A400 (■ <em>rgb = (255, 23, 68)</em>)","Accent <em>red</em> with a tint of A700 (■ <em>rgb = (213, 0, 0)</em>)","<em>Teal</em>; same as <code>TEAL_500</code> (■ <em>rgb = (0, 150, 136)</em>)","Light <em>teal</em> with a tint of 100 (■ <em>rgb = (178, 223, 219)</em>)","Lighter <em>teal</em> with a tint of 200 (■ <em>rgb = (128, 203, 196)</em>)","Lighter <em>teal</em> with a tint of 300 (■ <em>rgb = (77, 182, 172)</em>)","Lighter <em>teal</em> with a tint of 400 (■ <em>rgb = (38, 166, 154)</em>)","Light <em>teal</em> with a tint of 50 (■ <em>rgb = (224, 242, 241)</em>)","<em>Teal</em> with a tint of 500 (■ <em>rgb = (0, 150, 136)</em>)","Darker <em>teal</em> with a tint of 600 (■ <em>rgb = (0, 137, 123)</em>)","Darker <em>teal</em> with a tint of 700 (■ <em>rgb = (0, 121, 107)</em>)","Dark <em>teal</em> with a tint of 800 (■ <em>rgb = (0, 105, 92)</em>)","Dark <em>teal</em> with a tint of 900 (■ <em>rgb = (0, 77, 64)</em>)","Accent <em>teal</em> with a tint of A100 (■ <em>rgb = (167, 255, 235)</em>)","Accent <em>teal</em> with a tint of A200 (■ <em>rgb = (100, 255, 218)</em>)","Accent <em>teal</em> with a tint of A400 (■ <em>rgb = (29, 233, 182)</em>)","Accent <em>teal</em> with a tint of A700 (■ <em>rgb = (0, 191, 165)</em>)","<em>White</em> (■ <em>rgb = (255, 255, 255)</em>)","<em>Yellow</em>; same as <code>YELLOW_500</code> (■ <em>rgb = (255, 235, 59)</em>)","Light <em>yellow</em> with a tint of 100 (■ <em>rgb = (255, 249, 196)</em>)","Lighter <em>yellow</em> with a tint of 200 (■ <em>rgb = (255, 245, </em>…","Lighter <em>yellow</em> with a tint of 300 (■ <em>rgb = (255, 241, </em>…","Lighter <em>yellow</em> with a tint of 400 (■ <em>rgb = (255, 238, 88)</em>…","Light <em>yellow</em> with a tint of 50 (■ <em>rgb = (255, 253, 231)</em>)","<em>Yellow</em> with a tint of 500 (■ <em>rgb = (255, 235, 59)</em>)","Darker <em>yellow</em> with a tint of 600 (■ <em>rgb = (253, 216, 53)</em>)","Darker <em>yellow</em> with a tint of 700 (■ <em>rgb = (251, 192, 45)</em>)","Dark <em>yellow</em> with a tint of 800 (■ <em>rgb = (249, 168, 37)</em>)","Dark <em>yellow</em> with a tint of 900 (■ <em>rgb = (245, 127, 23)</em>)","Accent <em>yellow</em> with a tint of A100 (■ <em>rgb = (255, 255, </em>…","Accent <em>yellow</em> with a tint of A200 (■ <em>rgb = (255, 255, 0)</em>)","Accent <em>yellow</em> with a tint of A400 (■ <em>rgb = (255, 234, 0)</em>)","Accent <em>yellow</em> with a tint of A700 (■ <em>rgb = (255, 214, 0)</em>)","Anchor point is on the bottom of the text","Anchor point is in the horizontal center of the text","Anchor point is in the vertical center of the text","The horizontal position of the anchor point relative to …","Anchor point is on the left side of the text","The text anchor position.","Anchor point is on the right side of the text","Anchor point is on the top of the text","The vertical position of the anchor point relative to the …","","","","","","","","","","","","","Create a default text anchor position (top left).","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","The horizontal position of the anchor point","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new text anchor position.","","","","","","","","","","","","","The vertical position of the anchor point"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,119,21,119,0,0,0,119,142,16,1,21,142,9,16,1,142,9,16,1,119,142,16,119,16,119,142,16,9,21,9,1,21,9,21,21,119,9,1,9,1,21,9,21,9,1,21,9,1,21,9,21,119,142,16,119,142,9,16,1,21,9,1,1,142,9,16,1,9,1,21,9,1,1,142,9,16,1,142,9,16,1,142,9,16,1,1,1,9,39,0,0,0,49,0,0,0,39,49,49,49,0,49,49,49,39,0,0,0,0,39,49,49,49,23,24,26,24,26,23,32,26,32,34,23,33,33,24,26,43,49,32,39,41,42,34,23,33,33,24,26,43,49,32,39,41,42,33,34,34,34,34,39,41,42,39,41,42,23,23,33,23,33,33,26,26,26,26,26,26,24,26,32,33,23,34,23,33,24,26,43,49,32,39,41,41,41,42,42,42,34,23,33,24,26,43,49,32,39,41,42,23,33,23,33,33,23,33,43,32,24,26,43,32,26,34,32,34,34,34,34,26,34,23,32,41,42,34,33,23,34,24,26,34,34,23,24,26,23,33,39,41,42,34,34,23,33,24,26,43,49,32,39,41,42,34,23,33,24,26,43,49,32,39,41,42,34,23,33,24,26,43,49,32,39,41,42,23,24,26,34,24,26,24,26,26,24,26,26,23,24,26,34,24,26,24,26,26,24,26,26,23,0,22,0,0,52,52,0,52,52,0,22,22,22,52,52,52,0,0,44,52,52,22,52,52,52,52,0,0,0,0,56,56,56,30,56,30,30,30,56,30,56,30,30,30,30,30,56,30,30,30,30,30,56,30,56,30,56,30,30,30,0,0,0,62,0,0,0,0,0,0,0,0,0,0,0,62,168,0,0,66,60,61,60,60,60,61,70,72,64,65,67,62,60,61,70,72,64,65,67,62,62,64,65,67,62,64,65,67,62,62,62,72,64,65,60,61,70,70,72,64,65,67,62,62,62,62,66,60,61,72,64,65,169,169,169,60,61,72,64,65,60,61,70,72,64,65,67,62,60,61,70,72,64,65,60,60,168,0,60,61,70,72,64,65,170,170,170,62,171,171,171,60,61,70,72,64,65,60,61,72,64,65,172,172,172,64,65,67,62,60,61,70,72,64,65,67,62,60,61,70,72,64,65,67,62,60,61,70,72,64,65,67,62,60,61,72,64,65,65,65,65,65,173,173,173,174,174,174,61,60,74,0,74,0,77,35,0,0,0,77,29,0,0,0,77,0,0,0,0,0,0,35,0,29,74,29,57,75,175,176,74,78,75,76,77,175,176,74,78,75,76,77,76,77,76,77,77,177,76,177,175,176,74,78,75,76,77,77,77,63,76,63,76,175,176,74,78,75,76,77,178,178,178,29,76,29,76,57,78,75,75,63,63,63,63,63,63,29,76,63,76,76,77,175,176,74,78,75,76,77,175,176,74,78,75,76,77,175,176,74,78,75,76,77,59,76,63,63,63,57,78,75,0,0,0,79,79,79,80,37,79,80,37,79,80,37,79,80,37,79,80,37,79,79,79,80,37,79,80,37,80,37,79,79,79,80,37,79,79,80,79,37,37,79,79,80,37,80,37,79,79,80,37,37,79,80,37,79,80,37,79,80,37,37,80,79,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,83,84,86,87,88,89,90,91,92,93,94,95,96,97,82,83,84,86,87,88,89,90,91,92,93,94,95,96,97,82,83,84,86,87,88,89,90,91,92,93,94,95,96,97,82,83,84,86,87,88,89,90,91,92,93,94,95,96,97,83,84,87,88,89,90,91,92,93,94,95,96,82,82,83,84,86,86,86,87,87,88,88,89,89,90,90,91,91,92,92,93,93,94,94,95,95,96,96,97,97,82,83,84,90,91,92,93,94,95,96,97,82,83,84,90,91,92,93,94,95,96,97,82,83,84,86,87,88,89,90,91,92,93,94,95,96,97,82,83,84,86,87,88,89,90,91,92,93,94,95,96,97,82,83,84,86,87,88,89,90,91,92,93,94,95,96,97,179,82,83,84,86,87,88,89,90,91,92,93,94,95,96,97,82,83,84,90,91,92,93,94,95,96,97,82,83,84,86,87,88,89,90,91,92,93,94,95,96,97,82,83,84,86,87,88,89,90,91,92,93,94,95,96,97,82,83,84,86,87,88,89,90,91,92,93,94,95,96,97,82,83,84,86,87,88,89,90,91,92,93,94,95,96,97,82,83,84,88,89,90,91,92,93,94,95,96,97,180,0,106,106,106,106,0,0,106,106,106,106,106,106,106,106,106,106,0,107,107,107,107,107,107,107,0,107,107,107,107,36,0,0,0,0,36,0,36,48,48,48,48,108,36,114,48,108,36,114,48,108,48,108,48,48,48,48,48,48,48,108,36,36,114,114,48,48,48,48,108,36,114,48,48,48,48,48,48,48,108,36,114,48,181,48,48,48,36,114,48,48,48,48,48,48,48,48,48,48,108,36,114,108,48,108,36,114,48,108,36,114,48,108,36,114,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,182,0,183,0,0,0,0,182,0,0,0,0,0,0,117,118,120,117,126,127,128,129,130,131,132,122,133,134,117,118,136,143,144,137,138,120,139,141,184,185,126,127,128,129,130,131,132,122,133,134,117,118,136,143,144,137,138,120,139,141,184,185,122,120,186,126,127,128,129,130,131,132,122,133,134,117,118,136,137,138,120,139,141,122,126,127,128,129,130,131,132,122,133,134,117,118,136,143,144,137,138,120,120,120,139,141,184,185,122,122,126,127,128,129,130,131,132,122,133,134,117,118,136,143,144,137,138,120,139,141,184,185,187,141,141,188,126,129,133,134,183,184,185,120,126,127,128,129,130,131,132,122,133,134,136,120,141,137,138,137,138,138,141,182,126,127,128,129,130,131,132,122,133,134,117,118,136,137,138,120,139,141,122,122,122,128,141,138,126,127,128,129,130,131,132,122,133,134,117,118,136,143,144,137,138,120,139,141,184,185,126,127,128,129,130,131,132,122,133,134,117,118,136,143,144,137,138,120,139,141,184,185,126,127,128,129,130,131,132,122,133,134,117,118,136,143,144,137,138,120,139,141,184,185,138,138,120,120,120,0,0,0,0,0,0,0,0,148,39,0,0,158,0,0,0,62,77,0,0,0,0,0,49,0,0,0,0,0,0,0,0,21,77,0,0,0,0,22,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,77,39,0,0,0,0,0,49,49,49,0,49,49,49,147,0,147,0,0,149,148,148,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,149,149,149,0,147,0,0,147,0,0,0,0,0,0,39,0,49,49,49,62,168,0,0,66,147,148,21,147,149,148,147,149,148,147,149,148,147,149,148,27,109,21,21,21,21,21,21,21,21,21,27,109,147,147,149,148,148,66,63,0,21,63,147,149,148,187,189,25,147,168,0,179,109,21,63,27,163,147,149,148,149,22,147,149,148,147,149,148,147,149,148,180,0,0,0,0,0,151,151,152,152,151,153,154,155,152,151,153,154,155,151,152,151,153,154,155,151,152,151,153,154,155,152,151,153,154,155,151,152,153,154,155,152,151,151,153,154,155,154,153,151,155,151,155,152,151,153,154,155,152,151,153,154,155,152,151,153,154,155,151,155,155,155,0,0,0,148,158,0,0,0,0,0,0,0,0,0,0,165,0,0,148,0,0,147,147,149,148,148,0,0,0,0,0,0,0,0,0,149,149,149,147,147,0,0,165,0,0,0,165,0,163,163,163,109,190,191,192,165,157,159,160,161,150,27,109,190,191,192,165,157,159,160,161,150,27,109,150,157,159,160,161,150,27,109,157,159,160,161,150,27,109,157,160,150,27,109,109,27,109,0,157,159,160,161,150,109,157,159,160,161,109,163,163,163,27,27,157,159,160,161,109,190,191,192,165,157,157,159,160,161,150,150,150,150,150,150,150,27,27,109,109,109,0,150,150,150,150,150,159,160,47,165,190,191,192,165,157,159,160,161,150,27,109,189,25,150,109,150,109,165,165,163,163,163,150,193,193,193,193,193,193,193,193,193,158,158,158,159,109,109,150,163,163,163,109,163,163,163,27,27,27,150,109,0,163,157,159,160,161,157,159,160,161,150,27,109,163,163,163,150,109,109,190,191,192,165,157,159,160,161,150,27,109,190,191,192,165,157,159,160,161,150,27,109,190,191,192,165,157,159,160,161,150,27,109,25,25,25,25,25,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,167,166,167,0,166,0,166,167,0,166,167,156,166,167,156,166,167,156,166,167,156,156,166,167,156,156,166,167,156,156,166,167,156,166,167,156,166,167,156,166,167,156,156],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2,2,2,3]],[[1,2,2,2,3]],[[1,2,2,2,3]],[1,[[5,[4]]]],[[],[[5,[4]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[2,2,2,6,7],2],[[2,2,2,6,7],2],[[2,2,2,6,7],2],[[],8],[[],8],[[]],[[]],[[]],[[9,10,8],[[5,[4]]]],[[10,8],[[5,[4]]]],[9,[[5,[4]]]],[1,[[5,[4]]]],[[],[[5,[4]]]],[9,[[5,[4]]]],[[],[[5,[4]]]],[11,[[5,[4]]]],[[1,3]],[[9,11],[[5,[[4,[12]]]]]],[[1,11],[[5,[[4,[13]]]]]],[[9,8],[[5,[4]]]],[[1,8],[[5,[4]]]],[8,[[5,[4]]]],[[9,14],[[5,[4]]]],[14,[[5,[4]]]],[9],[1],[[],[[5,[4]]]],[9,[[5,[[4,[12]]]]]],[1,[[5,[[4,[13]]]]]],[14,[[5,[4]]]],[9,[[5,[4]]]],[[],[[5,[4]]]],[[1,2,2,2]],[[1,2,2,2]],[[1,2,2,2]],[[1,15,2,2,2]],[[]],[[]],[[]],[[]],[[]],[9],[1],[10,[[5,[[1,[16]],13]]]],[[]],[[]],[[]],[[]],[[],9],[[],[[1,[16]]]],[[],[[5,[4]]]],[9,[[5,[[4,[12]]]]]],[1,[[5,[[4,[13]]]]]],[1,[[18,[1,17]]]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],19],[[],19],[[],19],[[],19],[[],[[1,[16]]]],[[],[[5,[1,13]]]],[20,9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[23,[21,22]]]],[[[24,[21]],25],[[24,[21]]]],[[26,25],26],[[[24,[21]],[28,[27]]],[[24,[21]]]],[[26,[28,[27]]],26],[[[23,[21,[30,[29,29]]]]],31],[[[32,[21,22]],[28,[27]]],[[32,[21,22]]]],[[26,[28,[27]]],26],[[[32,[21,22]],[28,[27]]],[[32,[21,22]]]],[[]],[[]],[[]],[[[33,[21,22,22]]],23],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[33,[21,22,22]]],23],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[33,[21,22,22]]],23],[[[34,[21]],35,35],[[5,[[23,[21,30]],36]]]],[[[34,[21]],35,35,35],[[5,[[23,[21,37]],36]]]],[[[34,[21]],35,35],[[5,[[23,[21,30]],36]]]],[[[34,[21]],[38,[14]],25],[[34,[21]]]],[39,39],[[[41,[[0,[40,22]],[0,[40,22]]]]],[[41,[[0,[40,22]],[0,[40,22]]]]]],[[[42,[[0,[40,22]]]]],[[42,[[0,[40,22]]]]]],[[]],[[]],[[]],0,[[[23,[30]]],26],[[[33,[21,22,30]]],[[24,[21]]]],[[[23,[21,22]]],[[32,[21,22]]]],[[[33,[21,22,22]]]],[[[33,[21,22,22]]]],[26,26],[26,26],[26,26],[26,26],[26,26],[26,26],[[[24,[21]]],[[5,[36]]]],[26,[[5,[36]]]],[[[32,[21,22]]],[[5,[36]]]],[[[33,[21,[30,[29,29]],[30,[29,29]]]]],[[5,[43,36]]]],[[[23,[21,22]]],[[5,[43,36]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[33,[21,22,22]]],[[41,[22,22]]]],[33,[[41,[[0,[22,40]],[0,[22,40]]]]]],[[]],[[[23,[21,22]]],[[42,[22]]]],[23,42],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[23,[21,22]]],[[42,[22]]]],[[[33,[21,22,22]]],[[41,[22,22]]]],[[[23,[21,44]]],45],[[[33,[21,44,44]]]],[[[33,[21,22,44]]],45],[[[23,[21,22]]],[[42,[[46,[22]]]]]],[[[33,[21,22,22]]],[[41,[[46,[22]],[46,[22]]]]]],[[[43,[21]],[28,[20]]],[[43,[21]]]],[[[32,[21,22]],25],[[32,[21,22]]]],[[[24,[21]],25],[[24,[21]]]],[[26,25],26],[[[43,[21]],45],[[43,[21]]]],[[[32,[21,22]],47],[[32,[21,22]]]],[[26,[28,[27]]],26],[[[34,[21]],47],[[34,[21]]]],[[[32,[21,22]],47],[[32,[21,22]]]],[[[34,[21]],47],[[34,[21]]]],[[[34,[21]],47],[[34,[21]]]],[[[34,[21]],47],[[34,[21]]]],[[[34,[21]],47],[[34,[21]]]],[[26,7],26],[48,[[34,[21]]]],[[[23,[21,22]]],48],[[[32,[21,22]],49],[[32,[21,22]]]],[[[41,[22,22]],48],[[33,[21,22,22]]]],[[[42,[22]],48],[[23,[21,22]]]],[[[34,[21]],47],[[34,[21]]]],[[[33,[21,22,22]]],48],[[[23,[[37,[29,29,29]]]]],[[23,[[37,[29,29,29]]]]]],[[[34,[21]],47],[[34,[21]]]],[[[24,[21]],47],[[24,[21]]]],[[26,47],26],[[[34,[21]],39,47],[[34,[21]]]],[[[34,[21]],47],[[34,[21]]]],[[[23,[21,[30,[29,29]]]],35,35],[[33,[21,[30,[29,29]],30]]]],[[[24,[21]],39,47],[[24,[21]]]],[[26,39,47],26],[[[23,[21,[0,[22,40]]]]],[[42,[[0,[22,40]]]]]],[[[33,[21,22,22]]],[[41,[22,22]]]],[[]],[[]],[[]],[[[34,[21]],47],[[34,[21]]]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[[23,[[37,[29,29,29]]]],50],[[23,[[37,[29,29,29]]]]]],[[[24,[21]],[28,[20]]],[[24,[21]]]],[[26,[28,[20]]],26],[[[34,[21]],47],[[34,[21]]]],[[[24,[21]],45],[[24,[21]]]],[[26,45],26],[[[24,[21]],47],[[24,[21]]]],[[26,47],26],[[26,25],26],[[[24,[21]],7],[[24,[21]]]],[[26,7],26],[[26,7],26],[[[23,[21,[30,[29,29]]]]],51],[[[24,[21]],[28,[20]]],[[24,[21]]]],[[26,[28,[20]]],26],[[[34,[21]],47],[[34,[21]]]],[[[24,[21]],45],[[24,[21]]]],[[26,45],26],[[[24,[21]],47],[[24,[21]]]],[[26,47],26],[[26,25],26],[[[24,[21]],7],[[24,[21]]]],[[26,7],26],[[26,7],26],[[[23,[21,[30,[29,29]]]]],51],0,0,0,0,[[]],[[]],0,[52,52],[[]],0,[[],15],[[],15],[[],15],[[52,53],54],[[]],[[]],0,0,[31,55],[[52,31],[[55,[31]]]],[[]],[[],31],[52,31],[[],5],[[],5],[[],19],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[[30,[[0,[40,29]],[0,[40,29]]]]],[[30,[[0,[40,29]],[0,[40,29]]]]]],[[]],[[[56,[29,29]],27],[[5,[4]]]],[[[30,[29,29]],57,57,58],5],[[]],[[]],[[[30,[29,29]]],[[51,[15]]]],[[[30,[29,29]]],51],[[[30,[29,29]]],[[51,[15]]]],[[[30,[29,29]]],51],[[]],[[]],[[[28,[29]],[28,[29]]],[[30,[29,29]]]],[[[30,[59,59]],31],55],[[]],[[[30,[29,29]]],31],[[],5],[[],5],[[],5],[[],5],[[],19],[[],19],[[[30,[29,29]]]],[[[30,[29,29]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],3],[[[60,[29]]],[[51,[15]]]],[[[61,[29]]],[[51,[15]]]],[[[60,[29]]]],[[[60,[29]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[62],[[[64,[[0,[40,63]]]]],[[64,[[0,[40,63]]]]]],[[[65,[[0,[40,29]],[0,[40,40]],[0,[40,0]]]]],[[65,[[0,[40,29]],[0,[40,40]],[0,[40,0]]]]]],[[[67,[[0,[40,66]]]]],[[67,[[0,[40,66]]]]]],[[[62,[40,40]]],[[62,[40,40]]]],[[]],[[]],[[]],[[]],[[[62,[68,68]],62],8],[[[62,[69,69]],53],54],[62,20],[[],20],[[],20],[[]],[[]],[[[67,[66]]],[[70,[66]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],62],[[],62],[71],[3],[[[60,[63]],7],55],[[[61,[63]],7],55],[[[72,[63,63]],7],55],[[[64,[63]],7],55],[[[65,[29,40,0]],7],55],[7,64],[7,64],[7,64],[[[60,[63]]],[[55,[7]]]],[[[61,[63]]],[[55,[7]]]],[[[72,[63,63]]],[[55,[7]]]],[[[64,[63]]],[[55,[7]]]],[[[65,[29,40,0]]],[[55,[7]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[60,[29]],57],18],[[[61,[29]],57],18],[[[70,[66]],57],18],[[[72,[63,29]],57],18],[[[64,[63]],57],18],[[[65,[29,40,0]],57],18],[[[60,[29]]]],[[[60,[29]]]],0,[[51,[51,[3]]],[[55,[0]]]],[[[60,[29]]],15],[[[61,[29]]],15],[[[70,[66]]],15],[[[72,[63,29]]],15],[[[64,[63]]],15],[[[65,[29,40,0]]],15],[45,72],[45,72],[45,72],[62,55],0,0,0,[[[60,[29]]],51],[[[61,[29]]],51],[[[70,[66]]],[[51,[66]]]],[[[72,[63,29]]],51],[[[64,[63]]],51],[[[65,[29,40,0]]],51],[[[60,[63]]],7],[[[61,[63]]],7],[[[72,[63,63]]],7],[[[64,[63]]],7],[[[65,[29,40,0]]],7],[40,[[65,[40,0]]]],[40,[[65,[40,0]]]],[40,[[65,[40,0]]]],[[]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[15,55],[15,55],[15,55],[15,55],[15,55],[[[65,[29,40,0]]],[[65,[29,40,0]]]],[[[65,[29,40,0]]],[[65,[29,40,0]]]],[[[65,[29,40,0]]],[[65,[29,40,0]]]],[[[65,[29,40,0]]],[[65,[29,40,[0,[40]]]]]],[45,61],[45,61],[45,61],[18,60],[18,60],[18,60],[[[61,[29]],45],[[61,[29]]]],[[[60,[29]],73],[[60,[29]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[74,8],[[],[[51,[15]]]],[[],7],[75,7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[76,[[0,[40,63]]]]],[[76,[[0,[40,63]]]]]],[[[77,[40]]],[[77,[40]]]],[[]],[[]],[[[77,[69]],53],54],[[],20],[77,20],[[],20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],77],[71],[7,55],[[[76,[63]],7],55],[[],[[55,[7]]]],[[[76,[63]]],[[55,[7]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],76],[[],76],[[],76],[57,18],[[[76,[63]],57],18],[[],15],[[[76,[63]]],15],[[],7],[78,7],[75,7],[[7,7],75],[[],55],[[],55],[[],55],[[],55],[[],55],[[],55],[[],51],[[[76,[63]]],51],[[],7],[[[76,[63]]],7],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[15,55],[15,55],0,0,0,[[],74],[78,74],[75,74],0,0,0,[79],[79],[[]],[[]],[[]],[[]],[[]],[[]],[79,79],[80,80],[[[37,[[0,[40,29]],[0,[40,29]],[0,[40,29]]]]],[[37,[[0,[40,29]],[0,[40,29]],[0,[40,29]]]]]],[[]],[[]],[[]],[[],79],[[],80],[[[37,[29,29,29]]],15],[[79,53],54],[[]],[[],79],[[]],[[]],[[]],[[]],[[]],[80,79],[[[37,[29,29,29]]]],[79],[79],[[79,79],79],[[],80],[[[28,[29]],[28,[29]],[28,[29]]],[[37,[29,29,29]]]],[79],[[],79],0,[79,15],[[[37,[29,29,29]]],15],[[[37,[29,29,29]]],79],[[3,3,3],79],[3,79],0,[[[37,[29,29,29]],[51,[15]],[51,[15]]],[[37,[29,29,29]]]],[80,80],[[[37,[29,29,29]],[51,[15]],[51,[15]],50],[[37,[29,29,29]]]],[[3,3,3],79],[[]],[[]],[[]],[[[37,[29,29,29]]],31],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],19],[[],19],[[],19],[[[28,[29]],[28,[29]],[28,[29]],50],[[37,[29,29,29]]]],0,[[],79],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[82,[[0,[40,81]]]]],[[82,[[0,[40,81]]]]]],[[[83,[[0,[40,0]]]]],[[83,[[0,[40,0]]]]]],[[[84,[[0,[40,0]]]]],[[84,[[0,[40,0]]]]]],[[[86,[[0,[40,81,85,0]]]]],[[86,[[0,[40,81,85,0]]]]]],[87,87],[88,88],[89,89],[90,90],[91,91],[92,92],[93,93],[94,94],[95,95],[96,96],[[[97,[[0,[40,68]]]]],[[97,[[0,[40,68]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],20],[[],20],[[],20],[98,20],[3,20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[[51,[81]]],[[82,[81]]]],[[]],[[]],[[]],[[[51,[99]]],[[86,[99]]]],[[[51,[[101,[100]]]]],[[86,[[101,[100]]]]]],[[]],[[]],[[[51,[102]]],87],[[[51,[98]]],88],[[]],[[]],[[[51,[3]]],89],[[[51,[10]]],90],[[]],[[]],[[[51,[15]]],91],[[]],[[[51,[6]]],92],[[[51,[103]]],93],[[]],[[]],[[[51,[104]]],94],[[[51,[105]]],95],[[]],[[[51,[7]]],96],[[]],[[],[[97,[68]]]],[[]],[[82,7],55],[[[83,[[0,[0,40]]]],7],[[55,[[0,[0,40]]]]]],[[[84,[[0,[0,40]]]],7],[[55,[[0,[0,40]]]]]],[[90,7],55],[[91,7],55],[[92,7],55],[[93,7],55],[[94,7],55],[[95,7],55],[[96,7],55],[[[97,[68]],7],55],[82,[[55,[7]]]],[[[83,[[0,[0,40]]]]],[[55,[7]]]],[[[84,[[0,[0,40]]]]],[[55,[7]]]],[90,[[55,[7]]]],[91,[[55,[7]]]],[92,[[55,[7]]]],[93,[[55,[7]]]],[94,[[55,[7]]]],[95,[[55,[7]]]],[96,[[55,[7]]]],[[[97,[68]]],[[55,[7]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[82,57],18],[[[83,[[0,[0,40]]]],57],18],[[[84,[[0,[0,40]]]],57],18],[[86,57],18],[[87,57],18],[[88,57],[[18,[98]]]],[[89,57],[[18,[3]]]],[[90,57],[[18,[10]]]],[[91,57],[[18,[15]]]],[[92,57],[[18,[6]]]],[[93,57],[[18,[103]]]],[[94,57],[[18,[104]]]],[[95,57],[[18,[105]]]],[[96,57],[[18,[7]]]],[[[97,[68]],57],18],[82,15],[[[83,[[0,[0,40]]]]],15],[[[84,[[0,[0,40]]]]],15],[86,15],[87,15],[[88,98],15],[[89,3],15],[[90,10],15],[[91,15],15],[[92,6],15],[[93,103],15],[[94,104],15],[[95,105],15],[[96,7],15],[[[97,[68]]],15],[[],83],[82,51],[[[83,[[0,[0,40]]]]],[[51,[[0,[0,40]]]]]],[[[84,[[0,[0,40]]]]],[[51,[[0,[0,40]]]]]],[86,51],[87,[[51,[102]]]],[88,[[51,[98]]]],[89,[[51,[3]]]],[90,[[51,[10]]]],[91,[[51,[15]]]],[92,[[51,[6]]]],[93,[[51,[103]]]],[94,[[51,[104]]]],[95,[[51,[105]]]],[96,[[51,[7]]]],[[[97,[68]]],51],[82,7],[[[83,[[0,[0,40]]]]],7],[[[84,[[0,[0,40]]]]],7],[90,7],[91,7],[92,7],[93,7],[94,7],[95,7],[96,7],[[[97,[68]]],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[15,55],[15,55],[15,55],[[88,15],[[55,[98]]]],[[89,15],[[55,[3]]]],[15,55],[15,55],[15,55],[15,55],[15,55],[15,55],[15,55],[15,55],[[],84],0,[[]],[[]],[106,106],[[]],[73,51],0,[[106,53],54],[[]],[[]],[106,3],[[],106],[[]],[[],5],[[],5],[[],19],[106],0,0,[[]],[[]],[[]],[[]],0,0,[[3,8],20],[[107,3],20],[[],5],[[],5],[[],19],0,0,0,0,0,0,0,0,[[[48,[21,52]],22],[[48,[21,22]]]],[[[48,[21,22]]]],[[[48,[21,22]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[48,[21,[0,[22,40]]]]],[[48,[21,[0,[22,40]]]]]],[108,108],[[]],[[]],[[[48,[21,22]]]],[[[48,[21,22]]],[[5,[36]]]],[[[48,[21,[30,[29,29]]]],57,57],[[5,[36]]]],[[[48,[21,22]]],[[5,[36]]]],[[[48,[21,52]],14,109,31],[[5,[36]]]],[[[48,[21,22]],14,109],[[5,[36]]]],[[[48,[21,22]]],[[5,[36]]]],[[108,53],54],[[[36,[[0,[110,111,112]]]],53],[[5,[113]]]],[[[36,[[0,[69,110,111,112]]]],53],54],[[114,53],54],[[114,53],54],[21,[[48,[21,52]]]],[115,[[48,[21,52]]]],[71],[[]],[[]],[[]],[[]],[[[48,[21,22]]],31],[[[48,[21,22]]]],[[[48,[21,[30,[29,29]]]]],[[51,[15]]]],[[[48,[21,[30,[29,29]]]]],51],[[[48,[21,[30,[29,29]]]]],[[51,[15]]]],[[[48,[21,[30,[29,29]]]]],51],[[]],[[]],[[]],[[]],[[[48,[21,22]]],22],[[],[[48,[52]]]],[[[48,[21,22]]],31],[[[48,[21,52]],47,47,47,47],[[48,[21,52]]]],[[[48,[21,22]]],[[5,[36]]]],[116],[116],[[[48,[21,22]],3],3],[[[48,[21,22]],3],3],[[[48,[21,52]]],[[48,[21,52]]]],[[[48,[21,52]],38,38],[[18,[[48,[21,52]]]]]],[[[48,[21,52]]],[[18,[[48,[21,52]]]]]],[[[48,[21,52]],47]],[[[48,[21,52]],47]],[[[48,[21,22]]],[[48,[21,52]]]],[[[48,[21,52]],14,[28,[109]]],[[5,[[48,[21,52]],36]]]],[[]],[[]],[[],20],[[],20],[108],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],19],[[],19],[[],19],[[],19],[[[48,[21,22]]],[[48,[21,52]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[117,[21]]]],[[[118,[21]]]],[[[120,[119]]],[[1,[119]]]],[[],[[117,[21]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[122,[31,[121,[14]]]]],[[124,[[18,[123]]]]]],[[[120,[119]]],[[120,[119]]]],[125,[[5,[4]]]],[[126,125],[[5,[4]]]],[[127,125],[[5,[4]]]],[[128,125],[[5,[4]]]],[[[129,[47]],125],[[5,[4]]]],[[130,125],[[5,[4]]]],[[131,125],[[5,[4]]]],[[[132,[[121,[14]]]],125],[[5,[4]]]],[[[122,[[121,[14]]]],125],[[5,[4]]]],[[[133,[47]],125],[[5,[4]]]],[[[134,[47]],125],[[5,[4]]]],[[[117,[21]],125],[[5,[4]]]],[[[118,[21]],125],[[5,[4]]]],[[[136,[135]],125],[[5,[4]]]],[[[137,[0]],125],[[5,[4]]]],[[[138,[[0,[98]]]],125],[[5,[4]]]],[[120,125],[[5,[4]]]],[[[139,[21,40]],125],[[5,[4]]]],[[[141,[140]],125],[[5,[4]]]],[[[122,[[121,[14]]]]],124],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[120,[16]]]],[[],[[120,[142]]]],[[]],[[]],[[]],[[]],[[]],[[[28,[14]],[28,[109]],10],[[122,[14]]]],[[20,[28,[109]],10],[[122,[20]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],139],[[[141,[140]],3]],[[[141,[140]],[28,[109]]]],[27],[[47,27],126],[[47,27],[[129,[47]]]],[[47,27],[[133,[47]]]],[[47,27],[[134,[47]]]],[108],[108,31],[108],[[[120,[119]]]],[[28,[28,[27]]],126],[[[28,[18]],[28,[27]]],127],[[[28,[27]]],128],[[47,[28,[27]]],[[129,[47]]]],[[[28,[18]],[28,[27]]],130],[[[28,[27]],[28,[27]]],[[131,[40,40,40]]]],[[[121,[14]],[28,[109]]],[[132,[[121,[14]]]]]],[[[28,[109]]],[[122,[[121,[14]]]]]],[[47,[28,[27]]],[[133,[47]]]],[[47,[28,[27]]],[[134,[47]]]],[[40,135,135,135,135,[28,[27]],[28,[27]],10],[[136,[40,135]]]],[[],[[120,[119]]]],[3,[[141,[140]]]],[[[28,[27]],10],[[137,[143]]]],[[40,106],[[138,[40,[0,[40,98]]]]]],[[[28,[27]],10],[[137,[144]]]],[[40,106],[[138,[40,[0,[40,98]]]]]],[[[138,[[0,[98]]]],[0,[[28,[3]],145]]],[[138,[[0,[98]]]]]],[[[141,[140]],[28,[109]]]],[[]],[126],[127],[128],[129,146],[130],[131],[132],[122],[133,146],[134,146],[117],[118],[136],[137],[138],[120],[139],[141,146],[[[122,[[121,[14]]]],[28,[[121,[14]]]]]],[[[122,[[121,[14]]]]]],[[[122,[[121,[14]]]],3],[[122,[[121,[14]]]]]],[[128,10,10,10,10],128],[[[141,[140]],3]],[[[138,[[0,[98]]]],[28,[27]]],[[138,[[0,[98]]]]]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[[138,[[0,[98]]]],3],[[138,[[0,[98]]]]]],[[[138,[[0,[98]]]],10],[[138,[[0,[98]]]]]],[[],[[55,[[120,[119]]]]]],[[[18,[2]]],[[55,[[120,[119]]]]]],[[],[[55,[[120,[119]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],3],[147,14],[148,14],[[],[[5,[4]]]],[[]],[[]],[[]],[[]],[[]],[[]],[147,147],[149,149],[148,148],[[]],[[]],[[]],0,0,[[10,8],[[5,[4]]]],[[],[[5,[4]]]],[[],[[5,[4]]]],[11,[[5,[4]]]],[8,[[5,[4]]]],[14,[[5,[4]]]],[[],[[5,[4]]]],[14,[[5,[4]]]],[[],[[5,[4]]]],0,0,[[]],[14,147],[[]],[[]],[14,148],[3],[7,55],0,[[]],[[],[[55,[7]]]],[[]],[[]],[[]],[[],139],[[],150],[[],109],[147,109],0,[[51,[51,[3]]],[[55,[0]]]],[[],83],0,[[],[[5,[4]]]],[[],7],0,[[],11],[[]],[[]],[[]],[[149,15,15]],[[],31],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],19],[[],19],[[],19],[[],84],0,0,0,0,0,[151,151],[[151,45],151],[[[152,[21,40,40]],[28,[27]]],[[152,[21,40,40]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[151,73],151],[[]],[[]],[[]],[[]],[[]],[23,[[151,[0]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[151,10],151],[[73,40,[28,[27]]],[[152,[21,40,40]]]],[[73,[28,[27]]],[[153,[21]]]],[[73,[0,[47,40]],[28,[27]]],[[154,[73,[0,[47,40]]]]]],[[125,125],155],[[[152,[21,40,40]]],55],[[[151,[0]]],55],[[[151,[0]]],55],[[[153,[21,40]]],55],[[[154,[73,[0,[47,40]]]]],55],[155,55],[[73,[0,[47,40]],[28,[27]]],[[154,[73,[0,[47,40]]]]]],[[[153,[21]],10],[[153,[21]]]],[[151,[28,[27]]],151],[[155,[28,[27]]],155],[[151,45],151],[155,155],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],19],[[],19],[[],19],[[],19],[[],19],[23,[[151,[0]]]],[[],[[155,[0]]]],[[],[[155,[0]]]],[[],[[155,[0]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],3],[[],3],[[],3],[109,156],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[150,14],124],[157,157],[[[159,[[0,[40,158]]]]],[[159,[[0,[40,158]]]]]],[160,160],[161,161],[150,150],[27,27],[109,109],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[157,11],[160,11],[150,109],[27,11],[109,109],[109,11],0,0,0,[[],157],[[],[[159,[[0,[162,158]]]]]],[[],160],[[],161],[[150,14,58],[[124,[5]]]],[[109,14,31,58],[[5,[5]]]],[[157,157],8],[[[159,[[0,[68,158]]]],159],8],[[160,160],8],[[161,161],8],[109,147],[[],27],[[],27],[[],27],[27,27],0,[[157,53],54],[[[159,[[0,[69,158]]]],53],54],[[160,53],54],[[161,53],54],0,[[]],[[]],[[]],[[]],[[]],[160,157],[[]],[[]],[[]],[[],150],[14,150],[[],150],[[],150],[[],150],[147,150],[[]],[163,27],[[]],[109,109],[[[28,[150]]],109],[[]],0,[150,147],[150,14],[150,3],[150,148],[150,149],[[[159,[[0,[164,158]]]]]],[160],[[],15],[165,15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],150],[[],109],[150,109],[109,109],[[150,14],124],[[109,14],5],0,0,[3,157],[3,157],[3,157],[[147,3,148],150],[[],165],[[],165],[[],165],[[],165],[[],165],[[],165],[[],165],[[],165],[[],165],[7,159],[7,159],[7,159],[7,[[159,[158]]]],[[109,156],109],0,[[150,3],150],[[]],[[]],[[]],[109,3],[10,27],[10,27],[10,27],[27,10],[[27,10],27],0,[[150,148],150],[109,148],0,[[],11],[157,11],[[[159,[158]]],11],[160,11],[161,11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],157],[[],157],[[],157],[[150,149],150],[[109,149],109],[109,149],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[166,166],[167,167],[156,156],[[]],[[]],[[]],[[],156],[[]],[[]],[[]],0,[[]],[[]],[[]],[[166,167],156],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],19],[[],19],[[],19],0],"p":[[3,"BitMapBackend"],[15,"u8"],[15,"f64"],[4,"DrawingErrorKind"],[4,"Result"],[15,"u64"],[15,"usize"],[15,"bool"],[3,"SVGBackend"],[15,"u32"],[3,"BackendColor"],[3,"Error"],[4,"BitMapBackendError"],[15,"str"],[15,"i32"],[3,"RGBPixel"],[3,"Global"],[3,"Vec"],[3,"TypeId"],[3,"String"],[8,"DrawingBackend"],[8,"CoordTranslate"],[3,"ChartContext"],[3,"SecondaryMeshStyle"],[8,"IntoTextStyle"],[3,"MeshStyle"],[3,"ShapeStyle"],[8,"Into"],[8,"Ranged"],[3,"Cartesian2d"],[6,"BackendCoord"],[3,"SeriesLabelStyle"],[3,"DualCoordChartContext"],[3,"ChartBuilder"],[8,"AsRangedCoord"],[4,"DrawingAreaErrorKind"],[3,"Cartesian3d"],[8,"AsRef"],[4,"LabelAreaPosition"],[8,"Clone"],[3,"DualCoordChartState"],[3,"ChartState"],[3,"SeriesAnno"],[8,"ReverseCoordTranslate"],[8,"Fn"],[3,"Arc"],[8,"SizeDesc"],[3,"DrawingArea"],[4,"SeriesLabelPosition"],[8,"FnOnce"],[3,"Range"],[3,"Shift"],[3,"Formatter"],[6,"Result"],[4,"Option"],[4,"MeshLine"],[8,"KeyPointHint"],[8,"FnMut"],[8,"ReversibleRanged"],[3,"WithKeyPoints"],[3,"WithKeyPointMethod"],[4,"NestedValue"],[8,"DiscreteRanged"],[3,"GroupBy"],[3,"Linspace"],[8,"LogScalable"],[3,"LogRange"],[8,"PartialEq"],[8,"Debug"],[3,"LogCoord"],[15,"never"],[3,"NestedRange"],[8,"IntoIterator"],[4,"KeyPointWeight"],[3,"LightPoints"],[3,"SegmentedCoord"],[4,"SegmentValue"],[3,"BoldPoints"],[3,"ProjectionMatrix"],[3,"ProjectionMatrixBuilder"],[8,"Datelike"],[3,"RangedDate"],[3,"Monthly"],[3,"Yearly"],[8,"Timelike"],[3,"RangedDateTime"],[3,"RangedDuration"],[3,"RangedCoordf32"],[3,"RangedCoordf64"],[3,"RangedCoordu32"],[3,"RangedCoordi32"],[3,"RangedCoordu64"],[3,"RangedCoordi64"],[3,"RangedCoordu128"],[3,"RangedCoordi128"],[3,"RangedCoordusize"],[3,"RangedSlice"],[15,"f32"],[3,"NaiveDateTime"],[8,"TimeZone"],[3,"DateTime"],[3,"Duration"],[15,"i64"],[15,"u128"],[15,"i128"],[3,"Quartiles"],[3,"FloatPrettyPrinter"],[3,"Rect"],[3,"TextStyle"],[8,"Error"],[8,"Send"],[8,"Sync"],[3,"Error"],[3,"DummyBackendError"],[3,"Rc"],[3,"Demand"],[3,"EmptyElement"],[3,"ComposedElement"],[8,"PixelFormat"],[3,"BitMapElement"],[8,"Borrow"],[3,"MultiLineText"],[6,"LayoutBox"],[6,"FontResult"],[8,"Iterator"],[3,"Pixel"],[3,"PathElement"],[3,"Rectangle"],[3,"Circle"],[3,"Polygon"],[3,"Cubiod"],[3,"Text"],[3,"Cross"],[3,"TriangleMarker"],[8,"PartialOrd"],[3,"CandleStick"],[3,"ErrorBar"],[3,"Boxplot"],[3,"DynElement"],[8,"Display"],[3,"Pie"],[3,"BGRXPixel"],[3,"ErrorBarOrientH"],[3,"ErrorBarOrientV"],[8,"Copy"],[3,"Once"],[4,"FontFamily"],[4,"FontStyle"],[4,"FontTransform"],[3,"FontDesc"],[3,"Histogram"],[3,"AreaSeries"],[3,"LineSeries"],[3,"PointSeries"],[3,"SurfaceSeries"],[3,"Pos"],[3,"RGBAColor"],[8,"Palette"],[3,"PaletteColor"],[3,"RGBColor"],[3,"HSLColor"],[8,"Default"],[8,"Color"],[8,"Hash"],[4,"RelativeSize"],[4,"HPos"],[4,"VPos"],[8,"IntoLogRange"],[8,"ToGroupByRange"],[8,"BuildNestedCoord"],[8,"IntoPartialAxis"],[8,"IntoLinspace"],[8,"BindKeyPointMethod"],[8,"BindKeyPoints"],[3,"DefaultFormatting"],[3,"NoDefaultFormatting"],[8,"ValueFormatter"],[8,"IntoSegmentedCoord"],[8,"IntoMonthly"],[8,"IntoYearly"],[8,"IntoDrawingArea"],[8,"PointCollection"],[8,"CoordMapper"],[3,"BackendCoordOnly"],[3,"BackendCoordAndZ"],[8,"Drawable"],[8,"IntoDynElement"],[8,"PointElement"],[8,"IntoFont"],[3,"Palette99"],[3,"Palette9999"],[3,"Palette100"],[8,"AsRelative"]]},\
"plotters_backend":{"doc":"The Plotters backend API crate. This is a part of …","t":"DGIININEQNQEEENNNNNNNNNNNMLLLLLLLLLLLLLLLLLLLLLLLKLLLKLLLKLLKLKLLLLLLLLLLKLLLLLKLKLAMLLLLLLALLLLLLLLLLLLLLLLLLLLLLLFFFFFNNNENDNNELLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLM","n":["BackendColor","BackendCoord","BackendStyle","BackendTextStyle","Bold","DrawingBackend","DrawingError","DrawingErrorKind","ErrorType","FontError","FontError","FontFamily","FontStyle","FontTransform","Italic","Monospace","Name","None","Normal","Oblique","Rotate180","Rotate270","Rotate90","SansSerif","Serif","alpha","anchor","anchor","as_str","as_str","blit_bitmap","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","color","color","color","color","draw","draw_circle","draw_line","draw_path","draw_pixel","draw_rect","draw_text","ensure_prepared","estimate_text_size","family","fill_polygon","fmt","fmt","from","from","from","from","from","from","from","get_size","into","into","into","into","into","layout_box","mix","present","provide","rasterizer","rgb","size","size","stroke_width","stroke_width","style","style","text_anchor","to_owned","to_owned","to_owned","to_owned","to_string","transform","transform","transform","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","draw_circle","draw_line","draw_rect","fill_polygon","polygonize","Bottom","Center","Center","HPos","Left","Pos","Right","Top","VPos","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","from","from","from","h_pos","into","into","into","new","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","v_pos"],"q":["plotters_backend","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","plotters_backend::rasterizer","","","","","plotters_backend::text_anchor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The color type that is used by all the backend","A coordinate in the pixel-based backend. The coordinate …","The style data for the backend drawing API","The trait that abstracts a style of a text.","The bold style","The drawing backend trait, which implements the low-level …","A drawing backend error","The error produced by a drawing backend.","The error type reported by the backend","A font rendering error","The error type of this text style implementation","Describes font family. This can be either a specific font …","Describes the font style. Such as Italic, Oblique, etc.","Specifying text transformations","The italic style","The system default monospace font","A specific font family name","Nothing to transform","The normal style","The oblique style","Rotating the text 180 degree clockwise","Rotating the text 270 degree clockwise","Rotating the text 90 degree clockwise","The system default sans-serif font family","The system default serif font family","","","","Make a CSS compatible string for the font family name. …","Convert the font style into a CSS compatible string which …","Blit a bitmap on to the backend.","","","","","","","","","","","","","","","","","","","Get the color of current style","","","","","Draw a circle on the drawing backend","Draw a line on the drawing backend","Draw a path on the drawing backend","Draw a pixel on the drawing backend","Draw a rectangle on the drawing backend","Draw a text on the drawing backend","Ensure the backend is ready to draw","Estimate the size of the horizontal text if rendered on …","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Get the dimension of the drawing backend in pixels","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Finalize the drawing step and present all the changes. …","","The built-in rasterizers.","","","","Get the stroke width of current style","Get the stroke width of current style","","","Text anchor attributes are used to properly position the …","","","","","","","","Transform the coordinate to perform the rotation","","","","","","","","","","","","","","","","","","","","Covert a path with &gt;1px stroke width into polygon.","Anchor point is on the bottom of the text","Anchor point is in the horizontal center of the text","Anchor point is in the vertical center of the text","The horizontal position of the anchor point relative to …","Anchor point is on the left side of the text","The text anchor position.","Anchor point is on the right side of the text","Anchor point is on the top of the text","The vertical position of the anchor point relative to the …","","","","","","","","","","","","","Create a default text anchor position (top left).","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","The horizontal position of the anchor point","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new text anchor position.","","","","","","","","","","","","","The vertical position of the anchor point"],"i":[0,0,0,0,4,0,6,0,29,6,30,0,0,0,4,2,2,9,4,4,9,9,9,2,2,8,30,30,2,4,29,8,2,9,4,6,8,2,9,4,6,8,2,9,4,8,2,9,4,31,30,30,8,30,29,29,29,29,29,29,29,29,30,29,6,6,8,2,2,9,4,4,6,29,8,2,9,4,6,30,8,29,6,0,8,30,30,31,31,30,30,0,8,2,9,4,6,30,30,9,8,2,9,4,6,8,2,9,4,6,8,2,9,4,6,0,0,0,0,0,28,27,28,0,27,0,27,28,0,27,28,1,27,28,1,27,28,1,27,28,1,1,27,28,1,1,27,28,1,1,27,28,1,27,28,1,27,28,1,27,28,1,1],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[],1],[2,3],[4,3],[5,[[7,[6]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[8,8],[2,2],[9,9],[4,4],[[]],[[]],[[]],[[]],[[],8],[[],8],[[],8],[8,8],[[3,5,10],[[7,[7]]]],[[5,11,12],[[7,[6]]]],[[5,5],[[7,[6]]]],[13,[[7,[6]]]],[[5,8],[[7,[6]]]],[[5,5,12],[[7,[6]]]],[[3,5],[[7,[6]]]],[[],[[7,[6]]]],[3,[[7,[6]]]],[[],2],[13,[[7,[6]]]],[[[6,[[0,[14,15,16]]]],17],[[7,[18]]]],[[[6,[[0,[19,14,15,16]]]],17],20],[[]],[3,2],[[]],[[]],[3,4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,7],[[8,21],8],[[],[[7,[6]]]],[22],0,0,[[],21],[[],21],[[],11],[[],11],[[],4],[[],4],0,[[]],[[]],[[]],[[]],[[],23],[[],9],[[],9],[[9,24,24]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],25],[[],25],[[],25],[[],25],[[],25],[[5,11,12],[[7,[6]]]],[[5,5],[[7,[6]]]],[[5,5,12],[[7,[6]]]],[[],[[7,[6]]]],[11,[[26,[5]]]],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[27,27],[28,28],[1,1],[[]],[[]],[[]],[[],1],[[]],[[]],[[]],0,[[]],[[]],[[]],[[27,28],1],[[]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],25],[[],25],[[],25],0],"p":[[3,"Pos"],[4,"FontFamily"],[15,"str"],[4,"FontStyle"],[6,"BackendCoord"],[4,"DrawingErrorKind"],[4,"Result"],[3,"BackendColor"],[4,"FontTransform"],[8,"FnMut"],[15,"u32"],[15,"bool"],[8,"IntoIterator"],[8,"Error"],[8,"Send"],[8,"Sync"],[3,"Formatter"],[3,"Error"],[8,"Debug"],[6,"Result"],[15,"f64"],[3,"Demand"],[3,"String"],[15,"i32"],[3,"TypeId"],[3,"Vec"],[4,"HPos"],[4,"VPos"],[8,"DrawingBackend"],[8,"BackendTextStyle"],[8,"BackendStyle"]]},\
"plotters_bitmap":{"doc":"The Plotters bitmap backend.","t":"DENNNNALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDSSIDKLLLLLLKLLLLLKLLLLKLLLLLLLLLLLLLL","n":["BitMapBackend","BitMapBackendError","GifEncodingError","IOError","ImageError","InvalidBuffer","bitmap_pixel","blit_bitmap","borrow","borrow","borrow_mut","borrow_mut","draw_line","draw_pixel","draw_rect","drop","ensure_prepared","fmt","fmt","from","from","get_size","gif","into","into","new","present","provide","split","to_string","try_from","try_from","try_into","try_into","type_id","type_id","with_buffer","with_buffer_and_format","BGRXPixel","EFFECTIVE_PIXEL_SIZE","PIXEL_SIZE","PixelFormat","RGBPixel","blend_rect_fast","blend_rect_fast","blend_rect_fast","borrow","borrow","borrow_mut","borrow_mut","byte_at","byte_at","byte_at","can_be_saved","can_be_saved","can_be_saved","decode_pixel","decode_pixel","decode_pixel","draw_pixel","draw_pixel","fill_rect_fast","fill_rect_fast","fill_rect_fast","fill_vertical_line_fast","fill_vertical_line_fast","from","from","into","into","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["plotters_bitmap","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","plotters_bitmap::bitmap_pixel","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The backend that drawing a bitmap","Indicates some error occurs within the bitmap backend","","Some IO error occurs while the bitmap maniuplation","Image encoding error","The buffer provided is invalid, for example, wrong pixel …","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Create a new bitmap backend that generate GIF animation","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new bitmap backend","","","Split a bitmap backend vertically into several sub drawing …","","","","","","","","Create a new bitmap backend which only lives in-memory","Create a new bitmap backend with a in-memory buffer with …","The marker type that indicates we are currently using a …","Number of effective bytes per pixel, e.g. for BGRX pixel …","Number of bytes per pixel","The trait that describes some details about a particular …","The marker type that indicates we are currently using a …","The fast alpha blending algorithm for this pixel format","","","","","","","Encoding a pixel and returns the idx-th byte for the pixel","","","Indicates if this pixel format can be saved as image. …","Indicates if this pixel format can be saved as image. …","","Decode a pixel at the given location","","","Drawing a single pixel in this format","Drawing a single pixel in this format","The fast rectangle filling algorithm","","","The fast vertical line filling algorithm","The fast vertical line filling algorithm","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,7,7,7,7,0,2,2,7,2,7,2,2,2,2,2,7,7,2,7,2,2,2,7,2,2,7,2,7,2,7,2,7,2,7,2,2,0,1,1,0,0,1,24,14,24,14,24,14,1,24,14,1,1,14,1,24,14,1,1,1,24,14,1,1,24,14,24,14,24,14,24,14,24,14],"f":[0,0,0,0,0,0,0,[[[2,[1]],3],[[5,[4]]]],[[]],[[]],[[]],[[]],[[[2,[1]]],[[5,[4]]]],[[[2,[1]],3,6],[[5,[[4,[7]]]]]],[[[2,[1]],8],[[5,[4]]]],[[[2,[1]]]],[[[2,[1]]],[[5,[[4,[7]]]]]],[[7,9],10],[[7,9],10],[[]],[[]],[[[2,[1]]]],[[[12,[11]],13],[[5,[[2,[14]],7]]]],[[]],[[]],[[],[[2,[14]]]],[[[2,[1]]],[[5,[[4,[7]]]]]],[15],[[[2,[1]]],[[16,[[2,[1]]]]]],[[],17],[[],5],[[],5],[[],5],[[],5],[[],18],[[],18],[[],[[2,[14]]]],[[],[[5,[[2,[1]],7]]]],0,0,0,0,0,[[2,19,19,19,20]],[[2,19,19,19,20]],[[2,19,19,19,20]],[[]],[[]],[[]],[[]],[[19,19,19,21,22],19],[[19,19,19,21,22],19],[[19,19,19,21,22],19],[[],8],[[],8],[[],8],[[]],[[]],[[]],[[2,20]],[[2,20]],[[2,19,19,19]],[[2,19,19,19]],[[2,19,19,19]],[[2,23,19,19,19]],[[2,23,19,19,19]],[[]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],18],[[],18]],"p":[[8,"PixelFormat"],[3,"BitMapBackend"],[6,"BackendCoord"],[4,"DrawingErrorKind"],[4,"Result"],[3,"BackendColor"],[4,"BitMapBackendError"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Path"],[8,"AsRef"],[15,"u32"],[3,"RGBPixel"],[3,"Demand"],[3,"Vec"],[3,"String"],[3,"TypeId"],[15,"u8"],[15,"f64"],[15,"u64"],[15,"usize"],[15,"i32"],[3,"BGRXPixel"]]},\
"plotters_svg":{"doc":"The Plotters SVG backend.","t":"DLLLLLLLLLLLLLLLLLLLL","n":["SVGBackend","borrow","borrow_mut","draw_circle","draw_line","draw_path","draw_pixel","draw_rect","draw_text","drop","ensure_prepared","fill_polygon","from","get_size","into","new","present","try_from","try_into","type_id","with_string"],"q":["plotters_svg","","","","","","","","","","","","","","","","","","","",""],"d":["The SVG image drawing backend","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Create a new SVG drawing backend","","","","","Create a new SVG drawing backend and store the document …"],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[[]],[[]],[[1,2,3,4],[[6,[5]]]],[[1,2,2],[[6,[5]]]],[[1,7],[[6,[5]]]],[[1,2,8],[[6,[[5,[9]]]]]],[[1,2,2,4],[[6,[5]]]],[[1,10,2],[[6,[5]]]],[1],[1,[[6,[[5,[9]]]]]],[[1,7],[[6,[5]]]],[[]],[1],[[]],[[],1],[1,[[6,[[5,[9]]]]]],[[],6],[[],6],[[],11],[12,1]],"p":[[3,"SVGBackend"],[6,"BackendCoord"],[15,"u32"],[15,"bool"],[4,"DrawingErrorKind"],[4,"Result"],[8,"IntoIterator"],[3,"BackendColor"],[3,"Error"],[15,"str"],[3,"TypeId"],[3,"String"]]},\
"png":{"doc":"PNG encoder and decoder","t":"NNEDNNNNEENNEEDEDENESNDENENNNDNNNNNSNNNNDNNDNNNNNNNNDNNNNDNNDNNDNNNNSNDNNDEDDNDNENNDLLLLLMMMLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLMALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLMMLLLLLLLLLLMMLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLMMMMLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLMMLLLMLMLLLLLLLMLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMLMLMMMMLLLLLLMMMMDRRRRRRLLRLLLRRLLRLRRLFFRFRFRRRLLLLRRIDDDLLLLLLLLLLLLLLMLLLLKLLLLLLLLLLLLLLLLLMMMMLLLMLLLMLLLLLLLLL","n":["AbsoluteColorimetric","Adaptive","AdaptiveFilterType","AnimationControl","AnimationControl","Avg","Background","Best","BitDepth","BlendOp","ChunkBegin","ChunkComplete","ColorType","Compression","DecodeOptions","Decoded","Decoder","DecodingError","Default","DisposeOp","EXPAND","Eight","Encoder","EncodingError","Fast","FilterType","Format","Format","Four","FrameControl","FrameControl","Grayscale","GrayscaleAlpha","Header","Huffman","IDENTITY","ImageData","ImageDataFlushed","ImageEnd","Indexed","Info","IoError","IoError","Limits","LimitsExceeded","LimitsExceeded","Meter","NoFilter","NonAdaptive","None","Nothing","One","OutputInfo","Over","Paeth","Parameter","Parameter","ParameterError","PartialChunk","Perceptual","PixelDimensions","PixelDimensions","Previous","Reader","RelativeColorimetric","Rgb","Rgba","Rle","STRIP_16","Saturation","ScaledFloat","Sixteen","Source","SourceChromaticities","SrgbRenderingIntent","StreamWriter","StreamingDecoder","Sub","Transformations","Two","Unit","Unspecified","Up","Writer","add_itxt_chunk","add_text_chunk","add_ztxt_chunk","all","animation_control","animation_control","bit_depth","bit_depth","bitand","bitand_assign","bitor","bitor_assign","bits","bits_per_pixel","bitxor","bitxor_assign","blend_op","blue","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer_size","bytes","bytes_per_pixel","cause","cause","chrm_chunk","chunk","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","color_type","color_type","complement","compressed_latin1_text","compression","contains","default","default","default","default","default","default","default","default","default","delay_den","delay_num","difference","dispose_op","drop","drop","empty","encode","encode","encode","encode","encode","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","exact","extend","finish","finish","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","frame_control","frame_control","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","from_scaled","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","gama_chunk","green","hash","height","height","height","icc_profile","ignore_adler32","ignore_checksums","in_range","inc_seq_num","info","info","insert","interlaced","intersection","intersects","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_scaled","into_stream_writer","into_stream_writer_with_size","into_value","is_all","is_animated","is_empty","line_size","new","new","new","new","new","new_with_limits","new_with_options","new_with_options","next_frame","next_interlaced_row","next_row","normalize_to_color8","not","num_frames","num_plays","output_buffer_size","output_color_type","output_line_size","palette","partial_cmp","pixel_dims","provide","provide","raw_bytes","raw_row_length","raw_row_length_from_width","read_header_info","read_info","red","remove","reset","reset_frame_dimension","reset_frame_dimension","reset_frame_position","reset_frame_position","samples","sequence_number","set","set_adaptive_filter","set_adaptive_filter","set_adaptive_filter","set_animated","set_blend_op","set_blend_op","set_blend_op","set_color","set_compression","set_depth","set_dispose_op","set_dispose_op","set_dispose_op","set_filter","set_filter","set_filter","set_frame_delay","set_frame_delay","set_frame_delay","set_frame_dimension","set_frame_dimension","set_frame_position","set_frame_position","set_ignore_adler32","set_ignore_adler32","set_ignore_checksums","set_ignore_crc","set_ignore_crc","set_ignore_text_chunk","set_ignore_text_chunk","set_ignore_text_chunk","set_limits","set_palette","set_sep_def_img","set_seq_num","set_source_chromaticities","set_source_gamma","set_srgb","set_transformations","set_trns","size","source_chromaticities","source_gamma","srgb","stream_writer","stream_writer_with_size","sub","sub_assign","symmetric_difference","text_metadata","to_be_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","toggle","trns","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uncompressed_latin1_text","union","unit","update","utf8_text","validate_sequence","white","width","width","width","with_size","write","write_chunk","write_header","write_image_data","write_text_chunk","x_offset","xppu","y_offset","yppu","ChunkType","IDAT","IEND","IHDR","PLTE","acTL","bKGD","borrow","borrow_mut","cHRM","clone","clone_into","eq","fcTL","fdAT","fmt","from","gAMA","hash","iCCP","iTXt","into","is_critical","is_private","pHYs","reserved_set","sRGB","safe_to_copy","tEXt","tIME","tRNS","to_owned","try_from","try_into","type_id","zTXt","DECOMPRESSION_LIMIT","EncodableTextChunk","ITXtChunk","TEXtChunk","ZTXtChunk","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","compress_text","compress_text","compressed","decompress_text","decompress_text","decompress_text_with_limit","decompress_text_with_limit","encode","encode","encode","encode","eq","eq","eq","fmt","fmt","fmt","from","from","from","get_text","get_text","into","into","into","keyword","keyword","keyword","language_tag","new","new","new","text","to_owned","to_owned","to_owned","translated_keyword","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["pngpng::chunk","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","png::text_metadata","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["For images requiring preservation of absolute colorimetry, …","","The filtering method for preprocessing scanline data …","Animation control information","","","Clear buffer with the background color.","Higher compression level","Bit depth of the PNG file. Specifies the number of bits …","How pixels are written into the buffer.","","","Describes how a pixel is encoded.","The type and strength of applied compression.","Decoder configuration options","Result of the decoding process","PNG Decoder","Any kind of error during PNG decoding.","Default level","How to reset buffer of an animated png (APNG) at the end …","Expand paletted images to RGB; expand grayscale images of …","","PNG Encoder.","","Fast minimal compression","The byte level filter applied to scanlines to prepare them …","The input image was not a valid PNG.","","","Frame control information","","1 grayscale sample.","1 grayscale sample, then 1 alpha sample.","","","No transformation","Decoded raw image data.","The last of a consecutive chunk of IDAT was done. This is …","","1 sample for the palette index.","PNG info struct","An error in IO of the underlying reader.","","Limits on the resources the <code>Decoder</code> is allowed too use","The image would have required exceeding the limits …","","","","","Leave the buffer unchanged.","Nothing decoded yet","","Output info.","The new pixels are blended into the current state based on …","","An interface was used incorrectly.","","","","For images preferring good adaptation to the output device …","Pixel dimensions information","","Reset the buffer to the state before the current frame.","PNG reader (mostly high-level interface)","For images requiring colour appearance matching (relative …","1 red sample, 1 green sample, 1 blue sample.","1 red sample, 1 green sample, 1 blue sample, and finally, …","","Strip 16-bit samples to 8 bits","For images preferring preservation of saturation at the …","An unsigned integer scaled version of a floating point …","","Pixels overwrite the value at their position.","Chromaticities of the color space primaries","The rendering intent for an sRGB image.","Streaming PNG writer","PNG StreamingDecoder (low-level interface)","","Output transformations","","Physical unit of the pixel dimensions","","","PNG writer","Convenience function to add iTXt chunks to <code>Info</code> struct","Convenience function to add tEXt chunks to <code>Info</code> struct","Convenience function to add zTXt chunks to <code>Info</code> struct","Returns the set containing all flags.","Returns the frame control information of the image.","","","The chosen output bit depth.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the number of bits per pixel.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Type of frame area rendering for this frame","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the size needed to hold a decoded frame If the …","maximum number of bytes the decoder is allowed to …","Returns the number of bytes per pixel.","","","The contents of the image’s <code>cHRM</code> chunk, if present. …","Chunk types and functions","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","How colors are stored in the image.","The chosen output color type.","Returns the complement of this set of flags.","zTXt field","","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","","","","","","","","Frame delay fraction denominator","Frame delay fraction numerator","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Type of frame area disposal to be done after rendering …","","","Returns an empty set of flags.","","","","","Encode this header to the writer.","","","","","","","","","","","","","Gets whether the value can be exactly converted in …","","Consume the stream writer with validation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the frame control information of the current frame","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","Fully accurate construction from a value scaled as per …","u8 -&gt; Self. Temporary solution until Rust provides a …","u8 -&gt; Self. Temporary solution until Rust provides a …","u8 -&gt; Self. Temporary solution until Rust provides a …","u8 -&gt; Self. Using enum_primitive or transmute is probably …","u8 -&gt; Self. Using enum_primitive or transmute is probably …","u8 -&gt; Self. Temporary solution until Rust provides a …","The contents of the image’s gAMA chunk, if present. …","","","Height of the following frame","","The pixel height of this frame.","The ICC profile for the image.","Return whether the decoder is set to ignore the Adler-32 …","Set the decoder to ignore and not verify the Adler-32 …","Gets whether the value is within the clamped range of this …","","Provides access to the inner <code>info</code> field","Get information on the image.","Inserts the specified flags in-place.","","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Get the accurate encoded value.","Turn this into a stream writer for image data.","Turn this into a stream writer with custom buffer size.","Get the unscaled value as a floating point.","Returns <code>true</code> if all flags are currently set.","Returns true if the image is an APNG image.","Returns <code>true</code> if no flags are currently stored.","The byte count of each scan line in the image.","Creates a new StreamingDecoder","Create a new decoder configuration with default limits.","","Slightly inaccurate scaling and quantization. Clamps the …","","Create a new decoder configuration with custom limits.","","Create a new decoder configuration with custom …","Decodes the next frame into <code>buf</code>.","Returns the next processed row of the image","Returns the next processed row of the image","Transform every input to 8bit grayscale or color.","Returns the complement of this set of flags.","Number of frames","Number of times to loop this APNG.  0 indicates infinite …","Returns the number of bytes required to hold a …","Returns the color type and the number of bits per sample …","Returns the number of bytes required to hold a …","The image’s <code>PLTE</code> chunk, if present; contains the RGB …","","","","","Returns the number of bytes needed for one deinterlaced …","Returns the number of bytes needed for one deinterlaced …","Returns the number of bytes needed for one deinterlaced …","Read the PNG header and return the information contained …","Reads all meta data until the first IDAT chunk","","Removes the specified flags in-place.","Resets the StreamingDecoder","Set the frame dimension to occupy all the image, starting …","Set the frame dimension to occupy all the image, starting …","Set the frame position to (0, 0).","Set the frame position to (0, 0).","Returns the number of samples used per pixel encoded in …","Sequence number of the animation chunk, starting from 0","Inserts or removes the specified flags depending on the …","Set the adaptive filter type.","Set the adaptive filter type for the following frames.","Set the adaptive filter type for the next frame.","Specify that the image is animated.","Set the blend operation for every frame.","Set the blend operation for the following frames.","Set the blend operation for the following frames.","Set the color of the encoded image.","Set compression parameters.","Set the indicated depth of the image data.","Set the dispose operation for every frame.","Set the dispose operation for the following frames.","Set the dispose operation for the following frames.","Set the used filter type.","Set the used filter type for the following frames.","Set the used filter type for the next frame.","Set the fraction of time every frame is going to be …","Set the fraction of time the following frames are going to …","Set the fraction of time the following frames are going to …","Set the dimension of the following frames.","Set the dimension of the following frames.","Set the position of the following frames.","Set the position of the following frames.","Set whether to compute and verify the Adler-32 checksum …","When set, the decoder will not compute and verify the …","Flag to ignore computing and verifying the Adler-32 …","Set whether to compute and verify the Adler-32 checksum …","When set, the decoder will not compute and verify the CRC …","","Set the decoder to ignore all text chunks while parsing.","Ignore text chunks while decoding.","Limit resource usage.","Sets the raw byte contents of the PLTE chunk. This method …","Mark the first animated frame as a ‘separate default …","","Set the chromaticities for the source system’s display …","Set the display gamma of the source system on which the …","Mark the image data as conforming to the SRGB color space …","Set the allowed and performed transformations.","Sets the raw byte contents of the tRNS chunk. This method …","Size of the image, width then height.","Chromaticities of the source system. Set by both <code>cHRM</code> as …","Gamma of the source system. Set by both <code>gAMA</code> as well as to …","The rendering intent of an SRGB image.","Create a stream writer.","Create a stream writer with custom buffer size.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Text chunks (tEXt/zTXt/iTXt) structs and functions","","","","","","","","","","","","","","","","","","","","","","","","","Toggles the specified flags in-place.","The image’s <code>tRNS</code> chunk, if present; contains the alpha …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tEXt field","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Either <em>Meter</em> or <em>Unspecified</em>","Low level StreamingDecoder interface.","iTXt field","Validate the written image sequence.","","Width of the following frame","","The pixel width of this frame.","A utility constructor for a default info with width and …","","Write a raw chunk of PNG data.","Start encoding by writing the header data.","Writes the next image data.","","X position at which to render the following frame","Pixels per unit, X axis","Y position at which to render the following frame","Pixels per unit, Y axis","","Image data","Image trailer","Image header","Palette","Animation control","Background colour","","","Source system’s pixel chromaticities","","","","Frame control","Frame data","","Returns the argument unchanged.","Source system’s gamma value","","ICC profile chunk","UTF-8 textual data","Calls <code>U::from(self)</code>.","Returns true if the chunk is critical.","Returns true if the chunk is private.","Physical pixel dimensions","Checks whether the reserved bit of the chunk name is set. …","sRGB color space chunk","Returns true if the chunk is safe to copy if unknown.","Latin-1 uncompressed textual data","Image last-modification time","Transparency","","","","","Latin-1 compressed textual data","Default decompression limit for compressed text chunks.","A generalized text chunk trait","Struct encoding an iTXt chunk","Struct representing a tEXt chunk","Struct representing a zTXt chunk","","","","","","","","","","","","","Compresses the inner text, mutating its own state.","Compresses the inner text, mutating its own state.","Indicates whether the text will be (or was) compressed in …","Decompresses the inner text, mutating its own state. Can …","Decompresses the inner text, mutating its own state. Can …","Decompresses the inner text, mutating its own state. Can …","Decompresses the inner text, mutating its own state. Can …","Encode text chunk as Vec to a <code>Write</code>","Encodes TEXtChunk to a Writer. The keyword and text are …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Decompresses the inner text, and returns it as a <code>String</code>. …","Decompresses the inner text, and returns it as a <code>String</code>. …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Keyword field of the tEXt chunk. Needs to be between 1-79 …","Keyword field of the tEXt chunk. Needs to be between 1-79 …","The keyword field. This needs to be between 1-79 bytes …","A hyphen separated list of languages that the keyword is …","Constructs a new TEXtChunk. Not sure whether it should …","Creates a new ZTXt chunk.","Constructs a new iTXt chunk. Leaves all but keyword and …","Text field of tEXt chunk. Can be at most 2GB.","","","","Translated keyword. This is UTF-8 encoded.","","","","","","","","",""],"i":[25,29,0,0,41,28,19,22,0,0,41,41,0,0,0,0,0,0,22,0,6,16,0,0,22,0,13,4,16,0,41,15,15,41,22,6,41,41,41,15,0,13,4,0,13,4,18,28,29,19,41,16,0,20,28,13,4,0,41,25,0,41,19,0,25,15,15,22,6,25,0,16,20,0,0,0,0,28,0,16,0,18,28,0,2,2,2,6,7,7,7,12,6,6,6,6,6,7,6,6,21,24,32,46,47,2,33,34,15,16,17,18,19,20,21,8,22,23,24,25,7,6,40,41,13,26,12,27,4,28,29,32,46,47,2,33,34,15,16,17,18,19,20,21,8,22,23,24,25,7,6,40,41,13,26,12,27,4,28,29,12,27,7,13,4,7,0,15,16,17,18,19,20,21,8,22,23,24,25,7,6,26,27,28,29,15,16,17,18,19,20,21,8,22,23,24,25,7,6,26,27,28,29,6,7,12,6,7,7,6,32,21,22,7,6,26,27,28,29,21,21,6,21,33,34,6,21,8,24,25,7,15,16,18,19,20,23,24,25,6,12,28,29,23,6,33,34,34,15,16,17,18,19,19,20,20,21,8,22,23,24,25,7,6,6,6,6,6,40,40,41,13,13,12,27,4,4,28,29,7,7,32,46,47,2,33,34,15,16,17,18,19,20,21,8,22,23,24,25,7,6,40,41,13,13,26,12,27,4,4,28,29,6,6,6,6,23,15,16,18,19,20,28,7,24,6,21,7,12,7,32,46,23,21,32,47,6,7,6,6,32,46,47,2,33,34,15,16,17,18,19,20,21,8,22,23,24,25,7,6,40,41,13,26,12,27,4,28,29,23,33,33,23,6,7,6,12,32,46,2,23,24,46,32,46,47,47,47,6,6,8,8,47,47,47,7,6,7,13,4,7,7,7,46,46,24,6,32,33,34,33,34,15,21,6,2,33,34,2,2,33,34,2,2,2,2,33,34,2,33,34,2,33,34,33,34,33,34,32,26,26,32,26,32,46,26,46,2,2,21,2,2,2,46,2,7,7,7,7,33,33,6,6,6,0,24,15,16,17,18,19,20,21,8,22,23,24,25,7,6,26,27,28,29,19,20,40,13,4,6,7,32,46,47,2,33,34,15,16,17,18,19,20,21,8,22,23,24,25,7,6,40,41,13,26,12,27,4,28,29,32,46,47,2,33,34,15,16,17,18,19,20,21,8,22,23,24,25,7,6,40,41,13,26,12,27,4,28,29,32,46,47,2,33,34,15,16,17,18,19,20,21,8,22,23,24,25,7,6,40,41,13,26,12,27,4,28,29,7,6,17,32,7,2,24,21,7,12,7,34,33,2,33,33,21,17,21,17,0,0,0,0,0,0,0,54,54,0,54,54,54,0,0,54,54,0,54,0,0,54,0,0,0,0,0,0,0,0,0,54,54,54,54,0,0,0,0,0,0,55,56,57,55,56,57,55,56,57,55,56,57,56,57,57,56,57,56,57,58,55,56,57,55,56,57,55,56,57,55,56,57,56,57,55,56,57,55,56,57,57,55,56,57,55,55,56,57,57,55,56,57,55,56,57,55,56,57],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[1]],3,3],[[5,[4]]]],[[[2,[1]],3,3],[[5,[4]]]],[[[2,[1]],3,3],[[5,[4]]]],[[],6],[7,[[9,[8]]]],0,0,0,[[6,6],6],[[6,6]],[[6,6],6],[[6,6]],[6,10],[7,11],[[6,6],6],[[6,6]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[12,11],0,[7,11],[13,[[9,[14]]]],[4,[[9,[14]]]],0,0,[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[21,21],[8,8],[22,22],[23,23],[24,24],[25,25],[7,7],[6,6],[26,26],[27,27],[28,28],[29,29],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[6,6],30],0,0,[6,6],0,0,[[6,6],31],[[],32],[[],21],[[],22],[[],7],[[],6],[[],26],[[],27],[[],28],[[],29],0,0,[[6,6],6],0,[[[33,[1]]]],[[[34,[1]]]],[[],6],[21,[[5,[4]]]],[8,[[5,[4]]]],[24,[[5,[4]]]],[25,[[5,[4]]]],[[7,1],[[5,[4]]]],[[15,15],31],[[16,16],31],[[18,18],31],[[19,19],31],[[20,20],31],[[23,23],31],[[24,24],31],[[25,25],31],[[6,6],31],[[12,12],31],[[28,28],31],[[29,29],31],[35,31],[[6,36]],[[[33,[1]]],[[5,[4]]]],[[[34,[1]]],[[5,[4]]]],[[[34,[1]]],37],[[15,38],39],[[16,38],39],[[17,38],39],[[18,38],39],[[19,38],39],[[19,38],39],[[20,38],39],[[20,38],39],[[21,38],39],[[8,38],39],[[22,38],39],[[23,38],39],[[24,38],39],[[25,38],39],[[7,38],39],[[6,38],39],[[6,38],39],[[6,38],39],[[6,38],39],[[6,38],39],[[40,38],39],[[40,38],39],[[41,38],39],[[13,38],39],[[13,38],[[5,[42]]]],[[12,38],39],[[27,38],39],[[4,38],39],[[4,38],[[5,[42]]]],[[28,38],39],[[29,38],39],[7,[[9,[21]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[43,13],[[]],[[]],[[]],[43,4],[[]],[[]],[[]],[10,[[9,[6]]]],[10,6],[10,6],[36,6],[10,23],[44,[[9,[15]]]],[44,[[9,[16]]]],[44,[[9,[18]]]],[44,[[9,[19]]]],[44,[[9,[20]]]],[44,[[9,[28]]]],0,0,[6],0,0,0,0,[32,31],[[[46,[45]],31]],[35,31],[[21,10]],[32,[[9,[7]]]],[[[47,[45]]],7],[[6,6]],0,[[6,6],6],[[6,6],31],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[23,10],[[[33,[1]]],[[5,[[34,[1]],4]]]],[[[33,[1]],11],[[5,[[34,[1]],4]]]],[23,35],[6,31],[7,31],[6,31],0,[[],32],[45,[[46,[45]]]],[[1,10,10],[[2,[1]]]],[35,23],[[],24],[[45,27],[[46,[45]]]],[26,32],[[45,26],[[46,[45]]]],[[[47,[45]]],[[5,[12,13]]]],[[[47,[45]]],[[5,[[9,[0]],13]]]],[[[47,[45]]],[[5,[[9,[0]],13]]]],[[],6],[6,6],0,0,[[[47,[45]]],11],[[[47,[45]]]],[[[47,[45]],10],11],0,[[6,6],[[9,[30]]]],0,[48],[48],[7,11],[7,11],[[7,10],11],[[[46,[45]]],[[5,[7,13]]]],[[[46,[45]]],[[5,[[47,[45]],13]]]],0,[[6,6]],[32],[[[33,[1]]],[[5,[4]]]],[[[34,[1]]],[[5,[4]]]],[[[33,[1]]],[[5,[4]]]],[[[34,[1]]],[[5,[4]]]],[15,11],0,[[6,6,31]],[[[2,[1]],29]],[[[33,[1]],29]],[[[34,[1]],29]],[[[2,[1]],10,10],[[5,[4]]]],[[[2,[1]],20],[[5,[4]]]],[[[33,[1]],20],[[5,[4]]]],[[[34,[1]],20],[[5,[4]]]],[[[2,[1]],15]],[[[2,[1]],22]],[[[2,[1]],16]],[[[2,[1]],19],[[5,[4]]]],[[[33,[1]],19],[[5,[4]]]],[[[34,[1]],19],[[5,[4]]]],[[[2,[1]],28]],[[[33,[1]],28]],[[[34,[1]],28]],[[[2,[1]],49,49],[[5,[4]]]],[[[33,[1]],49,49],[[5,[4]]]],[[[34,[1]],49,49],[[5,[4]]]],[[[33,[1]],10,10],[[5,[4]]]],[[[34,[1]],10,10],[[5,[4]]]],[[[33,[1]],10,10],[[5,[4]]]],[[[34,[1]],10,10],[[5,[4]]]],[[32,31],31],[[26,31]],[[26,31]],[[32,31]],[[26,31]],[[32,31]],[[[46,[45]],31]],[[26,31]],[[[46,[45]],27]],[[[2,[1]],[51,[50]]]],[[[2,[1]],31],[[5,[4]]]],[[21,10]],[[[2,[1]],24]],[[[2,[1]],23]],[[[2,[1]],25]],[[[46,[45]],6]],[[[2,[1]],[51,[50]]]],[7],0,0,0,[[[33,[1]]],[[5,[[34,[1]],4]]]],[[[33,[1]],11],[[5,[[34,[1]],4]]]],[[6,6],6],[[6,6]],[[6,6],6],0,[24],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],3],[[6,6]],0,[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],0,[[6,6],6],0,[[32,53],[[5,[13]]]],0,[[[2,[1]],31]],0,0,0,0,[[10,10],7],[[[34,[1]]],[[37,[11]]]],[[[33,[1]],54],[[5,[4]]]],[[[2,[1]]],[[5,[[33,[1]],4]]]],[[[33,[1]]],[[5,[4]]]],[[[33,[1]]],[[5,[4]]]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],0,[54,54],[[]],[[54,54],31],0,0,[[54,38],39],[[]],0,[54],0,0,[[]],[54,31],[54,31],0,[54,31],0,[54,31],0,0,0,[[]],[[],5],[[],5],[[],52],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[55,55],[56,56],[57,57],[[]],[[]],[[]],[56,[[5,[4]]]],[57,[[5,[4]]]],0,[56,[[5,[13]]]],[57,[[5,[13]]]],[[56,11],[[5,[13]]]],[[57,11],[[5,[13]]]],[[],[[5,[4]]]],[55,[[5,[4]]]],[56,[[5,[4]]]],[57,[[5,[4]]]],[[55,55],31],[[56,56],31],[[57,57],31],[[55,38],39],[[56,38],39],[[57,38],39],[[]],[[]],[[]],[56,[[5,[3,13]]]],[57,[[5,[3,13]]]],[[]],[[]],[[]],0,0,0,0,[[[51,[3]],[51,[3]]],55],[[[51,[3]],[51,[3]]],56],[[[51,[3]],[51,[3]]],57],0,[[]],[[]],[[]],0,[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],52],[[],52],[[],52]],"p":[[8,"Write"],[3,"Encoder"],[3,"String"],[4,"EncodingError"],[4,"Result"],[3,"Transformations"],[3,"Info"],[3,"AnimationControl"],[4,"Option"],[15,"u32"],[15,"usize"],[3,"OutputInfo"],[4,"DecodingError"],[8,"Error"],[4,"ColorType"],[4,"BitDepth"],[3,"PixelDimensions"],[4,"Unit"],[4,"DisposeOp"],[4,"BlendOp"],[3,"FrameControl"],[4,"Compression"],[3,"ScaledFloat"],[3,"SourceChromaticities"],[4,"SrgbRenderingIntent"],[3,"DecodeOptions"],[3,"Limits"],[4,"FilterType"],[4,"AdaptiveFilterType"],[4,"Ordering"],[15,"bool"],[3,"StreamingDecoder"],[3,"Writer"],[3,"StreamWriter"],[15,"f32"],[8,"IntoIterator"],[6,"Result"],[3,"Formatter"],[6,"Result"],[3,"ParameterError"],[4,"Decoded"],[3,"Error"],[3,"Error"],[15,"u8"],[8,"Read"],[3,"Decoder"],[3,"Reader"],[3,"Demand"],[15,"u16"],[4,"Cow"],[8,"Into"],[3,"TypeId"],[3,"Vec"],[3,"ChunkType"],[3,"TEXtChunk"],[3,"ZTXtChunk"],[3,"ITXtChunk"],[8,"EncodableTextChunk"]]},\
"proc_macro2":{"doc":"github crates-io docs-rs","t":"NNNEDNDNNDDNNNDNEDDELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLDCLLLLLLLLLLLLLL","n":["Alone","Brace","Bracket","Delimiter","Group","Group","Ident","Ident","Joint","LexError","Literal","Literal","None","Parenthesis","Punct","Punct","Spacing","Span","TokenStream","TokenTree","as_char","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_string","call_site","character","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","default","delim_span","delimiter","eq","eq","eq","eq","extend","extend","extra","f32_suffixed","f32_unsuffixed","f64_suffixed","f64_unsuffixed","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_str","from_str","hash","i128_suffixed","i128_unsuffixed","i16_suffixed","i16_unsuffixed","i32_suffixed","i32_unsuffixed","i64_suffixed","i64_unsuffixed","i8_suffixed","i8_unsuffixed","into","into","into","into","into","into","into","into","into","into","into_iter","is_empty","isize_suffixed","isize_unsuffixed","join","located_at","mixed_site","new","new","new","new","new_raw","partial_cmp","provide","resolved_at","set_span","set_span","set_span","set_span","set_span","source_text","spacing","span","span","span","span","span","span","span_close","span_open","stream","string","subspan","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","token_stream","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u128_suffixed","u128_unsuffixed","u16_suffixed","u16_unsuffixed","u32_suffixed","u32_unsuffixed","u64_suffixed","u64_unsuffixed","u8_suffixed","u8_unsuffixed","unwrap","usize_suffixed","usize_unsuffixed","DelimSpan","borrow","borrow_mut","clone","clone_into","close","fmt","from","into","join","open","to_owned","try_from","try_into","type_id","IntoIter","TokenStream","borrow","borrow_mut","clone","clone_into","fmt","from","into","into_iter","next","size_hint","to_owned","try_from","try_into","type_id"],"q":["proc_macroproc_macro2::extra","","","","","","","","","","","","","","","proc_macro2::token_stream","","","","","","","","","","","","","","",""],"d":["E.g. <code>+</code> is <code>Alone</code> in <code>+ =</code>, <code>+ident</code> or <code>+()</code>.","<code>{ ... }</code>","<code>[ ... ]</code>","Describes how a sequence of token trees is delimited.","A delimited token stream.","A token stream surrounded by bracket delimiters.","A word of Rust code, which may be a keyword or legal …","An identifier.","E.g. <code>+</code> is <code>Joint</code> in <code>+=</code> or <code>&#39;</code> is <code>Joint</code> in <code>&#39;#</code>.","Error returned from <code>TokenStream::from_str</code>.","A literal string (<code>&quot;hello&quot;</code>), byte string (<code>b&quot;hello&quot;</code>), …","A literal character (<code>&#39;a&#39;</code>), string (<code>&quot;hello&quot;</code>), number (<code>2.3</code>), …","<code>Ø ... Ø</code>","<code>( ... )</code>","A <code>Punct</code> is a single punctuation character like <code>+</code>, <code>-</code> or <code>#</code>.","A single punctuation character (<code>+</code>, <code>,</code>, <code>$</code>, etc.).","Whether a <code>Punct</code> is followed immediately by another <code>Punct</code> …","A region of source code, along with macro expansion …","An abstract stream of tokens, or more concretely a …","A single token or a delimited sequence of token trees …","Returns the value of this punctuation character as <code>char</code>.","","","","","","","","","","","","","","","","","","","","","Byte string literal.","The span of the invocation of the current procedural macro.","Character literal.","","","","","","","","","","","","","","","","","","","","","Returns an object that holds this group’s <code>span_open()</code> and","Returns the punctuation used as the delimiter for this …","","","","","","","Items which do not have a correspondence to any API in the …","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Checks if this <code>TokenStream</code> is empty.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Create a new span encompassing <code>self</code> and <code>other</code>.","Creates a new span with the same name resolution behavior …","The span located at the invocation of the procedural …","Returns an empty <code>TokenStream</code> containing no token trees.","Creates a new <code>Group</code> with the given delimiter and token …","Creates a new <code>Punct</code> from the given character and spacing.","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","Same as <code>Ident::new</code>, but creates a raw identifier (<code>r#ident</code>…","","","Creates a new span with the same line/column information …","Configures the span for <em>only this token</em>.","Configures the span for this <code>Group</code>’s delimiters, but not …","Configure the span for this punctuation character.","Configures the span of this <code>Ident</code>, possibly changing its …","Configures the span associated for this literal.","Returns the source text behind a span. This preserves the …","Returns the spacing of this punctuation character, …","","Returns the span of this tree, delegating to the <code>span</code> …","Returns the span for the delimiters of this token stream, …","Returns the span for this punctuation character.","Returns the span of this <code>Ident</code>.","Returns the span encompassing this literal.","Returns the span pointing to the closing delimiter of this …","Returns the span pointing to the opening delimiter of this …","Returns the <code>TokenStream</code> of tokens that are delimited in …","String literal.","Returns a <code>Span</code> that is a subset of <code>self.span()</code> containing …","","","","","","","","","","","","","","","","","Public implementation details for the <code>TokenStream</code> type, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Convert <code>proc_macro2::Span</code> to <code>proc_macro::Span</code>.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","An object that holds a <code>Group</code>’s <code>span_open()</code> and …","","","","","Returns a span for the closing punctuation of the group …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns a span covering the entire delimited group.","Returns a span for the opening punctuation of the group …","","","","","An iterator over <code>TokenStream</code>’s <code>TokenTree</code>s.","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[9,8,8,0,0,6,0,6,9,0,0,6,8,8,0,6,0,0,0,0,1,17,5,4,6,7,8,1,9,10,3,17,5,4,6,7,8,1,9,10,3,3,4,3,5,4,6,7,8,1,9,10,3,5,4,6,7,8,1,9,10,3,10,5,7,7,8,9,10,10,5,5,0,3,3,3,3,17,17,5,5,4,6,6,7,7,8,1,1,9,10,10,3,3,17,5,5,5,4,4,6,6,6,6,6,7,8,1,9,10,3,5,5,5,3,10,3,3,3,3,3,3,3,3,3,3,17,5,4,6,7,8,1,9,10,3,5,5,3,3,4,4,4,5,7,1,10,10,10,17,4,6,7,1,10,3,4,1,17,6,7,1,10,3,7,7,7,3,3,5,4,6,7,8,1,9,10,3,17,5,6,7,1,10,3,0,17,5,4,6,7,8,1,9,10,3,17,5,4,6,7,8,1,9,10,3,17,5,4,6,7,8,1,9,10,3,3,3,3,3,3,3,3,3,3,3,4,3,3,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,0,29,29,29,29,29,29,29,29,29,29,29,29,29,29],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],4],[2,3],[5,5],[4,4],[6,6],[7,7],[8,8],[1,1],[9,9],[10,10],[3,3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[10,10],11],[[],5],[7,12],[7,8],[[8,8],13],[[9,9],13],[10,13],[[10,10],13],[[5,14]],[[5,14]],0,[15,3],[15,3],[16,3],[16,3],[[17,18],19],[[17,18],19],[[5,18],19],[[5,18],19],[[4,18],19],[[6,18],19],[[6,18],19],[[7,18],19],[[7,18],19],[[8,18],19],[[1,18],19],[[1,18],19],[[9,18],19],[[10,18],19],[[10,18],19],[[3,18],19],[[3,18],19],[[]],[[]],[20,5],[6,5],[[]],[21,4],[10,6],[3,6],[7,6],[[]],[1,6],[[]],[[]],[[]],[[]],[[]],[[]],[14,5],[14,5],[22,[[23,[5,17]]]],[22,[[23,[3,17]]]],[10],[24,3],[24,3],[25,3],[25,3],[26,3],[26,3],[27,3],[27,3],[28,3],[28,3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[5,29],[5,13],[30,3],[30,3],[[4,4],[[31,[4]]]],[[4,4],4],[[],4],[[],5],[[8,5],7],[[2,9],1],[[22,4],10],[[22,4],10],[[10,10],[[31,[11]]]],[32],[[4,4],4],[[6,4]],[[7,4]],[[1,4]],[[10,4]],[[3,4]],[4,[[31,[33]]]],[1,9],[17,4],[6,4],[7,4],[1,4],[10,4],[3,4],[7,4],[7,4],[7,5],[22,3],[[3,[35,[34]]],[[31,[4]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],0,[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[37,3],[37,3],[38,3],[38,3],[39,3],[39,3],[40,3],[40,3],[41,3],[41,3],[4,21],[34,3],[34,3],0,[[]],[[]],[12,12],[[]],[12,4],[[12,18],19],[[]],[[]],[12,4],[12,4],[[]],[[],23],[[],23],[[],36],0,0,[[]],[[]],[29,29],[[]],[[29,18],19],[[]],[[]],[[]],[29,[[31,[6]]]],[29],[[]],[[],23],[[],23],[[],36]],"p":[[3,"Punct"],[15,"char"],[3,"Literal"],[3,"Span"],[3,"TokenStream"],[4,"TokenTree"],[3,"Group"],[4,"Delimiter"],[4,"Spacing"],[3,"Ident"],[4,"Ordering"],[3,"DelimSpan"],[15,"bool"],[8,"IntoIterator"],[15,"f32"],[15,"f64"],[3,"LexError"],[3,"Formatter"],[6,"Result"],[3,"TokenStream"],[3,"Span"],[15,"str"],[4,"Result"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[3,"IntoIter"],[15,"isize"],[4,"Option"],[3,"Demand"],[3,"String"],[15,"usize"],[8,"RangeBounds"],[3,"TypeId"],[15,"u128"],[15,"u16"],[15,"u32"],[15,"u64"],[15,"u8"]]},\
"quad_rand":{"doc":"","t":"IIDLLKKKLFKLLLFKFLLL","n":["ChooseRandom","RandomRange","VecChooseIter","borrow","borrow_mut","choose","choose_multiple","choose_mut","from","gen_range","gen_range","into","into_iter","next","rand","shuffle","srand","try_from","try_into","type_id"],"q":["quad_rand","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","returns a pseudo-random number in the range of 0 to …","","Seeds the pseudo-random number generator used by rand() …","","",""],"i":[0,0,0,3,3,8,8,8,3,0,9,3,3,3,0,8,0,3,3,3],"f":[0,0,0,[[]],[[]],[[],1],[2,3],[[],1],[[]],[[]],[[]],[[]],[[]],[3,1],[[],4],[[]],[5],[[],6],[[],6],[[],7]],"p":[[4,"Option"],[15,"usize"],[3,"VecChooseIter"],[15,"u32"],[15,"u64"],[4,"Result"],[3,"TypeId"],[8,"ChooseRandom"],[8,"RandomRange"]]},\
"quote":{"doc":"github crates-io docs-rs","t":"IIIKKKKKOLLOOLLLLK","n":["IdentFragment","ToTokens","TokenStreamExt","append","append_all","append_separated","append_terminated","fmt","format_ident","into_token_stream","into_token_stream","quote","quote_spanned","span","span","to_token_stream","to_token_stream","to_tokens"],"q":["quote","","","","","","","","","","","","","","","","",""],"d":["Specialized formatting trait used by <code>format_ident!</code>.","Types that can be interpolated inside a <code>quote!</code> invocation.","TokenStream extension trait with methods for appending …","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","Format this value as an identifier fragment.","Formatting macro for constructing <code>Ident</code>s.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","The whole point.","Same as <code>quote!</code>, but applies a given span to all tokens …","Span associated with this <code>IdentFragment</code>.","Span associated with this <code>IdentFragment</code>.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Write <code>self</code> to the given <code>TokenStream</code>."],"i":[0,0,0,6,6,6,6,7,0,8,8,0,0,7,7,8,8,8],"f":[0,0,0,[[]],[[]],[[]],[[]],[1,2],0,[[],3],[[],3],0,0,[[],[[5,[4]]]],[[],[[5,[4]]]],[[],3],[[],3],[3]],"p":[[3,"Formatter"],[6,"Result"],[3,"TokenStream"],[3,"Span"],[4,"Option"],[8,"TokenStreamExt"],[8,"IdentFragment"],[8,"ToTokens"]]},\
"same_file":{"doc":"This crate provides a safe and simple <strong>cross platform</strong> way …","t":"DLLLLLLLLLLLLLLLFLLLLLL","n":["Handle","as_file","as_file_mut","as_raw_fd","borrow","borrow_mut","dev","eq","fmt","from","from_file","from_path","hash","ino","into","into_raw_fd","is_same_file","stderr","stdin","stdout","try_from","try_into","type_id"],"q":["same_file","","","","","","","","","","","","","","","","","","","","","",""],"d":["A handle to a file that can be tested for equality with …","Return a reference to the underlying file.","Return a mutable reference to the underlying file.","","","","Return the underlying device number of this handle.","","","Returns the argument unchanged.","Construct a handle from a file.","Construct a handle from a path.","","Return the underlying inode number of this handle.","Calls <code>U::from(self)</code>.","","Returns true if the two file paths may correspond to the …","Construct a handle from stderr.","Construct a handle from stdin.","Construct a handle from stdout.","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1],"f":[0,[1,2],[1,2],[1,3],[[]],[[]],[1,4],[[1,1],5],[[1,6],7],[[]],[2,[[8,[1]]]],[[[10,[9]]],[[8,[1]]]],[1],[1,4],[[]],[1,3],[[],[[8,[5]]]],[[],[[8,[1]]]],[[],[[8,[1]]]],[[],[[8,[1]]]],[[],11],[[],11],[[],12]],"p":[[3,"Handle"],[3,"File"],[6,"RawFd"],[15,"u64"],[15,"bool"],[3,"Formatter"],[6,"Result"],[6,"Result"],[3,"Path"],[8,"AsRef"],[4,"Result"],[3,"TypeId"]]},\
"simd_adler32":{"doc":"simd-adler32","t":"DIFLLALLLLLLKLLALLLLLLFF","n":["Adler32","Adler32Hash","adler32","borrow","borrow_mut","bufread","clone","clone_into","default","finish","from","from_checksum","hash","into","new","read","reset","to_owned","try_from","try_into","type_id","write","adler32","adler32"],"q":["simd_adler32","","","","","","","","","","","","","","","","","","","","","","simd_adler32::bufread","simd_adler32::read"],"d":["A rolling hash generator type.","A Adler-32 hash-able type.","Compute Adler-32 hash on <code>Adler32Hash</code> type.","","","BufRead-based hashing.","","","","Returns the hash value for the values written so far.","Returns the argument unchanged.","Constructs a new <code>Adler32</code> using existing checksum.","Feeds this value into <code>Adler32</code>.","Calls <code>U::from(self)</code>.","Constructs a new <code>Adler32</code>.","Reader-based hashing.","Resets the internal state.","","","","","Computes hash for supplied data and stores results in …","Compute Adler-32 hash on buf reader until EOF.","Compute Adler-32 hash on reader until EOF."],"i":[0,0,0,2,2,0,2,2,2,2,2,2,6,2,2,0,2,2,2,2,2,2,0,0],"f":[0,0,[[],1],[[]],[[]],0,[2,2],[[]],[[],2],[2,1],[[]],[1,2],[[],1],[[]],[[],2],0,[2],[[]],[[],3],[[],3],[[],4],[2],[[],[[5,[1]]]],[[],[[5,[1]]]]],"p":[[15,"u32"],[3,"Adler32"],[4,"Result"],[3,"TypeId"],[6,"Result"],[8,"Adler32Hash"]]},\
"syn":{"doc":"github crates-io docs-rs","t":"DNNNNDNNNDNDNNEDNNDDENNNNNNNNNDNNNNNNNNNNNNDDNNNEDDDNNDNNNNDEDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDNEEDDNNNEEDNNNDNDNDNNNNNNNNDNNNNDNENDDDDDDDNNDNNENNEEDDNNNNNNNNNNNNNNNNNNNDDNNNEDDDNNDNNNNNNNNGNENNNNNNENNNNONDENNNNNDENNNNDDDDDDDDDEDDDDDDDENNNNNNDNNNNDEDENNMMMMMMMMLMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMOMMMMOALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMLLMMOOMLLLMMMMMMMMMMMMMMMMLLLLLMMMMMMMMMMAMMMMLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMLMMMMMMLLLLMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLMMMMLMMMMLMMMMMMMLMAMMMMMMMMMLLLLLLLLLLLLMMMMMMMMMMMMMMOAFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLOLLLLLOOFLLLLLLMMMMMMMMMMMAMMLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMALMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLMLLLLLMMMMMMMMMLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKSKDLLLLMLLFMLLLLDDDQIDGIIGDLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIIKKNDDDDEDDDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDIDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Abi","Add","AddAssign","And","AngleBracketed","AngleBracketedGenericArguments","Array","Array","Assign","AssocConst","AssocConst","AssocType","AssocType","Async","AttrStyle","Attribute","Await","BareFn","BareFnArg","BareVariadic","BinOp","Binary","BitAnd","BitAndAssign","BitOr","BitOrAssign","BitXor","BitXorAssign","Block","Bool","BoundLifetimes","Brace","Bracket","Break","Byte","ByteStr","Call","Cast","Char","Closure","Const","Const","Const","ConstParam","Constraint","Constraint","Continue","Cooked","Data","DataEnum","DataStruct","DataUnion","Default","Deref","DeriveInput","Div","DivAssign","Enum","Eq","Error","Expr","ExprArray","ExprAssign","ExprAsync","ExprAwait","ExprBinary","ExprBlock","ExprBreak","ExprCall","ExprCast","ExprClosure","ExprConst","ExprContinue","ExprField","ExprForLoop","ExprGroup","ExprIf","ExprIndex","ExprInfer","ExprLet","ExprLit","ExprLoop","ExprMacro","ExprMatch","ExprMethodCall","ExprParen","ExprPath","ExprRange","ExprReference","ExprRepeat","ExprReturn","ExprStruct","ExprTry","ExprTryBlock","ExprTuple","ExprUnary","ExprUnsafe","ExprWhile","ExprYield","Field","Field","FieldMutability","Fields","FieldsNamed","FieldsUnnamed","Float","ForLoop","Ge","GenericArgument","GenericParam","Generics","Group","Group","Gt","Ident","If","ImplGenerics","ImplTrait","Index","Index","Infer","Infer","Inherited","Inner","Int","Le","Let","Lifetime","Lifetime","Lifetime","Lifetime","Lifetime","LifetimeParam","List","Lit","Lit","LitBool","LitByte","LitByteStr","LitChar","LitFloat","LitInt","LitStr","Loop","Lt","Macro","Macro","Macro","MacroDelimiter","Match","Maybe","Member","Meta","MetaList","MetaNameValue","MethodCall","Mul","MulAssign","NameValue","Named","Named","Ne","Neg","Never","None","None","None","Not","Or","Outer","Paren","Paren","Paren","Parenthesized","ParenthesizedGenericArguments","Path","Path","Path","Path","PathArguments","PathSegment","PredicateLifetime","PredicateType","Ptr","Public","QSelf","Range","Raw","Reference","Reference","Rem","RemAssign","Repeat","Restricted","Result","Return","ReturnType","Shl","ShlAssign","Shr","ShrAssign","Slice","Str","StrStyle","Struct","Struct","Sub","SubAssign","Token","Trait","TraitBound","TraitBoundModifier","TraitObject","Try","TryBlock","Tuple","Tuple","Turbofish","Type","Type","Type","Type","Type","TypeArray","TypeBareFn","TypeGenerics","TypeGroup","TypeImplTrait","TypeInfer","TypeMacro","TypeNever","TypeParam","TypeParamBound","TypeParen","TypePath","TypePtr","TypeReference","TypeSlice","TypeTraitObject","TypeTuple","UnOp","Unary","Union","Unit","Unnamed","Unnamed","Unsafe","Variant","Verbatim","Verbatim","Verbatim","Verbatim","VisRestricted","Visibility","WhereClause","WherePredicate","While","Yield","abi","and_token","apostrophe","args","args","arguments","as_token","as_token","as_turbofish","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","bang_token","bang_token","base","base10_digits","base10_digits","base10_parse","base10_parse","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounded_ty","bounds","bounds","bounds","bounds","bounds","bounds","bounds","brace_token","brace_token","braced","bracket_token","bracket_token","bracket_token","bracket_token","bracketed","buffer","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","colon2_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","comma","const_params","const_params_mut","const_token","const_token","custom_keyword","custom_punctuation","data","default","default","default","default","default","delimiter","delimiter","discriminant","dot_token","dots","dyn_token","elem","elem","elem","elem","elem","elem","elems","enum_token","eq","eq","eq","eq","eq","eq_token","eq_token","eq_token","eq_token","eq_token","expr","expr","expr","expr","expr","ext","extern_token","fields","fields","fields","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fn_token","for_token","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","func","generics","generics","generics","generics","get_ident","group_token","group_token","gt_token","gt_token","gt_token","gt_token","hash","hash","hash","hash","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","impl_token","in_token","index","index","inputs","inputs","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","is_empty","is_empty","is_ident","is_none","iter","iter_mut","leading_colon","left","len","len","lifetime","lifetime","lifetime","lifetimes","lifetimes","lifetimes","lifetimes","lifetimes","lifetimes_mut","lit","lt_token","lt_token","lt_token","lt_token","mac","mac","make_where_clause","member","meta","meta","modifier","mutability","mutability","mutability","name","name","name","named","new","new","new","new","new","new","new","new","new","new","new","new_raw","op","op","output","output","params","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","parenthesized","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse2","parse_any","parse_args","parse_args","parse_args_with","parse_args_with","parse_body","parse_body_with","parse_inner","parse_macro_input","parse_mod_style","parse_named","parse_nested_meta","parse_nested_meta","parse_outer","parse_quote","parse_quote_spanned","parse_str","parse_unnamed","parse_with","partial_cmp","partial_cmp","path","path","path","path","path","path","path","path","path","position","pound_token","predicates","pub_token","punctuated","qself","qself","require_list","require_name_value","require_path_only","right","segments","semi_token","semi_token","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","spanned","split_for_impl","star_token","struct_token","style","suffix","suffix","suffix","suffix","suffix","suffix","suffix","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","token","token","token","token","token","token","token","token","tokens","tokens","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ty","ty","ty","ty","ty","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_params","type_params_mut","underscore_token","union_token","unnamed","unraw","unsafety","value","value","value","value","value","value","value","value","variadic","variants","vis","vis","where_clause","where_token","without_plus","without_plus","without_plus","without_plus","Cursor","TokenBuffer","begin","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","empty","eof","eq","from","from","group","ident","into","into","lifetime","literal","new","new2","partial_cmp","punct","span","to_owned","token_stream","token_tree","try_from","try_from","try_into","try_into","type_id","type_id","IdentExt","parse_any","peek_any","unraw","ParseNestedMeta","borrow","borrow_mut","error","from","input","into","parse_nested_meta","parser","path","try_from","try_into","type_id","value","Error","Lookahead1","Nothing","Output","Parse","ParseBuffer","ParseStream","Parser","Peek","Result","StepCursor","advance_to","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","clone","clone","clone_into","clone_into","combine","cursor","deref","discouraged","drop","error","error","error","extend","fmt","fmt","fmt","fmt","fork","from","from","from","from","from","from","into","into","into","into","into","into_compile_error","into_iter","into_iter","is_empty","lookahead1","new","new_spanned","parse","parse","parse","parse","parse2","parse_any_delimiter","parse_str","parse_terminated","peek","peek","peek2","peek3","provide","span","span","step","to_compile_error","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","AnyDelimiter","Speculative","advance_to","parse_any_delimiter","End","IntoIter","IntoPairs","Iter","IterMut","Pair","Pairs","PairsMut","Punctuated","Punctuated","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cloned","default","empty_or_trailing","extend","extend","first","first_mut","from","from","from","from","from","from","from","from","from_iter","from_iter","index","index_mut","insert","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_pairs","into_tuple","into_value","is_empty","iter","iter_mut","last","last_mut","len","len","len","len","len","len","len","new","new","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","pairs","pairs_mut","parse_separated_nonempty","parse_separated_nonempty_with","parse_terminated","parse_terminated_with","pop","pop_punct","punct","punct_mut","push","push_punct","push_value","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","span","span","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","trailing_punct","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value_mut","Spanned","span","Abstract","And","AndAnd","AndEq","As","Async","At","Auto","Await","Become","Box","Brace","Bracket","Break","Caret","CaretEq","Colon","Comma","Const","Continue","Crate","Default","Do","Dollar","Dot","DotDot","DotDotDot","DotDotEq","Dyn","Else","Enum","Eq","EqEq","Extern","FatArrow","Final","Fn","For","Ge","Group","Gt","If","Impl","In","LArrow","Le","Let","Loop","Lt","Macro","Match","Minus","MinusEq","Mod","Move","Mut","Ne","Not","Or","OrEq","OrOr","Override","Paren","PathSep","Percent","PercentEq","Plus","PlusEq","Pound","Priv","Pub","Question","RArrow","Ref","Return","SelfType","SelfValue","Semi","Shl","ShlEq","Shr","ShrEq","Slash","SlashEq","Star","StarEq","Static","Struct","Super","Tilde","Token","Trait","Try","Type","Typeof","Underscore","Union","Unsafe","Unsized","Use","Virtual","Where","While","Yield","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","surround","surround","surround","surround","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":["synsyn::buffer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::ext","","","","syn::meta","","","","","","","","","","","","","","syn::parse","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::parse::discouraged","","","","syn::punctuated","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::spanned","","syn::tokend":["The binary interface of a function: <code>extern &quot;C&quot;</code>.","The <code>+</code> operator (addition)","The <code>+=</code> operator","The <code>&amp;&amp;</code> operator (logical and)","The <code>&lt;&#39;a, T&gt;</code> in <code>std::slice::iter&lt;&#39;a, T&gt;</code>.","Angle bracketed arguments of a path segment: the <code>&lt;K, V&gt;</code> in …","A slice literal expression: <code>[a, b, c, d]</code>.","A fixed size array type: <code>[T; n]</code>.","An assignment expression: <code>a = compute()</code>.","An equality constraint on an associated constant: the …","An equality constraint on an associated constant: the …","A binding (equality constraint) on an associated type: the …","A binding (equality constraint) on an associated type: the …","An async block: <code>async { ... }</code>.","Distinguishes between attributes that decorate an item and …","An attribute, like <code>#[repr(transparent)]</code>.","An await expression: <code>fut.await</code>.","A bare function type: <code>fn(usize) -&gt; bool</code>.","An argument in a function type: the <code>usize</code> in …","The variadic argument of a function pointer like …","A binary operator: <code>+</code>, <code>+=</code>, <code>&amp;</code>.","A binary operation: <code>a + b</code>, <code>a += b</code>.","The <code>&amp;</code> operator (bitwise and)","The <code>&amp;=</code> operator","The <code>|</code> operator (bitwise or)","The <code>|=</code> operator","The <code>^</code> operator (bitwise xor)","The <code>^=</code> operator","A blocked scope: <code>{ ... }</code>.","A boolean literal: <code>true</code> or <code>false</code>.","A set of bound lifetimes: <code>for&lt;&#39;a, &#39;b, &#39;c&gt;</code>.","","","A <code>break</code>, with an optional label to break and an optional …","A byte literal: <code>b&#39;f&#39;</code>.","A byte string literal: <code>b&quot;foo&quot;</code>.","A function call expression: <code>invoke(a, b)</code>.","A cast expression: <code>foo as f64</code>.","A character literal: <code>&#39;a&#39;</code>.","A closure expression: <code>|a, b| a + b</code>.","A const block: <code>const { ... }</code>.","A const generic parameter: <code>const LENGTH: usize</code>.","A const expression. Must be inside of a block.","A const generic parameter: <code>const LENGTH: usize</code>.","An associated type bound: <code>Iterator&lt;Item: Display&gt;</code>.","An associated type bound: <code>Iterator&lt;Item: Display&gt;</code>.","A <code>continue</code>, with an optional label.","An ordinary string like <code>&quot;data&quot;</code>.","The storage of a struct, enum or union data structure.","An enum input to a <code>proc_macro_derive</code> macro.","A struct input to a <code>proc_macro_derive</code> macro.","An untagged union input to a <code>proc_macro_derive</code> macro.","Return type is not specified.","The <code>*</code> operator for dereferencing","Data structure sent to a <code>proc_macro_derive</code> macro.","The <code>/</code> operator (division)","The <code>/=</code> operator","","The <code>==</code> operator (equality)","Error returned when a Syn parser cannot parse the input …","A Rust expression.","A slice literal expression: <code>[a, b, c, d]</code>.","An assignment expression: <code>a = compute()</code>.","An async block: <code>async { ... }</code>.","An await expression: <code>fut.await</code>.","A binary operation: <code>a + b</code>, <code>a += b</code>.","A blocked scope: <code>{ ... }</code>.","A <code>break</code>, with an optional label to break and an optional …","A function call expression: <code>invoke(a, b)</code>.","A cast expression: <code>foo as f64</code>.","A closure expression: <code>|a, b| a + b</code>.","A const block: <code>const { ... }</code>.","A <code>continue</code>, with an optional label.","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …","A for loop: <code>for pat in expr { ... }</code>.","An expression contained within invisible delimiters.","An <code>if</code> expression with an optional <code>else</code> block: …","A square bracketed indexing expression: <code>vector[2]</code>.","The inferred value of a const generic argument, denoted <code>_</code>.","A <code>let</code> guard: <code>let Some(x) = opt</code>.","A literal in place of an expression: <code>1</code>, <code>&quot;foo&quot;</code>.","Conditionless loop: <code>loop { ... }</code>.","A macro invocation expression: <code>format!(&quot;{}&quot;, q)</code>.","A <code>match</code> expression: <code>match n { Some(n) =&gt; {}, None =&gt; {} }</code>.","A method call expression: <code>x.foo::&lt;T&gt;(a, b)</code>.","A parenthesized expression: <code>(a + b)</code>.","A path like <code>std::mem::replace</code> possibly containing generic …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A referencing operation: <code>&amp;a</code> or <code>&amp;mut a</code>.","An array literal constructed from one repeated element: …","A <code>return</code>, with an optional value to be returned.","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","A try-expression: <code>expr?</code>.","A try block: <code>try { ... }</code>.","A tuple expression: <code>(a, b, c, d)</code>.","A unary operation: <code>!x</code>, <code>*x</code>.","An unsafe block: <code>unsafe { ... }</code>.","A while loop: <code>while expr { ... }</code>.","A yield expression: <code>yield expr</code>.","A field of a struct or enum variant.","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …","Unused, but reserved for RFC 3323 restrictions.","Data stored within an enum variant or struct.","Named fields of a struct or struct variant such as …","Unnamed fields of a tuple struct or tuple variant such as …","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","A for loop: <code>for pat in expr { ... }</code>.","The <code>&gt;=</code> operator (greater than or equal to)","An individual generic argument, like <code>&#39;a</code>, <code>T</code>, or <code>Item = T</code>.","A generic type parameter, lifetime, or const generic: …","Lifetimes and type parameters attached to a declaration of …","An expression contained within invisible delimiters.","A type contained within invisible delimiters.","The <code>&gt;</code> operator (greater than)","A word of Rust code, which may be a keyword or legal …","An <code>if</code> expression with an optional <code>else</code> block: …","Returned by <code>Generics::split_for_impl</code>.","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …","The index of an unnamed tuple struct field.","A square bracketed indexing expression: <code>vector[2]</code>.","The inferred value of a const generic argument, denoted <code>_</code>.","Indication that a type should be inferred by the compiler: …","An inherited visibility, which usually means private.","","An integer literal: <code>1</code> or <code>1u16</code>.","The <code>&lt;=</code> operator (less than or equal to)","A <code>let</code> guard: <code>let Some(x) = opt</code>.","A Rust lifetime: <code>&#39;a</code>.","A lifetime parameter: <code>&#39;a: &#39;b + &#39;c + &#39;d</code>.","","A lifetime predicate in a <code>where</code> clause: <code>&#39;a: &#39;b + &#39;c</code>.","A lifetime argument.","A lifetime definition: <code>&#39;a: &#39;b + &#39;c + &#39;d</code>.","A structured list within an attribute, like …","A Rust literal such as a string or integer or boolean.","A literal in place of an expression: <code>1</code>, <code>&quot;foo&quot;</code>.","A boolean literal: <code>true</code> or <code>false</code>.","A byte literal: <code>b&#39;f&#39;</code>.","A byte string literal: <code>b&quot;foo&quot;</code>.","A character literal: <code>&#39;a&#39;</code>.","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","An integer literal: <code>1</code> or <code>1u16</code>.","A UTF-8 string literal: <code>&quot;foo&quot;</code>.","Conditionless loop: <code>loop { ... }</code>.","The <code>&lt;</code> operator (less than)","A macro invocation: <code>println!(&quot;{}&quot;, mac)</code>.","A macro invocation expression: <code>format!(&quot;{}&quot;, q)</code>.","A macro in the type position.","A grouping token that surrounds a macro body: <code>m!(...)</code> or …","A <code>match</code> expression: <code>match n { Some(n) =&gt; {}, None =&gt; {} }</code>.","","A struct or tuple struct field accessed in a struct …","Content of a compile-time structured attribute.","A structured list within an attribute, like …","A name-value pair within an attribute, like …","A method call expression: <code>x.foo::&lt;T&gt;(a, b)</code>.","The <code>*</code> operator (multiplication)","The <code>*=</code> operator","A name-value pair within an attribute, like …","Named fields of a struct or struct variant such as …","A named field like <code>self.x</code>.","The <code>!=</code> operator (not equal to)","The <code>-</code> operator for negation","The never type: <code>!</code>.","","","","The <code>!</code> operator for logical inversion","The <code>||</code> operator (logical or)","","A parenthesized expression: <code>(a + b)</code>.","","A parenthesized type equivalent to the inner type.","The <code>(A, B) -&gt; C</code> in <code>Fn(A, B) -&gt; C</code>.","Arguments of a function path segment: the <code>(A, B) -&gt; C</code> in …","A path at which a named item is exported (e.g. …","","A path like <code>std::mem::replace</code> possibly containing generic …","A path like <code>std::slice::Iter</code>, optionally qualified with a …","Angle bracketed or parenthesized arguments of a path …","A segment of a path together with any path arguments on …","A lifetime predicate in a <code>where</code> clause: <code>&#39;a: &#39;b + &#39;c</code>.","A type predicate in a <code>where</code> clause: …","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","A public visibility level: <code>pub</code>.","The explicit Self type in a qualified path: the <code>T</code> in …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A raw string like <code>r##&quot;data&quot;##</code>.","A referencing operation: <code>&amp;a</code> or <code>&amp;mut a</code>.","A reference type: <code>&amp;&#39;a T</code> or <code>&amp;&#39;a mut T</code>.","The <code>%</code> operator (modulus)","The <code>%=</code> operator","An array literal constructed from one repeated element: …","A visibility level restricted to some path: <code>pub(self)</code> or …","The result of a Syn parser.","A <code>return</code>, with an optional value to be returned.","Return type of a function signature.","The <code>&lt;&lt;</code> operator (shift left)","The <code>&lt;&lt;=</code> operator","The <code>&gt;&gt;</code> operator (shift right)","The <code>&gt;&gt;=</code> operator","A dynamically sized slice type: <code>[T]</code>.","A UTF-8 string literal: <code>&quot;foo&quot;</code>.","The style of a string literal, either plain quoted or a …","","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","The <code>-</code> operator (subtraction)","The <code>-=</code> operator","A type-macro that expands to the name of the Rust type …","","A trait used as a bound on a type parameter.","A modifier on a trait bound, currently only used for the <code>?</code> …","A trait object type <code>dyn Bound1 + Bound2 + Bound3</code> where …","A try-expression: <code>expr?</code>.","A try block: <code>try { ... }</code>.","A tuple expression: <code>(a, b, c, d)</code>.","A tuple type: <code>(A, B, C, String)</code>.","Returned by <code>TypeGenerics::as_turbofish</code>.","The possible types that a Rust value could have.","A generic type parameter: <code>T: Into&lt;String&gt;</code>.","A type predicate in a <code>where</code> clause: …","A type argument.","A particular type is returned.","A fixed size array type: <code>[T; n]</code>.","A bare function type: <code>fn(usize) -&gt; bool</code>.","Returned by <code>Generics::split_for_impl</code>.","A type contained within invisible delimiters.","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …","Indication that a type should be inferred by the compiler: …","A macro in the type position.","The never type: <code>!</code>.","A generic type parameter: <code>T: Into&lt;String&gt;</code>.","A trait or lifetime used as a bound on a type parameter.","A parenthesized type equivalent to the inner type.","A path like <code>std::slice::Iter</code>, optionally qualified with a …","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","A reference type: <code>&amp;&#39;a T</code> or <code>&amp;&#39;a mut T</code>.","A dynamically sized slice type: <code>[T]</code>.","A trait object type <code>dyn Bound1 + Bound2 + Bound3</code> where …","A tuple type: <code>(A, B, C, String)</code>.","A unary operator: <code>*</code>, <code>!</code>, <code>-</code>.","A unary operation: <code>!x</code>, <code>*x</code>.","","Unit struct or unit variant such as <code>None</code>.","Unnamed fields of a tuple struct or tuple variant such as …","An unnamed field like <code>self.0</code>.","An unsafe block: <code>unsafe { ... }</code>.","An enum variant.","Tokens in expression position not interpreted by Syn.","","A raw token literal not interpreted by Syn.","Tokens in type position not interpreted by Syn.","A visibility level restricted to some path: <code>pub(self)</code> or …","The visibility level of an item: inherited or <code>pub</code> or …","A <code>where</code> clause in a definition: …","A single predicate in a <code>where</code> clause: <code>T: Deserialize&lt;&#39;de&gt;</code>.","A while loop: <code>while expr { ... }</code>.","A yield expression: <code>yield expr</code>.","","","","","","","","","Turn a type’s generics like <code>&lt;X, Y&gt;</code> into a turbofish like …","","","","","","","","","","","","","","","","","","","","","","","","","Parses the literal into a selected number typehe type being bounded","","","","Trait and lifetime bounds (<code>Clone+Send+&#39;static</code>)","","","","","","Parse a set of curly braces and expose their content to …","","","","","Parse a set of square brackets and expose their content to …","A stably addressed token buffer supporting efficient …eturns an Iterator&lt;Item = &amp;ConstParam&gt; over the constant …","Returns an Iterator&lt;Item = &amp;mut ConstParam&gt; over the …","","","Define a type that supports parsing and printing a given …","Define a type that supports parsing and printing a …","","","","","","","","","Explicit discriminant: <code>Variant = 1</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","Extension traits to provide parsing methods on foreign …","","Content stored in the variant.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","If this path consists of a single ident, returns the ident.","","","","","","","","","","","","Name of the variant.","Name of the field, if any.","","","","","","","","","","","","<code>(A, B)</code>","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns <code>true</code> if there are zero fields.","","Determines whether this is a path of length 1 equal to the …","","Get an iterator over the borrowed <code>Field</code> items in this …","Get an iterator over the mutably borrowed <code>Field</code> items in …","","","Returns the number of fields.","","","","","Returns an Iterator&lt;Item = &amp;LifetimeParam&gt; over the …","","The <code>for&lt;&#39;a&gt;</code> in <code>for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;</code>","Any lifetimes from a <code>for</code> binding","","Returns an Iterator&lt;Item = &amp;mut LifetimeParam&gt; over the …","","","","","","","","Initializes an empty <code>where</code>-clause if there is not one …","","Facility for interpreting structured content inside of an …","","","","","","","","","","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","Panics","","Interpret a Syn literal from a proc-macro2 literal.","","","","","","","","Same as <code>Ident::new</code>, but creates a raw identifier (<code>r#ident</code>…","","","<code>C</code>","","","","","","","","","","","","Parse a set of parentheses and expose their content to …","Parsing interface for parsing a token stream into a syntax …","Parse tokens of source code into the chosen syntax tree …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse a syntax tree node from the content of this string …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse a proc-macro2 token stream into the chosen syntax …","","Parse the arguments to the attribute as a syntax tree.","See <code>Attribute::parse_args</code>.","Parse the arguments to the attribute using the given …","See <code>Attribute::parse_args_with</code>.","Parse the tokens within the macro invocation’s …","Parse the tokens within the macro invocation’s …","Parses zero or more inner attributes from the stream.","Parse the input TokenStream of a macro, triggering a …","Parse a <code>Path</code> containing no path arguments on any of its …","Parses a named (braced struct) field.","Parse the arguments to the attribute, expecting it to …","See <code>Attribute::parse_nested_meta</code>.","Parses zero or more outer attributes from the stream.","Quasi-quotation macro that accepts input like the <code>quote!</code> …","This macro is <code>parse_quote!</code> + <code>quote_spanned!</code>.","Parse a string of Rust code into the chosen syntax tree …","Parses an unnamed (tuple struct) field.","Invoke parser on the content of this string literal.","","","Returns the path that identifies the interpretation of …","Returns the path that begins this structured meta item.","","","","The <code>Foo&lt;&amp;&#39;a T&gt;</code> in <code>for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;</code>","","","","","","","","A punctuated sequence of syntax tree nodes separated by …","","","Error if this is a <code>Meta::Path</code> or <code>Meta::NameValue</code>.","Error if this is a <code>Meta::Path</code> or <code>Meta::List</code>.","Error if this is a <code>Meta::List</code> or <code>Meta::NameValue</code>.","","","","","Configures the span of this <code>Ident</code>, possibly changing its …","","","","","","","","","","","","","","Returns the span of this <code>Ident</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A trait that can provide the <code>Span</code> of the complete contents …","Split a type’s generics into the pieces required for impl…okens representing Rust punctuation, keywords, and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns an Iterator&lt;Item = &amp;TypeParam&gt; over the type …","Returns an Iterator&lt;Item = &amp;mut TypeParam&gt; over the type …","","","","","","","","","","","","","","","","","","","","In some positions, types may not contain the <code>+</code> character, …","","","","A cheaply copyable cursor into a <code>TokenBuffer</code>.","A buffer that can be efficiently traversed multiple times, …","Creates a cursor referencing the first token in the buffer …","","","","","","","Creates a cursor referencing a static empty TokenStream.","Checks whether the cursor is currently pointing at the end …","","Returns the argument unchanged.","Returns the argument unchanged.","If the cursor is pointing at a <code>Group</code> with the given …","If the cursor is pointing at a <code>Ident</code>, returns it along …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","If the cursor is pointing at a <code>Lifetime</code>, returns it along …","If the cursor is pointing at a <code>Literal</code>, return it along …","Creates a <code>TokenBuffer</code> containing all the tokens from the …","Creates a <code>TokenBuffer</code> containing all the tokens from the …","","If the cursor is pointing at a <code>Punct</code>, returns it along …","Returns the <code>Span</code> of the current token, or <code>Span::call_site()</code>…","","Copies all remaining tokens visible from this cursor into a","If the cursor is pointing at a <code>TokenTree</code>, returns it along …","","","","","","","Additional methods for <code>Ident</code> not provided by proc-macro2 …","Parses any identifier including keywords.","Peeks any identifier including keywords. Usage: …","Strips the raw marker <code>r#</code>, if any, from the beginning of an …","Context for parsing a single property in the conventional …","","","Report that the attribute’s content did not conform to …","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Used when parsing <code>list(...)</code> syntax <strong>if</strong> the content inside …","Make a parser that is usable with <code>parse_macro_input!</code> in a …","","","","","Used when parsing <code>key = &quot;value&quot;</code> syntax.","Error returned when a Syn parser cannot parse the input …","Support for checking the next token in a stream to decide …","An empty syntax tree node that consumes no tokens when …","","Parsing interface implemented by all types that can be …","Cursor position within a buffered token stream.","Input to a Syn parser function.","Parser that can parse Rust tokens into a particular syntax …","Types that can be parsed by looking at just one token.","The result of a Syn parser.","Cursor state associated with speculative parsing.","","","","","","","","","","","","Calls the given parser function to parse a syntax tree …","","","","","Add another error message to self such that when …","Provides low-level access to the token representation …","","Extensions to the parsing API with niche applicability.","","Triggers an error at the current position of the parse …","Triggers an error at the current position of the parse …","Triggers an error at the current position of the parse …","","","","","","Forks a parse stream so that parsing tokens out of either …","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Render the error as an invocation of <code>compile_error!</code>.","","","Returns whether there are tokens remaining in this stream.","Constructs a helper for peeking at the next token in this …","Usually the <code>ParseStream::error</code> method will be used …","Creates an error with the specified message spanning the …","","Parses a syntax tree node of type <code>T</code>, advancing the …","Parse tokens of source code into the chosen syntax tree …","","Parse a proc-macro2 token stream into the chosen syntax …","","Parse a string of Rust code into the chosen syntax tree …","Parses zero or more occurrences of <code>T</code> separated by …","Looks at the next token in the parse stream to determine …","Looks at the next token in the parse stream to determine …","Looks at the second-next token in the parse stream.","Looks at the third-next token in the parse stream.","","The source location of the error.","Returns the <code>Span</code> of the next token in the parse stream, or …","Speculatively parses tokens from this parse stream, …","Render the error as an invocation of <code>compile_error!</code>.","","","","","","","","","","","","","","","","","","","","Extensions to the <code>ParseStream</code> API to support manipulating …","Extensions to the <code>ParseStream</code> API to support speculative …","Advance this parse stream to the position of a forked …","Returns the delimiter, the span of the delimiter token, …","","An iterator over owned values of type <code>T</code>.","An iterator over owned pairs of type <code>Pair&lt;T, P&gt;</code>.","An iterator over borrowed values of type <code>&amp;T</code>.","An iterator over mutably borrowed values of type <code>&amp;mut T</code>.","A single syntax tree node of type <code>T</code> followed by its …","An iterator over borrowed pairs of type <code>Pair&lt;&amp;T, &amp;P&gt;</code>.","An iterator over mutably borrowed pairs of type …","<strong>A punctuated sequence of syntax tree nodes of type <code>T</code> </strong>…","","","","","","","","","","","","","","","","","","Clears the sequence of all values and punctuation, making …","","","","","","","","","","","","","","","Returns true if either this <code>Punctuated</code> is empty, or it has …","","","Borrows the first element in this sequence.","Mutably borrows the first element in this sequence.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Inserts an element at position <code>index</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns an iterator over the contents of this sequence as …","Produces this punctuated pair as a tuple of syntax tree …","Extracts the syntax tree node from this punctuated pair, …","Determines whether this punctuated sequence is empty, …","Returns an iterator over borrowed syntax tree nodes of …","Returns an iterator over mutably borrowed syntax tree …","Borrows the last element in this sequence.","Mutably borrows the last element in this sequence.","Returns the number of syntax tree nodes in this punctuated …","","","","","","","Creates an empty punctuated sequence.","Creates a punctuated pair out of a syntax tree node and an …","","","","","","","","","","","","","Returns an iterator over the contents of this sequence as …","Returns an iterator over the contents of this sequence as …","Parses one or more occurrences of <code>T</code> separated by …","Parses one or more occurrences of <code>T</code> using the given parse …","Parses zero or more occurrences of <code>T</code> separated by …","Parses zero or more occurrences of <code>T</code> using the given parse …","Removes the last punctuated pair from this sequence, or …","Removes the trailing punctuation from this punctuated …","Borrows the punctuation from this punctuated pair, unless …","Mutably borrows the punctuation from this punctuated pair, …","Appends a syntax tree node onto the end of this punctuated …","Appends a trailing punctuation onto the end of this …","Appends a syntax tree node onto the end of this punctuated …","","","","","","","","","","","","","","","","","Determines whether this punctuated sequence ends with a …","","","","","","","","","","","","","","","","","","","","","","","","","Borrows the syntax tree node from this punctuated pair.","Mutably borrows the syntax tree node from this punctuated …","A trait that can provide the <code>Span</code> of the complete contents …","Returns a <code>Span</code> covering the complete contents of this …","<code>abstract</code>","<code>&amp;</code>","<code>&amp;&amp;</code>","<code>&amp;=</code>","<code>as</code>","<code>async</code>","<code>@</code>","<code>auto</code>","<code>await</code>","<code>become</code>","<code>box</code>","<code>{</code>…<code>}</code>","<code>[</code>…<code>]</code>","<code>break</code>","<code>^</code>","<code>^=</code>","<code>:</code>","<code>,</code>","<code>const</code>","<code>continue</code>","<code>crate</code>","<code>default</code>","<code>do</code>","<code>$</code>","<code>.</code>","<code>..</code>","<code>...</code>","<code>..=</code>","<code>dyn</code>","<code>else</code>","<code>enum</code>","<code>=</code>","<code>==</code>","<code>extern</code>","<code>=&gt;</code>","<code>final</code>","<code>fn</code>","<code>for</code>","<code>&gt;=</code>","None-delimited group","<code>&gt;</code>","<code>if</code>","<code>impl</code>","<code>in</code>","<code>&lt;-</code>","<code>&lt;=</code>","<code>let</code>","<code>loop</code>","<code>&lt;</code>","<code>macro</code>","<code>match</code>","<code>-</code>","<code>-=</code>","<code>mod</code>","<code>move</code>","<code>mut</code>","<code>!=</code>","<code>!</code>","<code>|</code>","<code>|=</code>","<code>||</code>","<code>override</code>","<code>(</code>…<code>)</code>","<code>::</code>","<code>%</code>","<code>%=</code>","<code>+</code>","<code>+=</code>","<code>#</code>","<code>priv</code>","<code>pub</code>","<code>?</code>","<code>-&gt;</code>","<code>ref</code>","<code>return</code>","<code>Self</code>","<code>self</code>","<code>;</code>","<code>&lt;&lt;</code>","<code>&lt;&lt;=</code>","<code>&gt;&gt;</code>","<code>&gt;&gt;=</code>","<code>/</code>","<code>/=</code>","<code>*</code>","<code>*=</code>","<code>static</code>","<code>struct</code>","<code>super</code>","<code>~</code>","Marker trait for types that represent single tokens.","<code>trait</code>","<code>try</code>","<code>type</code>","<code>typeof</code>","<code>_</code>","<code>union</code>","<code>unsafe</code>","<code>unsized</code>","<code>use</code>","<code>virtual</code>","<code>where</code>","<code>while</code>","<code>yield</codeeturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codei":[0,60,60,60,64,0,25,75,25,0,65,0,65,25,0,0,25,75,0,0,0,25,60,60,60,60,60,60,25,52,0,59,59,25,52,52,25,25,52,25,25,40,65,0,0,65,25,269,0,0,0,0,93,61,0,60,60,21,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,0,0,52,25,60,0,0,0,25,75,60,0,25,0,75,0,25,25,75,72,11,52,60,25,0,40,45,49,65,0,12,0,25,0,0,0,0,0,0,0,25,60,0,25,75,0,25,47,0,0,0,0,25,60,60,12,16,37,60,61,75,47,64,74,61,60,11,25,59,75,64,0,0,12,25,75,0,0,0,0,75,72,0,25,269,25,75,60,60,25,72,0,25,0,60,60,60,60,75,52,0,21,25,60,60,0,45,0,0,75,25,25,25,75,0,0,40,49,65,93,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,21,16,16,37,25,0,25,45,52,75,0,0,0,0,25,25,77,86,9,27,66,63,28,71,1,15,19,20,26,27,28,29,30,31,32,33,34,35,36,41,42,43,91,92,58,82,29,3,5,3,5,7,1,2,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,116,123,125,112,26,122,110,27,28,109,126,131,29,106,30,114,31,129,111,32,132,33,117,130,34,35,128,107,113,108,115,119,118,127,36,121,120,124,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,3,5,57,269,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,7,1,2,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,116,123,125,112,26,122,110,27,28,109,126,131,29,106,30,114,31,129,111,32,132,33,117,130,34,35,128,107,113,108,115,119,118,127,36,121,120,124,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,3,5,57,269,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,51,41,42,50,51,69,79,88,17,23,0,10,31,76,87,0,0,7,1,2,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,3,5,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,7,1,2,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,3,5,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,8,9,66,19,41,42,43,50,51,69,92,39,39,43,85,0,0,20,39,44,64,42,43,13,58,15,29,92,88,76,78,83,85,86,87,89,23,8,8,9,37,38,14,42,43,67,68,28,30,31,34,36,0,90,15,22,24,8,8,8,9,37,38,3,5,77,44,7,1,2,8,8,8,8,8,8,8,9,10,11,12,12,12,12,13,14,15,16,16,16,17,18,19,20,21,22,23,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,116,123,125,112,26,122,110,27,28,109,126,131,29,106,30,114,31,129,111,32,132,33,117,130,34,35,128,107,113,108,115,119,118,127,36,121,120,124,37,37,37,37,38,38,39,40,40,40,40,41,42,42,43,44,45,45,45,46,47,48,49,49,49,50,51,52,52,52,52,52,52,52,52,53,54,55,56,3,3,5,5,57,269,58,59,60,61,62,62,63,63,64,65,66,67,68,69,70,71,72,73,74,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,27,20,67,68,69,62,30,78,39,44,66,71,8,9,37,38,9,15,19,20,42,43,63,67,68,69,79,73,31,38,70,77,7,1,2,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,116,123,125,112,26,122,110,27,28,109,126,131,29,106,30,114,31,129,111,32,132,33,117,130,34,35,128,107,113,108,115,119,118,127,36,121,120,124,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,3,5,57,269,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,16,16,16,16,64,62,64,16,16,62,26,16,76,41,50,86,39,44,46,51,77,39,32,39,44,66,71,33,81,39,29,0,10,46,19,85,86,90,91,92,17,8,9,41,52,53,54,55,56,3,5,57,8,26,36,70,77,39,18,27,34,46,70,73,77,83,89,0,0,0,8,9,12,13,14,15,17,18,20,25,32,33,35,37,38,39,40,41,42,43,44,45,46,47,48,49,52,53,53,54,55,56,3,5,57,58,60,61,62,63,65,66,70,72,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,0,8,10,13,10,13,58,58,10,0,62,19,10,13,10,0,0,0,19,53,8,9,10,12,13,14,35,46,58,73,84,71,10,48,73,0,35,84,12,12,12,26,62,22,76,8,9,52,53,54,55,56,3,5,57,7,1,2,8,8,8,9,9,10,12,13,14,15,16,17,18,19,20,25,116,123,125,112,26,122,110,27,28,109,126,131,29,106,30,114,31,129,111,32,132,33,117,130,34,35,128,107,113,108,115,119,118,127,36,121,120,124,37,37,38,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,52,53,53,54,54,55,55,56,56,3,3,5,5,57,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,38,57,0,39,85,22,10,52,53,54,55,56,3,5,7,1,2,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,3,5,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,8,9,3,5,7,1,2,8,9,10,12,13,14,15,16,17,18,19,20,25,116,123,125,112,26,122,110,27,28,109,126,131,29,106,30,114,31,129,111,32,132,33,117,130,34,35,128,107,113,108,115,119,118,127,36,121,120,124,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,3,5,57,58,60,61,62,63,64,65,66,67,68,69,70,72,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,0,53,54,55,56,3,5,57,13,58,7,1,2,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,116,123,125,112,26,122,110,27,28,109,126,131,29,106,30,114,31,129,111,32,132,33,117,130,34,35,128,107,113,108,115,119,118,127,36,121,120,124,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,3,5,57,269,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,7,1,2,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,116,123,125,112,26,122,110,27,28,109,126,131,29,106,30,114,31,129,111,32,132,33,117,130,34,35,128,107,113,108,115,119,118,127,36,121,120,124,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,3,5,57,269,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,19,28,43,67,71,91,7,1,2,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,116,123,125,112,26,122,110,27,28,109,126,131,29,106,30,114,31,129,111,32,132,33,117,130,34,35,128,107,113,108,115,119,118,127,36,121,120,124,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,3,5,57,269,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,39,39,80,24,18,8,77,53,54,55,56,57,14,57,68,77,23,19,20,39,48,75,79,88,93,0,0,151,151,152,151,152,152,152,152,152,152,151,152,152,152,151,152,152,152,151,151,152,152,152,152,152,152,151,152,151,152,151,152,0,270,270,270,0,154,154,154,154,154,154,154,0,154,154,154,154,154,0,0,0,145,0,0,0,0,0,0,0,157,156,159,157,158,163,156,159,157,158,163,157,156,158,156,158,156,157,158,0,157,159,157,158,156,156,156,157,157,157,156,156,159,157,158,163,156,159,157,158,163,156,156,156,157,157,156,156,142,157,145,163,145,157,145,157,159,157,157,157,156,156,157,157,156,156,158,156,157,156,159,157,158,163,156,159,157,158,163,156,159,157,158,163,0,0,271,272,170,0,0,0,0,0,0,0,0,170,164,167,171,168,169,136,137,170,164,167,171,168,169,136,137,170,164,164,167,168,169,136,170,164,167,168,169,136,170,170,164,164,164,164,164,164,164,167,171,168,169,136,137,170,164,164,164,164,164,164,167,171,168,169,136,137,170,164,164,164,167,171,168,169,136,137,164,170,170,164,164,164,164,164,164,167,171,168,169,136,137,164,170,167,171,168,169,136,137,167,171,168,169,136,137,164,164,164,164,164,164,164,164,170,170,164,164,164,167,171,168,169,136,137,164,170,164,167,168,169,136,170,164,170,164,164,167,171,168,169,136,137,170,164,167,171,168,169,136,137,170,164,167,171,168,169,136,137,170,170,170,0,273,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,100,173,174,175,176,177,178,179,180,181,182,103,183,184,185,186,187,101,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,102,104,206,207,105,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,172,100,173,174,175,176,177,178,179,180,181,182,103,183,184,185,186,187,101,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,102,104,206,207,105,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,172,100,173,174,175,176,177,178,179,180,181,182,103,183,184,185,186,187,101,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,102,104,206,207,105,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,172,100,173,174,175,176,177,178,179,180,181,182,103,183,184,185,186,187,101,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,102,104,206,207,105,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,172,100,173,174,175,176,177,178,179,180,181,182,103,183,184,185,186,187,101,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,102,104,206,207,105,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,100,220,223,224,226,227,228,229,233,237,240,241,244,245,249,251,253,254,256,261,263,265,100,220,223,224,226,227,228,229,233,237,240,241,244,245,249,251,253,254,256,261,263,265,172,100,173,174,175,176,177,178,179,180,181,182,103,183,184,185,186,187,101,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,102,104,206,207,105,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,172,100,173,174,175,176,177,178,179,180,181,182,103,183,184,185,186,187,101,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,102,104,206,207,105,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,100,173,174,175,176,177,178,179,180,181,182,103,183,184,185,186,187,101,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,102,104,206,207,105,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,100,173,174,175,176,177,178,179,180,181,182,103,183,184,185,186,187,101,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,102,104,206,207,105,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,172,173,174,175,176,177,178,179,180,181,182,103,183,184,185,186,187,101,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,102,104,206,207,105,208,209,210,211,212,213,214,215,216,217,218,219,266,267,268,100,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,172,266,267,268,172,100,173,174,175,176,177,178,179,180,181,182,103,183,184,185,186,187,101,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,102,104,206,207,105,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,100,173,174,175,176,177,178,179,180,181,182,103,183,184,185,186,187,101,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,102,104,206,207,105,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,172,100,173,174,175,176,177,178,179,180,181,182,103,183,184,185,186,187,101,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,102,104,206,207,105,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,172,100,173,174,175,176,177,178,179,180,181,182,103,183,184,185,186,187,101,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,102,104,206,207,105,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,172,100,173,174,175,176,177,178,179,180,181,182,103,183,184,185,186,187,101,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,102,104,206,207,105,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268],"fp":[[3,"TypeGenerics"],[3,"Turbofish"],[3,"LitInt"],[15,"str"],[3,"LitFloat"],[6,"Result"],[3,"ImplGenerics"],[3,"Ident"],[3,"Lifetime"],[3,"Attribute"],[4,"AttrStyle"],[4,"Meta"],[3,"MetaList"],[3,"MetaNameValue"],[3,"Variant"],[4,"Fields"],[3,"FieldsNamed"],[3,"FieldsUnnamed"],[3,"Field"],[3,"DeriveInput"],[4,"Data"],[3,"DataStruct"],[3,"DataEnum"],[3,"DataUnion"],[4,"Expr"],[3,"ExprBinary"],[3,"ExprCall"],[3,"ExprCast"],[3,"ExprField"],[3,"ExprGroup"],[3,"ExprIndex"],[3,"ExprLit"],[3,"ExprMacro"],[3,"ExprParen"],[3,"ExprPath"],[3,"ExprUnary"],[4,"Member"],[3,"Index"],[3,"Generics"],[4,"GenericParam"],[3,"LifetimeParam"],[3,"TypeParam"],[3,"ConstParam"],[3,"BoundLifetimes"],[4,"TypeParamBound"],[3,"TraitBound"],[4,"TraitBoundModifier"],[3,"WhereClause"],[4,"WherePredicate"],[3,"PredicateLifetime"],[3,"PredicateType"],[4,"Lit"],[3,"LitStr"],[3,"LitByteStr"],[3,"LitByte"],[3,"LitChar"],[3,"LitBool"],[3,"Macro"],[4,"MacroDelimiter"],[4,"BinOp"],[4,"UnOp"],[3,"Path"],[3,"PathSegment"],[4,"PathArguments"],[4,"GenericArgument"],[3,"AngleBracketedGenericArguments"],[3,"AssocType"],[3,"AssocConst"],[3,"Constraint"],[3,"ParenthesizedGenericArguments"],[3,"QSelf"],[4,"Visibility"],[3,"VisRestricted"],[4,"FieldMutability"],[4,"Type"],[3,"TypeArray"],[3,"TypeBareFn"],[3,"TypeGroup"],[3,"TypeImplTrait"],[3,"TypeInfer"],[3,"TypeMacro"],[3,"TypeNever"],[3,"TypeParen"],[3,"TypePath"],[3,"TypePtr"],[3,"TypeReference"],[3,"TypeSlice"],[3,"TypeTraitObject"],[3,"TypeTuple"],[3,"Abi"],[3,"BareFnArg"],[3,"BareVariadic"],[4,"ReturnType"],[4,"Ordering"],[15,"bool"],[3,"Formatter"],[3,"Error"],[4,"Result"],[6,"Result"],[3,"Underscore"],[3,"Extern"],[3,"SelfType"],[3,"Crate"],[3,"SelfValue"],[3,"Super"],[3,"ExprForLoop"],[3,"ExprReference"],[3,"ExprReturn"],[3,"ExprClosure"],[3,"ExprBreak"],[3,"ExprLet"],[3,"ExprAwait"],[3,"ExprRepeat"],[3,"ExprIf"],[3,"ExprStruct"],[3,"ExprArray"],[3,"ExprMatch"],[3,"ExprTryBlock"],[3,"ExprTry"],[3,"ExprWhile"],[3,"ExprUnsafe"],[3,"ExprBlock"],[3,"ExprAssign"],[3,"ExprYield"],[3,"ExprAsync"],[3,"ExprConst"],[3,"ExprTuple"],[3,"ExprRange"],[3,"ExprInfer"],[3,"ExprMethodCall"],[3,"ExprContinue"],[3,"ExprLoop"],[15,"usize"],[3,"Literal"],[4,"Option"],[3,"Iter"],[3,"IterMut"],[3,"Span"],[15,"u8"],[15,"char"],[3,"TokenStream"],[8,"Parse"],[6,"ParseStream"],[3,"TokenStream"],[8,"Parser"],[3,"Vec"],[8,"FnMut"],[3,"DelimSpan"],[3,"String"],[3,"TypeId"],[3,"TokenBuffer"],[3,"Cursor"],[4,"Delimiter"],[3,"ParseNestedMeta"],[8,"Display"],[3,"Error"],[3,"ParseBuffer"],[3,"StepCursor"],[3,"Lookahead1"],[8,"IntoIterator"],[3,"LexError"],[8,"ToTokens"],[3,"Nothing"],[3,"Punctuated"],[8,"Peek"],[3,"Demand"],[3,"Pairs"],[3,"IntoPairs"],[3,"IntoIter"],[4,"Pair"],[3,"PairsMut"],[3,"Group"],[3,"Abstract"],[3,"As"],[3,"Async"],[3,"Auto"],[3,"Await"],[3,"Become"],[3,"Box"],[3,"Break"],[3,"Const"],[3,"Continue"],[3,"Default"],[3,"Do"],[3,"Dyn"],[3,"Else"],[3,"Enum"],[3,"Final"],[3,"Fn"],[3,"For"],[3,"If"],[3,"Impl"],[3,"In"],[3,"Let"],[3,"Loop"],[3,"Macro"],[3,"Match"],[3,"Mod"],[3,"Move"],[3,"Mut"],[3,"Override"],[3,"Priv"],[3,"Pub"],[3,"Ref"],[3,"Return"],[3,"Static"],[3,"Struct"],[3,"Trait"],[3,"Try"],[3,"Type"],[3,"Typeof"],[3,"Union"],[3,"Unsafe"],[3,"Unsized"],[3,"Use"],[3,"Virtual"],[3,"Where"],[3,"While"],[3,"Yield"],[3,"And"],[3,"AndAnd"],[3,"AndEq"],[3,"At"],[3,"Caret"],[3,"CaretEq"],[3,"Colon"],[3,"Comma"],[3,"Dollar"],[3,"Dot"],[3,"DotDot"],[3,"DotDotDot"],[3,"DotDotEq"],[3,"Eq"],[3,"EqEq"],[3,"FatArrow"],[3,"Ge"],[3,"Gt"],[3,"LArrow"],[3,"Le"],[3,"Lt"],[3,"Minus"],[3,"MinusEq"],[3,"Ne"],[3,"Not"],[3,"Or"],[3,"OrEq"],[3,"OrOr"],[3,"PathSep"],[3,"Percent"],[3,"PercentEq"],[3,"Plus"],[3,"PlusEq"],[3,"Pound"],[3,"Question"],[3,"RArrow"],[3,"Semi"],[3,"Shl"],[3,"ShlEq"],[3,"Shr"],[3,"ShrEq"],[3,"Slash"],[3,"SlashEq"],[3,"Star"],[3,"StarEq"],[3,"Tilde"],[3,"Brace"],[3,"Bracket"],[3,"Paren"],[4,"StrStyle"],[8,"IdentExt"],[8,"Speculative"],[8,"AnyDelimiter"],[8,"Spanned"]]},\
"thiserror":{"doc":"github crates-io docs-rs","t":"Y","n":["Error"],"q":["thiserror"],"d":[""],"i":[0],"f":[0],"p":[]},\
"thiserror_impl":{"doc":"","t":"Y","n":["Error"],"q":["thiserror_impl"],"d":[""],"i":[0],"f":[0],"p":[]},\
"time":{"doc":"Simple time handling.","t":"DNNNNNNNNNNNNNNDEDDDDDNLLLLLFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLFLLFMLLLLLLLLLLLLFFLLLLLMLLFLFLLLLLLLMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLL","n":["Duration","InvalidDay","InvalidDayOfMonth","InvalidDayOfWeek","InvalidDayOfYear","InvalidFormatSpecifier","InvalidHour","InvalidMinute","InvalidMonth","InvalidSecond","InvalidSecondsSinceEpoch","InvalidTime","InvalidYear","InvalidZoneOffset","MissingFormatConverter","OutOfRangeError","ParseError","PreciseTime","SteadyTime","Timespec","Tm","TmFmt","UnexpectedCharacter","add","add","add","add","asctime","at","at_utc","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checked_add","checked_sub","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","ctime","days","description","description","div","empty_tm","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_std","get_time","hash","hash","hash","hours","into","into","into","into","into","into","into","into","is_zero","max_value","microseconds","milliseconds","min_value","minutes","mul","nanoseconds","neg","new","now","now","now","now_utc","nsec","num_days","num_hours","num_microseconds","num_milliseconds","num_minutes","num_nanoseconds","num_seconds","num_weeks","partial_cmp","partial_cmp","partial_cmp","partial_cmp","precise_time_ns","precise_time_s","provide","provide","rfc3339","rfc822","rfc822z","sec","seconds","span","strftime","strftime","strptime","sub","sub","sub","sub","sub","sub","sub","tm_hour","tm_isdst","tm_mday","tm_min","tm_mon","tm_nsec","tm_sec","tm_utcoff","tm_wday","tm_yday","tm_year","to","to_local","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_std","to_string","to_string","to_string","to_string","to_string","to_timespec","to_utc","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","tzset","weeks","zero"],"q":["timed":["ISO 8601 time duration with nanosecond precision. This …","","","","","","","","","","","","","","","Represents error when converting <code>Duration</code> to/from a …","","An opaque structure representing a moment in time.","A structure representing a moment in time.","A record specifying a time value in seconds and …","Holds a calendar date and time broken down into its …","A wrapper around a <code>Tm</code> and format string that implements …","","","","","The resulting Tm is in UTC.","Returns a TmFmt that outputs according to the <code>asctime</code> …","Returns the specified time in the local timezone","Returns the specified time in UTC","","","","","","","","","","","","","","","","","Add two durations, returning <code>None</code> if overflow occurred.","Subtract two durations, returning <code>None</code> if overflow …","","","","","","","","","","","","","","","","","","","Returns a TmFmt that outputs according to the <code>asctime</code> …","Makes a new <code>Duration</code> with given number of days. Equivalent …","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a <code>time::Duration</code> object from <code>std::time::Duration</code>","Returns the current time as a <code>timespec</code> containing the …","","","","Makes a new <code>Duration</code> with given number of hours. …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the duration equals <code>Duration::zero()</code>.","The maximum possible <code>Duration</code>: <code>i64::MAX</code> milliseconds.","Makes a new <code>Duration</code> with given number of microseconds.","Makes a new <code>Duration</code> with given number of milliseconds.","The minimum possible <code>Duration</code>: <code>i64::MIN</code> milliseconds.","Makes a new <code>Duration</code> with given number of minutes. …","","Makes a new <code>Duration</code> with given number of nanoseconds.","","","Returns the current time in the local timezone","Returns a <code>PreciseTime</code> representing the current moment in …","Returns a <code>SteadyTime</code> representing the current moment in …","Returns the current time in UTC","","Returns the total number of whole days in the duration.","Returns the total number of whole hours in the duration.","Returns the total number of whole microseconds in the …","Returns the total number of whole milliseconds in the …","Returns the total number of whole minutes in the duration.","Returns the total number of whole nanoseconds in the …","Returns the total number of whole seconds in the duration.","Returns the total number of whole weeks in the duration.","","","","","Returns the current value of a high-resolution performance …","Returns the current value of a high-resolution performance …","","","Returns a TmFmt that outputs according to RFC 3339. RFC …","Returns a TmFmt that outputs according to RFC 822.","Returns a TmFmt that outputs according to RFC 822 with …","","Makes a new <code>Duration</code> with given number of seconds. Panics …","Runs a closure, returning the duration of time it took to …","Formats the time according to the format string.","Formats the time according to the format string.","Parses the time from the string according to the format …","","","","","","The resulting Tm is in UTC.","","Hours after midnight - [0, 23]","Daylight Saving Time flag.","Day of the month - [1, 31]","Minutes after the hour - [0, 59]","Months since January - [0, 11]","Nanoseconds after the second - [0, 109 - 1]","Seconds after the minute - [0, 60]","Identifies the time zone that was used to compute this …","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, …, 6 …","Days since January 1 - [0, 365]","Years since 1900","Returns a <code>Duration</code> representing the span of time from the …","Convert time to the local timezone","","","","","","","","Creates a <code>std::time::Duration</code> object from <code>time::Duration</code>","","","","","","Convert time to the seconds from January 1, 1970","Convert time to the UTC","","","","","","","","","","","","","","","","","","","","","","","","","","Makes a new <code>Duration</code> with given number of weeks. …","A duration where the stored seconds and nanoseconds are …"],"i":[0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,0,0,0,0,0,9,1,2,3,4,4,0,0,1,7,2,8,3,4,9,5,1,7,2,8,3,4,9,5,1,1,1,7,2,8,3,4,9,1,7,2,8,3,4,9,1,2,3,4,4,1,7,9,1,0,1,7,2,3,4,9,1,1,7,7,2,3,3,4,9,9,5,5,1,7,2,8,3,4,9,5,1,0,1,2,4,1,1,7,2,8,3,4,9,5,1,1,1,1,1,1,1,1,1,2,0,8,3,0,2,1,1,1,1,1,1,1,1,1,2,3,4,0,0,7,9,4,4,4,2,1,1,0,4,0,1,2,2,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,8,4,1,7,2,8,3,4,9,1,1,7,3,9,5,4,4,1,7,2,8,3,4,9,5,1,7,2,8,3,4,9,5,1,7,2,8,3,4,9,5,0,1,1],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,1],1],[[2,1],2],[[3,1],3],[[4,1],4],[4,5],[2,4],[2,4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,1],[[6,[1]]]],[[1,1],[[6,[1]]]],[1,1],[7,7],[2,2],[8,8],[3,3],[4,4],[9,9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,1],10],[[2,2],10],[[3,3],10],[[4,4],10],[4,5],[11,1],[7,12],[9,12],[[1,13],1],[[],4],[[1,1],14],[[7,7],14],[[2,2],14],[[3,3],14],[[4,4],14],[[9,9],14],[[1,15],16],[[1,15],16],[[7,15],16],[[7,15],16],[[2,15],16],[[3,15],16],[[3,15],16],[[4,15],16],[[9,15],16],[[9,15],16],[[5,15],16],[[5,15],16],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[17,[[18,[1,7]]]],[[],2],[1],[2],[4],[11,1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,14],[[],1],[11,1],[11,1],[[],1],[11,1],[[1,13],1],[11,1],[1,1],[[11,13],2],[[],4],[[],8],[[],3],[[],4],0,[1,11],[1,11],[1,[[6,[11]]]],[1,11],[1,11],[1,[[6,[11]]]],[1,11],[1,11],[[1,1],[[6,[10]]]],[[2,2],[[6,[10]]]],[[3,3],[[6,[10]]]],[[4,4],[[6,[10]]]],[[],19],[[],20],[21],[21],[4,5],[4,5],[4,5],0,[11,1],[[],1],[[12,4],[[18,[22,9]]]],[[4,12],[[18,[5,9]]]],[[12,12],[[18,[4,9]]]],[[1,1],1],[[2,1],2],[[2,2],1],[[3,3],1],[[3,1],3],[[4,1],4],[[4,4],1],0,0,0,0,0,0,0,0,0,0,0,[[8,8],1],[4,4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,[[18,[17,7]]]],[[],22],[[],22],[[],22],[[],22],[[],22],[4,2],[4,4],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[]],[11,1],[[],1]],"p":[[3,"Duration"],[3,"Timespec"],[3,"SteadyTime"],[3,"Tm"],[3,"TmFmt"],[4,"Option"],[3,"OutOfRangeError"],[3,"PreciseTime"],[4,"ParseError"],[4,"Ordering"],[15,"i64"],[15,"str"],[15,"i32"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Duration"],[4,"Result"],[15,"u64"],[15,"f64"],[3,"Demand"],[3,"String"],[3,"TypeId"]]},\
"ttf_parser":{"doc":"A high-level, safe, zero-allocation TrueType font parser.","t":"NNNNNENNNNNNNNDNEDDIDNNNNNNNNDDDDNDNNNNNNNNNNNNNNDNNINEDEDDNDSDNNNEDNNNNNNDDEENNAMMALLAMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAMMAMAMMAMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKAMMLLLLKMMLLLLLLLLLLLLLLLLLAMMLLLLLLLLLLLLLLLLLFMLLLLLLLLLLLLLLLLLLLLLLLLLLAMMAMMLLLLAMMLLLLLLLLLLLAMMAMMAMMLLLAMMLLMAMMMAMMAMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAMMAMMLLLLKAMMAMMMAMMKAMMAMMAMLLLLLLAAMMLKLLLLLMMAMMLKLAMMLLLLLLAMMLLLMMLLLLLLLLLLLLLLLLLLLLLLLAMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLAMMMMAMMMMLLLMMLMMMMMMMMMDDLLLLLLLLLLLLLLLLLLLLLLLLLLLMMDDDGDDLLLLLLLLLLALLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLMLLLLALLLLLLLLLLLLLLLLLLLLLLRRRRDDDDLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLMMLLLLLLLLLLLLLLLDLLLLLLLLLLLLLDLLLLLLLLLLLLDLLLLLLLLLLLLLLDLLLLLLLLLLLLLLNENENNNNNDDDDDDDDDDDDNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMMLLLLLLLLLLLLLMLLLLLLLLLLLLLLLMLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLMMMLLLMMLLLLLLLLLLLLLLLLLLLDDMLLLLLLLLMLLLLLMLLMMMLLMLLLLLLLLNNENNDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLDDNDNNDDENNNNNDDDNDNDNDNEDDENEDDNDMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLMMMMMMLMMMMMMMMMMMMNDGDNNNNDNGGDNDNDDGNEEMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLMMMMLLLLLLLLLLLLLLLLLLMLLLLLLLLLLMMLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMDLLLLLLLLLLLLLENNDLLLLLLLLLLLLLMMLLLLLLLLLLLMDMLLLLMLLLMMLLLLLDDLMMLLLLLLLLLLLLLLMMLLLMLLLLLLLLDLLLLLLLLLLLLLLENNNNDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLMMLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMDDENNNNNDDDDDDDDDMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLMLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLMNNELLLLLLLLLLLLLLDLLLLLLLMLLLLLDDDNDDDDNDDNDNNDEDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLMMMMLMMLLLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLNNNDDDEDNNLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLMLMAMMLLLMLLLLLLLLLLLLLLLLLLLLLRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRREDGGGEEEDGGDNNNNNNNNNNGDGDDDGGIDDDDIDDGGDDGGGMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLMLLMMMMMMLMLLKKLLLLLLMLMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMNNNNNNNNNNNNNNNNDNNNEDNNNEELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLMMMMDDLLLLLLLLLLLLLLLLMMLMLLLLLLLLLMDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLMLLMLLLLMLLLLLLLLLLLLLLLMMMDMLLLLLMLLLMMLLLLLDDLLLLLLLLMLLLLMLLLMLLLLLLLLLLM","n":["ArgumentsStackLimitReached","BboxOverflow","Black","BlendRegionsLimitReached","Bold","CFFError","Condensed","Custom","DataAfterEndChar","Expanded","ExtraBold","ExtraCondensed","ExtraExpanded","ExtraLight","Face","FaceIndexOutOfBounds","FaceParsingError","FaceTables","Fixed","FromData","GlyphId","InvalidArgumentsStackLength","InvalidItemVariationDataIndex","InvalidNumberOfBlendOperands","InvalidOperator","InvalidSeacCode","InvalidSubroutineIndex","Iso","Italic","LazyArray16","LazyArray32","LazyArrayIter16","LazyArrayIter32","Light","LineMetrics","Macintosh","MalformedFont","Medium","MissingEndChar","MissingMoveTo","NestingLimitReached","NoGlyph","NoHeadTable","NoHheaTable","NoLocalSubroutines","NoMaxpTable","Normal","Normal","Normal","NormalizedCoordinate","Oblique","Other","OutlineBuilder","PNG","PlatformId","RasterGlyphImage","RasterImageFormat","RawFace","RawFaceTables","ReadOutOfBounds","Rect","SIZE","ScriptMetrics","SemiBold","SemiCondensed","SemiExpanded","Style","Tag","Thin","UltraCondensed","UltraExpanded","Unicode","UnknownMagic","UnsupportedOperator","Variation","VariationAxis","Weight","Width","Windows","ZeroBBox","ankr","ankr","ankr","apple_layout","as_u32","ascender","avar","avar","avar","axis","binary_search","binary_search","binary_search_by","binary_search_by","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capital_height","cbdt","cbdt","cbdt","cblc","cblc","cff","cff","cff","cff2","cff2","cff2","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","close","cmap","cmap","cmap","cmp","cmp","count","count","curve_to","data","def_value","default","default","default","default","default","default","descender","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","feat","feat","feat","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fonts_in_collection","format","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bytes","from_bytes_lossy","from_raw_tables","from_slice","from_slice","fvar","fvar","fvar","gdef","gdef","gdef","get","get","get","global_bounding_box","glyf","glyf","glyf","glyph_bounding_box","glyph_hor_advance","glyph_hor_side_bearing","glyph_index","glyph_name","glyph_raster_image","glyph_svg_image","glyph_variation_index","glyph_ver_advance","glyph_ver_side_bearing","glyph_y_origin","gpos","gpos","gpos","gsub","gsub","gsub","gvar","gvar","gvar","has_non_default_variation_coordinates","hash","hash","head","head","head","height","height","height","hhea","hhea","hhea","hidden","hmtx","hmtx","hmtx","hvar","hvar","hvar","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","is_bold","is_empty","is_italic","is_monospaced","is_null","is_oblique","is_regular","is_variable","italic_angle","kern","kern","kern","kerx","kerx","kerx","last","len","len","line_gap","line_to","loca","loca","max_value","maxp","maxp","maxp","min_value","morx","morx","morx","move_to","mvar","mvar","mvar","name","name","name","name_id","name_id","names","new","new","next","next","number_of_glyphs","opentype_layout","os2","os2","os2","outline_glyph","parse","parse","parse","parse","partial_cmp","partial_cmp","pixels_per_em","position","post","post","post","provide","quad_to","range","sbix","sbix","sbix","set_variation","slice","strikeout_metrics","style","subscript_metrics","superscript_metrics","svg","svg","svg","table","table_data","tables","tag","thickness","to_bytes","to_chars","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","trak","trak","trak","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","typographic_ascender","typographic_descender","typographic_line_gap","underline_metrics","units_per_em","value","variation_axes","variation_coordinates","vertical_ascender","vertical_descender","vertical_height","vertical_line_gap","vhea","vhea","vhea","vmtx","vmtx","vorg","vorg","vorg","vvar","vvar","weight","width","width","width","x","x_height","x_max","x_min","x_offset","x_size","y","y_max","y_min","y_offset","y_size","Point","Table","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","eq","fmt","fmt","from","from","into","into","parse","parse","points","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","x","y","ExtendedStateTable","GenericStateEntry","Lookup","StateEntry","StateTable","ValueOffset","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","class","class","class","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","entry","entry","extra","flags","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","has_advance","has_mark","has_offset","has_push","has_reset","into","into","into","into","into","kerning","new_state","new_state","next","parse","parse","parse","state","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","value","value_offset","DELETED_GLYPH","END_OF_TEXT","OUT_OF_BOUNDS","START_OF_TEXT","AxisValueMap","SegmentMaps","SegmentMapsIter","Table","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","fmt","fmt","fmt","from","from","from","from","from_coordinate","into","into","into","into","into_iter","into_iter","len","map_coordinates","next","parse","parse","segment_maps","to_coordinate","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Table","borrow","borrow_mut","clone","clone_into","fmt","from","get","into","parse","to_owned","try_from","try_into","type_id","Table","borrow","borrow_mut","clone","clone_into","fmt","from","into","parse","to_owned","try_from","try_into","type_id","Table","borrow","borrow_mut","clone","clone_into","fmt","from","glyph_name","into","outline","parse","to_owned","try_from","try_into","type_id","Table","borrow","borrow_mut","clone","clone_into","default","fmt","from","into","outline","parse","to_owned","try_from","try_into","type_id","ByteEncodingTable","Format","Found","GlyphVariationResult","HighByteMappingThroughTable","ManyToOneRangeMappings","MixedCoverage","SegmentMappingToDeltaValues","SegmentedCoverage","Subtable","Subtable0","Subtable10","Subtable12","Subtable13","Subtable14","Subtable2","Subtable4","Subtable6","Subtables","SubtablesIter","Table","TrimmedArray","TrimmedTableMapping","UnicodeVariationSequences","UseDefault","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","codepoints","codepoints","codepoints","codepoints","codepoints","codepoints","codepoints","codepoints","default","encoding_id","eq","first_code_point","first_code_point","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get","glyph_ids","glyph_index","glyph_index","glyph_index","glyph_index","glyph_index","glyph_index","glyph_index","glyph_index","glyph_index","glyph_variation_index","glyphs","glyphs","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","is_unicode","len","next","parse","parse","parse","parse","parse","parse","parse","parse","parse","platform_id","subtables","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","FeatureName","FeatureNames","FeatureNamesIter","SettingName","Table","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default_setting_index","exclusive","feature","find","fmt","fmt","fmt","fmt","from","from","from","from","from","get","into","into","into","into","into","into_iter","into_iter","len","name_index","name_index","names","next","parse","parse","setting","setting_names","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","Table","VariationAxis","axes","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","def_value","eq","fmt","fmt","from","from","hidden","into","into","max_value","min_value","name_id","parse","parse","tag","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Base","Component","GlyphClass","Ligature","Mark","Table","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","default","eq","fmt","from","from","glyph_class","glyph_mark_attachment_class","glyph_variation_delta","has_glyph_classes","hash","into","into","is_mark_glyph","parse","partial_cmp","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Table","borrow","borrow_mut","clone","clone_into","fmt","from","into","outline","parse","to_owned","try_from","try_into","type_id","Anchor","AnchorMatrix","ChainContext","ClassMatrix","Context","Cursive","CursiveAdjustment","CursiveAnchorSet","Device","Format1","Format1","Format2","Format2","Hinting","HintingDevice","LigatureArray","MarkArray","MarkToBase","MarkToBaseAdjustment","MarkToLigature","MarkToLigatureAdjustment","MarkToMark","MarkToMarkAdjustment","Pair","PairAdjustment","PairSet","PairSets","PositioningSubtable","Single","SingleAdjustment","ValueRecord","ValueRecordsArray","Variation","VariationDevice","anchors","base_coverage","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cols","coverage","coverage","coverage","coverage","default","entry","exit","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get","get","get","get","get","get","get","inner_index","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","len","len","len","len","len","ligature_array","ligature_coverage","mark1_coverage","mark2_coverage","mark2_matrix","mark_coverage","mark_coverage","marks","marks","marks","outer_index","parse","rows","sets","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","x","x_advance","x_advance_device","x_delta","x_device","x_placement","x_placement_device","y","y_advance","y_advance_device","y_delta","y_device","y_placement","y_placement_device","classes","coverage","coverage","matrix","sets","coverage","coverage","value","values","Alternate","AlternateSet","AlternateSets","AlternateSubstitution","ChainContext","Context","Format1","Format2","Ligature","Ligature","LigatureSet","LigatureSets","LigatureSubstitution","Multiple","MultipleSubstitution","ReverseChainSingle","ReverseChainSingleSubstitution","Sequence","SequenceList","Single","SingleSubstitution","SubstitutionSubtable","alternate_sets","alternates","backtrack_coverages","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","components","coverage","coverage","coverage","coverage","coverage","coverage","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","glyph","into","into","into","into","into","into","into","into","into","is_reverse","ligature_sets","lookahead_coverages","parse","sequences","substitutes","substitutes","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","coverage","coverage","delta","substitutes","Table","borrow","borrow_mut","clone","clone_into","fmt","from","into","outline","parse","to_owned","try_from","try_into","type_id","IndexToLocationFormat","Long","Short","Table","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","fmt","fmt","from","from","global_bbox","index_to_location_format","into","into","parse","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","units_per_em","Table","ascender","borrow","borrow_mut","clone","clone_into","descender","fmt","from","into","line_gap","number_of_metrics","parse","to_owned","try_from","try_into","type_id","Metrics","Table","advance","advance","bearings","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","fmt","fmt","from","from","into","into","metrics","number_of_metrics","parse","parse","side_bearing","side_bearing","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Table","advance_offset","borrow","borrow_mut","clone","clone_into","fmt","from","into","parse","side_bearing_offset","to_owned","try_from","try_into","type_id","Format","Format0","Format1","Format2","Format3","KerningPair","Subtable","Subtable0","Subtable2","Subtable3","Subtables","SubtablesIter","Table","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","from","from","from","from","from","from","from","from","from","glyphs_kerning","glyphs_kerning","glyphs_kerning","glyphs_kerning","has_cross_stream","has_state_machine","horizontal","into","into","into","into","into","into","into","into","into","into_iter","into_iter","left","len","next","pair","pairs","parse","parse","parse","parse","parse","right","subtables","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","variable","AnchorPoints","EntryData","Format","Format0","Format1","Format2","Format4","Format6","Subtable","Subtable0","Subtable1","Subtable2","Subtable4","Subtable6","Subtables","SubtablesIter","Table","action_index","anchor_points","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","deref","deref","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","from","from","from","from","from","from","from","from","from","from","from","from","get","glyphs_kerning","glyphs_kerning","glyphs_kerning","glyphs_kerning","glyphs_kerning","has_cross_stream","has_state_machine","horizontal","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","next","pairs","parse","parse","state_table","state_table","subtables","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","tuple_count","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","variable","Long","Short","Table","borrow","borrow_mut","clone","clone_into","fmt","from","glyph_range","into","len","parse","to_owned","try_from","try_into","type_id","Table","borrow","borrow_mut","clone","clone_into","fmt","from","into","number_of_glyphs","parse","to_owned","try_from","try_into","type_id","Chain","Chains","ChainsIter","Contextual","ContextualEntryData","ContextualSubtable","Coverage","Feature","Insertion","InsertionEntryData","InsertionSubtable","Ligature","LigatureSubtable","NonContextual","Rearrangement","Subtable","SubtableKind","Subtables","SubtablesIter","Table","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chains","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","components","coverage","current_index","current_insert_index","default_flags","disable_flags","enable_flags","feature_flags","features","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","glyphs","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","is_all_directions","is_backwards","is_logical","is_vertical","kind","kind","ligature_actions","ligatures","lookup","mark_index","marked_insert_index","next","next","parse","parse","parse","parse","setting","state","state","state","subtables","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Table","borrow","borrow_mut","clone","clone_into","fmt","from","into","metric_offset","parse","to_owned","try_from","try_into","type_id","Custom","Iso","Macintosh","Name","Names","NamesIter","PlatformId","Table","Unicode","Windows","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","count","default","default","encoding_id","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","get","into","into","into","into","into","into_iter","into_iter","is_unicode","language_id","len","name","name_id","name_id","names","next","parse","parse","platform_id","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","COMPATIBLE_FULL","COPYRIGHT_NOTICE","DARK_BACKGROUND_PALETTE","DESCRIPTION","DESIGNER","DESIGNER_URL","FAMILY","FULL_NAME","LICENSE","LICENSE_URL","LIGHT_BACKGROUND_PALETTE","MANUFACTURER","POST_SCRIPT_CID","POST_SCRIPT_NAME","SAMPLE_TEXT","SUBFAMILY","TRADEMARK","TYPOGRAPHIC_FAMILY","TYPOGRAPHIC_SUBFAMILY","UNIQUE_ID","VARIATIONS_POST_SCRIPT_NAME_PREFIX","VENDOR_URL","VERSION","WWS_FAMILY","WWS_SUBFAMILY","COMPATIBLE_FULL","COPYRIGHT_NOTICE","DARK_BACKGROUND_PALETTE","DESCRIPTION","DESIGNER","DESIGNER_URL","FAMILY","FULL_NAME","LICENSE","LICENSE_URL","LIGHT_BACKGROUND_PALETTE","MANUFACTURER","POST_SCRIPT_CID","POST_SCRIPT_NAME","SAMPLE_TEXT","SUBFAMILY","TRADEMARK","TYPOGRAPHIC_FAMILY","TYPOGRAPHIC_SUBFAMILY","UNIQUE_ID","VARIATIONS_POST_SCRIPT_NAME_PREFIX","VENDOR_URL","VERSION","WWS_FAMILY","WWS_SUBFAMILY","ChainedContextLookup","ChainedSequenceRule","ChainedSequenceRuleSet","ChainedSequenceRuleSets","Class","ClassDefinition","ContextLookup","Coverage","Feature","FeatureIndex","FeatureList","FeatureVariations","Format1","Format1","Format1","Format1","Format2","Format2","Format2","Format2","Format3","Format3","LanguageIndex","LanguageSystem","LanguageSystemList","LayoutTable","Lookup","LookupFlags","LookupIndex","LookupList","LookupSubtable","LookupSubtables","LookupSubtablesIter","RangeRecord","RecordList","RecordListItem","RecordListIter","Script","ScriptIndex","ScriptList","SequenceLookupRecord","SequenceRule","SequenceRuleSet","SequenceRuleSets","VariationIndex","backtrack","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","contains","coverage","coverage","default_language","end","feature_indices","features","find","find_index","find_substitute","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get","get","get","get","ignore_base_glyphs","ignore_flags","ignore_ligatures","ignore_marks","index","input","input","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","is_empty","languages","len","len","lookahead","lookup_indices","lookup_list_index","lookups","lookups","lookups","mark_attachment_type","mark_filtering_set","next","next","parse","parse","parse","parse","parse","parse","parse","parse","required_feature","right_to_left","scripts","sequence_index","start","subtables","tag","tag","tag","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","use_mark_filtering_set","value","variations","backtrack_classes","backtrack_coverages","coverage","coverage","coverage","input_classes","input_coverages","lookahead_classes","lookahead_coverages","lookups","sets","sets","classes","records","start","classes","coverage","coverage","coverage","coverages","lookups","sets","sets","glyphs","records","Black","Bold","Condensed","Expanded","ExtraBold","ExtraCondensed","ExtraExpanded","ExtraLight","Italic","Light","Medium","Normal","Normal","Normal","Oblique","Other","ScriptMetrics","SemiBold","SemiCondensed","SemiExpanded","Style","Table","Thin","UltraCondensed","UltraExpanded","Weight","Width","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capital_height","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","default","default","default","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","hash","hash","hash","hash","into","into","into","into","into","is_bold","parse","partial_cmp","strikeout_metrics","style","subscript_metrics","superscript_metrics","to_number","to_number","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","typographic_ascender","typographic_descender","typographic_line_gap","use_typographic_metrics","version","weight","width","windows_ascender","windows_descender","x_height","x_offset","x_size","y_offset","y_size","Names","Table","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","from","from","get","into","into","is_monospaced","italic_angle","len","names","parse","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","underline_metrics","Strike","Strikes","StrikesIter","Table","best_strike","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","fmt","fmt","fmt","from","from","from","from","get","get","into","into","into","into","into_iter","into_iter","len","len","next","parse","pixels_per_em","ppi","strikes","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","SvgDocumentsList","SvgDocumentsListIter","Table","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","count","documents","find","fmt","fmt","from","from","from","get","into","into","into","into_iter","into_iter","len","next","parse","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Table","Track","TrackData","Tracks","TracksIter","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","fmt","fmt","fmt","fmt","from","from","from","from","from","get","horizontal","into","into","into","into","into","into_iter","into_iter","len","name_index","next","parse","sizes","to_owned","to_owned","to_owned","to_owned","tracks","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","value","values","vertical","Table","ascender","borrow","borrow_mut","clone","clone_into","default","descender","fmt","from","into","line_gap","number_of_metrics","parse","to_owned","try_from","try_into","type_id","Table","VerticalOriginMetrics","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default_y","fmt","fmt","from","from","glyph_id","glyph_y_origin","into","into","metrics","parse","parse","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","y"],"q":["ttf_parserttf_parser::ankr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ttf_parser::apple_layout","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ttf_parser::apple_layout::class","","","ttf_parser::apple_layout::state","ttf_parser::avar","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ttf_parser::cbdt","","","","","","","","","","","","","","ttf_parser::cblc","","","","","","","","","","","","","ttf_parser::cff","","","","","","","","","","","","","","","ttf_parser::cff2","","","","","","","","","","","","","","","ttf_parser::cmapttf_parser::feat","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ttf_parser::fvar","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ttf_parser::gdef","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ttf_parser::glyf","","","","","","","","","","","","","","ttf_parser::gposttf_parser::gpos::PairAdjustment","","","","","ttf_parser::gpos::SingleAdjustment","","","","ttf_parser::gsub","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ttf_parser::gsub::SingleSubstitution","","","","ttf_parser::gvar","","","","","","","","","","","","","","ttf_parser::head","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ttf_parser::hhea","","","","","","","","","","","","","","","","","ttf_parser::hmtx","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ttf_parser::hvar","","","","","","","","","","","","","","","ttf_parser::kern","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ttf_parser::kerxttf_parser::loca","","","","","","","","","","","","","","","","","ttf_parser::maxp","","","","","","","","","","","","","","ttf_parser::morxttf_parser::mvar","","","","","","","","","","","","","","ttf_parser::name","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ttf_parser::name::name_id","","","","","","","","","","","","","","","","","","","","","","","","","ttf_parser::name_id","","","","","","","","","","","","","","","","","","","","","","","","","ttf_parser::opentype_layoutttf_parser::opentype_layout::ChainedContextLookup","","","","","","","","","","","","ttf_parser::opentype_layout::ClassDefinition","","","ttf_parser::opentype_layout::ContextLookup","","","","","","","","ttf_parser::opentype_layout::Coverage","","ttf_parser::os2","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ttf_parser::post","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ttf_parser::sbix","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ttf_parser::svg","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ttf_parser::trak","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ttf_parser::vhea","","","","","","","","","","","","","","","","","","ttf_parser::vorg","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","A list of errors that can occur during a CFF glyph …","","","","","","","","","A font face.","The face index is larger than the number of faces in the …","A list of font face parsing errors.","Parsed face tables.","A 32-bit signed fixed-point number (16.16).","A trait for parsing raw binary data of fixed size.","A type-safe wrapper for glyph ID.","","","","","","","","A form that is generally cursive in nature.","A slice-like container that converts internal binary data …","A slice-like container that converts internal binary data …","An iterator over <code>LazyArray16</code>.","An iterator over <code>LazyArray32</code>.","","A line metrics.","","An attempt to read out of bounds detected.","","","","","","The <code>head</code> table is missing or malformed.","The <code>hhea</code> table is missing or malformed.","","The <code>maxp</code> table is missing or malformed.","","","A face that is neither italic not obliqued.","A variation coordinate in a normalized coordinate system.","A typically-sloped version of the regular face.","","A trait for glyph outline construction.","","A platform ID.","A glyph’s raster image.","A glyph raster image format.","A raw font face.","A list of all supported tables as raw data.","","A rectangle.","Object’s raw data size.","A script metrics used by subscript and superscript.","","","","A face style.","A 4-byte tag.","","","","","Face data must start with <code>0x00010000</code>, <code>0x74727565</code>, …","","A font variation value.","A variation axis.","A face weight.","A face width.","","","An Anchor Point Table implementation.","","","This module contains Apple Advanced Typography Layout …","Returns tag value as <code>u32</code> number.","Returns a horizontal face ascender.","An Axis Variations Table implementation.","","","An axis tag name.","Performs a binary search by specified <code>key</code>.","Performs a binary search by specified <code>key</code>.","Performs a binary search using specified closure.","Performs a binary search using specified closure.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns face’s capital height.","A Color Bitmap Data Table implementation.","","","A Color Bitmap Location Table implementation.","","A Compact Font Format Table implementation.","","","A Compact Font Format 2 Table implementation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Appends a ClosePath segment.","A Character to Glyph Index Mapping Table implementation.","","","","","","","Appends a CurveTo segment.","A raw image data. It’s up to the caller to decode it.","","","","","","","","Returns a horizontal face descender.","","","","","","","","","","","A Feature Name Table implementation.","","","","","","","","","","","","","","","","","","","","Returns the number of fonts stored in a TrueType font …","An image format.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new coordinate.","Returns the argument unchanged.","Creates a new coordinate.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a <code>Tag</code> from bytes.","Creates a <code>Tag</code> from bytes.","Creates a new <code>Face</code> from provided <code>RawFaceTables</code>.","Creates a new <code>RawFace</code> from a raw data.","Creates a new <code>Face</code> from a raw data.","A Font Variations Table implementation.","","","A Glyph Definition Table implementation.","","","Returns a value at <code>index</code>.","Returns a value at <code>index</code>.","Returns the coordinate value as f2.14.","Returns a bounding box that large enough to enclose any …","A Glyph Data Table implementation.","","","Returns a tight glyph bounding box.","Returns glyph’s horizontal advance.","Returns glyph’s horizontal side bearing.","Resolves a Glyph ID for a code point.","Returns glyph’s name.","Returns a reference to a glyph’s raster image.","Returns a reference to a glyph’s SVG image.","Resolves a variation of a Glyph ID from two code points.","Returns glyph’s vertical advance.","Returns glyph’s vertical side bearing.","Returns glyph’s vertical origin according to Vertical …","A Glyph Positioning Table implementation.","","","A Glyph Substitution Table implementation.","","","A Glyph Variations Table implementation.","","","Checks that face has non-default variation coordinates.","","","A Font Header Table implementation.","","","Returns rect’s height.","Returns face’s height.","Image height.","A Horizontal Header Table implementation.","","","","A Horizontal/Vertical Metrics Table implementation.","","","A Horizontal/Vertical Metrics Variations Table …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Checks that face is marked as <em>Bold</em>.","Checks if array is empty.","Checks that face is marked as <em>Italic</em>.","Checks that face is marked as <em>Monospaced</em>.","Checks if tag is null / <code>[0, 0, 0, 0]</code>.","Checks that face is marked as <em>Oblique</em>.","Checks that face is marked as <em>Regular</em>.","Checks that face is variable.","Returns face’s italic angle.","A Kerning Table implementation.","","","An Extended Kerning Table implementation.","","","Returns the last value.","Returns array’s length.","Returns array’s length.","Returns a horizontal face line gap.","Appends a LineTo segment.","An Index to Location Table implementation.","","","A Maximum Profile Table implementation.","","","","An Extended Glyph Metamorphosis Table implementation.","","","Appends a MoveTo segment.","A Metrics Variations Table implementation.","","","A Naming Table implementation.","","","A list of name ID’s.","An axis name in the <code>name</code> table.","Returns a list of names.","Creates a new <code>LazyArray</code>.","Creates a new <code>LazyArray</code>.","","","Returns a total number of glyphs in the face.","This module contains OpenType Layout supplementary tables …","A OS/2 and Windows Metrics Table implementation.","","","Outlines a glyph and returns its tight bounding box.","Parses an object from a raw data.","","","","","","A pixels per em of the selected strike.","Line position.","A PostScript Table implementation.","","","","Appends a QuadTo segment.","Returns a <code>RangeRecord</code> for a glyph.","A Standard Bitmap Graphics Table implementation.","","","Sets a variation axis coordinate.","Returns sub-array.","Returns face’s strikeout metrics.","Returns face style.","Returns face’s subscript metrics.","Returns face’s superscript metrics.","An SVG Table implementation.","","","Returns the raw data of a selected table.","Returns the raw data of a selected table.","Returns low-level face tables.","","Line thickness.","Returns tag as 4-element byte array.","Returns tag as 4-element byte array.","","","","","","","","","","","","","","","","","","","","","","A Tracking Table implementation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a horizontal typographic face ascender.","Returns a horizontal typographic face descender.","Returns a horizontal typographic face line gap.","Returns face’s underline metrics.","Returns face’s units per EM.","An axis value.","Returns an iterator over variation axes.","Returns the current normalized variation coordinates.","Returns a vertical face ascender.","Returns a vertical face descender.","Returns a vertical face height.","Returns a vertical face line gap.","A Vertical Header Table implementation.","","","","","A Vertical Origin Table implementation.","","","","","Returns face’s weight.","Returns rect’s width.","Returns face’s width.","Image width.","Horizontal offset.","Returns face’s x height.","","","X offset.","Horizontal face size.","Vertical offset.","","","Y offset.","Vertical face size.","An anchor point.","An Anchor Point Table.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Parses a table from raw data.","Returns a list of anchor points for the specified glyph.","","","","","","","","","","","An Extended State Table.","A State Table entry.","A lookup table.","A legacy state entry used by StateTable.","A State Table.","A type-safe wrapper for a kerning value offset.","","","","","","","","","","","Predefined classes.","Returns a glyph class.","Returns a glyph class.","","","","","","","","","","","Returns a class entry.","Returns a class entry.","Additional data.","Entry flags.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","If set, advance to the next glyph before going to the new …","If set, remember this glyph as the marked glyph.","Checks that entry has an offset.","If set, push this glyph on the kerning stack.","If set, reset the kerning data (clear the stack).","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns kerning at offset.","Produces a new state.","A new state.","Returns the next offset.","","Parses an Extended State Table from a stream.","Parses a lookup table from raw data.","Predefined states.","","","","","","","","","","","","","","","","","","","","","Returns a value associated with the specified glyph.","Returns a value offset.","","","","","An axis value map.","A list of segment maps.","An iterator over maps.","An Axis Variations Table.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","A normalized coordinate value obtained using default …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns the number of segments.","Maps coordinates.","","","Parses a table from raw data.","The segment maps array — one segment map for each axis …","The modified, normalized coordinate value.","","","","","","","","","","","","","","","","A Color Bitmap Data Table.","","","","","","Returns the argument unchanged.","Returns a raster image for the glyph.","Calls <code>U::from(self)</code>.","Parses a table from raw data.","","","","","A Color Bitmap Location Table.","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Parses a table from raw data.","","","","","A Compact Font Format Table.","","","","","","Returns the argument unchanged.","Returns a glyph name.","Calls <code>U::from(self)</code>.","Outlines a glyph.","Parses a table from raw data.","","","","","A Compact Font Format 2 Table.","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Outlines a glyph.","Parses a table from raw data.","","","","","","A character encoding subtable variant.","Glyph was found in the variation encoding table.","A result of a variation glyph mapping.","","","","","","A character encoding subtable.","A format 0 subtable.","A format 10 subtable.","A format 12 subtable.","A format 13 subtable.","A format 14 subtable.","A format 2 subtable.","A format 4 subtable.","A format 6 subtable.","A list of subtables.","An iterator over <code>Subtables</code>.","A Character to Glyph Index Mapping Table.","","","","Glyph should be looked in other, non-variation tables.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>f</code> for each codepoint defined in this table.","Calls <code>f</code> for each codepoint defined in this table.","Calls <code>f</code> for each codepoint defined in this table.","Calls <code>f</code> for each codepoint defined in this table.","Calls <code>f</code> for each codepoint defined in this table.","Calls <code>f</code> for each codepoint defined in this table.","Calls <code>f</code> for each codepoint defined in this table.","Calls <code>f</code> for all codepoints contained in this subtable.","","Subtable encoding.","","First character code of subrange.","First character code covered.","","","","","","","","","","","","","","A subtable format.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a subtable at an index.","Just a list of 256 8bit glyph IDs.","Returns a glyph index for a code point.","Returns a glyph index for a code point.","Returns a glyph index for a code point.","Returns a glyph index for a code point.","Returns a glyph index for a code point.","Returns a glyph index for a code point.","Returns a glyph index for a code point.","Returns a glyph index for a code point.","Maps a character to a glyph ID.","Resolves a variation of a glyph ID from two code points.","Array of glyph indexes for character codes in the range.","Array of glyph indices for the character codes covered.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Checks that the current encoding is Unicode compatible.","Returns the number","","Parses a subtable from raw data.","Parses a subtable from raw data.","Parses a subtable from raw data.","Parses a subtable from raw data.","Parses a subtable from raw data.","Parses a subtable from raw data.","Parses a subtable from raw data.","Parses a subtable from raw data.","Parses a table from raw data.","Subtable platform.","A list of subtables.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A feature names.","A list fo feature names.","An iterator over <code>FeatureNames</code>.","A setting name.","A Feature Name Table.","","","","","","","","","","","","","","","","","","","The index of the default setting in the <code>setting_names</code>.","The feature’s exclusive settings. If set, the feature …","The feature’s ID.","Finds a feature name by ID.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a feature name at an index.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns the number of feature names.","The <code>name</code> table index for the feature’s name in a …","The <code>name</code> table index for the feature’s name in a …","A list of feature names. Sorted by <code>FeatureName.feature</code>.","","","Parses a table from raw data.","The setting.","The feature’s setting names.","","","","","","","","","","","","","","","","","","","","A Font Variations Table.","A variation axis.","A list of variation axes.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","An axis name in the <code>name</code> table.","","Parses a table from raw data.","","","","","","","","","","","","A glyph class.","","","A Glyph Definition Table.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns glyph’s class according to Glyph Class …","Returns glyph’s mark attachment class according to Mark …","Returns glyph’s variation delta at a specified index …","Checks that face has Glyph Class Definition Table.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Checks that glyph is a mark according to Mark Glyph Sets …","Parses a table from raw data.","","","","","","","","","","A Glyph Data Table.","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Outlines a glyph.","Parses a table from raw data.","","","","","An Anchor Table.","An <code>Anchor</code> parsing helper.","","A <code>ValueRecord</code> pairs matrix used by <code>PairAdjustment</code>.","","","A Cursive Attachment Positioning Subtable.","A list of entry and exit <code>Anchor</code> pairs.","A Device Table.","","","","","","A Device Table hinting values.","An array or ligature anchor matrices.","A Mark Array.","","A Mark-to-Base Attachment Positioning Subtable.","","A Mark-to-Ligature Attachment Positioning Subtable.","","A Mark-to-Mark Attachment Positioning Subtable.","","A Pair Adjustment Positioning Subtable.","A <code>ValueRecord</code> pairs set used by <code>PairAdjustment</code>.","A list of <code>PairSet</code>s.","A glyph positioning lookup subtable enumeration.","","A Single Adjustment Positioning Subtable.","A Value Record.","An array of Value Records.","","A Device Table indexes into Item Variation Store.","An anchors matrix.","A base coverage.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Number of columns in the matrix.","Returns the subtable coverage.","Returns the subtable coverage.","Returns the subtable coverage.","","","Returns an entry <code>Anchor</code> at index.","Returns an exit <code>Anchor</code> at index.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a <code>ValueRecord</code> at index.","Returns a <code>ValueRecord</code> pair using the second glyph.","Returns a value at <code>index</code>.","Returns a <code>ValueRecord</code> pair using specified classes.","Returns an <code>AnchorMatrix</code> at index.","Returns contained data at index.","Returns an <code>Anchor</code> at position.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns array’s length.","Returns array’s length.","Returns the number of items.","Returns the array length.","Returns the array length.","","","","","","A mark coverage.","","A list of mark anchors.","","","","","Number of rows in the matrix.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Horizontal value, in design units.","Horizontal adjustment for advance, in design units — …","A <code>Device</code> table with horizontal adjustment for advance.","Returns X-axis delta.","A <code>Device</code> table with horizontal value.","Horizontal adjustment for placement, in design units.","A <code>Device</code> table with horizontal adjustment for placement.","Vertical value, in design units.","Vertical adjustment for advance, in design units — only …","A <code>Device</code> table with vertical adjustment for advance.","Returns Y-axis delta.","A <code>Device</code> table with vertical value.","Vertical adjustment for placement, in design units.","A <code>Device</code> table with vertical adjustment for placement.","","","","","","","","","","","A list of glyphs for Alternate Substitution Subtable.","A set of <code>AlternateSet</code>.","A Alternate Substitution Subtable.","","","","","Glyph components for one ligature.","","A <code>Ligature</code> set.","A list of <code>Ligature</code> sets.","A Ligature Substitution Subtable.","","A Multiple Substitution Subtable.","","A Reverse Chaining Contextual Single Substitution Subtable.","A sequence of glyphs for Multiple Substitution Subtable.","A list of <code>Sequence</code> tables.","","A Single Substitution Subtable.","A glyph substitution lookup subtable enumeration.","","Array of alternate glyph IDs, in arbitrary order.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Glyph components for one ligature.","Returns the subtable coverage.","Returns the subtable coverage.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Ligature to substitute.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Checks that the current subtable is <em>Reverse Chaining </em>…","","","","","A list of substitute glyphs.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A Glyph Variations Table.","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Outlines a glyph.","Parses a table from raw data.","","","","","An index format used by the Index to Location Table.","","","A Font Header Table.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","A bounding box that large enough to enclose any glyph from …","An index format used by the Index to Location Table.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Parses a table from raw data.","","","","","","","","","Units per EM.","A Horizontal Header Table.","Face ascender.","","","","","Face descender.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Face line gap.","Number of metrics in the <code>hmtx</code> table.","Parses a table from raw data.","","","","","Horizontal/Vertical Metrics.","A Horizontal/Vertical Metrics Table.","Returns advance for a glyph.","Width/Height advance for <code>hmtx</code>/<code>vmtx</code>.","Side bearings for glyph IDs greater than or equal to the …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","A list of metrics indexed by glyph ID.","Sum of long metrics + bearings.","","Parses a table from raw data.","Returns side bearing for a glyph.","Left/Top side bearing for <code>hmtx</code>/<code>vmtx</code>.","","","","","","","","","A Horizontal/Vertical Metrics Variations Table.","Returns advance offset for a glyph.","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Parses a table from raw data.","Returns side bearing offset for a glyph.","","","","","A kerning subtable format.","","","","","A kerning pair.","A kerning subtable.","A format 0 subtable.","A format 2 subtable.","A format 3 subtable.","A list of subtables.","An iterator over kerning subtables.","A Kerning Table.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Subtable format.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns kerning for a pair of glyphs.","Returns kerning for a pair of glyphs.","Returns kerning for a pair of glyphs.","Returns kerning for a pair of glyphs.","Indicates that subtable has a cross-stream values.","Indicates that subtable uses a state machine.","Indicates that subtable is for horizontal text.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns left glyph ID.","Returns the number of subtables.","","Glyphs pair.","A list of kerning pairs.","","Parses a subtable from raw data.","Parses a subtable from raw data.","Parses a subtable from raw data.","Parses a table from raw data.","Returns right glyph ID.","A list of subtables.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Kerning value.","Indicates that subtable is variable.","A container of Anchor Points used by <code>Subtable4</code>.","A state machine entry.","An extended kerning subtable format.","","","","","","A kerning subtable.","A format 0 subtable.","A format 1 subtable.","A format 2 subtable.","A format 4 subtable.","A format 6 subtable.","A list of extended kerning subtables.","An iterator over extended kerning subtables.","An Extended Kerning Table.","An action index.","Anchor points.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Subtable format.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a mark and current anchor points at action index.","Returns kerning for a pair of glyphs.","Returns kerning at action index.","Returns kerning for a pair of glyphs.","Returns kerning for a pair of glyphs.","Returns kerning for a pair of glyphs.","Indicates that subtable has a cross-stream values.","Indicates that subtable uses a state machine.","Indicates that subtable is for horizontal text.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","A list of kerning pairs.","","Parses a table from raw data.","A state table.","A state table.","A list of subtables.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The tuple count.","","","","","","","","","","","","","Indicates that subtable is variable.","Long offsets.","Short offsets.","An Index to Location Table.","","","","","","Returns the argument unchanged.","Returns glyph’s range in the <code>glyf</code> table.","Calls <code>U::from(self)</code>.","Returns offsets length.","Parses a table from raw data.","","","","","A Maximum Profile Table.","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","The total number of glyphs in the face.","Parses a table from raw data.","","","","","A metamorphosis chain.","A list of metamorphosis chains.","An iterator over metamorphosis chains.","","A contextual subtable state table trailing data.","A contextual subtable.","A subtable coverage.","The feature table is used to compute the sub-feature flags …","","A contextual subtable state table trailing data.","An insertion subtable.","","A ligature subtable.","","","A subtable in a metamorphosis chain.","A subtable kind.","A list of subtables in a metamorphosis chain.","An iterator over a metamorphosis chain subtables.","An Extended Glyph Metamorphosis Table.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A list of metamorphosis chains.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Ligature components.","A subtable coverage.","A current index.","A current insert index.","Default chain features.","Complement of flags for the settings that this feature and …","Flags for the settings that this feature and setting …","Subtable feature flags.","A list of chain features.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Insertion glyphs.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","If true, this subtable will be applied to both horizontal …","If true, this subtable will process glyphs in descending …","If true, this subtable will process glyphs in logical order","If true, this subtable will only be applied to vertical …","The type of feature.","A subtable kind.","Ligature actions.","Ligatures.","Returns a Lookup at index.","A mark index.","A marked insert index.","","","","","","Parses a table from raw data.","The feature’s setting (aka selector).","The contextual glyph substitution state table.","A state table.","A state table.","A list of chain subtables.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A Metrics Variations Table.","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns a metric offset by tag.","Parses a table from raw data.","","","","","","","","A Name Record.","A list of face names.","An iterator over face names.","A platform ID.","A Naming Table.","","","","","","","","","","","","","","","","","","","","","","","","","","A platform-specific encoding ID.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a name at index.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Checks that the current Name data has a Unicode encoding.","A language ID.","Returns a number of name records.","A raw name data.","A list of name ID’s.","A Name ID.","A list of names.","","","Parses a table from raw data.","A platform ID.","","","","","","Returns the Name’s data as a UTF-8 string.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A Chained Contextual Lookup Subtable.","A Chained Sequence Rule.","A set of <code>ChainedSequenceRule</code>.","A list of <code>ChainedSequenceRule</code> sets.","A value of Class Definition Table.","A Class Definition Table.","A Contextual Lookup Subtable.","A Coverage Table.","A Feature.","An index in <code>FeatureList</code>.","A list of <code>Feature</code> records.","A Feature Variations Table.","Simple glyph contexts.","Simple glyph contexts.","","","Class-based glyph contexts.","Class-based glyph contexts.","","","Coverage-based glyph contexts.","Coverage-based glyph contexts.","An index in <code>LanguageSystemList</code>.","A Language System Table.","A list of <code>LanguageSystem</code> records.","A Layout Table.","A Lookup Table.","Lookup table flags.","An index in <code>LookupList</code>.","A list of <code>Lookup</code> values.","A trait for parsing Lookup subtables.","A list of lookup subtables.","An iterator over lookup subtables.","A record that describes a range of glyph IDs.","A data storage used by <code>ScriptList</code>, <code>LanguageSystemList</code> and …","A trait to parse item in <code>RecordList</code>.","An iterator over <code>RecordList</code> values.","A Script Table.","An index in <code>ScriptList</code>.","A list of <code>Script</code> records.","A sequence rule record.","A sequence rule.","A set of <code>SequenceRule</code>s.","A list of <code>SequenceRuleSet</code>s.","An index in <code>FeatureVariations</code>.","Contains either glyph IDs or glyph Classes.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Checks that glyph is present.","Returns the subtable coverage.","Returns the subtable coverage.","Default language.","Last glyph ID in the range","Array of indices into the FeatureList, in arbitrary order.","A list of all supported features.","Returns RecordList value by <code>Tag</code>.","Returns a <code>VariationIndex</code> for variation coordinates.","Returns a <code>Feature</code> at specified indices.","Lookup qualifiers.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Parses a subtable at index.","Returns RecordList value by index.","Returns the coverage index of the glyph or <code>None</code> if it is …","Returns the glyph class of the glyph (zero if it is not …","","","","","Returns RecordList value index by <code>Tag</code>.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Creates an iterator over subtables.","","Checks that RecordList is empty.","List of supported languages, excluding the default one. …","Returns a number of items in the LookupSubtables.","Returns a number of items in the RecordList.","Contains either glyph IDs or glyph Classes.","","","","","A list of all lookups.","","Index into GDEF mark glyph sets structure.","","","Parses raw data.","Parses raw data.","","","","","","","Index of a feature required for this language system.","","A list of all supported scripts.","","First glyph ID in the range","Available subtables.","Script tag.","Language tag.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Coverage Index of first glyph ID in range.","Used to substitute an alternate set of lookup tables to …","","","","","","","","","","","","","","","","","","","","","","","","Array of glyph IDs. Sorted.","Array of glyph ranges. Ordered by <code>RangeRecord.start</code>.","","","","","","","","","A form that is generally cursive in nature.","","","","","A face that is neither italic not obliqued.","A typically-sloped version of the regular face.","","A script metrics used by subscript and superscript.","","","","A face style.","A OS/2 and Windows Metrics Table.","","","","A face weight.","A face width.","","","","","","","","","","","Returns capital height.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Checks if face is bold.","Parses a table from raw data.","","Returns strikeout metrics.","Returns style.","Returns subscript metrics.","Returns superscript metrics.","Returns a numeric representation of a weight.","Returns a numeric representation of a width.","","","","","","","","","","","","","","","","","","","","","Returns typographic ascender.","Returns typographic descender.","Returns typographic line gap.","Checks if typographic metrics should be used.","Table version.","Returns weight class.","Returns face width.","Returns Windows ascender.","Returns Windows descender.","Returns x height.","X offset.","Horizontal face size.","Y offset.","Vertical face size.","A list of glyph names.","A PostScript Table.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns a glyph name by ID.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Flag that indicates that the font is monospaced.","Italic angle in counter-clockwise degrees from the …","Returns names count.","A list of glyph names.","Parses a table from raw data.","","","","","","","","","Underline metrics.","A strike of glyphs.","A list of <code>Strike</code>s.","An iterator over <code>Strikes</code>.","A Standard Bitmap Graphics Table.","Selects the best matching <code>Strike</code> based on <code>pixels_per_em</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a glyph data.","Returns a strike at the index.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns the number of glyphs in this strike.","Returns the number of strikes.","","Parses a table from raw data.","The pixels per EM size for which this strike was designed.","The device pixel density (in PPI) for which this strike …","A list of <code>Strike</code>s.","","","","","","","","","","","","","","","","A list of SVG documents.","An iterator over <code>SvgDocumentsList</code> values.","An SVG Table.","","","","","","","","","","","","","","A list of SVG documents.","Returns a SVG document data by glyph ID.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns SVG document data at index.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns the number of SVG documents in the list.","","Parses a table from raw data.","","","","","","","","","","","","","A Tracking Table.","A single track.","A track data.","A list of tracks.","An iterator over <code>Tracks</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a track at index.","Horizontal track data.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns the number of tracks.","The <code>name</code> table index for the track’s name.","","Parses a table from raw data.","A list of sizes.","","","","","A list of tracks.","","","","","","","","","","","","","","","","A track value.","A list of tracking values for each size.","Vertical track data.","A Vertical Header Table.","Face ascender.","","","","","","Face descender.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Face line gap.","Number of metrics in the <code>vmtx</code> table.","Parses a table from raw data.","","","","","A Vertical Origin Table.","Vertical origin metrics for the Vertical Origin Table.","","","","","","","","","Default origin.","","","Returns the argument unchanged.","Returns the argument unchanged.","Glyph ID.","Returns glyph’s Y origin.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","A list of metrics for each glyph.","","Parses a table from raw data.","","","","","","","","","Y coordinate, in the font’s design coordinate system, of …"],"i":[13,13,47,13,47,0,48,169,13,48,47,48,48,47,0,21,0,0,0,0,0,13,13,13,13,13,13,169,42,0,0,0,0,47,0,169,21,47,13,13,13,13,21,21,13,21,47,48,42,0,42,47,0,19,0,0,0,0,0,13,0,5,0,47,48,48,0,0,47,48,48,169,21,13,0,0,0,0,169,13,0,23,24,0,1,3,0,23,24,16,6,8,6,8,9,6,11,8,12,13,14,15,16,1,17,18,19,20,21,22,23,24,3,9,6,11,8,12,13,14,15,16,1,17,18,19,20,21,22,23,24,3,3,0,23,24,0,23,0,23,24,0,23,24,9,6,11,8,12,13,14,15,16,1,17,18,19,20,21,22,23,24,3,9,6,11,8,12,13,14,15,16,1,17,18,19,20,21,22,23,24,3,38,0,23,24,14,1,11,12,38,20,46,6,11,8,14,15,23,3,13,14,15,16,1,17,18,19,20,21,0,23,24,9,6,8,13,14,15,16,1,1,17,18,19,20,21,21,22,3,0,20,9,6,11,8,12,13,14,15,15,15,16,1,17,18,19,20,21,22,23,24,3,1,1,3,22,3,0,23,24,0,23,24,6,8,15,3,0,23,24,3,3,3,3,3,3,3,3,3,3,3,0,23,24,0,23,24,0,23,24,3,14,1,0,23,24,18,3,20,0,23,24,46,0,23,24,0,23,24,9,6,11,8,12,13,14,15,16,1,17,18,19,20,21,22,23,24,3,6,11,8,12,3,6,3,3,1,3,3,3,3,0,23,24,0,23,24,6,6,8,3,38,0,23,46,0,23,24,46,0,23,24,38,0,23,24,0,23,24,0,46,3,6,8,11,12,3,0,0,23,24,3,5,9,14,1,14,1,20,17,0,23,24,21,38,6,0,23,24,3,6,3,3,3,3,0,23,24,22,3,3,46,17,1,1,9,6,11,8,12,13,14,15,16,1,17,18,19,20,21,22,23,24,3,1,21,0,23,24,9,6,11,8,12,13,14,15,16,1,17,18,19,20,21,22,23,24,3,9,6,11,8,12,13,14,15,16,1,17,18,19,20,21,22,23,24,3,9,6,11,8,12,13,14,15,16,1,17,18,19,20,21,22,23,24,3,3,3,3,3,3,16,3,3,3,3,3,3,0,23,24,23,24,0,23,24,23,24,3,18,3,20,20,3,18,18,43,43,20,18,18,43,43,0,0,49,50,49,50,49,50,49,50,49,49,49,50,49,50,49,50,49,50,50,49,50,49,50,49,50,49,50,49,49,0,0,0,0,0,0,55,56,52,54,57,55,56,52,54,57,0,52,54,55,56,52,54,57,55,56,52,54,57,52,54,55,55,55,56,52,54,57,55,56,52,54,57,55,55,55,55,55,55,56,52,54,57,52,52,55,56,55,54,57,0,55,56,52,54,57,55,56,52,54,57,55,56,52,54,57,55,56,52,54,57,57,55,0,0,0,0,0,0,0,0,62,59,60,61,62,59,60,61,59,60,61,59,60,61,59,60,61,62,59,60,61,59,62,59,60,61,62,60,60,61,62,59,61,61,59,59,60,61,62,59,60,61,62,59,60,61,62,59,60,61,0,63,63,63,63,63,63,63,63,63,63,63,63,63,0,64,64,64,64,64,64,64,64,64,64,64,64,0,65,65,65,65,65,65,65,65,65,65,65,65,65,65,0,66,66,66,66,66,66,66,66,66,66,66,66,66,66,76,0,74,0,76,76,76,76,76,0,0,0,0,0,0,0,0,0,0,0,0,76,76,76,74,81,67,68,69,70,71,72,73,74,75,76,77,78,79,81,67,68,69,70,71,72,73,74,75,76,77,78,79,67,68,69,70,71,72,73,74,75,76,77,78,79,67,68,69,70,71,72,73,74,75,76,77,78,79,67,68,69,70,71,72,73,77,78,77,74,70,71,67,68,69,70,71,72,73,74,75,76,77,78,79,77,81,67,68,69,70,71,72,73,74,75,76,77,78,79,78,67,67,68,69,70,71,72,73,75,77,77,70,71,81,67,68,69,70,71,72,73,74,75,76,77,78,79,81,78,77,78,81,67,68,69,70,71,72,73,75,79,77,79,67,68,69,70,71,72,73,74,75,76,77,78,79,81,67,68,69,70,71,72,73,74,75,76,77,78,79,81,67,68,69,70,71,72,73,74,75,76,77,78,79,81,67,68,69,70,71,72,73,74,75,76,77,78,79,0,0,0,0,0,86,82,83,84,85,86,82,83,84,85,82,83,84,85,82,83,84,85,83,83,83,84,82,83,84,85,86,82,83,84,85,84,86,82,83,84,85,86,84,84,82,83,85,86,82,85,82,83,82,83,84,85,86,82,83,84,85,86,82,83,84,85,86,82,83,84,85,0,0,87,46,87,46,87,46,87,46,87,46,46,46,87,46,87,46,46,87,46,46,46,46,87,46,46,87,46,87,46,87,46,87,88,88,0,88,88,0,88,89,88,89,88,89,88,89,88,89,88,88,88,89,89,89,89,89,88,88,89,89,89,88,88,89,88,89,88,89,88,89,0,91,91,91,91,91,91,91,91,91,91,91,91,91,0,0,112,0,112,112,0,0,0,98,102,98,102,95,0,0,0,112,0,112,0,112,0,112,0,0,0,0,112,0,0,0,95,0,105,105,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,110,98,102,112,104,96,103,103,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,97,99,100,101,107,108,110,94,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,97,100,103,107,108,106,106,111,111,111,105,106,105,106,111,94,112,110,104,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,109,96,96,93,109,96,96,109,96,96,93,109,96,96,212,213,212,212,213,214,215,214,215,123,0,0,0,123,123,115,115,0,123,0,0,0,123,0,123,0,0,0,123,0,0,119,118,122,115,116,117,118,119,120,121,122,123,115,116,117,118,119,120,121,122,123,115,116,117,118,119,120,121,122,123,115,116,117,118,119,120,121,122,123,120,115,123,117,119,121,122,115,116,117,118,119,120,121,122,123,115,116,117,118,119,120,121,122,123,120,115,116,117,118,119,120,121,122,123,123,121,122,123,117,116,122,115,116,117,118,119,120,121,122,123,115,116,117,118,119,120,121,122,123,115,116,117,118,119,120,121,122,123,115,116,117,118,119,120,121,122,123,216,217,216,217,0,124,124,124,124,124,124,124,124,124,124,124,124,124,0,125,125,0,125,126,125,126,125,126,125,126,125,125,126,125,126,126,126,125,126,126,125,126,125,126,125,126,125,126,126,0,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,0,0,128,129,128,129,128,129,128,129,128,129,128,129,128,129,128,129,128,128,128,129,128,128,129,129,128,129,128,129,128,129,128,0,130,130,130,130,130,130,130,130,130,130,130,130,130,130,0,132,132,132,132,0,0,0,0,0,0,0,0,131,132,133,134,135,136,137,138,139,131,132,133,134,135,136,137,138,139,131,132,133,134,135,136,137,138,139,131,132,133,134,135,136,137,138,139,135,131,132,133,134,136,137,138,139,133,131,132,133,134,135,136,137,138,139,133,136,137,138,133,133,133,131,132,133,134,135,136,137,138,139,134,135,131,134,135,131,136,131,136,137,138,139,131,139,131,132,133,134,135,136,137,138,139,131,132,133,134,135,136,137,138,139,131,132,133,134,135,136,137,138,139,131,132,133,134,135,136,137,138,139,131,133,0,0,0,147,147,147,147,147,0,0,0,0,0,0,0,0,0,141,145,140,141,142,143,144,145,146,147,148,149,150,151,140,141,142,143,144,145,146,147,148,149,150,151,140,141,142,143,144,145,146,147,148,149,150,151,140,141,142,143,144,145,146,147,148,149,150,151,142,145,140,141,142,143,144,145,146,147,148,149,151,148,140,141,142,143,144,145,146,147,148,149,150,151,144,140,142,143,146,148,148,148,148,140,141,142,143,144,145,146,147,148,149,150,151,149,150,150,140,141,151,142,145,151,140,141,142,143,144,145,146,147,148,149,150,151,140,141,142,143,144,145,146,147,148,149,150,151,140,141,142,143,144,145,146,147,148,149,150,151,148,140,141,142,143,144,145,146,147,148,149,150,151,148,92,92,0,92,92,92,92,92,92,92,92,92,92,92,92,92,92,0,152,152,152,152,152,152,152,152,152,152,152,152,152,0,0,0,159,0,0,0,0,159,0,0,159,0,159,159,0,0,0,0,0,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,167,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,156,161,154,157,164,153,153,161,164,153,154,155,156,157,158,159,160,161,162,164,165,167,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,158,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,162,163,165,166,160,160,160,160,153,161,156,156,155,154,157,163,166,153,154,157,167,153,155,156,158,164,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,0,168,168,168,168,168,168,168,168,168,168,168,168,168,169,169,169,0,0,0,0,0,169,169,169,170,37,171,172,169,170,37,171,172,169,170,37,171,172,169,170,37,171,172,171,37,172,170,169,169,170,37,172,169,170,37,171,172,37,169,170,37,171,172,37,171,170,170,37,170,0,170,172,171,169,172,170,169,170,37,171,172,170,169,170,37,171,172,169,170,37,171,172,169,170,37,171,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,173,176,113,188,173,176,113,188,173,176,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,177,192,193,173,174,175,176,177,178,179,180,181,183,184,185,186,187,40,113,188,192,193,173,174,175,176,177,178,179,180,181,183,184,185,186,187,40,113,188,173,174,175,176,177,178,179,180,181,183,184,185,186,187,40,113,188,173,174,175,176,177,178,179,180,181,183,184,185,186,187,40,113,188,113,173,176,184,40,185,181,183,187,187,178,173,174,175,176,177,178,179,180,181,183,184,185,186,187,40,113,188,192,193,173,174,175,176,177,178,179,180,181,183,184,185,186,187,40,113,188,179,183,113,188,180,180,180,180,183,174,177,192,193,173,174,175,176,177,178,179,180,181,183,184,185,186,187,40,113,188,192,193,179,183,183,184,179,183,177,186,175,174,177,181,180,178,192,193,191,182,175,180,184,185,186,40,185,180,181,175,40,178,184,185,186,173,174,175,176,177,178,179,180,181,183,184,185,186,187,40,113,188,192,193,173,174,175,176,177,178,179,180,181,183,184,185,186,187,40,113,188,192,193,173,174,175,176,177,178,179,180,181,183,184,185,186,187,40,113,188,192,193,173,174,175,176,177,178,179,180,181,183,184,185,186,187,40,113,188,180,40,181,218,219,220,218,219,218,219,218,219,219,220,218,221,222,221,223,224,223,225,225,225,224,223,226,227,47,47,48,48,47,48,48,47,42,47,47,47,48,42,42,47,0,47,48,48,0,0,47,48,48,0,0,47,48,42,43,194,47,48,42,43,194,194,47,48,42,43,194,47,48,42,43,194,48,47,48,42,47,48,42,43,47,48,42,43,194,47,47,48,42,43,194,47,48,42,43,47,48,42,43,194,194,194,48,194,194,194,194,47,48,47,48,42,43,194,47,48,42,43,194,47,48,42,43,194,47,48,42,43,194,194,194,194,194,194,194,194,194,194,194,43,43,43,43,0,0,195,196,195,196,195,196,195,196,195,195,196,195,196,195,195,196,196,196,195,196,196,195,196,195,196,195,196,195,196,196,0,0,0,0,197,200,198,199,197,200,198,199,197,198,199,197,198,199,197,198,199,197,200,198,199,197,198,199,200,198,199,197,200,199,198,199,200,197,198,198,197,198,199,197,200,198,199,197,200,198,199,197,200,198,199,197,0,0,0,201,202,203,201,202,203,201,202,203,201,202,203,202,203,201,201,203,201,202,203,201,201,202,203,201,202,201,202,203,201,202,203,201,202,203,201,202,203,201,202,203,0,0,0,0,0,208,204,205,206,207,208,204,205,206,207,204,205,206,207,204,205,206,207,205,206,204,205,206,207,208,204,205,206,207,205,207,208,204,205,206,207,208,205,205,204,208,207,206,204,205,206,207,206,208,204,205,206,207,208,204,205,206,207,208,204,205,206,207,204,204,207,0,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,0,0,210,211,210,211,210,211,210,211,211,210,211,210,211,210,211,210,211,211,210,211,210,211,210,211,210,211,210,211,210],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[3,4],0,0,0,0,[[[6,[5]]],7],[[[8,[5]]],7],[[[6,[5]]],7],[[[8,[5]]],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,[[7,[4]]]],0,0,0,0,0,0,0,0,0,0,0,[9,9],[[[6,[10]]],[[6,[10]]]],[[[11,[10]]],[[11,[10]]]],[[[8,[10]]],[[8,[10]]]],[[[12,[10]]],[[12,[10]]]],[13,13],[14,14],[15,15],[16,16],[1,1],[17,17],[18,18],[19,19],[20,20],[21,21],[22,22],[23,23],[24,24],[3,3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[14,14],25],[[1,1],25],[[[11,[5]]],26],[[[12,[5]]],26],[[27,27,27,27,27,27]],0,0,[[],6],[[],[[11,[5]]]],[[],8],[[],14],[[],15],[[],23],[3,4],[[13,13],28],[[14,14],28],[[15,15],28],[[16,16],28],[[1,1],28],[[17,17],28],[[18,18],28],[[19,19],28],[[20,20],28],[[21,21],28],0,0,0,[[9,29],30],[[[6,[[0,[5,31,32]]]],29],30],[[[8,[[0,[5,31,32]]]],29],30],[[13,29],30],[[14,29],30],[[15,29],30],[[16,29],30],[[1,29],30],[[1,29],30],[[17,29],30],[[18,29],30],[[19,29],30],[[20,29],30],[[21,29],30],[[21,29],30],[[22,29],30],[[3,29],30],[[],[[7,[2]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[4,15],[[]],[27,15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[[],1],[23,[[33,[3,21]]]],[2,[[33,[22,21]]]],[2,[[33,[3,21]]]],0,0,0,0,0,0,[[[6,[5]],34],[[7,[5]]]],[[[8,[5]],2],[[7,[5]]]],[15,4],[3,18],0,0,0,[[3,14],[[7,[18]]]],[[3,14],[[7,[34]]]],[[3,14],[[7,[4]]]],[[3,35],[[7,[14]]]],[[3,14],[[7,[36]]]],[[3,14,34],[[7,[20]]]],[[3,14],7],[[3,35,35],[[7,[14]]]],[[3,14],[[7,[34]]]],[[3,14],[[7,[4]]]],[[3,14],[[7,[4]]]],0,0,0,0,0,0,0,0,0,[3,28],[14],[1],0,0,0,[18,4],[3,4],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[6,[5]]]],[[]],[[[8,[5]]]],[[]],[3,28],[[[6,[5]]],28],[3,28],[3,28],[1,28],[3,28],[3,28],[3,28],[3,[[7,[27]]]],0,0,0,0,0,0,[[[6,[5]]],[[7,[5]]]],[[[6,[5]]],34],[[[8,[5]]],2],[3,4],[[27,27]],0,0,0,0,0,0,0,0,0,0,[[27,27]],0,0,0,0,0,0,0,0,[3,37],[[],[[6,[5]]]],[[],[[8,[5]]]],[[[11,[5]]],7],[[[12,[5]]],7],[3,34],0,0,0,0,[[3,14,38],[[7,[18]]]],[[],7],[[],[[7,[9]]]],[[],[[7,[14]]]],[[],[[7,[1]]]],[[14,14],[[7,[25]]]],[[1,1],[[7,[25]]]],0,0,0,0,0,[39],[[27,27,27,27]],[[[6,[40]],14],[[7,[40]]]],0,0,0,[[3,1,27],7],[[[6,[5]],[41,[34]]],[[7,[[6,[5]]]]]],[3,[[7,[17]]]],[3,42],[3,[[7,[43]]]],[3,[[7,[43]]]],0,0,0,[[22,1],7],[[3,1],7],[3,24],0,0,[1],[1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],44],[[],44],0,0,0,[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[3,[[7,[4]]]],[3,[[7,[4]]]],[3,[[7,[4]]]],[3,[[7,[17]]]],[3,34],0,[3,[[6,[46]]]],[3],[3,[[7,[4]]]],[3,[[7,[4]]]],[3,[[7,[4]]]],[3,[[7,[4]]]],0,0,0,0,0,0,0,0,0,0,[3,47],[18,4],[3,48],0,0,[3,[[7,[4]]]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[49,49],[50,50],[[]],[[]],[[],49],[[49,49],28],[[49,29],30],[[50,29],30],[[]],[[]],[[]],[[]],[[],[[7,[49]]]],[51,[[7,[50]]]],[[50,14],[[7,[[8,[49]]]]]],[[]],[[]],[[],33],[[],33],[[],33],[[],33],[[],45],[[],45],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[52,14],[[7,[53]]]],[[[54,[5]],14],[[7,[34]]]],[[[55,[[0,[10,5]]]]],[[55,[[0,[10,5]]]]]],[56,56],[52,52],[[[54,[10]]],[[54,[10]]]],[57,57],[[]],[[]],[[]],[[]],[[]],[[52,34,53],[[7,[58]]]],[[[54,[5]],34,34],[[7,[[55,[5]]]]]],0,0,[[[55,[[0,[31,5]]]],29],30],[[56,29],30],[[52,29],30],[[54,29],30],[[57,29],30],[[]],[[]],[[]],[[]],[[]],[[[55,[5]]],28],[[[55,[5]]],28],[[[55,[5]]],28],[[[55,[5]]],28],[[[55,[5]]],28],[[]],[[]],[[]],[[]],[[]],[[52,56],[[7,[4]]]],[[52,34],34],0,[56,56],[[],[[7,[[55,[5]]]]]],0,[51,[[7,[57]]]],0,[[]],[[]],[[]],[[]],[[]],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],45],[[],45],[[],45],[[],45],[[],45],[[57,14],[[7,[34]]]],[[[55,[5]]],56],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[59,59],[60,60],[61,61],[[]],[[]],[[]],[[59,29],30],[[60,29],30],[[61,29],30],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[60],[60,34],[61,7],[62,7],[[],[[7,[59]]]],[[],[[7,[61]]]],0,0,[[]],[[]],[[]],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],45],[[],45],[[],45],[[],45],0,[[]],[[]],[63,63],[[]],[[63,29],30],[[]],[[63,14,34],[[7,[20]]]],[[]],[64,[[7,[63]]]],[[]],[[],33],[[],33],[[],45],0,[[]],[[]],[64,64],[[]],[[64,29],30],[[]],[[]],[[],[[7,[64]]]],[[]],[[],33],[[],33],[[],45],0,[[]],[[]],[65,65],[[]],[[65,29],30],[[]],[[65,14],[[7,[36]]]],[[]],[[65,14,38],[[33,[18,13]]]],[[],[[7,[65]]]],[[]],[[],33],[[],33],[[],45],0,[[]],[[]],[66,66],[[]],[[],66],[[66,29],30],[[]],[[]],[[66,14,38],[[33,[18,13]]]],[[],[[7,[66]]]],[[]],[[],33],[[],33],[[],45],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[67,67],[68,68],[69,69],[70,70],[71,71],[72,72],[73,73],[74,74],[75,75],[76,76],[77,77],[78,78],[79,79],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[67,80]],[[68,80]],[[69,80]],[[70,80]],[[71,80]],[[72,80]],[[73,80]],[[77,80]],[[],78],0,[[74,74],28],0,0,[[67,29],30],[[68,29],30],[[69,29],30],[[70,29],30],[[71,29],30],[[72,29],30],[[73,29],30],[[74,29],30],[[75,29],30],[[76,29],30],[[77,29],30],[[78,29],30],[[79,29],30],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[78,34],[[7,[77]]]],0,[[67,2],[[7,[14]]]],[[68,2],[[7,[14]]]],[[69,2],[[7,[14]]]],[[70,2],[[7,[14]]]],[[71,2],[[7,[14]]]],[[72,2],[[7,[14]]]],[[73,2],[[7,[14]]]],[[75,2,2],[[7,[74]]]],[[77,2],[[7,[14]]]],[[77,2,2],[[7,[74]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[78],[77,28],[78,34],[81,7],[[],[[7,[67]]]],[[],[[7,[68]]]],[[],[[7,[69]]]],[[],[[7,[70]]]],[[],[[7,[71]]]],[[],[[7,[72]]]],[[],[[7,[73]]]],[[],[[7,[75]]]],[[],[[7,[79]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[82,82],[83,83],[84,84],[85,85],[[]],[[]],[[]],[[]],0,0,0,[[84,34],[[7,[83]]]],[[82,29],30],[[83,29],30],[[84,29],30],[[85,29],30],[[]],[[]],[[]],[[]],[[]],[[84,34],[[7,[83]]]],[[]],[[]],[[]],[[]],[[]],[[]],[84],[84,34],0,0,0,[86,7],[[],[[7,[82]]]],[[],[[7,[85]]]],0,0,[[]],[[]],[[]],[[]],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],45],[[],45],[[],45],[[],45],[[],45],0,0,0,[[]],[[]],[[]],[[]],[46,46],[87,87],[[]],[[]],0,[[46,46],28],[[46,29],30],[[87,29],30],[[]],[[]],0,[[]],[[]],0,0,0,[[],[[7,[46]]]],[[],[[7,[87]]]],0,[[]],[[]],[[],33],[[],33],[[],33],[[],33],[[],45],[[],45],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[88,88],[89,89],[[]],[[]],[[88,88],25],[[],89],[[88,88],28],[[88,29],30],[[]],[[]],[[89,14],[[7,[88]]]],[[89,14],90],[[89,34,34],[[7,[27]]]],[89,28],[88],[[]],[[]],[[89,14,[7,[34]]],28],[[],[[7,[89]]]],[[88,88],[[7,[25]]]],[[]],[[]],[[],33],[[],33],[[],33],[[],33],[[],45],[[],45],0,[[]],[[]],[91,91],[[]],[[91,29],30],[[]],[[]],[[91,14,38],[[7,[18]]]],[92,[[7,[91]]]],[[]],[[],33],[[],33],[[],45],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[93,93],[94,94],[95,95],[96,96],[97,97],[98,98],[99,99],[100,100],[101,101],[102,102],[103,103],[104,104],[105,105],[106,106],[107,107],[108,108],[109,109],[110,110],[111,111],[112,112],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[98,113],[102,113],[112,113],0,[[],96],[[103,34],[[7,[109]]]],[[103,34],[[7,[109]]]],[[93,29],30],[[94,29],30],[[95,29],30],[[96,29],30],[[97,29],30],[[98,29],30],[[99,29],30],[[100,29],30],[[101,29],30],[[102,29],30],[[103,29],30],[[104,29],30],[[105,29],30],[[106,29],30],[[107,29],30],[[108,29],30],[[109,29],30],[[110,29],30],[[111,29],30],[[112,29],30],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[97,34],[[7,[96]]]],[[99,14],7],[[100,34],[[7,[99]]]],[101,7],[[107,34],[[7,[110]]]],[[108,34],7],[[110,34,34],[[7,[109]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[97,34],[100,34],[103,34],[107,34],[108,34],0,0,0,0,0,0,0,0,0,0,0,[34,[[7,[112]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],0,0,0,[[93,34,7],[[7,[114]]]],0,0,0,0,0,0,[[93,34,7],[[7,[114]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[115,115],[116,116],[117,117],[118,118],[119,119],[120,120],[121,121],[122,122],[123,123],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[115,113],[123,113],0,0,0,0,[[115,29],30],[[116,29],30],[[117,29],30],[[118,29],30],[[119,29],30],[[120,29],30],[[121,29],30],[[122,29],30],[[123,29],30],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[123,28],0,0,[34,[[7,[123]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],0,0,0,0,0,[[]],[[]],[124,124],[[]],[[124,29],30],[[]],[[]],[[124,91,14,38],[[7,[18]]]],[[],[[7,[124]]]],[[]],[[],33],[[],33],[[],45],0,0,0,0,[[]],[[]],[[]],[[]],[125,125],[126,126],[[]],[[]],[[125,125],28],[[125,29],30],[[126,29],30],[[]],[[]],0,0,[[]],[[]],[[],[[7,[126]]]],[[]],[[]],[[],33],[[],33],[[],33],[[],33],[[],45],[[],45],0,0,0,[[]],[[]],[127,127],[[]],0,[[127,29],30],[[]],[[]],0,0,[[],[[7,[127]]]],[[]],[[],33],[[],33],[[],45],0,0,[[128,14],[[7,[34]]]],0,0,[[]],[[]],[[]],[[]],[129,129],[128,128],[[]],[[]],[[129,29],30],[[128,29],30],[[]],[[]],[[]],[[]],0,0,[[],[[7,[129]]]],[[34,51],[[7,[128]]]],[[128,14],[[7,[4]]]],0,[[]],[[]],[[],33],[[],33],[[],33],[[],33],[[],45],[[],45],0,[[130,14],[[7,[27]]]],[[]],[[]],[130,130],[[]],[[130,29],30],[[]],[[]],[[],[[7,[130]]]],[[130,14],[[7,[27]]]],[[]],[[],33],[[],33],[[],45],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[131,131],[132,132],[133,133],[134,134],[135,135],[136,136],[137,137],[138,138],[139,139],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],135],[[131,29],30],[[132,29],30],[[133,29],30],[[134,29],30],[[136,29],30],[[137,29],30],[[138,29],30],[[139,29],30],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[133,14,14],[[7,[4]]]],[[136,14,14],[[7,[4]]]],[[137,14,14],[[7,[4]]]],[[138,14,14],[[7,[4]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[134],[[]],[131,14],[134,2],[135,7],0,0,[[],[[7,[131]]]],[[],[[7,[136]]]],[53,[[7,[137]]]],[[],[[7,[138]]]],[[],[[7,[139]]]],[131,14],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[140,140],[141,141],[142,142],[143,143],[144,144],[145,145],[146,146],[147,147],[148,148],[149,149],[150,150],[151,151],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[142],[145],[[140,29],30],[[141,29],30],[[142,29],30],[[143,29],30],[[144,29],30],[[145,29],30],[[146,29],30],[[147,29],30],[[148,29],30],[[149,29],30],[[151,29],30],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[144,34],7],[[140,14,14],[[7,[4]]]],[[142,34],[[7,[4]]]],[[143,14,14],[[7,[4]]]],[[146,14,14],[[7,[4]]]],[[148,14,14],[[7,[4]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[149],[[]],[150,7],0,[[],[[7,[141]]]],[51,[[7,[151]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],0,[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],0,0,0,0,[[]],[[]],[92,92],[[]],[[92,29],30],[[]],[[92,14],[[7,[[41,[26]]]]]],[[]],[92,34],[[51,125],[[7,[92]]]],[[]],[[],33],[[],33],[[],45],0,[[]],[[]],[152,152],[[]],[[152,29],30],[[]],[[]],0,[[],[[7,[152]]]],[[]],[[],33],[[],33],[[],45],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[153,153],[154,154],[155,155],[156,156],[157,157],[158,158],[159,159],[160,160],[161,161],[162,162],[163,163],[164,164],[165,165],[166,166],[167,167],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,[[153,29],30],[[154,29],30],[[155,29],30],[[156,29],30],[[157,29],30],[[158,29],30],[[159,29],30],[[160,29],30],[[161,29],30],[[162,29],30],[[164,29],30],[[165,29],30],[[167,29],30],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[162],[[]],[165],[[]],[160,28],[160,28],[160,28],[160,28],0,0,0,0,[[155,2],[[7,[57]]]],0,0,[163,7],[166,7],[[],[[7,[153]]]],[[],[[7,[154]]]],[[],[[7,[157]]]],[51,[[7,[167]]]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],0,[[]],[[]],[168,168],[[]],[[168,29],30],[[]],[[]],[[168,1],[[7,[27]]]],[[],[[7,[168]]]],[[]],[[],33],[[],33],[[],45],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[169,169],[170,170],[37,37],[171,171],[172,172],[[]],[[]],[[]],[[]],[[]],[171,26],[[],37],[[],172],0,[[169,169],28],[[169,29],30],[[170,29],30],[[37,29],30],[[172,29],30],[[]],[[]],[[]],[[]],[[]],[[37,34],[[7,[170]]]],[[]],[[]],[[]],[[]],[[]],[37],[[]],[170,28],0,[37,34],0,0,0,0,[171,7],[[],[[7,[169]]]],[[],[[7,[172]]]],0,[[]],[[]],[[]],[[]],[[]],[170,[[7,[44]]]],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],45],[[],45],[[],45],[[],45],[[],45],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[173,173],[174,174],[175,175],[176,176],[177,177],[178,178],[179,179],[180,180],[181,181],[[[183,[[0,[10,182]]]]],[[183,[[0,[10,182]]]]]],[184,184],[185,185],[186,186],[187,187],[40,40],[113,113],[188,188],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[113,14],28],[173,113],[176,113],0,0,0,0,[[[183,[182]],1],[[7,[182]]]],[187,[[7,[189]]]],[[187,190,189],[[7,[186]]]],0,[[173,29],30],[[174,29],30],[[175,29],30],[[176,29],30],[[177,29],30],[[178,29],30],[[179,29],30],[[180,29],30],[[181,29],30],[[[183,[[0,[31,182]]]],29],30],[[184,29],30],[[185,29],30],[[186,29],30],[[187,29],30],[[40,29],30],[[113,29],30],[[188,29],30],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[179,34],[[7,[191]]]],[[[183,[182]],34],[[7,[182]]]],[[113,14],[[7,[34]]]],[[188,14],90],[180,28],[180,28],[180,28],[180,28],[[[183,[182]],1],[[7,[34]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[179,[[192,[191]]]],[[[183,[182]]]],[[[183,[182]]],28],0,[179,34],[[[183,[182]]],34],0,0,0,0,0,0,[180,53],0,[[[192,[191]]],7],[[[193,[182]]],7],[34,7],[1,7],[[],[[7,[175]]]],[[],[[7,[180]]]],[1,[[7,[184]]]],[1,[[7,[185]]]],[1,[[7,[186]]]],[[],[[7,[40]]]],0,[180,28],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[180,28],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[194,[[7,[4]]]],[47,47],[48,48],[42,42],[43,43],[194,194],[[]],[[]],[[]],[[]],[[]],[[48,48],25],[[],47],[[],48],[[],42],[[47,47],28],[[48,48],28],[[42,42],28],[[43,43],28],[[47,29],30],[[48,29],30],[[42,29],30],[[43,29],30],[[194,29],30],[34,47],[[]],[[]],[[]],[[]],[[]],[47],[48],[42],[43],[[]],[[]],[[]],[[]],[[]],[194,28],[[],[[7,[194]]]],[[48,48],[[7,[25]]]],[194,17],[194,42],[194,43],[194,43],[47,34],[48,34],[[]],[[]],[[]],[[]],[[]],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],45],[[],45],[[],45],[[],45],[[],45],[194,4],[194,4],[194,4],[194,28],0,[194,47],[194,48],[194,4],[194,4],[194,[[7,[4]]]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[195,195],[196,196],[[]],[[]],[[],195],[[195,29],30],[[196,29],30],[[]],[[]],[[195,14],[[7,[36]]]],[[]],[[]],0,0,[195,34],0,[[],[[7,[196]]]],[[]],[[]],[[],33],[[],33],[[],33],[[],33],[[],45],[[],45],0,0,0,0,0,[[197,34],[[7,[198]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[198,198],[199,199],[197,197],[[]],[[]],[[]],[[198,29],30],[[199,29],30],[[197,29],30],[[]],[[]],[[]],[[]],[[198,14],[[7,[20]]]],[[199,2],[[7,[198]]]],[[]],[[]],[[]],[[]],[[]],[199],[198,34],[199,2],[200,7],[51,[[7,[197]]]],0,0,0,[[]],[[]],[[]],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],45],[[],45],[[],45],[[],45],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[201,201],[202,202],[203,203],[[]],[[]],[[]],[202,26],0,[[201,14],7],[[201,29],30],[[203,29],30],[[]],[[]],[[]],[[201,34],7],[[]],[[]],[[]],[201],[[]],[201,34],[202,7],[[],[[7,[203]]]],[[]],[[]],[[]],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],45],[[],45],[[],45],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[204,204],[205,205],[206,206],[207,207],[[]],[[]],[[]],[[]],[[],205],[[],206],[[204,29],30],[[205,29],30],[[206,29],30],[[207,29],30],[[]],[[]],[[]],[[]],[[]],[[205,34],[[7,[204]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[205],[205,34],0,[208,7],[[],[[7,[207]]]],0,[[]],[[]],[[]],[[]],0,[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],45],[[],45],[[],45],[[],45],[[],45],0,0,0,0,0,[[]],[[]],[209,209],[[]],[[],209],0,[[209,29],30],[[]],[[]],0,0,[[],[[7,[209]]]],[[]],[[],33],[[],33],[[],45],0,0,[[]],[[]],[[]],[[]],[210,210],[211,211],[[]],[[]],0,[[210,29],30],[[211,29],30],[[]],[[]],0,[[211,14],4],[[]],[[]],0,[[],[[7,[210]]]],[[],[[7,[211]]]],[[]],[[]],[[],33],[[],33],[[],33],[[],33],[[],45],[[],45],0],"p":[[3,"Tag"],[15,"u32"],[3,"Face"],[15,"i16"],[8,"FromData"],[3,"LazyArray16"],[4,"Option"],[3,"LazyArray32"],[3,"Fixed"],[8,"Clone"],[3,"LazyArrayIter16"],[3,"LazyArrayIter32"],[4,"CFFError"],[3,"GlyphId"],[3,"NormalizedCoordinate"],[3,"Variation"],[3,"LineMetrics"],[3,"Rect"],[4,"RasterImageFormat"],[3,"RasterGlyphImage"],[4,"FaceParsingError"],[3,"RawFace"],[3,"RawFaceTables"],[3,"FaceTables"],[4,"Ordering"],[15,"usize"],[15,"f32"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[8,"Copy"],[4,"Result"],[15,"u16"],[15,"char"],[15,"str"],[3,"Names"],[8,"OutlineBuilder"],[3,"Demand"],[3,"RangeRecord"],[3,"Range"],[4,"Style"],[3,"ScriptMetrics"],[3,"String"],[3,"TypeId"],[3,"VariationAxis"],[4,"Weight"],[4,"Width"],[3,"Point"],[3,"Table"],[3,"NonZeroU16"],[3,"StateTable"],[15,"u8"],[3,"ExtendedStateTable"],[3,"GenericStateEntry"],[3,"ValueOffset"],[3,"Lookup"],[6,"StateEntry"],[3,"AxisValueMap"],[3,"SegmentMaps"],[3,"Table"],[3,"SegmentMapsIter"],[3,"Table"],[3,"Table"],[3,"Table"],[3,"Table"],[3,"Subtable0"],[3,"Subtable2"],[3,"Subtable4"],[3,"Subtable6"],[3,"Subtable10"],[3,"Subtable12"],[3,"Subtable13"],[4,"GlyphVariationResult"],[3,"Subtable14"],[4,"Format"],[3,"Subtable"],[3,"Subtables"],[3,"Table"],[8,"FnMut"],[3,"SubtablesIter"],[3,"SettingName"],[3,"FeatureName"],[3,"FeatureNames"],[3,"Table"],[3,"FeatureNamesIter"],[3,"Table"],[4,"GlyphClass"],[3,"Table"],[6,"Class"],[3,"Table"],[4,"Table"],[3,"HintingDevice"],[3,"VariationDevice"],[4,"Device"],[3,"ValueRecord"],[3,"ValueRecordsArray"],[4,"SingleAdjustment"],[3,"PairSet"],[3,"PairSets"],[3,"ClassMatrix"],[4,"PairAdjustment"],[3,"CursiveAnchorSet"],[3,"CursiveAdjustment"],[3,"MarkToBaseAdjustment"],[3,"MarkToLigatureAdjustment"],[3,"LigatureArray"],[3,"MarkArray"],[3,"Anchor"],[3,"AnchorMatrix"],[3,"MarkToMarkAdjustment"],[4,"PositioningSubtable"],[4,"Coverage"],[15,"i32"],[4,"SingleSubstitution"],[3,"Sequence"],[3,"MultipleSubstitution"],[3,"AlternateSet"],[3,"AlternateSubstitution"],[3,"Ligature"],[3,"LigatureSubstitution"],[3,"ReverseChainSingleSubstitution"],[4,"SubstitutionSubtable"],[3,"Table"],[4,"IndexToLocationFormat"],[3,"Table"],[3,"Table"],[3,"Table"],[3,"Metrics"],[3,"Table"],[3,"KerningPair"],[4,"Format"],[3,"Subtable"],[3,"Subtables"],[3,"SubtablesIter"],[3,"Subtable0"],[3,"Subtable2"],[3,"Subtable3"],[3,"Table"],[3,"Subtable0"],[3,"EntryData"],[3,"Subtable1"],[3,"Subtable2"],[3,"AnchorPoints"],[3,"Subtable4"],[3,"Subtable6"],[4,"Format"],[3,"Subtable"],[3,"Subtables"],[3,"SubtablesIter"],[3,"Table"],[3,"Table"],[3,"Feature"],[3,"ContextualEntryData"],[3,"ContextualSubtable"],[3,"LigatureSubtable"],[3,"InsertionEntryData"],[3,"InsertionSubtable"],[4,"SubtableKind"],[3,"Coverage"],[3,"Subtable"],[3,"Subtables"],[3,"SubtablesIter"],[3,"Chain"],[3,"Chains"],[3,"ChainsIter"],[3,"Table"],[3,"Table"],[4,"PlatformId"],[3,"Name"],[3,"NamesIter"],[3,"Table"],[4,"ContextLookup"],[3,"SequenceRule"],[3,"SequenceLookupRecord"],[4,"ChainedContextLookup"],[3,"ChainedSequenceRule"],[3,"Lookup"],[3,"LookupSubtables"],[3,"LookupFlags"],[3,"LayoutTable"],[8,"RecordListItem"],[3,"RecordList"],[3,"Script"],[3,"LanguageSystem"],[3,"Feature"],[3,"FeatureVariations"],[4,"ClassDefinition"],[6,"VariationIndex"],[6,"FeatureIndex"],[8,"LookupSubtable"],[3,"LookupSubtablesIter"],[3,"RecordListIter"],[3,"Table"],[3,"Names"],[3,"Table"],[3,"Table"],[3,"Strike"],[3,"Strikes"],[3,"StrikesIter"],[3,"SvgDocumentsList"],[3,"SvgDocumentsListIter"],[3,"Table"],[3,"Track"],[3,"Tracks"],[3,"TrackData"],[3,"Table"],[3,"TracksIter"],[3,"Table"],[3,"VerticalOriginMetrics"],[3,"Table"],[13,"Format2"],[13,"Format1"],[13,"Format1"],[13,"Format2"],[13,"Format1"],[13,"Format2"],[13,"Format2"],[13,"Format3"],[13,"Format1"],[13,"Format1"],[13,"Format2"],[13,"Format2"],[13,"Format1"],[13,"Format3"],[13,"Format1"],[13,"Format2"]]},\
"ucd_trie":{"doc":"The ucd-trie crate provides a compressed trie set …","t":"ENNGGDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Error","GaveUp","InvalidCodepoint","Result","TrieSet","TrieSetOwned","TrieSetSlice","as_slice","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","contains_char","contains_char","contains_u32","contains_u32","fmt","fmt","fmt","fmt","from","from","from","from_codepoints","from_scalars","into","into","into","provide","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["ucd_trie","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["An error that can occur during construction of a trie.","This error is returned when a set of Unicode codepoints …","This error is returned when an invalid codepoint is given …","A type alias that maps to …","A type alias for <code>TrieSetSlice&lt;&#39;static&gt;</code>.","An owned trie set.","A borrowed trie set.","Return this set as a slice.","","","","","","","","","","","","","Returns true if and only if the given Unicode scalar value …","Returns true if and only if the given Unicode scalar value …","Returns true if and only if the given codepoint is in this …","Returns true if and only if the given codepoint is in this …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create a new trie set from a set of Unicode scalar values.","Create a new trie set from a set of Unicode scalar values.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","",""],"i":[0,3,3,0,0,0,0,1,3,1,2,3,1,2,3,1,2,3,1,2,1,2,1,2,3,3,1,2,3,1,2,1,1,3,1,2,3,3,1,2,3,3,1,2,3,1,2,3,1,2],"f":[0,0,0,0,0,0,0,[1,2],[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[1,1],[2,2],[[]],[[]],[[]],[[1,4],5],[[2,4],5],[[1,6],5],[[2,6],5],[[3,7],8],[[3,7],8],[[1,7],8],[[2,7],8],[[]],[[]],[[]],[[],[[9,[1]]]],[[],[[9,[1]]]],[[]],[[]],[[]],[10],[[]],[[]],[[]],[[],11],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13]],"p":[[3,"TrieSetOwned"],[3,"TrieSetSlice"],[4,"Error"],[15,"char"],[15,"bool"],[15,"u32"],[3,"Formatter"],[6,"Result"],[6,"Result"],[3,"Demand"],[3,"String"],[4,"Result"],[3,"TypeId"]]},\
"unicode_ident":{"doc":"github crates-io docs-rs","t":"FF","n":["is_xid_continue","is_xid_start"],"q":["unicode_ident",""],"d":["",""],"i":[0,0],"f":[[1,2],[1,2]],"p":[[15,"char"],[15,"bool"]]},\
"walkdir":{"doc":"Crate <code>walkdir</code> provides an efficient and cross platform …","t":"DIDDDGDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["DirEntry","DirEntryExt","Error","FilterEntry","IntoIter","Result","WalkDir","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cause","clone","clone_into","contents_first","depth","depth","description","file_name","file_type","filter_entry","filter_entry","fmt","fmt","fmt","fmt","fmt","fmt","follow_links","from","from","from","from","from","ino","ino","into","into","into","into","into","into_io_error","into_iter","into_iter","into_iter","into_path","io_error","loop_ancestor","max_depth","max_open","metadata","min_depth","new","next","next","path","path","path_is_symlink","provide","same_file_system","skip_current_dir","skip_current_dir","sort_by","sort_by_file_name","sort_by_key","source","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id"],"q":["walkdir","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A directory entry.","Unix-specific extension methods for <code>walkdir::DirEntry</code>","An error produced by recursively walking a directory.","A recursive directory iterator that skips entries.","An iterator for recursively descending into a directory.","A result type for walkdir operations.","A builder to create an iterator for recursively walking a …","","","","","","","","","","","","","","Yield a directory’s contents before the directory …","Returns the depth at which this entry was created relative …","Returns the depth at which this error occurred relative to …","","Return the file name of this entry.","Return the file type for the file that this entry points …","Yields only entries which satisfy the given predicate and …","Yields only entries which satisfy the given predicate and …","","","","","","","Follow symbolic links. By default, this is disabled.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the underlying <code>d_ino</code> field in the contained <code>dirent</code> …","Returns the underlying <code>d_ino</code> field in the contained <code>dirent</code> …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Similar to <code>io_error</code> except consumes self to convert to the …","","","","The full path that this entry represents.","Inspect the original <code>io::Error</code> if there is one.","Returns the path at which a cycle was detected.","Set the maximum depth of entries yield by the iterator.","Set the maximum number of simultaneously open file …","Return the metadata for the file that this entry points to.","Set the minimum depth of entries yielded by the iterator.","Create a builder for a recursive directory iterator …","Advances the iterator and returns the next value.","Advances the iterator and returns the next value.","The full path that this entry represents.","Returns the path associated with this error if one exists.","Returns <code>true</code> if and only if this entry was created from a …","","Do not cross file system boundaries.","Skips the current directory.","Skips the current directory.","Set a function for sorting directory entries with a …","Sort directory entries by file name, to ensure a …","Set a function for sorting directory entries with a key …","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,4,1,5,11,12,4,1,5,11,12,1,4,4,5,4,1,1,4,4,11,12,4,1,1,5,11,12,5,4,1,5,11,12,27,4,4,1,5,11,12,1,5,11,12,4,1,1,5,5,4,5,5,11,12,4,1,4,1,5,11,12,5,5,5,1,4,1,4,1,5,11,12,4,1,5,11,12,4,1,5,11,12],"f":[0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,[[3,[2]]]],[4,4],[[]],[[5,6],5],[4,7],[1,7],[1,8],[4,9],[4,10],[11,[[12,[11]]]],[[[12,[11]]],[[12,[[12,[11]]]]]],[[4,13],14],[[1,13],14],[[1,13],14],[[5,13],14],[[11,13],14],[[[12,[15,15]],13],14],[[5,6],5],[[]],[[]],[[]],[[]],[[]],[[],16],[4,16],[[]],[[]],[[]],[[]],[[]],[1,[[3,[17]]]],[5,11],[[]],[[]],[4,18],[1,[[3,[17]]]],[1,[[3,[19]]]],[[5,7],5],[[5,7],5],[4,[[21,[20]]]],[[5,7],5],[[[22,[19]]],5],[11,[[3,[[21,[4]]]]]],[[[12,[11]]],[[3,[[21,[4]]]]]],[4,19],[1,[[3,[19]]]],[4,6],[23],[[5,6],5],[11],[[[12,[11]]]],[5,5],[5,5],[5,5],[1,[[3,[2]]]],[[]],[[],24],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],26],[[],26],[[],26],[[],26],[[],26]],"p":[[3,"Error"],[8,"Error"],[4,"Option"],[3,"DirEntry"],[3,"WalkDir"],[15,"bool"],[15,"usize"],[15,"str"],[3,"OsStr"],[3,"FileType"],[3,"IntoIter"],[3,"FilterEntry"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[15,"u64"],[3,"Error"],[3,"PathBuf"],[3,"Path"],[3,"Metadata"],[6,"Result"],[8,"AsRef"],[3,"Demand"],[3,"String"],[4,"Result"],[3,"TypeId"],[8,"DirEntryExt"]]},\
"weezl":{"doc":"LZW decoder and encoder","t":"EDNNNEENNNDLLLLLLLLLLMMLLLLLLMMAALLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["BitOrder","BufferResult","Done","InvalidCode","Lsb","LzwError","LzwStatus","Msb","NoProgress","Ok","StreamResult","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes_read","bytes_written","clone","clone","clone","clone_into","clone_into","clone_into","consumed_in","consumed_out","decode","encode","fmt","fmt","fmt","fmt","from","from","from","from","from","into","into","into","into","into","provide","status","status","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","Decoder","IntoStream","IntoVec","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","decode","decode","decode","decode_all","decode_all","decode_bytes","from","from","from","has_ended","into","into","into","into_stream","into_vec","new","reset","set_buffer","set_buffer_size","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_tiff_size_switch","Encoder","IntoStream","IntoVec","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","encode","encode","encode","encode_all","encode_all","encode_bytes","finish","from","from","from","into","into","into","into_stream","into_vec","new","reset","set_buffer","set_buffer_size","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_tiff_size_switch"],"q":["weezl","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","weezl::decode","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","weezl::encode","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The order of bits in bytes.","The result of a coding operation on a pair of buffer.","No more data will be produced because an end marker was …","The input contained an invalid code.","The least significant bit is processed first.","The error kind after unsuccessful coding of an LZW stream.","The status after successful coding of an LZW stream.","The most significant bit is processed first.","No bytes were read or written and no internal state …","Everything went well.","The result of coding into an output stream.","","","","","","","","","","","The total number of bytes consumed from the reader.","The total number of bytes written into the writer.","","","","","","","The number of bytes consumed from the input buffer.","The number of bytes written into the output buffer.","A module for all decoding needs.","A module for all encoding needs.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","The status after returning from the write call.","The possible error that occurred.","","","","","","","","","","","","","","","","","","","","The state for decoding data with an LZW algorithm.","A decoding stream sink.","A decoding sink into a vector.","","","","","","","Decode a single chunk of lzw encoded data.","Decode data from a reader.","Decode data from a slice.","Decode data from a reader, requiring an end marker.","Decode data from a slice, requiring an end marker.","Decode some bytes from <code>inp</code> and write result to <code>out</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Check if the decoding has finished.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Construct a decoder into a writer.","Construct a decoder into a vector.","Create a new decoder with the specified bit order and …","Reset all internal state.","Use a particular buffer as an intermediate decode buffer.","Set the size of the intermediate decode buffer.","","","","","","","","","","Create a TIFF compatible decoder with the specified bit …","The state for encoding data with an LZW algorithm.","A encoding stream sink.","A encoding sink into a vector.","","","","","","","Encode a single chunk of data.","Encode data from a reader.","Encode data from a slice.","Encode data from a reader and an end marker.","Decode data from a reader, adding an end marker.","Encode some bytes from <code>inp</code> into <code>out</code>.","Mark the encoding as in the process of finishing.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Construct a encoder into a writer.","Construct an encoder into a vector.","Create a new encoder with the specified bit order and …","Reset all internal state.","Use a particular buffer as an intermediate encode buffer.","Set the size of the intermediate encode buffer.","","","","","","","","","","Create a TIFF compatible encoder with the specified bit …"],"i":[0,0,2,3,1,0,0,1,2,2,0,18,16,1,2,3,18,16,1,2,3,16,16,1,2,3,1,2,3,18,18,0,0,1,2,3,3,18,16,1,2,3,18,16,1,2,3,3,18,16,1,2,3,3,18,16,1,2,3,18,16,1,2,3,18,16,1,2,3,0,0,0,10,14,17,10,14,17,10,14,17,14,17,10,10,14,17,10,10,14,17,10,10,10,10,14,14,10,14,17,10,14,17,10,14,17,10,0,0,0,21,22,23,21,22,23,21,22,23,22,23,21,21,21,22,23,21,22,23,21,21,21,21,22,22,21,22,23,21,22,23,21,22,23,21],"f":[0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[1,1],[2,2],[3,3],[[]],[[]],[[]],0,0,0,0,[[1,4],5],[[2,4],5],[[3,4],5],[[3,4],5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[6],0,0,[[]],[[]],[[]],[[],7],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],[[],9],[[],9],[[],9],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[10,[[8,[[12,[11]],3]]]],[[[14,[13]],15],16],0,[[[14,[13]],15],16],0,[10,18],[[]],[[]],[[]],[10,19],[[]],[[]],[[]],[[10,13],[[14,[13]]]],[[10,12],17],[[1,11],10],[10],[[[14,[13]]]],[[[14,[13]],20]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],[[],9],[[1,11],10],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[21,[[8,[[12,[11]],3]]]],[[[22,[13]],15],16],0,[[[22,[13]],15],16],0,[21,18],[21],[[]],[[]],[[]],[[]],[[]],[[]],[[21,13],[[22,[13]]]],[[21,12],23],[[1,11],21],[21],[[[22,[13]]]],[[[22,[13]],20]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],[[],9],[[1,11],21]],"p":[[4,"BitOrder"],[4,"LzwStatus"],[4,"LzwError"],[3,"Formatter"],[6,"Result"],[3,"Demand"],[3,"String"],[4,"Result"],[3,"TypeId"],[3,"Decoder"],[15,"u8"],[3,"Vec"],[8,"Write"],[3,"IntoStream"],[8,"BufRead"],[3,"StreamResult"],[3,"IntoVec"],[3,"BufferResult"],[15,"bool"],[15,"usize"],[3,"Encoder"],[3,"IntoStream"],[3,"IntoVec"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
